import { createScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';

import { NotInitializedError } from '../../../common/error/errors';

import WepayRiskClient from './wepay-risk-client';

describe('WepayRiskClient', () => {
    let wepayRiskClient: WepayRiskClient;
    let scriptLoader: ScriptLoader;

    const testToken = 'test-risk-token';
    const mockClient = {
        risk: {
            generate_risk_token: () => null,
            get_risk_token: () => testToken,
        },
    };

    function riskClient() {
        return new WepayRiskClient(scriptLoader);
    }

    function mockLoadPromise() {
        return new Promise(resolve => {
            (window as any).WePay = mockClient;
            resolve();
        });
    }

    beforeEach(() => {
        scriptLoader = createScriptLoader();
        wepayRiskClient = riskClient();

        (window as any).WePay = mockClient;

        jest.spyOn(scriptLoader, 'loadScript')
            .mockReturnValue(mockLoadPromise());
    });

    describe('#initialize', () => {
        it('should load the WePay risk client', () => {
            wepayRiskClient.initialize();
            expect(scriptLoader.loadScript).toHaveBeenCalled();
        });
    });

    describe('#getRiskToken', () => {
        beforeEach(async () => {
            await wepayRiskClient.initialize();
        });

        it('should invoke the generate method on the WePay client', async () => {
            jest.spyOn(mockClient.risk, 'generate_risk_token');

            await wepayRiskClient.getRiskToken();
            expect(mockClient.risk.generate_risk_token).toHaveBeenCalled();
        });

        it('should return the token generated by the client', async () => {
            const token = await wepayRiskClient.getRiskToken();
            expect(token).toBe(testToken);
        });

        describe('when the client is not initialized', () => {
            it('should raise an exception', () => {
                expect(() => riskClient().getRiskToken())
                    .toThrow(NotInitializedError);
            });
        });
    });
});
