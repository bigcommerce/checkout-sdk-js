{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","GiftCertificateActionType","PaymentMethodActionType","BillingAddressActionType","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","ConfigActionType","BillingAddressActionCreator","_requestSender","this","continueAsGuest","credentials","options","_this","store","Observable_","observer","state","getState","checkout","getCheckout","missing_data_error","MissingCheckout","customer","getCustomer","isGuest","standard_error","billingAddressRequestBody","billingAddress","getBillingAddress","country","existingBillingAddressRequestBody","external_tslib_","next","data_store_","billing_address_actions","ContinueAsGuestRequested","_createOrUpdateBillingAddress","id","then","_a","body","ContinueAsGuestSucceeded","complete","catch","response","error","ContinueAsGuestFailed","updateAddress","address","UpdateBillingAddressRequested","email","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","checkoutId","createAddress","DEFAULT_PARAMS","include","join","BillingAddressRequestSender","timeout","url","headers","Accept","content_type","JsonV1","post","params","put","CountryActionCreator","_countryRequestSender","loadCountries","country_action_types","data","CountryRequestSender","_config","Accept-Language","locale","_super","OrderFinalizationNotRequiredError","type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","strategy","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","message","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","internalBillingAddress","is_internal_address_equal","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","Error","handleSuccess","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","endpoint","ChasePayEventType","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","_methodId","chasepay","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","_configureWallet","removeEventListener","_chasePayClient","_getPayment","subtype","MissingPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","event","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","KlarnaScriptLoader","Klarna","Credit","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","billing_address_request_sender","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","wepay_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","standard_error_StandardError","StandardError","setPrototypeOf","__proto__","_newTarget","captureStackTrace","stack","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","__webpack_exports__","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","push","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","Button","render","env","commit","shouldProcessPayment","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","CheckoutButtonStrategy","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","createCheckoutButtonRegistry","CheckoutActionType","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","tslib__WEBPACK_IMPORTED_MODULE_0__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","loadError","LoadCheckoutFailed","UpdateCheckoutRequested","updateError","UpdateCheckoutFailed","OrderActionType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","createError","DEFAULT_RESPONSE","RequestError","Array","isArray","reduce","result","joinErrors","detail","title","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","CheckoutSelector","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","productId","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","forEach","charAt","createProxy","ConfigSelector","getExternalSource","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","storeCredit","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","decoratedTarget","class_1","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","set","selectorMethodDecorator","mapToInternalCart","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","checkout_actions","order_actions","LoadOrderSucceeded","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","getConsignmentByAddress","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","lineItemIds","indexOf","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","LoadShippingOptionsSucceeded","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","_createOrUpdateConsignment","_combineLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","_getConsignmentRequestBody","_isUpdateConsignmentRequest","itemId","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","delete","CustomerStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","BraintreeScriptLoader","loadClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","_teardown","mod","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","find","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","customerStrategyReducer","customer_strategy_actions","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","PaymentMethodInvalidError","isPrivate","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","giftWrapping","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","PaymentMethodActionCreator","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","sessionHash","PaymentMethodRequestSender","X-API-INTERNAL","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","MasterpassScriptLoader","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","_createSignInButton","not_implemented_error","size","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","visibility","containerId","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","createElement","className","innerHTML","appendChild","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","MasterpassCustomerStrategy","_masterpassScriptLoader","masterpassOptions","allowedCardTypes","cartId","Masterpass","_signInButton","parentNode","removeChild","src","DefaultCustomerStrategy","_customerActionCreator","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","masterpass_script_loader","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","TimeoutError","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","ContentType","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","INTERNAL_USE_ONLY","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","Registry","_factories","_instances","_options","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","InvalidArgumentError","PaypalScriptLoader","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","err","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","getEnvironment","process","NODE_ENV","e","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","toFormUrlEncoded","encodeURIComponent","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","RemoteCheckoutSynchronizationError","ConsoleLogger","_console","log","messages","_logToConsole","info","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","extendedAddress","locality","cardType","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 155);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(\n                new BillingAddressRequestSender(requestSender)\n            ),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(getScriptLoader()),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { setPrototypeOf } from '../../utility';\n\nexport default class StandardError extends Error {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","module.exports = require(\"rxjs/observable/defer\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","module.exports = require(\"@bigcommerce/form-poster\");","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     braintreepaypal: {\n     *         container: '#checkoutButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize(options)\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, paypalOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize(options);\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized = false;\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host: options && options.host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy> {\n    const registry = new Registry<CheckoutButtonStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster()\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster(),\n            true\n        )\n    );\n\n    return registry;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: Action\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find, map } from 'lodash';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._combineLineItems(\n                    consignment,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _combineLineItems(\n        consignment: ConsignmentAssignmentRequestBody,\n        existingConsignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!existingConsignment) {\n            return consignment.lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const existingLineItems = map(existingConsignment.lineItemIds, itemId => {\n            const item = find(cart.lineItems.physicalItems, { id: itemId });\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        }) as ConsignmentLineItem[];\n\n        return existingLineItems.concat(consignment.lineItems);\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Masterpass, MasterpassHostWindow } from '../masterpass/masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    MasterpassCustomerStrategy,\n} from './strategies';\nimport SquareCustomerStrategy from './strategies/square-customer-strategy';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n    const scriptLoader = getScriptLoader();\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","module.exports = require(\"rxjs/observable/empty\");","module.exports = require(\"rxjs\");","module.exports = require(\"messageformat\");","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}