{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///external \"@bigcommerce/data-store\"","webpack:///external \"lodash\"","webpack:///external \"rxjs\"","webpack:///external \"@bigcommerce/memoize\"","webpack:///./src/shipping/consignment-actions.ts","webpack:///./src/customer/customer-strategy-actions.ts","webpack:///./src/payment/payment-strategy-actions.ts","webpack:///external \"rxjs/operators\"","webpack:///./src/common/error/errors/missing-data-error.ts","webpack:///./src/shipping/shipping-strategy-actions.ts","webpack:///./src/checkout/checkout-actions.ts","webpack:///./src/order/order-actions.ts","webpack:///./src/payment/payment-method-actions.ts","webpack:///./src/billing/billing-address-actions.ts","webpack:///./src/checkout-buttons/checkout-button-actions.ts","webpack:///./src/coupon/coupon-actions.ts","webpack:///./src/payment/instrument/instrument-actions.ts","webpack:///./src/common/error/errors/standard-error.ts","webpack:///./src/common/utility/set-prototype-of.ts","webpack:///./src/coupon/gift-certificate-actions.ts","webpack:///./src/embedded-checkout/embedded-checkout-events.ts","webpack:///./src/remote-checkout/remote-checkout-actions.ts","webpack:///external \"@bigcommerce/request-sender\"","webpack:///./src/common/error/errors/request-error.ts","webpack:///external \"card-validator\"","webpack:///./src/config/config-actions.ts","webpack:///external \"@bigcommerce/script-loader\"","webpack:///./src/payment/is-vaulted-instrument.ts","webpack:///./src/common/utility/is-plain-object.ts","webpack:///./src/geography/country-actions.ts","webpack:///./src/shipping/shipping-country-actions.ts","webpack:///./src/payment/payment-status-types.ts","webpack:///./src/store-credit/store-credit-actions.ts","webpack:///./src/payment/errors/payment-method-client-unavailable-error.ts","webpack:///./src/common/http-request/content-type.ts","webpack:///./src/hosted-form/iframe-content/hosted-input-events.ts","webpack:///./src/common/iframe/is-iframe-event.ts","webpack:///./src/common/error/errors/invalid-argument-error.ts","webpack:///./src/payment/payment-method-types.ts","webpack:///./src/address/map-to-internal-address.ts","webpack:///./src/billing/is-billing-address-like.ts","webpack:///./src/payment/payment-actions.ts","webpack:///./src/payment/payment-method-action-creator.ts","webpack:///./src/payment/payment-method-request-sender.ts","webpack:///./src/common/http-request/join-includes.ts","webpack:///./src/cart/map-to-internal-line-items.ts","webpack:///./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack:///external \"local-storage-fallback\"","webpack:///external \"shallowequal\"","webpack:///./src/hosted-form/hosted-field-events.ts","webpack:///./src/common/utility/is-equal.ts","webpack:///external \"@bigcommerce/form-poster\"","webpack:///./src/cart/map-to-internal-line-item.ts","webpack:///external \"reselect\"","webpack:///./src/shipping/map-to-internal-shipping-option.ts","webpack:///./src/spam-protection/spam-protection-actions.ts","webpack:///./src/customer/customer-actions.ts","webpack:///./src/common/utility/amount-transformer.ts","webpack:///./src/common/url/parse-url.ts","webpack:///./src/common/selector/with-memoized-combiner.ts","webpack:///./src/common/error/error-actions.ts","webpack:///./src/checkout/checkout-default-includes.ts","webpack:///./src/common/http-request/internal-api-headers.ts","webpack:///./src/common/utility/bind-decorator.ts","webpack:///./src/customer/map-to-internal-customer.ts","webpack:///./src/order/map-to-internal-order.ts","webpack:///./src/cart/map-to-internal-cart.ts","webpack:///./src/promotion/map-to-discount-notifications.ts","webpack:///external \"@bigcommerce/bigpay-client\"","webpack:///./src/payment/strategies/amazon-maxo/amazon-maxo.ts","webpack:///./src/payment/strategies/braintree/braintree-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack:///./src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack:///./src/hosted-form/iframe-content/card-number-formatter.ts","webpack:///./src/coupon/map-to-internal-coupon.ts","webpack:///./src/common/error/errors/not-initialized-error.ts","webpack:///./src/common/error/throw-error-action.ts","webpack:///./src/common/data-store/cache-action.ts","webpack:///./src/common/data-store/is-action-options.ts","webpack:///./src/common/data-store/cachable-action-decorator.ts","webpack:///./src/common/http-request/join-or-merge-includes.ts","webpack:///./src/common/http-request/merge-includes.ts","webpack:///external \"iframe-resizer\"","webpack:///external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack:///./src/common/utility/omit-deep.ts","webpack:///./src/checkout/checkout-action-creator.ts","webpack:///./src/shipping/consignment-action-creator.ts","webpack:///./src/shipping/consignment-request-sender.ts","webpack:///./src/payment/strategies/masterpass/get-callback-url.ts","webpack:///./src/payment/payment-request-transformer.ts","webpack:///./src/payment/payment-request-sender.ts","webpack:///./src/common/utility/is-private.ts","webpack:///./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack:///./src/common/error/errors/unrecoverable-error.ts","webpack:///./src/common/error/errors/map-from-internal-error-response.ts","webpack:///./src/common/error/request-error-factory.ts","webpack:///./src/common/error/errors/map-from-storefront-error-response.ts","webpack:///./src/common/error/clear-error-reducer.ts","webpack:///./src/common/utility/replace.ts","webpack:///./src/common/utility/object-set.ts","webpack:///./src/billing/billing-address-state.ts","webpack:///./src/billing/billing-address-reducer.ts","webpack:///./src/common/utility/array-replace.ts","webpack:///./src/common/utility/object-merge.ts","webpack:///./src/cart/cart-state.ts","webpack:///./src/cart/cart-reducer.ts","webpack:///./src/checkout-buttons/checkout-button-state.ts","webpack:///./src/checkout-buttons/checkout-button-reducer.ts","webpack:///./src/config/config-state.ts","webpack:///./src/config/config-reducer.ts","webpack:///./src/coupon/coupon-state.ts","webpack:///./src/coupon/coupon-reducer.ts","webpack:///./src/coupon/gift-certificate-state.ts","webpack:///./src/coupon/gift-certificate-reducer.ts","webpack:///./src/customer/customer-state.ts","webpack:///./src/customer/customer-reducer.ts","webpack:///./src/customer/customer-strategy-state.ts","webpack:///./src/customer/customer-strategy-reducer.ts","webpack:///./src/geography/country-state.ts","webpack:///./src/geography/country-reducer.ts","webpack:///./src/order/order-state.ts","webpack:///./src/order/order-reducer.ts","webpack:///./src/payment/payment-reducer.ts","webpack:///./src/payment/payment-method-state.ts","webpack:///./src/payment/payment-method-reducer.ts","webpack:///./src/common/utility/merge-or-push.ts","webpack:///./src/payment/payment-strategy-state.ts","webpack:///./src/payment/payment-strategy-reducer.ts","webpack:///./src/payment/instrument/instrument-state.ts","webpack:///./src/payment/instrument/instrument-reducer.ts","webpack:///./src/remote-checkout/remote-checkout-state.ts","webpack:///./src/remote-checkout/remote-checkout-reducer.ts","webpack:///./src/shipping/consignment-state.ts","webpack:///./src/shipping/consignment-reducer.ts","webpack:///./src/shipping/shipping-country-state.ts","webpack:///./src/shipping/shipping-country-reducer.ts","webpack:///./src/shipping/shipping-strategy-state.ts","webpack:///./src/shipping/shipping-strategy-reducer.ts","webpack:///./src/store-credit/store-credit-reducer.ts","webpack:///./src/checkout/checkout-state.ts","webpack:///./src/checkout/checkout-reducer.ts","webpack:///./src/common/utility/create-freeze-proxy.ts","webpack:///./src/form/form-selector.ts","webpack:///./src/payment/instrument/supported-payment-instruments.ts","webpack:///./src/address/is-address-equal.ts","webpack:///./src/shipping/consignment-selector.ts","webpack:///./src/store-credit/store-credit-state.ts","webpack:///./src/checkout/create-internal-checkout-selectors.ts","webpack:///./src/billing/billing-address-selector.ts","webpack:///./src/checkout-buttons/checkout-button-selector.ts","webpack:///./src/coupon/coupon-selector.ts","webpack:///./src/customer/customer-selector.ts","webpack:///./src/remote-checkout/remote-checkout-selector.ts","webpack:///./src/shipping/shipping-address-selector.ts","webpack:///./src/payment/payment-selector.ts","webpack:///./src/cart/cart-selector.ts","webpack:///./src/config/config-selector.ts","webpack:///./src/geography/country-selector.ts","webpack:///./src/customer/customer-strategy-selector.ts","webpack:///./src/coupon/gift-certificate-selector.ts","webpack:///./src/payment/instrument/instrument-selector.ts","webpack:///./src/payment/payment-method-selector.ts","webpack:///./src/payment/payment-strategy-selector.ts","webpack:///./src/shipping/shipping-country-selector.ts","webpack:///./src/shipping/shipping-strategy-selector.ts","webpack:///./src/checkout/checkout-selector.ts","webpack:///./src/order/order-selector.ts","webpack:///./src/store-credit/store-credit-selector.ts","webpack:///./src/checkout/create-checkout-store.ts","webpack:///./src/checkout/create-action-transformer.ts","webpack:///./src/common/error/create-request-error-factory.ts","webpack:///./src/checkout/create-checkout-store-reducer.ts","webpack:///./src/checkout/errors/checkout-not-available-error.ts","webpack:///./src/checkout/checkout-request-sender.ts","webpack:///./src/checkout/checkout-params.ts","webpack:///./src/coupon/map-to-internal-gift-certificate.ts","webpack:///./src/common/iframe/iframe-event-poster.ts","webpack:///./src/common/iframe/iframe-event-listener.ts","webpack:///./src/common/selector/selector-decorator.ts","webpack:///./src/checkout-buttons/checkout-button-error-selector.ts","webpack:///./src/checkout-buttons/checkout-button-status-selector.ts","webpack:///./src/checkout-buttons/create-checkout-button-selectors.ts","webpack:///./src/checkout-buttons/checkout-button-initializer.ts","webpack:///./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack:///./src/common/dom/is-element-id.ts","webpack:///./src/common/dom/set-unique-element-id.ts","webpack:///./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack:///./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/amazon-maxo/amazon-maxo-button-strategy.ts","webpack:///./src/checkout-buttons/create-checkout-button-initializer.ts","webpack:///./src/checkout-buttons/create-checkout-button-registry.ts","webpack:///./src/embedded-checkout/errors/not-embeddable-error.ts","webpack:///./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack:///./src/embedded-checkout/embedded-checkout.ts","webpack:///./src/embedded-checkout/loading-indicator.ts","webpack:///./src/embedded-checkout/resizable-iframe-creator.ts","webpack:///./src/embedded-checkout/embed-checkout.ts","webpack:///./src/common/utility/cache-key-maps.ts","webpack:///./src/common/utility/cache-key-resolver.ts","webpack:///external \"messageformat\"","webpack:///./src/common/error/errors/map-from-payment-error-response.ts","webpack:///./src/common/error/errors/timeout-error.ts","webpack:///./src/payment/errors/payment-method-invalid-error.ts","webpack:///./src/common/selector/create-selector.ts","webpack:///./src/config/config-action-creator.ts","webpack:///./src/config/config-request-sender.ts","webpack:///./src/billing/billing-address-request-sender.ts","webpack:///./src/common/registry/registry.ts","webpack:///./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack:///./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack:///./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack:///./src/common/storage/browser-storage.ts","webpack:///./src/payment/strategies/paypal/paypal-script-loader.ts","webpack:///./src/common/iframe/iframe-resizer.ts","webpack:///./src/common/error/error-action-creator.ts","webpack:///./src/common/utility/get-environment.ts","webpack:///./src/common/log/console-logger.ts","webpack:///./src/common/log/noop-logger.ts","webpack:///./src/common/log/get-default-logger.ts","webpack:///./src/common/log/create-logger.ts","webpack:///./src/coupon/coupon-action-creator.ts","webpack:///./src/coupon/coupon-request-sender.ts","webpack:///./src/coupon/gift-certificate-action-creator.ts","webpack:///./src/coupon/gift-certificate-request-sender.ts","webpack:///./src/customer/customer-strategy-action-creator.ts","webpack:///./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack:///./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack:///./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack:///./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack:///./src/remote-checkout/remote-checkout-request-sender.ts","webpack:///./src/remote-checkout/remote-checkout-action-creator.ts","webpack:///./src/customer/customer-action-creator.ts","webpack:///./src/customer/customer-request-sender.ts","webpack:///./src/common/error/errors/not-implemented-error.ts","webpack:///./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack:///./src/customer/strategies/amazon-maxo/amazon-maxo-customer-strategy.ts","webpack:///./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack:///./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack:///./src/customer/strategies/default/default-customer-strategy.ts","webpack:///./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack:///./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack:///./src/customer/strategies/square/square-customer-strategy.ts","webpack:///./src/geography/country-action-creator.ts","webpack:///./src/geography/country-request-sender.ts","webpack:///./src/order/order-request-sender.ts","webpack:///./src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack:///./src/order/order-action-creator.ts","webpack:///./src/order/errors/order-finalization-not-required-error.ts","webpack:///./src/payment/payment-strategy-type.ts","webpack:///./src/payment/payment-strategy-action-creator.ts","webpack:///./src/cart/cart-comparator.ts","webpack:///./src/cart/errors/cart-changed-error.ts","webpack:///./src/checkout/checkout-validator.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-error.ts","webpack:///./src/hosted-form/hosted-field.ts","webpack:///./src/hosted-form/hosted-form.ts","webpack:///./src/hosted-form/hosted-form-order-data-transformer.ts","webpack:///./src/hosted-form/hosted-form-factory.ts","webpack:///./src/spam-protection/errors/spam-protection-failed-error.ts","webpack:///./src/spam-protection/spam-protection-action-creator.ts","webpack:///./src/spam-protection/spam-protection-request-sender.ts","webpack:///./src/store-credit/store-credit-action-creator.ts","webpack:///./src/store-credit/store-credit-request-sender.ts","webpack:///./src/payment/payment-action-creator.ts","webpack:///./src/payment/payment-strategy-registry.ts","webpack:///./src/common/browser-info/get-browser-info.ts","webpack:///./src/payment/strategies/adyenv2/adyenv2.ts","webpack:///./src/payment/errors/payment-argument-invalid-error.ts","webpack:///./src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack:///./src/order/order-params.ts","webpack:///./src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack:///./src/payment/errors/payment-method-cancelled-error.ts","webpack:///./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack:///./src/payment/strategies/affirm/affirmJs.ts","webpack:///./src/payment/strategies/affirm/affirm-script-loader.ts","webpack:///./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack:///./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack:///./src/address/is-internal-address-equal.ts","webpack:///./src/common/utility/omit-private.ts","webpack:///./src/address/map-from-internal-address.ts","webpack:///./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack:///./src/common/overlay/overlay.ts","webpack:///./src/common/utility/cancellable-promise.ts","webpack:///./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack:///./src/payment/errors/payment-method-failed-error.ts","webpack:///./src/payment/is-credit-card-like.ts","webpack:///./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack:///./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack:///./src/payment/strategies/cardinal/cardinal.ts","webpack:///./src/payment/strategies/braintree/is-braintree-error.ts","webpack:///./src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack:///./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack:///./src/payment/errors/payment-instrument-not-valid-error.ts","webpack:///./src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack:///./src/payment/strategies/cardinal/cardinal-client.ts","webpack:///./src/payment/strategies/chasepay/chasepay.ts","webpack:///./src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack:///./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack:///./src/payment/strategies/square/square-form.ts","webpack:///./src/payment/strategies/converge/converge-payment-strategy.ts","webpack:///./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack:///./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack:///./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack:///./src/payment/strategies/klarna/klarna-script-loader.ts","webpack:///./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack:///./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack:///./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack:///./src/payment/strategies/offline/offline-payment-strategy.ts","webpack:///./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack:///./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack:///./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack:///./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack:///./src/common/error/errors/unsupported-browser-error.ts","webpack:///./src/payment/strategies/square/square-payment-strategy.ts","webpack:///./src/payment/strategies/square/square-script-loader.ts","webpack:///./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack:///./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack:///./src/payment/strategies/wepay/wepay-risk-client.ts","webpack:///./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack:///./src/payment/errors/payment-method-declined-error.ts","webpack:///./src/payment/strategies/zip/zip-payment-strategy.ts","webpack:///./src/payment/strategies/zip/zip-script-loader.ts","webpack:///./src/payment/create-payment-strategy-registry.ts","webpack:///./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack:///./src/payment/instrument/instrument-action-creator.ts","webpack:///./src/common/date-time/add-minutes.ts","webpack:///./src/common/date-time/is-future.ts","webpack:///./src/payment/instrument/instrument-response-transformer.ts","webpack:///./src/payment/instrument/map-to-account-instrument.ts","webpack:///./src/payment/instrument/map-to-card-instrument.ts","webpack:///./src/payment/instrument/instrument-request-sender.ts","webpack:///./src/shipping/shipping-country-action-creator.ts","webpack:///./src/shipping/shipping-country-request-sender.ts","webpack:///./src/shipping/shipping-strategy-action-creator.ts","webpack:///./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack:///./src/shipping/strategies/default/default-shipping-strategy.ts","webpack:///./src/common/dom/mutation-observer.ts","webpack:///./src/common/data-store/create-data-store-projection.ts","webpack:///./src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack:///./src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack:///./src/spam-protection/google-recaptcha.ts","webpack:///./src/spam-protection/google-recaptcha-script-loader.ts","webpack:///./src/common/utility/clone-result.ts","webpack:///./src/common/selector/create-shallow-equal-selector.ts","webpack:///./src/checkout/create-checkout-selectors.ts","webpack:///./src/checkout/checkout-store-selector.ts","webpack:///./src/checkout/checkout-store-error-selector.ts","webpack:///./src/checkout/checkout-store-status-selector.ts","webpack:///./src/common/error/error-message-transformer.ts","webpack:///./src/common/utility/to-single-line.ts","webpack:///./src/checkout/checkout-service.ts","webpack:///./src/checkout/create-checkout-service-error-transformer.ts","webpack:///./src/checkout/create-checkout-service.ts","webpack:///./src/spam-protection/create-spam-protection.ts","webpack:///./src/payment/create-payment-client.ts","webpack:///./src/customer/create-customer-strategy-registry.ts","webpack:///./src/shipping/create-shipping-strategy-registry.ts","webpack:///./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack:///./src/common/error/errors/custom-error.ts","webpack:///./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack:///./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack:///./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack:///./src/locale/language-service.ts","webpack:///./src/locale/create-language-service.ts","webpack:///./src/currency/currency-formatter.ts","webpack:///./src/currency/currency-service.ts","webpack:///./src/currency/create-currency-service.ts","webpack:///./src/analytics/analytics-step-tracker.ts","webpack:///./src/analytics/noop-step-tracker.ts","webpack:///./src/analytics/create-step-tracker.ts","webpack:///./src/analytics/is-analytics-step-tracker-window.ts","webpack:///./src/bundles/checkout-sdk.ts","webpack:///./src/payment/strategies/googlepay/googlepay.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack:///./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack:///./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack:///./src/payment/strategies/amazon-maxo/amazon-maxo-payment-processor.ts","webpack:///./src/payment/strategies/amazon-maxo/amazon-maxo-script-loader.ts","webpack:///./src/payment/strategies/amazon-maxo/create-amazon-maxo-payment-processor.ts","webpack:///./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack:///./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","ShippingStrategyActionType","CheckoutActionType","OrderActionType","PaymentMethodActionType","BillingAddressActionType","CheckoutButtonActionType","CouponActionType","InstrumentActionType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","GiftCertificateActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","response","errors","ConfigActionType","isVaultedInstrument","instrument","Boolean","instrumentId","isHostedVaultedInstrument","isFormattedVaultedInstrument","formattedInstrument","formattedPayload","bigpay_token","token","isPlainObject","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","StoreCreditActionType","ContentType","HostedInputEventType","isIframeEvent","HOSTED","OFFLINE","mapToInternalAddress","address","consignments","addressId","id","isBillingAddressLike","length","firstName","lastName","company","addressLine1","address1","addressLine2","address2","city","province","stateOrProvince","provinceCode","stateOrProvinceCode","postCode","postalCode","country","countryCode","phone","customFields","PaymentActionType","_requestSender","loadPaymentMethods","options","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","timeout","this","Accept","JsonV1","url","joinIncludes","includes","join","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","reduce","result","map","item","amountTransformer","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","mapToInternalLineItemType","HostedFieldEventType","isEqual","objectA","objectB","Array","isArray","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keysB","isObjectEqual","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","productId","option","addedByPromotion","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","SpamProtectionActionType","CustomerActionType","_decimalPlaces","Math","round","pow","parseUrl","test","anchor","document","createElement","href","port","indexOf","hostname","hash","origin","protocol","pathname","search","withMemoizedCombiner","creator","combiner","args","pop","combinerArgs","ErrorActionType","INTERNAL_USE_ONLY","bindMethodDecorator","_","descriptor","method","boundMethod","set","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","mapToInternalCustomer","customer","billingAddress","addresses","customerId","isGuest","storeCredit","email","fullName","customerGroupName","customerGroup","mapToInternalOrder","order","orderMeta","payments","items","currency","orderId","lineItems","code","customerCanBeCreated","payment","mapToInternalOrderPayment","subtotal","baseAmount","coupon","discountedAmount","coupons","sum","orderToken","callbackUrl","discountNotifications","giftCertificate","providerId","totalDiscountedAmount","appliedGiftCertificates","detail","remainingBalance","remaining","balance","purchaseDate","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","grandTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","step","helpText","instructions","returnUrl","socialDataObject","physicalItems","digitalItems","lineItem","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","mapToInternalCart","checkout","promotions","notifications","cart","promotion","banners","banner","push","placeholders","discountType","messageHtml","giftCertificates","certificate","used","required","isShippingRequired","taxSubtotal","AmazonMaxoRegions","AmazonMaxoCheckoutLanguage","AmazonMaxoPlacement","AmazonMaxoLedgerCurrency","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","format","month","year","trimmedMonth","slice","trimmedYear","toObject","card","maxLength","info","lengths","unformattedValue","unformat","gaps","gapIndex","output","replace","couponTypes","mapToInternalCoupon","displayName","couponType","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","action","payload","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","mergeIncludes","omitDeep","predicate","_checkoutRequestSender","_configActionCreator","loadCheckout","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","updateCheckout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","getConsignmentByAddress","shippingAddress","_removeLineItems","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","concat","request","DEFAULT_INCLUDES","post","put","delete","getCallbackUrl","window","location","_cardExpiryFormatter","_cardNumberFormatter","transform","checkoutState","getBillingAddress","getCustomer","getOrder","paymentMethod","paymentMethods","getPaymentMethod","gatewayId","getShippingAddress","shippingOption","getShippingOption","storeConfig","getStoreConfig","contextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","getOrderMeta","internalCustomer","authToken","paymentData","getPaymentToken","vaultAccessToken","_transformPaymentMethod","quoteMeta","geoCountryCode","source","storeProfile","transformWithHostedFormData","values","data","paymentMethodMeta","selectedShippingOption","_transformHostedInputValues","gateway","initializationData","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","submitPayment","reject","_transformResponse","initializeOffsitePayment","statusText","isPrivate","EmbeddedContentEventType","joinErrors","_factoryMethods","register","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","mergeOrPush","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","checkoutReducer","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","countries","selectedCountry","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","label","fieldType","itemtype","processCountry","subdivisions","requiresState","processProvince","hasPostalCodes","processsPostCode","provider","braintreepaypal","authorizenet","stripe","stripev3","cybersource","converge","bluesnapv2","paymetric","normalize","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","find","bigpayToken","some","getInstruments","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getOutstandingBalance","useStoreCredit","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","createOrderSelectorFactory","createPaymentSelector","providerType","internalPayment","redirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutIncludes","mapToInternalGiftCertificate","targetOrigin","_targetWindow","_targetOrigin","event","successType","errorType","toPromise","postMessage","setTarget","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","offerCredit","tokenizePayment","postForm","payment_type","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","_masterpassScriptLoader","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","merchantId","clientId","actions","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","_amazonMaxoPaymentProcessor","querySelector","checkoutLanguage","ledgerCurrency","region","amazonButtonOptions","sandbox","productType","createCheckoutSession","links","siteLink","placement","Cart","createCheckoutButtonInitializer","host","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","AMAZON_MAXO","createCheckoutButtonRegistry","NotEmbeddableErrorType","UnknownError","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","StyleConfigured","getItem","setItem","now","encodeURIComponent","visibility","lastAttempt","Number","MissingContent","removeItem","EmbeddedCheckout","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","loadingIndicator","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","mapFromPaymentErrorResponse","_configRequestSender","DEFAULT_PARAMS","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","parse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","tokenizationSpecification","paymentMethodTokenizationParameters","shippingAddressParameters","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","last4","err","stripeVersion","stripePublishableKey","fieldErrors","_namespace","rawValue","withNamespace","getItemOnce","scriptSrc","async","iframeResizer","originalIframeResizer","setupContentWindowForIframeResizer","clearError","getEnvironment","process","NODE_ENV","e","_console","log","_logToConsole","messages","warn","debug","isEnabled","logger","console","getDefaultLogger","_couponRequestSender","applyCoupon","removeCoupon","couponCode","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","giftCertificateCode","_strategyRegistry","signIn","credentials","signOut","widgetInteraction","loadWidget","onPaymentReady","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_postForm","userData","userEmail","card_information","_getCardInformation","cardInformation","_getAddress","_toVisaCheckoutAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","V","JPMC","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","_remoteCheckoutActionCreator","amazonOptions","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","amazonmaxo","Checkout","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","braintreevisacheckout","visaCheckoutOptions","initOptions","storeLanguage","signInButton","init","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","_chasePayScriptLoader","chasepay","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","_customerActionCreator","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","masterpassOptions","Masterpass","_countryRequestSender","loadCountries","_config","loadOrder","submitOrder","finalizeOrder","_orderRequestSender","_checkoutValidator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","shouldExecuteSpamCheck","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","PaymentStrategyType","_orderActionCreator","_spamProtectionActionCreator","execute","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","comparator","_compareCoupons","_compareGiftCertificates","couponsA","couponsB","giftCertificatesA","giftCertificatesB","formId","_type","_containerId","_placeholder","_accessibilityLabel","_eventPoster","_eventListener","_cardInstrument","overflow","getType","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","AttachSucceeded","AttachFailed","_isAttachErrorEvent","_handleAttachErrorEvent","parentElement","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","validateForm","ValidateRequested","Validated","isValid","lastRetry","fontFamily","family","_fields","_payloadTransformer","eventCallbacks","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","_getFirstField","otherFields","otherField","submit","fieldOptions","_getCardInstrument","MissingPaymentInstrument","_googleRecaptcha","spamProtectionElementId","spamProtectionElement","setAttribute","recaptchaSitekey","checkoutSettings","googleRecaptchaSitekey","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_paymentRequestSender","_paymentRequestTransformer","SubmitPaymentRequested","SubmitPaymentFailed","shouldSaveInstrument","vault_payment_instrument","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","getBrowserInfo","color_depth","screen","colorDepth","java_enabled","navigator","javaEnabled","userLanguage","screen_height","screen_width","time_zone_offset","getTimezoneOffset","ThreeDS2ComponentType","ResultCode","invalidFields","OrderIncludes","_paymentActionCreator","_adyenV2ScriptLoader","_locale","adyenv2","_adyenv2","configuration","environment","originKey","paymentMethodsResponse","adyenCheckout","_adyenCheckout","adyenPaymentComponent","onChange","_updateAdyenComponentState","mount","_adyenPaymentComponent","cardVerificationContainerId","adyenCardVerificationComponent","_adyenCardVerificationComponent","adyenComponentState","_adyenComponentState","encryptedCardNumber","encryptedSecurityCode","credit_card_number_confirmation","verification_value","browser_info","paymentPayload","credit_card_token","three_ds_result","IdentifyShopper","_handle3DS2Fingerprint","ChallengeShopper","_handle3DS2Challenge","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","unmount","_getAdyenV2PaymentInitializeOptions","_getThreeDS2ChallengeWidgetSize","widgetSize","resultObject","paymentMethodId","challengeComponent","ThreeDS2Challenge","challengeToken","challengeData","challengePaymentPayload","payment_data","threeDS2Container","threeDS2ContainerId","fingerprintComponent","ThreeDS2DeviceFingerprint","fingerprintToken","fingerprintData","fingerprintPaymentPayload","newState","_stylesheetLoader","loadStylesheet","AdyenCheckout","_affirmScriptLoader","publicKey","affirm","_affirm","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","unit_price","qty","item_image_url","item_url","categories","_getCategories","customItems","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","Function","apikey","scriptURI","_getScriptURI","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","handeTransition","propertyName","promise","cancellable","cancel","race","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","getSessionId","appendSessionId","processedPayment","creditCard","cardholderName","cvv","expirationDate","endpoint","isCreditCardLike","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","tokenizedCard","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","_credit","braintreeOptions","isBraintreeError","isVaultingEnabled","_formattedPayload","vaultPaymentInstrument","device_info","paypal_account","_paymentStrategyActionCreator","visaInitOptions","_cardinalClient","prepare","start","runBinProcess","_getBinNumber","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","ChasePayEventType","_sdk","_getClientSDK","SetupCompleted","off","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","CardBrand","DigitalWalletType","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","_hostedFormFactory","_isHostedPaymentFormEnabled","_executeWithHostedForm","_executeWithoutHostedForm","formOptions","paymentSettings","bigpayBaseUrl","_hostedForm","isHostedPaymentFormEnabled","_threeDSecureFlow","_googlePayOptions","statusCode","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorization_token","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","Klarna","Credit","orderPayload","_shouldSubmitFullPayload","_isPaymentAcknowledged","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","orderActionCreator","paymentActionCreator","hostedFormFactory","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","square","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SqPaymentForm","_stripeScriptLoader","stripeOptions","stripeJs","_stripeV3Client","cardElement","elements","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","publishableKey","Stripe","betas","_riskClient","WePay","risk","generate_risk_token","get_risk_token","payloadWithToken","_zipScriptLoader","zip","_zipClient","zipClient","_prepareForReferredRegistration","onCheckout","openModal","externalId","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","paymentRequestTransformer","paymentRequestSender","billingAddressActionCreator","braintreePaymentProcessor","overlay","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","spamProtectionActionCreator","storeCreditActionCreator","paymentMethodActionCreator","remoteCheckoutActionCreator","configActionCreator","paymentStrategyActionCreator","ADYENV2","AFFIRM","AFTERPAY","AMAZON","CYBERSOURCE","KLARNA","PAYPAL","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","SQUARE","BRAINTREE","BRAINTREE_VISA_CHECKOUT","CHASE_PAY","BRAINTREE_GOOGLE_PAY","WE_PAY","STRIPE_GOOGLE_PAY","ZIP","CONVERGE","STRIPEV3","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","method_type","defaultInstrument","default_instrument","external_id","trustedShippingAddress","trusted_shipping_address","mapToAccountInstrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","mapToCardInstrument","_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","_shippingCountryRequestSender","selectOption","mergedOptions","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","ProjectionActionType","callback","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","event$","getResponse","reset","a","b","_event$","_recaptcha","_watchRecaptchaChallengeWindow","iframeContainer","observe","attributeFilter","_loadPromise","_loadScript","grecaptcha","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","isSubmittingOrder","createCheckoutStoreSelector","availableShippingOptions","val","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","isLoadingCheckout","isUpdatingCheckout","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","_messageCustomizer","trim","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","executeSpamCheck","CheckoutService","createCheckoutService","setHost","createPaymentClient","orderRequestSender","MutationObserverFactory","spamProtectionRequestSender","remoteCheckoutRequestSender","createCustomerStrategyRegistry","consignmentRequestSender","consignmentActionCreator","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","isCustomError","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","_logger","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","compile","_transformData","_transformConfig","defaultTranslations","_flattenObject","parentKey","resultKey","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","decimalAmount","parsedIntegerAmount","_toFixed","precision","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","AnalyticStepId","ANALYTIC_STEPS","CUSTOMER","SHIPPING","BILLING","PAYMENT","checkoutService","storage","analytics","checkoutSteps","_checkoutStarted","_completedSteps","_viewedSteps","_analyticStepOrder","trackCheckoutStarted","extraItemsData","saveExtraItemsData","track","getTrackingPayload","revenue","tax","trackOrderComplete","readExtraItemsData","clearExtraItemData","trackStepViewed","stepId","getIdFromStep","hasStepViewed","trackViewed","backfill","trackStepCompleted","hasStepCompleted","trackCompleted","shippingMethod","getPaymentMethodName","shippingMethodId","completedStepId","affiliation","toShopperCurrency","products","getProducts","getShopperCurrency","getStoreProfile","getStorageKey","ORDER_ITEMS_STORAGE_KEY","itemsData","product_id","giftCertificateItems","physicalAndDigitalItems","itemAttributes","image_url","variant","createStepTracker","stepTrackerConfig","isAnalyticsEnabled","isAnalyticsTrackerWindow","ButtonType","ButtonColor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","_amazonMaxoScriptLoader","_amazonMaxoSDK","Pay","renderButton","amazonMaxoClient","amazonMaxoRegion","createAmazonMaxoPaymentProcessor","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,K,gBClFrDhC,EAAOD,QAAUkC,QAAQ,U,cCAzBjC,EAAOD,QAAUkC,QAAQ,4B,cCAzBjC,EAAOD,QAAUkC,QAAQ,W,cCAzBjC,EAAOD,QAAUkC,QAAQ,S,cCAzBjC,EAAOD,QAAUkC,QAAQ,yB,8BCMzB,IAAYC,EAAZ,2CAAYA,GACR,8DACA,8DACA,wDAEA,4DACA,4DACA,sDAEA,4DACA,4DACA,sDAEA,mEACA,mEACA,6DAEA,iEACA,iEACA,2DAnBJ,CAAYA,MAAqB,M,8BCJjC,IAAYC,EAAZ,2CAAYA,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,wEAfJ,CAAYA,MAA0B,M,6BCEtC,IAAYC,EAAZ,2CAAYA,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,wDACA,8DACA,8DACA,4DACA,kEACA,kEACA,yEACA,2EACA,uEAfJ,CAAYA,MAAyB,M,cCJrCpC,EAAOD,QAAUkC,QAAQ,mB,mECEbI,E,gBAAZ,SAAYA,GACR,qDACA,iCACA,yCACA,iDACA,qDACA,mCACA,+CACA,uCACA,uCACA,2DACA,oDACA,kDACA,wDAbJ,CAAYA,MAAoB,KAqBhC,kBACI,WACWC,GADX,MAGI,YAOR,SAAyBC,GACrB,OAAQA,GACR,KAAKF,EAAqBG,sBACtB,MAAO,iEAEX,KAAKH,EAAqBI,YACtB,MAAO,sDAEX,KAAKJ,EAAqBK,oBACtB,MAAO,8DAEX,KAAKL,EAAqBM,gBACtB,MAAO,0DAEX,KAAKN,EAAqBO,sBAC1B,KAAKP,EAAqBQ,mBACtB,MAAO,+DAEX,KAAKR,EAAqBS,aACtB,MAAO,uDAEX,KAAKT,EAAqBU,eACtB,MAAO,0EAEX,KAAKV,EAAqBW,eACtB,MAAO,yDAEX,KAAKX,EAAqBY,oBACtB,MAAO,+EAEX,KAAKZ,EAAqBa,qBACtB,MAAO,2FAEX,KAAKb,EAAqBc,uBACtB,MAAO,kEAEX,QACI,MAAO,+DA5CDC,CAAgBd,KAAS,K,OAFxB,EAAAA,UAIP,EAAK9B,KAAO,mBACZ,EAAK+B,KAAO,e,EAEpB,OAT8C,yBAS9C,EATA,CAA8C,K,oCCrB9C,IAAYc,EAAZ,2CAAYA,GACR,gEACA,sEACA,sEACA,8DACA,oEACA,oEACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEAZJ,CAAYA,MAA0B,M,6BCItC,IAAYC,EAAZ,2CAAYA,GACR,kDACA,kDACA,4CAEA,sDACA,sDACA,gDAPJ,CAAYA,MAAkB,M,8BCD9B,IAAYC,EAAZ,2CAAYA,GACR,4CACA,4CACA,sCAEA,6DACA,6DACA,uDAEA,gDACA,gDACA,0CAEA,oDACA,oDACA,8CAfJ,CAAYA,MAAe,M,6BCA3B,IAAYC,EAAZ,2CAAYA,GACR,6DACA,6DACA,uDAEA,+DACA,+DACA,yDAPJ,CAAYA,MAAuB,M,8BCDnC,IAAYC,EAAZ,2CAAYA,GACR,mEACA,mEACA,6DAEA,yDACA,yDACA,mDAPJ,CAAYA,MAAwB,M,6BCEpC,IAAYC,EAAZ,2CAAYA,GACR,oDACA,0DACA,0DAEA,wDACA,8DACA,8DAPJ,CAAYA,MAAwB,M,6BCApC,IAAYC,EAAZ,2CAAYA,GACR,gDACA,gDACA,0CAEA,kDACA,kDACA,4CAPJ,CAAYA,MAAgB,M,6BCD5B,IAAYC,EAAZ,2CAAYA,GACR,wDACA,wDACA,kDAEA,0DACA,0DACA,oDAPJ,CAAYA,MAAoB,M,wCCGhC,kBAII,WAAYC,G,ICZuBlC,EAAaE,E,mBDYhD,EACI,YAAMgC,GAAW,sCAAoC,K,OAJzD,EAAArD,KAAO,gBACP,EAAA+B,KAAO,WCV4BZ,EDehB,ECf6BE,EDevB,EAAWA,UCdhClB,OAAOmD,eACPnD,OAAOmD,eAAenC,EAAQE,GAE9BF,EAAOoC,UAAYlC,EDaoB,mBAA5BmC,MAAMC,kBACbD,MAAMC,kBAAkB,EAAM,GAE9B,EAAKC,MAAQ,IAAKF,MAAM,EAAKH,SAAUK,M,EAGnD,OAfoD,yBAepD,EAfA,CAAoDF,O,oCEFpD,IAAYG,EAAZ,2CAAYA,GACR,mEACA,mEACA,6DAEA,qEACA,qEACA,+DAPJ,CAAYA,MAAyB,M,8BCHrC,IAAYC,EAAZ,2CAAYA,GACR,uCACA,iCACA,mCACA,2BACA,6BACA,yBANJ,CAAYA,MAAyB,M,6BCCrC,IAAYC,EAAZ,2CAAYA,GACR,yEACA,yEACA,mEAEA,2EACA,2EACA,qEAEA,yEACA,yEACA,mEAEA,+DACA,+DACA,yDAEA,sEACA,sEACA,gEAEA,gDArBJ,CAAYA,MAAwB,M,eCJpCrE,EAAOD,QAAUkC,QAAQ,gC,gDCInBqC,EAAmB,CACrBC,KAAM,GACNC,QAAS,GACTC,OAAQ,GAOZ,cAMI,WACIC,EACA,G,IAAA,kBAAEb,EAAA,EAAAA,QAASc,EAAA,EAAAA,OAFf,OAOU,OAAEJ,EAAA,EAAAA,KAAMC,EAAA,EAAAA,QAASC,EAAA,EAAAA,O,OAEvB,cAAMZ,GAAW,sCAAoC,MAEhDrD,KAAO,eACZ,EAAK+B,KAAO,UACZ,EAAKgC,KAAOA,EACZ,EAAKC,QAAUA,EACf,EAAKC,OAASA,EACd,EAAKE,OAASA,GAAU,G,EAEhC,OAxBuD,yBAwBvD,EAxBA,CAAuD,K,qBCdvD3E,EAAOD,QAAUkC,QAAQ,mB,6BCIzB,IAAY2C,EAAZ,2CAAYA,GACR,8CACA,8CACA,wCAHJ,CAAYA,MAAgB,M,eCJ5B5E,EAAOD,QAAUkC,QAAQ,+B,6BCEV,SAAS4C,EAAoBC,GACxC,OAAOC,QAASD,EAAiCE,cAG9C,SAASC,EAA0BH,GACtC,OACIC,QAASD,EAAuCE,gBAC/CF,EAAWhD,eAAe,cAC1BgD,EAAWhD,eAAe,SAI5B,SAASoD,EAA6BJ,GACzC,IAAMK,EAAuBL,EAA4DM,iBAEzF,QAAKD,IAI8C,iBAArCA,EAAoBE,cAC9BN,QAAQI,EAAoBE,cAAgBF,EAAoBE,aAAaC,QApBrF,uG,6BCFA,6CAGe,SAASC,EAAcrE,GAClC,OAAO,wBAAoBA,K,6BCA/B,IAAYsE,EAAZ,2CAAYA,GACR,oDACA,oDACA,8CAHJ,CAAYA,MAAiB,M,6BCA7B,IAAYC,EAAZ,2CAAYA,GACR,qEACA,qEACA,+DAHJ,CAAYA,MAAyB,M,6BCJrC,oEAAO,IAAMC,EAAc,cACdC,EAAW,Y,6BCKxB,IAAYC,EAAZ,2CAAYA,GACR,2DACA,2DACA,qDAHJ,CAAYA,MAAqB,M,wCCAjC,cACI,WAAY/B,GAAZ,MACI,YAAMA,GAAW,wGAAsG,K,OAEvH,EAAKrD,KAAO,sCACZ,EAAK+B,KAAO,oC,EAEpB,OAPiE,yBAOjE,EAPA,C,MAAiE,G,uCCNjE,IAAKsD,GAAL,SAAKA,GACD,0BACA,sCAFJ,CAAKA,MAAW,KAKD,O,6BCIf,IAAYC,EADZ,kCACA,SAAYA,GACR,kDACA,4CACA,iCACA,iCACA,mDACA,iCACA,kDACA,4CACA,qCATJ,CAAYA,MAAoB,M,+BCPjB,SAASC,EACpBpE,EACAY,GAEA,OAAOZ,EAAOY,OAASA,EAJ3B,mC,wCCKA,cACI,WAAYsB,GAAZ,MACI,YAAMA,GAAW,0CAAwC,K,OAEzD,EAAKrD,KAAO,uBACZ,EAAK+B,KAAO,mB,EAEpB,OAPkD,yBAOlD,EAPA,C,MAAkD,G,sCCPlD,oEAAO,IAAMyD,EAAS,sBACTC,EAAU,wB,6BCUR,SAASC,EACpBC,EACAC,GAEA,IAAIC,EAQJ,OCnBW,SAA8BF,GAGzC,YAAoC,IAFbA,EAEMG,GDUzBC,CAAqBJ,GAEdC,GAAgBA,EAAaI,SACpCH,EAAYD,EAAa,GAAGE,IAF5BD,EAAYF,EAAQG,GAKjB,CACHA,GAAID,EACJI,UAAWN,EAAQM,UACnBC,SAAUP,EAAQO,SAClBC,QAASR,EAAQQ,QACjBC,aAAcT,EAAQU,SACtBC,aAAcX,EAAQY,SACtBC,KAAMb,EAAQa,KACdC,SAAUd,EAAQe,gBAClBC,aAAchB,EAAQiB,oBACtBC,SAAUlB,EAAQmB,WAClBC,QAASpB,EAAQoB,QACjBC,YAAarB,EAAQqB,YACrBC,MAAOtB,EAAQsB,MACfC,aAAcvB,EAAQuB,cArC9B,mC,6BEMA,IAAYC,EAAZ,2CAAYA,GACR,oDACA,oDACA,8CAEA,2EACA,2EACA,qEAPJ,CAAYA,MAAiB,M,wECG7B,aACI,WACYC,GAAA,KAAAA,iBAsChB,OAnCI,YAAAC,mBAAA,SAAmBC,GAAnB,WACI,OAAO,aAAWvG,QAAO,SAACwG,GACtBA,EAASC,KAAK,uBAAa,IAAwBC,8BAEnD,EAAKL,eAAeC,mBAAmBC,GAClCI,MAAK,SAAAxD,GACF,IAAMyD,EAAO,CACTC,gBAAiB1D,EAASF,QAAQ,uBAClC6D,YAAa3D,EAASF,QAAQ,mBAGlCuD,EAASC,KAAK,uBAAa,IAAwBM,4BAA6B5D,EAASH,KAAM4D,IAC/FJ,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAwBC,yBAA0BhE,WAMnG,YAAAiE,kBAAA,SAAkBC,EAAkBd,GADpC,WAEI,OAAO,aAAWvG,QAAO,SAACwG,GACtBA,EAASC,KAAK,uBAAa,IAAwBa,gCAA4BC,EAAW,CAAEF,SAAQ,KAEpG,EAAKhB,eAAee,kBAAkBC,EAAUd,GAC3CI,MAAK,SAAAxD,GACFqD,EAASC,KAAK,uBAAa,IAAwBe,2BAA4BrE,EAASH,KAAM,CAAEqE,SAAQ,KACxGb,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAwBO,wBAAyBtE,EAAU,CAAEkE,SAAQ,YAVtH,sBADC,K,sCAeL,EAxCA,GAAqB,O,6BCPrB,oBAIA,aACI,WACYhB,GAAA,KAAAA,iBA0BhB,OAvBI,YAAAC,mBAAA,SAAmB,G,IAAEoB,QAAA,YAAAA,QAGjB,OAAOC,KAAKtB,eAAe9G,IAFf,2BAEwB,CAChCmI,QAAO,EACPzE,QAAS,CACL2E,OAAQ,IAAYC,OACpB,iBAAkB,QAK9B,YAAAT,kBAAA,SAAkBC,EAAkB,G,IAAEK,QAAA,YAAAA,QAC5BI,EAAM,4BAA4BT,EAExC,OAAOM,KAAKtB,eAAe9G,IAAIuI,EAAK,CAChCJ,QAAO,EACPzE,QAAS,CACL2E,OAAQ,IAAYC,OACpB,iBAAkB,QAIlC,EA5BA,G,oCCNA,6CAEe,SAASE,EAAgBC,GACpC,OAAO,eAAKA,GAAUC,KAAK,O,4DCQhB,SAASC,EACpBC,EACAC,EACAC,GAEA,YAFA,IAAAA,MAAA,MAEQjJ,OAAOkJ,KAAKH,GACfI,QAAO,SAACC,EAAQvI,GAAQ,gCAClBuI,EACCL,EAAQlI,GAAoBwI,KAAI,SAACC,GACjC,MAAY,qBAARzI,ECfL,SACXyI,EACAN,GAEA,IAAMO,EAAoB,IAAI,IAAkBP,GAEhD,MAAO,CACHrD,GAAI2D,EAAK3D,GACT6D,SAAU,GACV3J,KAAMyJ,EAAKzJ,KACX4J,OAAQH,EAAKG,OACbC,oBAAqBJ,EAAKG,OAC1BE,SAAU,EACVC,cAAeL,EAAkBM,UAAUP,EAAKG,QAChDK,2BAA4BP,EAAkBM,UAAUP,EAAKG,QAC7DM,iBAAkBR,EAAkBM,UAAUP,EAAKG,QACnDO,8BAA+BT,EAAkBM,UAAUP,EAAKG,QAChEQ,gBAAiB,EACjBC,SAAU,EACVC,OAAQb,EAAKa,OACbC,UAAWd,EAAKc,UAChBxI,KAAM,4BACNyI,WAAY,GACZC,UAAW,MDPQC,CAAqCjB,EAAMN,GAG/C,YACHM,EASpB,SAAmC1H,GAC/B,OAAQA,GACJ,IAAK,gBACD,MAAO,qBAEX,IAAK,eACD,MAAO,oBAEX,IAAK,mBACD,MAAO,4BAEX,QACI,MAAO,IApBC4I,CAA0B3J,GAC1BmI,EACAC,SAGT,I,iDE/BX5J,EAAOD,QAAUkC,QAAQ,2B,eCAzBjC,EAAOD,QAAUkC,QAAQ,iB,6BCMzB,IAAYmJ,EAAZ,2CAAYA,GACR,kDACA,qDACA,sDAHJ,CAAYA,MAAoB,M,8BCFjB,SAASC,EAAQC,EAAcC,EAAczD,GACxD,OAAIwD,IAAYC,IAIZD,GAAWC,GAA8B,iBAAZD,GAA2C,iBAAZC,EACxDC,MAAMC,QAAQH,IAAYE,MAAMC,QAAQF,GAsCpD,SAAsBD,EAAgBC,EAAgBzD,GAClD,GAAIwD,EAAQ9E,SAAW+E,EAAQ/E,OAC3B,OAAO,EAGX,IAAK,IAAIkF,EAAQ,EAAG,EAASJ,EAAQ9E,OAAQkF,EAAQ,EAAQA,IACzD,IAAKL,EAAQC,EAAQI,GAAQH,EAAQG,GAAQ5D,GACzC,OAAO,EAIf,OAAO,EAhDQ6D,CAAaL,EAASC,EAASzD,IAGtC0D,MAAMC,QAAQH,KAAYE,MAAMC,QAAQF,KAIvCD,aAAmBM,MAAUL,aAAmBK,KA0B7D,SAAqBN,EAAeC,GAChC,OAAOD,EAAQO,YAAcN,EAAQM,UA1BtBC,CAAYR,EAASC,KAG3BD,aAAmBM,MAAUL,aAAmBK,QAIhDN,aAAmBS,QAAYR,aAAmBQ,OAc/D,SAAuBT,EAAiBC,GACpC,OAAOD,EAAQU,aAAeT,EAAQS,WAdvBC,CAAcX,EAASC,KAG7BD,aAAmBS,QAAYR,aAAmBQ,SAgC/D,SACIT,EACAC,EACAzD,GAEA,IAAMoE,EAASpE,GAAWA,EAAQqE,UAC5BC,EAAQF,EAASvL,OAAOkJ,KAAKyB,GAASY,OAAOA,GAAUvL,OAAOkJ,KAAKyB,GACnEe,EAAQH,EAASvL,OAAOkJ,KAAK0B,GAASW,OAAOA,GAAUvL,OAAOkJ,KAAK0B,GAEzE,GAAIa,EAAM5F,SAAW6F,EAAM7F,OACvB,OAAO,EAGX,IAAK,IAAIkF,EAAQ,EAAG,EAASU,EAAM5F,OAAQkF,EAAQ,EAAQA,IAAS,CAChE,IAAMlK,EAAM4K,EAAMV,GAElB,IAAKH,EAAQzJ,eAAeN,GACxB,OAAO,EAGX,IAAK6J,EAAQC,EAAQ9J,GAAM+J,EAAQ/J,GAAMsG,GACrC,OAAO,EAIf,OAAO,EArDIwE,CAAchB,EAASC,EAASzD,KAGpCwD,IAAYC,GAjCvB,mC,cCJAvL,EAAOD,QAAUkC,QAAQ,6B,8BCAzB,8CAUe,SAASsK,EACpBtC,EACA1H,EACAoH,EACAC,QAAA,IAAAA,MAAA,MAEA,IAAMM,EAAoB,IAAI,IAAkBP,GAEhD,MAAO,CACHrD,GAAK2D,EAAKL,GACVO,SAAUF,EAAKE,SACfC,OAAQH,EAAKuC,kBACbnC,oBAAqBJ,EAAKwC,kBAC1BnC,SAAUL,EAAKyC,eACfnC,cAAeL,EAAkBM,UAAUP,EAAKuC,mBAChD/B,2BAA4BP,EAAkBM,UAAUP,EAAKwC,mBAC7D7B,gBAAiBV,EAAkBM,UAAUP,EAAKyC,gBAClDhC,iBAAkBR,EAAkBM,UAAUP,EAAK0C,WACnDhC,8BAA+BT,EAAkBM,UAAUP,EAAK2C,WAChEC,iBAAmB5C,EAAqB6C,gBACxCtM,KAAMyJ,EAAKzJ,KACXqK,SAAUZ,EAAKY,SACfkC,MAAO9C,EAAK8C,MACZC,IAAK/C,EAAK+C,IACVC,cAAehD,EAAKgD,cACpBhC,UAAWhB,EAAKgB,UAChBiC,UAAWjD,EAAKiD,UAChBlC,YAAaf,EAAKnC,SAAW,IAAIkC,KAAI,SAAAmD,GAAU,OAC3C3M,KAAM2M,EAAO3M,KACbU,MAAOiM,EAAOjM,UAElBkM,iBAAkBnD,EAAKmD,iBACvB7K,KAAI,K,cC1CZvC,EAAOD,QAAUkC,QAAQ,a,6BCQV,SAASoL,EAA4BF,EAAwBG,GACxE,MAAO,CACHC,YAAaJ,EAAOI,YACpBvN,OAAQmN,EAAO5K,KACfiL,MAAOL,EAAOM,KACdnH,GAAI6G,EAAO7G,GACXoH,SAAUJ,EACVK,cAAeR,EAAOQ,cACtBxD,SAAUgD,EAAOhD,SACjByD,YAAaT,EAAOS,aAd5B,mC,6BCCA,IAAYC,EAAZ,2CAAYA,GACR,uDACA,6DACA,6DACA,uDACA,uDACA,iDANJ,CAAYA,MAAwB,M,6BCEpC,IAAYC,EAAZ,2CAAYA,GACR,uDACA,uDACA,iDAEA,yDACA,yDACA,mDAPJ,CAAYA,MAAkB,M,6BCN9B,iBACI,WAAoBC,GAAA,KAAAA,iBAKxB,OAHI,YAAAvD,UAAA,SAAUJ,GACN,OAAO4D,KAAKC,MAAM7D,EAAS4D,KAAKE,IAAI,GAAIhF,KAAK6E,kBAErD,EANA,G,oCCAA,8CAIe,SAASI,EAAS9E,GAC7B,IAAK,kBAAkB+E,KAAK/E,GACxB,MAAM,IAAI,IAAqB,sCAInC,IAAMgF,EAASC,SAASC,cAAc,KAEtCF,EAAOG,KAAOnF,EAId,IAAMoF,EAAOJ,EAAOI,OAA8D,IAAtDpF,EAAIqF,QAAWL,EAAOM,SAAQ,IAAIN,EAAOI,MACjEJ,EAAOI,KACP,GAEJ,MAAO,CACHG,KAAMP,EAAOO,KACbD,SAAUN,EAAOM,SACjBH,KAAMH,EAAOG,KACbK,OAAWR,EAAOS,SAAQ,KAAKT,EAAOM,UAAWF,EAAO,IAAMA,EAAO,IACrEM,SAAUV,EAAOU,SACjBN,KAAI,EACJK,SAAUT,EAAOS,SACjBE,OAAQX,EAAOW,U,mFCpBR,SAASC,EACpBC,GAEA,OAAO,W,IAAE,sDACL,IAAMC,EAAWC,EAAKC,MAItB,OAAQH,EAAe,sCAAIE,EAAM,Y,IAAC,sDAG9B,IAAMrF,EAASoF,EAAQ,aAAIG,GAE3B,MAAsB,mBAAXvF,EACA,kBAAQA,GAGZA,S,6BCvBnB,IAAYwF,EAAZ,2CAAYA,GACR,2BADJ,CAAYA,MAAe,M,6BCOZ,IATmB,CAC9B,uCACA,sCACA,WACA,yBACA,WACA,uB,6BCNJ,kCAAO,IAAMC,EAAoB,2E,0CC4C1B,SAASC,EAAsCC,EAAWlO,EAAamO,GAC1E,GAAgC,mBAArBA,EAAWzO,MAClB,OAAOyO,EAGX,IAAIC,EAAYD,EAAWzO,MAE3B,MAAO,CACHJ,IAAA,WACI,IAAM+O,EAAcD,EAAOnO,KAAKyH,MAOhC,OALAvI,OAAOC,eAAesI,KAAM1H,EAAK,yCAC1BmO,GAAU,CACbzO,MAAO2O,KAGJA,GAEXC,IAAG,SAAC5O,GACA0O,EAAS1O,IAjDN,IARf,SAAuB6O,EAAavO,EAAWmO,GAC3C,OAAKnO,GAAQmO,EAINF,EAAoBM,EAAQvO,EAAKmO,GASrC,SAA2DI,GAC9D,IAAMC,EAAe,YAAG,a,+CAAsB,OAAR,yBAAQ,EAAzB,CAAiBD,GAiBtC,OAfApP,OAAOsP,oBAAoBF,EAAOlO,WAC7BqO,SAAQ,SAAA1O,GACL,IAAMmO,EAAahP,OAAOwP,yBAAyBJ,EAAOlO,UAAWL,GAEhEmO,GAAsB,gBAARnO,GAInBb,OAAOC,eACHoP,EAAgBnO,UAChBL,EACAiO,EAAoBM,EAAOlO,UAAWL,EAAKmO,OAIhDK,EA9BII,CAAmBL,K,6BCRlC,8CAWe,SAASM,EAAsBC,EAAoBC,GAC9D,IAAM9J,EAAY6J,EAAS7J,WAAa8J,EAAe9J,WAAa,GAC9DC,EAAW4J,EAAS5J,UAAY6J,EAAe7J,UAAY,GAEjE,MAAO,CACH8J,WAAYF,EAASE,WAAa,IAAIxG,KAAI,SAAA7D,GAAW,mBAAqBA,MAC1EsK,WAAYH,EAAShK,GACrBoK,QAASJ,EAASI,QAClBC,YAAaL,EAASK,YACtBC,MAAON,EAASM,OAASL,EAAeK,OAAS,GACjDnK,UAAS,EACTC,SAAQ,EACRlG,KAAM8P,EAASO,UAAY,CAACpK,EAAWC,GAAU8C,KAAK,KACtDsH,kBAAmBR,EAASS,eAAiBT,EAASS,cAAcvQ,Q,+GCP7D,SAASwQ,EAAmBC,EAAcC,QAAA,IAAAA,MAAA,IACrD,IAkF2BC,EACrBC,EAnFAzH,EAAgBsH,EAAMI,SAAS1H,cAC/BO,EAAoB,IAAI,IAAkBP,GAEhD,MAAO,CACHrD,GAAI2K,EAAMK,QACVF,MAAO,YAAuBH,EAAMM,UAAWN,EAAMI,SAAS1H,cAAe,aAC7E2H,QAASL,EAAMK,QACfD,SAAUJ,EAAMI,SAASG,KACzBC,qBAAsBR,EAAMQ,qBAC5BC,QAASC,EAA0BV,EAAME,SAAUD,EAAUQ,SAC7DE,SAAU,CACNxH,OAAQ6G,EAAMY,WACdtH,cAAeL,EAAkBM,UAAUyG,EAAMY,aAErDC,OAAQ,CACJC,iBAAkB,iBAAOd,EAAMe,SAAS,SAACC,EAAKH,GAC1C,OAAOG,EAAMH,EAAOC,mBACrB,GACHC,QAASf,EAAMe,QAAQhI,IAAI,MAE/BM,SAAU,CACNF,OAAQ6G,EAAMvE,eACdnC,cAAeL,EAAkBM,UAAUyG,EAAMvE,iBAErDpH,MAAO4L,EAAUgB,WACjBC,YAAajB,EAAUiB,YACvBC,sBAAuB,GACvBC,iBAuDuBlB,EAvDgBF,EAAME,SAwD3CC,EAAQ,iBAAOD,EAAU,CAAEmB,WAAY,oBAEtC,CACHC,sBAAuB,iBAAOnB,GAAO,SAACa,EAAKhI,GAAS,OAAAA,EAAKG,OAAS6H,IAAK,GACvEO,wBAAyB,gBAAMpB,EAAMpH,KAAI,SAAAC,GAAQ,OAC7CuH,KAAMvH,EAAKwI,OAAOjB,KAClBO,iBAAkB9H,EAAKG,OACvBsI,iBAAkBzI,EAAKwI,OAAOE,UAC9BN,gBAAiB,CACbO,QAAS3I,EAAKG,OAASH,EAAKwI,OAAOE,UACnCnB,KAAMvH,EAAKwI,OAAOjB,KAClBqB,aAAc,QAEjB,UApELC,WAAYC,EAA4B9B,GACxCxM,OAAQwM,EAAMxM,OACduO,gBAAiB/B,EAAM+B,gBACvBC,eAAgBhC,EAAMgC,eACtBC,WAAYjC,EAAMiC,WAClBC,SAAU,CACN/I,OAAQ6G,EAAMmC,kBACd7I,cAAeL,EAAkBM,UAAUyG,EAAMmC,mBACjDC,qBAAsBpC,EAAMqC,2BAC5BC,4BAA6BrJ,EAAkBM,UAAUyG,EAAMqC,6BAEnE3C,YAAa,CACTvG,OAAQoJ,EAAiBvC,EAAME,WAEnCsC,MAAOxC,EAAMwC,MACbC,SAAU,CACNtJ,OAAQ6G,EAAMyC,SACdnJ,cAAeL,EAAkBM,UAAUyG,EAAMyC,WAErDC,SAAU,CACNvJ,OAAQ6G,EAAM2C,kBACdrJ,cAAeL,EAAkBM,UAAUyG,EAAM2C,oBAErDC,WAAY,CACRzJ,OAAQ6G,EAAM6C,YACdvJ,cAAe0G,EAAM8C,uBAmBjC,SAASC,EAA2BvP,GAChC,MAAO,kBAAkBA,EAG7B,SAAS+O,EAAiBrC,GACtB,IAAMlH,EAAO,eAAKkH,EAAU,CAAEmB,WAAY,gBAE1C,OAAOrI,EAAOA,EAAKG,OAAS,EAqBhC,SAASuH,EAA0BR,EAA0BO,QAAA,IAAAA,MAAA,IACzD,IAAMzH,EAAO,eAAKkH,EAAU8C,GAE5B,OAAKhK,EAIE,CACH3D,GAAI2D,EAAKqI,WACT7N,OAAQuP,EAA2B/J,EAAKwI,OAAOyB,MAC/CC,SAAUlK,EAAKwI,OAAO2B,aACtBC,UAAW3C,EAAQ2C,WAPZ,GAWf,SAASJ,EAAsBvC,GAC3B,MAA8B,oBAAvBA,EAAQY,YAA2D,gBAAvBZ,EAAQY,WAG/D,SAASS,EAA4B9B,GACjC,IAAMqD,EAAiE,GAUvE,OATc,yBACPrD,EAAMM,UAAUgD,cAChBtD,EAAMM,UAAUiD,cAGjBtE,SAAQ,SAAAjG,GAOlB,IAAiCwK,EANzBH,EAAiBrK,EAAK3D,KAMGmO,EAN2BxK,EAO1C,CAAC,KAAM,KAAM,MAEdH,QAAO,SAACgJ,EAAYtB,GAC7B,IAAMvH,EAAOwK,EAASC,aAAe,eAAKD,EAASC,aAAa,SAAAzK,GAAQ,OAAAA,EAAKuH,OAASA,KAEtF,OAAKvH,GAIL6I,EAAWtB,GAAQ,CACfhR,KAAMiU,EAASjU,KACf+M,YAAakH,EAASjU,KACtBmU,MAAOF,EAAStK,SAChBd,IAAKY,EAAK2K,KACVC,UAAW5K,EAAK6K,KAChBC,YAAa9K,EAAK2K,KAClBI,YAAa/K,EAAKgL,QAClBC,YAAajL,EAAKuH,MAGfsB,GAdIA,IAeZ,QAzBIwB,I,6ECrII,SAASa,EAAkBC,GACtC,ICZ+CC,EACzCC,EDWA3L,EAAgByL,EAASG,KAAKlE,SAAS1H,cACvCO,EAAoB,IAAI,IAAkBP,GAEhD,MAAO,CACHrD,GAAI8O,EAASG,KAAKjP,GAClB8K,MAAO,YAAuBgE,EAASG,KAAKhE,UAAW5H,GACvD0H,SAAU+D,EAASG,KAAKlE,SAASG,KACjCM,OAAQ,CACJC,iBAAkB,iBAAOqD,EAASG,KAAKvD,SAAS,SAACC,EAAKH,GAClD,OAAOG,EAAMH,EAAOC,mBACrB,GACHC,QAASoD,EAASG,KAAKvD,QAAQhI,IAAI,MAEvCM,SAAU,CACNF,OAAQgL,EAASG,KAAK7I,eACtBnC,cAAeL,EAAkBM,UAAU4K,EAASG,KAAK7I,iBAE7D0F,uBC7B2CiD,ED6BOD,EAASC,WC5BzDC,EAAwC,IAE7CD,GAAc,IAAInF,SAAQ,SAAAsF,IACtBA,EAAUC,SAAW,IAAIvF,SAAQ,SAAAwF,GAC9BJ,EAAcK,KAAK,CACfC,aAAc,GACdC,aAAc,KACdhS,QAAS,GACTiS,YAAaJ,EAAOZ,aAKzBQ,GDgBHjD,gBAAiB,CACbE,sBAAuB,iBAAO6C,EAASW,kBAAkB,SAAC9D,EAAK+D,GAC3D,OAAO/D,EAAM+D,EAAYC,OAC1B,GACHzD,wBAAyB,gBAAM4C,EAASW,iBAAiB/L,IAAI,KAA+B,SAEhGmJ,SAAU,CACN/I,OAAQgL,EAAShC,kBACjB7I,cAAeL,EAAkBM,UAAU4K,EAAShC,mBACpDC,qBAAsB+B,EAAS9B,2BAC/BC,4BAA6BrJ,EAAkBM,UAAU4K,EAAS9B,4BAClE4C,SAAU,eAAKd,EAASG,KAAKhE,UAAUgD,eAAe,SAAAE,GAAY,OAAAA,EAAS0B,uBAE/EvE,SAAU,CACNxH,OAAQgL,EAASxD,SACjBrH,cAAeL,EAAkBM,UAAU4K,EAASxD,WAExDjB,YAAa,CACTvG,OAAQgL,EAAS9E,SAAW8E,EAAS9E,SAASK,YAAc,GAEhEyF,YAAa,CACThM,OAAQgL,EAAS1B,SACjBnJ,cAAeL,EAAkBM,UAAU4K,EAAS1B,WAExDD,MAAO2B,EAAS3B,MAChBC,SAAU,CACNtJ,OAAQgL,EAAS1B,SACjBnJ,cAAeL,EAAkBM,UAAU4K,EAAS1B,WAExDC,SAAU,CACNvJ,OAAQgL,EAASxB,kBACjBrJ,cAAeL,EAAkBM,UAAU4K,EAASxB,oBAExDC,WAAY,CACRzJ,OAAQgL,EAASvB,WACjBtJ,cAAeL,EAAkBM,UAAU4K,EAASvB,cArEhE,mC,gBEAA7T,EAAOD,QAAUkC,QAAQ,+B,6BCmCzB,IAAYoU,EAOAC,EAUAC,EAQAC,EAzBZ,6EAAYH,GACR,UACA,UACA,UACA,UAJJ,CAAYA,MAAiB,KAO7B,SAAYC,GACR,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAPJ,CAAYA,MAA0B,KAUtC,SAAYC,GACR,cACA,oBACA,cACA,sBACA,gBALJ,CAAYA,MAAmB,KAQ/B,SAAYC,GACR,WACA,WACA,WACA,WAJJ,CAAYA,MAAwB,M,6BC1DpC,YAKA,aACI,WACYC,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAsFhB,OAnFI,YAAAC,WAAA,sBACI,OAAOzN,KAAKuN,cACPG,WAAW,yDACX1O,MAAK,WACF,IAAK,EAAKwO,QAAQG,YAAc,EAAKH,QAAQG,UAAUC,OACnD,MAAM,IAAI,IAGd,OAAO,EAAKJ,QAAQG,UAAUC,WAI1C,YAAAC,QAAA,sBACI,OAAO7N,KAAKuN,cACPG,WAAW,iEACX1O,MAAK,WACF,IAAK,EAAKwO,QAAQG,YAAc,EAAKH,QAAQG,UAAUG,aACnD,MAAM,IAAI,IAGd,OAAO,EAAKN,QAAQG,UAAUG,iBAI1C,YAAAC,kBAAA,sBACI,OAAO/N,KAAKuN,cACPG,WAAW,iEACX1O,MAAK,WACF,IAAK,EAAKwO,QAAQG,YAAc,EAAKH,QAAQG,UAAUK,cACnD,MAAM,IAAI,IAGd,OAAO,EAAKR,QAAQG,UAAUK,kBAI1C,YAAAC,WAAA,sBACI,OAAOjO,KAAKuN,cACPG,WAAW,yDACX1O,MAAK,WACF,IAAK,EAAKwO,QAAQG,YAAc,EAAKH,QAAQG,UAAUO,OACnD,MAAM,IAAI,IAGd,OAAO,EAAKV,QAAQG,UAAUO,WAI1C,YAAAC,mBAAA,sBACI,OAAOnO,KAAKuN,cACPG,WAAW,kEACX1O,MAAK,WACF,IAAK,EAAKwO,QAAQG,YAAc,EAAKH,QAAQG,UAAUS,eACnD,MAAM,IAAI,IAGd,OAAO,EAAKZ,QAAQG,UAAUS,mBAI1C,YAAAC,iBAAA,sBACI,OAAOrO,KAAKuN,cACPG,WAAW,gEACX1O,MAAK,WACF,IAAK,EAAKwO,QAAQG,YAAc,EAAKH,QAAQG,UAAUW,aACnD,MAAM,IAAI,IAGd,OAAO,EAAKd,QAAQG,UAAUW,iBAI1C,YAAAC,kBAAA,sBACI,OAAOvO,KAAKuN,cACPG,WAAW,iEACX1O,MAAK,WACF,IAAK,EAAKwO,QAAQG,YAAc,EAAKH,QAAQG,UAAUa,cACnD,MAAM,IAAI,IAGd,OAAO,EAAKhB,QAAQG,UAAUa,kBAG9C,EAzFA,G,uDCFA,aAaI,WACYC,GAAA,KAAAA,yBAPJ,KAAAC,gBAGJ,GAgIR,OAzHI,YAAAC,WAAA,SAAWC,GACP5O,KAAK6O,aAAeD,GAGxB,YAAAE,UAAA,sBACI,IAAK9O,KAAK6O,aACN,MAAM,IAAI,IAAoB,IAAwBE,uBAQ1D,OALK/O,KAAKgP,UACNhP,KAAKgP,QAAUhP,KAAKyO,uBAAuBhB,aACtCzO,MAAK,SAAA4O,GAAU,OAAAA,EAAOvV,OAAO,CAAE4W,cAAe,EAAKJ,mBAGrD7O,KAAKgP,SAGhB,YAAAE,UAAA,WASI,OARKlP,KAAKmP,UACNnP,KAAKmP,QAAUC,QAAQC,IAAI,CACvBrP,KAAK8O,YACL9O,KAAKyO,uBAAuBR,eAE/BjP,MAAK,SAAC,G,IAAC4O,EAAA,KAAoB,OAAZ,KAAmBvV,OAAO,CAAEuV,OAAM,QAG/C5N,KAAKmP,SAGhB,YAAAG,kBAAA,WASI,OARKtP,KAAKuP,kBACNvP,KAAKuP,gBAAkBH,QAAQC,IAAI,CAC/BrP,KAAK8O,YACL9O,KAAKyO,uBAAuBN,uBAE3BnP,MAAK,SAAC,G,IAAC4O,EAAA,KAA4B,OAApB,KAAmCvV,OAAO,CAAEuV,OAAM,QAGnE5N,KAAKuP,iBAGhB,YAAAC,OAAA,WASI,OARKxP,KAAKyP,OACNzP,KAAKyP,KAAOL,QAAQC,IAAI,CACpBrP,KAAK8O,YACL9O,KAAKyO,uBAAuBZ,YAE/B7O,MAAK,SAAC,G,IAAC4O,EAAA,KAA0B,OAAlB,KAA+BvV,OAAO,CAAEuV,OAAM,QAG3D5N,KAAKyP,MAGhB,YAAAC,iBAAA,SAAiB9Q,GACb,IAAM+Q,EAAW/Q,GAAWA,EAAQsP,OAAS,SAAW,UACpD0B,EAAS5P,KAAK0O,gBAAgBiB,GAmBlC,OAjBKC,IACDA,EAASR,QAAQC,IAAI,CACjBrP,KAAK8O,YACL9O,KAAKyO,uBAAuBV,sBAE/B/O,MAAK,SAAC,G,IAAC4O,EAAA,KAA2B,OAAnB,KAAiCvV,OAAO,oBAAEuV,OAAM,EAAEiC,OAAO,GAASjR,OACjFU,OAAM,SAAAC,GACH,GAAIA,GAAwB,qCAAfA,EAAM+I,KACf,MAAO,CAAEwH,gBAAYlQ,EAAWmQ,SAAU,WAAM,OAAAX,QAAQY,YAG5D,MAAMzQ,KAGVS,KAAK0O,gBAAgBiB,GAAYC,GAG9BA,GAGX,YAAAK,gBAAA,WASI,OARKjQ,KAAKkQ,gBACNlQ,KAAKkQ,cAAgBd,QAAQC,IAAI,CAC7BrP,KAAK8O,YACL9O,KAAKyO,uBAAuBJ,qBAE/BrP,MAAK,SAAC,G,IAAC4O,EAAA,KAA0B,OAAlB,KAA+BvV,OAAO,CAAEuV,OAAM,QAG3D5N,KAAKkQ,eAGhB,YAAAC,0BAAA,WASI,OARKnQ,KAAKoQ,aACNpQ,KAAKoQ,WAAahB,QAAQC,IAAK,CAC3BrP,KAAK8O,YACL9O,KAAKyO,uBAAuBF,sBAE3BvP,MAAK,SAAC,G,IAAC4O,EAAA,KAAuB,OAAf,KAAyBvV,OAAO,CAAEuV,OAAM,QAGzD5N,KAAKoQ,YAGhB,YAAAL,SAAA,sBACI,OAAOX,QAAQC,IAAI,CACfrP,KAAKqQ,UAAUrQ,KAAKyP,MACpBzP,KAAKqQ,UAAUrQ,KAAK0O,gBAAgB4B,SACpCtQ,KAAKqQ,UAAUrQ,KAAK0O,gBAAgBR,QACpClO,KAAKqQ,UAAUrQ,KAAKkQ,eACpBlQ,KAAKqQ,UAAUrQ,KAAKoQ,cACrBpR,MAAK,WACJ,EAAKyQ,UAAO7P,EACZ,EAAKsQ,mBAAgBtQ,EACrB,EAAK8O,gBAAkB,GACvB,EAAK0B,gBAAaxQ,MAIlB,YAAAyQ,UAAR,SAAkBvZ,GACd,OAAOA,EACHA,EAAOkI,MAAK,SAAAuR,GAAO,OAAAA,EAAIR,cACvBX,QAAQY,WAEpB,EA1IA,G,oCCHA,IAEA,2BA+BA,OA9BI,YAAAQ,OAAA,SAAOxY,GACG,uCAAC,OAAAyY,OAAA,IAAQ,EAAR,KAAY,OAAAC,OAAA,IAAO,EAAP,KACbC,EAAeF,EAAMG,MAAM,EAAG,GAC9BC,EAA8B,IAAhBH,EAAKpT,OAAeoT,EAAKE,OAAO,GAAMF,EAAOA,EAAKE,MAAM,EAAG,GAAKH,EAAMG,MAAM,GAGhG,OAAI5Y,EAAMsF,OAAS,EACRmT,EAIPzY,EAAMsF,OAAS,IAAMuT,EACdF,EAGDA,EAAY,MAAwBE,GAGlD,YAAAC,SAAA,SAAS9Y,GACC,uCAAC,OAAAyY,OAAA,IAAQ,EAAR,KAAY,OAAAC,OAAA,IAAO,EAAP,KAEnB,MAAK,QAAQxL,KAAKuL,IAAW,QAAQvL,KAAKwL,GAInC,CACHD,MAAwB,IAAjBA,EAAMnT,OAAe,IAAImT,EAAUA,EAAMG,MAAM,EAAG,GACzDF,KAAsB,IAAhBA,EAAKpT,OAAe,KAAKoT,EAASA,EAAKE,MAAM,EAAG,IAL/C,CAAEH,MAAO,GAAIC,KAAM,KAQtC,EA/BA,G,oCCJA,mBAKA,2BA8BA,OA7BI,YAAAF,OAAA,SAAOxY,GACK,IAAA+Y,EAAA,oBAAAA,KAER,IAAKA,EACD,OAAO/Y,EAGX,IAAMgZ,EAAY,cAAI,yBAAehZ,GAAO8I,KAAI,SAAAmQ,GAAQ,qBAAIA,EAAKC,aAC3DC,EAAmBnR,KAAKoR,SAASpZ,GAAO4Y,MAAM,EAAGI,GAEvD,OAAOD,EAAKM,KACPrO,QAAO,SAAAsO,GAAY,OAAAH,EAAiB7T,OAASgU,KAC7C1Q,QAAO,SAAC2Q,EAAQD,EAAU9O,GAAU,MACjC,CACI+O,EAAOX,MAAM,EAAGU,EAAW9O,GAC3B+O,EAAOX,MAAMU,EAAW9O,IAC1BlC,KAnBO,OAoBV6Q,IAGX,YAAAC,SAAA,SAASpZ,GAGL,OAFQ,oBAAA+Y,KAMD/Y,EAAMwZ,QAAQ,IAAI3O,OA9BR,IA8BiC,KAAM,IAH7C7K,GAKnB,EA9BA,G,oCCFA,sCAAMyZ,EAAc,CAChB,oBACA,sBACA,qBACA,oBACA,iBAQW,SAASC,EAAoB9I,GACxC,MAAO,CACHN,KAAMM,EAAON,KACblH,SAAUwH,EAAO+I,YACjBhF,aAAc8E,EAAYjM,QAAQoD,EAAOgJ,e,mEClBrCC,E,gBAAZ,SAAYA,GACR,mEACA,uDACA,qDACA,uDACA,mEALJ,CAAYA,MAAuB,KAanC,kBACI,WACWzY,GADX,MAGI,YAOR,SAAyBC,GACrB,OAAQA,GACR,KAAKwY,EAAwBC,uBACzB,MAAO,oFAEX,KAAKD,EAAwB9C,sBACzB,MAAO,mFAEX,KAAK8C,EAAwBE,uBACzB,MAAO,oFAEX,KAAKF,EAAwBG,6BACzB,MAAO,mFAEX,QACI,MAAO,8EAtBD9X,CAAgBd,KAAS,K,OAFxB,EAAAA,UAIP,EAAK9B,KAAO,sBACZ,EAAK+B,KAAO,kB,EAEpB,OATiD,yBASjD,EATA,CAAiD,K,oCCfjD,oDAGe,SAAS4Y,EACpB5Y,EACAkG,EACAN,GAEA,OAOmBiT,EAPD3S,IAQD2S,EAAO7Y,MAAQ6Y,EAAO3S,MAP5B,iBAAO,aAAGA,GAAQ,qBAAW,4BAAkBlG,EAAMkG,EAAM4S,QAASlT,KAGxE,qBAAW,4BAAkB5F,EAAMkG,EAAON,IAGrD,IAAuBiT,I,8DCVR,SAASE,EACpBC,GAgBA,OAAO,mBAdP,W,IAAgC,sDAC5B,IAAMH,EAASG,EAAGnb,KAAI,MAAPmb,EAAE,0BAAMrS,MAASkG,IAEhC,OAAIgM,aAAkB,aACX,eAAKA,GAAQI,KAAK,yBAGP,mBAAXJ,EACA,mBAAQ,SAAAK,GAAS,sBAAKL,EAAOK,IAAQD,KAAK,4BAG9CJ,KCjBA,SAASM,EAAgBC,GACpC,OAAOA,GAAmC,kBAAnBA,EAAMC,SCAlB,SAASC,EACpBnM,EACAlO,EACAmO,GAEA,IAAMmM,EAAkB,IAAIC,QAE5B,SAASC,EAA6BpM,GAAtC,WACI,OAAO,W,UAAE,kDACL,IAAMqM,EAAU7M,EAAKA,EAAK5I,OAAS,GAC3BoV,GAAA,QAAAA,UAAA,IAAAA,SAER,IAAKA,EACD,OAAOhM,EAAOxP,KAAI,MAAXwP,EAAM,0BAAM,GAASR,IAGhC,IAAM8M,EAAkBJ,EAAgBhb,IAAI,IAAS,GAUrD,OARKgb,EAAgBhb,IAAI,IACrBgb,EAAgBhM,IAAI,EAAMoM,GAGzBA,EAAgB1a,KACjB0a,EAAgB1a,GAAO8Z,EAAY1L,KAGhC,EAAAsM,EAAgB1a,IAAKpB,KAAI,kCAAC,GAASgP,KAIlD,MAAO,CACHtO,IAAG,WACC,GAAgC,mBAArB6O,EAAWzO,MAClB,MAAM,IAAI8C,MAAM,yCAGpB,IAAM9C,EAAQ8a,EAAe5b,KAAK8I,KAAMyG,EAAWzO,OAInD,OAFAP,OAAOC,eAAesI,KAAM1H,EAAK,yCAAKmO,GAAU,CAAEzO,MAAK,KAEhDA,I,0FCrCJ,SAASib,EACpBC,EACAC,GAEA,YAFA,IAAAA,MAAA,IAEO7Q,MAAMC,QAAQ4Q,GACjB,YAAa,yBACND,EACAC,ICLA,SACXD,EACAE,GAEA,IAAMC,EAAY,eAAK,iBAAOD,GAAoB,SAAAE,GAAM,OAACA,MACnDC,EAAY,eAAK,iBAAOH,IAE9B,OAAO,YAAa,yBACT,qBAAWF,EAAcG,GACzBE,IDFPC,CAAcN,EAAcC,G,4DEfpCrc,EAAOD,QAAUkC,QAAQ,mB,cCAzBjC,EAAOD,QAAUkC,QAAQ,kD,6BCAzB,6CAEe,SAAS0a,EAAShb,EAAaib,GAC1C,OAAIpR,MAAMC,QAAQ9J,GACPA,EAAOqI,KAAI,SAAA9I,GAAS,OAAAyb,EAASzb,EAAO0b,MAG3C,wBAAcjb,GACP,oBAAU,iBAAOA,EAAQib,IAAY,SAAC7S,EAAQ7I,EAAOM,GACxDuI,EAAOvI,GAAOmb,EAASzb,EAAO0b,KAC/B,IAGAjb,I,sFCCX,aACI,WACYkb,EACAC,GADA,KAAAD,yBACA,KAAAC,uBA0EhB,OAvEI,YAAAC,aAAA,SAAazW,EAAYwB,GAAzB,WACI,OAAO,iBACH,aAAG,uBAAa,IAAmBkV,wBACnC,gBACI9T,KAAK4T,qBAAqBG,WAAW,yCAAKnV,GAAO,CAAE8T,UAAU,KAC7D,iBAAM,WAAM,SAAKiB,uBAAuBE,aAAazW,EAAIwB,GACpDI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KAAW,8BAAa,IAAmB2Y,sBAAuB3Y,WAErFiX,KACE,sBAAW,SAAA/S,GAAS,mBAAiB,IAAmB0U,mBAAoB1U,QAIpF,YAAA2U,oBAAA,SAAoBtV,GAApB,WACI,OAAO,SAAA2T,GAAS,wBACZ,aAAG,uBAAa,IAAmBuB,wBACnC,EAAKF,qBAAqBG,aAC1B,iBAAM,kE,gFAIF,GAHMI,EAAQ5B,EAAM6B,aACdC,EAAUF,EAAMG,OAAOC,sBAEZF,EAAQG,WACrB,MAAM,IAAI,IAAiB,IAAqB9a,uBAGnC,SAAMsG,KAAK2T,uBAAuBE,aAAaQ,EAAQG,WAAY5V,I,OAEpF,OAFQvD,EAAS,SAA2E,KAErF,CAAP,EAAO,uBAAa,IAAmB2Y,sBAAuB3Y,eAEpEiX,KACE,sBAAW,SAAA/S,GAAS,mBAAiB,IAAmB0U,mBAAoB1U,SAIpF,YAAAkV,eAAA,SACIpZ,EACAuD,GAFJ,WAII,OAAO,SAAA2T,GAAS,WAAI,cAAW,SAAA1T,GAC3B,IACMqN,EADQqG,EAAM6B,WACGlI,SAASwI,cAEhC,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpDoF,EAASC,KAAK,uBAAa,IAAmB6V,0BAE9C,EAAKhB,uBAAuBc,eAAevI,EAAS9O,GAAI/B,EAAMuD,GACzDI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAmB8V,wBAAyBvZ,IACvEwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAmBsV,qBAAsBrZ,YAK1F,YAAAsZ,oBAAA,SAAoBlW,GAApB,WACI,OAAO,SAAA2T,GACH,IACMrG,EADQqG,EAAM6B,WACGlI,SAASwI,cAEhC,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,OAAO,EAAKoa,aAAa3H,EAAS9O,GAAIwB,KAGlD,EA7EA,G,oGCAA,aACI,WACYmW,EACApB,GADA,KAAAoB,4BACA,KAAApB,yBA0VhB,OAvVI,YAAAqB,uBAAA,SACIC,EACArW,GAFJ,WAII,OAAO,SAAA2T,GACH,IAAM4B,EAAQ5B,EAAM6B,WAGpB,IAFiBD,EAAMjI,SAASwI,cAG5B,MAAM,IAAI,IAAiB,IAAqBjb,iBAGpD,IAAMyb,EAAsBf,EAAMjX,aAAaiY,wBAAwBF,EAAYG,iBAEnF,IAAKF,EACD,MAAM,IAAI,IAAqB,kDAGnC,IAAM7M,EAAY,EAAKgN,iBACnBJ,EAAY5M,UACZ6M,EACAf,EAAM9H,KAAKiJ,WAGf,OAAKjN,EAAU/K,OAIR,EAAKiY,kBAAkB,CAC1BnY,GAAI8X,EAAoB9X,GACxBgY,gBAAiBH,EAAYG,gBAC7B/M,UAAS,GACVzJ,EAJI,CAIK2T,GAPD,EAAKiD,kBAAkBN,EAAoB9X,GAAIwB,EAA/C,CAAwD2T,KAW3E,YAAAkD,qBAAA,SACIR,EACArW,GAFJ,WAII,OAAO,SAAA2T,GACH,IAAM4B,EAAQ5B,EAAM6B,WACdc,EAAsBf,EAAMjX,aAAaiY,wBAAwBF,EAAYG,iBAEnF,OAAO,EAAKM,2BAA2B,CACnCtY,GAAI8X,GAAuBA,EAAoB9X,GAC/CgY,gBAAiBH,EAAYG,gBAC7B/M,UAAW,EAAKsN,cACZV,EAAY5M,UACZ6M,EACAf,EAAM9H,KAAKiJ,YAEhB1W,EARI,CAQK2T,KAIpB,YAAAqD,qBAAA,SACIxY,EACAwB,GAFJ,WAII,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMsV,EAAQ5B,EAAM6B,WACdlI,EAAWiI,EAAMjI,SAASwI,cAC1BxX,EAAeiX,EAAMjX,aAAa2Y,kBAExC,IAAK3J,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,IAAKyD,IAAiBA,EAAaI,OAC/B,MAAM,IAAI,IAAiB,IAAqB9D,qBAGpD,IAAMsc,EAAwB,CAC1B1Y,GAAIF,EAAa,GAAGE,GACpB2Y,iBAAkB3Y,GAGhB4Y,EAAkB,CACpB5Y,GAAIF,EAAa,GAAGE,IAGxByB,EAASC,KAAK,uBAAa,IAAsBmX,mCAA+BrW,EAAWoW,IAE3F,EAAKjB,0BAA0BQ,kBAAkBrJ,EAAS9O,GAAI0Y,EAAuBlX,GAChFI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBACV,IAAsBoX,8BACtB7a,EACA2a,IAGJnX,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BACX,IAAsB4W,2BACtB3a,EACAwa,YAMpB,YAAAI,oBAAA,SAAoBxX,GAApB,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMqN,EAAWqG,EAAM6B,WAAWlI,SAASwI,cAE3C,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpDoF,EAASC,KAAK,uBAAa,IAAsBuX,+BAEjD,EAAK1C,uBAAuBE,aAAa3H,EAAS9O,GAAI,yCAC/CwB,GAAO,CACV0X,OAAQ,CACJC,QAAS,CAAC,IAAiBC,8BAGlCxX,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAsB2X,6BAA8Bpb,IAC/EwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAsBmX,0BAA2Blb,YAK9F,YAAAmb,cAAA,SACI1Z,EACA2B,GAFJ,WAII,OAAO,SAAA2T,GACH,IAAM0C,EAAc,EAAK2B,2BAA2B3Z,EAASsV,GACvDrV,EAAeqV,EAAM6B,WAAWlX,aAAa2Y,kBAMnD,OAJI3Y,GAAgBA,EAAaI,SAC5B2X,EAA6C7X,GAAKF,EAAa,GAAGE,IAGhE,EAAKsY,2BAA2BT,EAAarW,EAA7C,CAAsD2T,KAIrE,YAAAsE,mBAAA,SACI3Z,EACA0B,GAFJ,WAII,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMqN,EAAWqG,EAAM6B,WAAWlI,SAASwI,cAE3C,IAAKxI,IAAaA,EAAS9O,GACvB,MAAM,IAAI,IAAiB,IAAqB3D,iBAGpDoF,EAASC,KAAK,uBAAa,IAAsBgY,8BAEjD,EAAK/B,0BAA0B8B,mBAAmB3K,EAAS9O,GAAIF,EAAc0B,GACxEI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAsBiY,4BAA6B1b,IAC9EwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAsByX,yBAA0Bxb,YAKjG,YAAA+Z,kBAAA,SACIN,EACArW,GAFJ,WAII,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMqN,EAAWqG,EAAM6B,WAAWlI,SAASwI,cAE3C,IAAKxI,IAAaA,EAAS9O,GACvB,MAAM,IAAI,IAAiB,IAAqB3D,iBAGpD,IAAMuc,EAAkB,CAAE5Y,GAAI6X,EAAY7X,IAE1CyB,EAASC,KAAK,uBAAa,IAAsBmY,gCAA4BrX,EAAWoW,IAExF,EAAKjB,0BAA0BQ,kBAAkBrJ,EAAS9O,GAAI6X,EAAarW,GACtEI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAsBoY,2BAA4B7b,EAAM2a,IACnFnX,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAsB4X,wBAAyB3b,EAAUwa,YAK1G,YAAAR,kBAAA,SACI4B,EACAxY,GAFJ,WAII,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMqN,EAAWqG,EAAM6B,WAAWlI,SAASwI,cACrCsB,EAAkB,CAAE5Y,GAAIga,GAE9B,IAAKlL,IAAaA,EAAS9O,GACvB,MAAM,IAAI,IAAiB,IAAqB3D,iBAGpDoF,EAASC,KAAK,uBAAa,IAAsBuY,gCAA4BzX,EAAWoW,IAExF,EAAKjB,0BAA0BS,kBAAkBtJ,EAAS9O,GAAIga,EAAexY,GACxEI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAsBwY,2BAA4Bjc,EAAM2a,IACnFnX,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAsBgY,wBAAyB/b,EAAUwa,YAK1G,YAAAwB,qBAAA,SACIvC,EACArW,GAFJ,WAII,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMqN,EAAWqG,EAAM6B,WAAWlI,SAASwI,cAE3C,IAAKxI,IAAaA,EAAS9O,GACvB,MAAM,IAAI,IAAiB,IAAqB3D,iBAGpD,IAAMuc,EAAkB,CAAE5Y,GAAI6X,EAAY7X,IAE1CyB,EAASC,KAAK,uBAAa,IAAsBmX,mCAA+BrW,EAAWoW,IAE3F,EAAKjB,0BAA0BQ,kBAAkBrJ,EAAS9O,GAAI6X,EAAarW,GACtEI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAsBoX,8BAA+B7a,EAAM2a,IACtFnX,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAsB4W,2BAA4B3a,EAAUwa,YAKrG,YAAAN,2BAAR,SACIT,EACArW,GAFJ,WAII,OAAO,SAAA2T,GACH,IAAMrG,EAAWqG,EAAM6B,WAAWlI,SAASwI,cAE3C,IAAKxI,IAAaA,EAAS9O,GACvB,MAAM,IAAI,IAAiB,IAAqB3D,iBAGpD,OAAI,EAAKge,4BAA4BxC,GAC1B,EAAKM,kBAAkBN,EAAarW,EAApC,CAA6C2T,GAGjD,EAAKsE,mBAAmB,CAAC5B,GAAcrW,EAAvC,CAAgD2T,KAIvD,YAAAqE,2BAAR,SACIxB,EACA7C,GAEA,IACMlG,EADQkG,EAAM6B,WACD/H,KAAKiJ,UAExB,IAAKjJ,EACD,MAAM,IAAI,IAAiB,IAAqB9S,aAGpD,MAAO,CACH6b,gBAAe,EACf/M,WAAYgE,EAAKhE,WAAagE,EAAKhE,UAAUgD,eAAiB,IACzDvK,KAAI,SAAAC,GAAQ,OACT2W,OAAQ3W,EAAK3D,GACbuE,SAAUZ,EAAKY,eAMvB,YAAA0T,iBAAR,SACIhN,EACA4M,EACA5I,GAEA,IAAKA,EACD,MAAM,IAAI,IAAiB,IAAqB9S,aAGpD,OAAOyG,KAAK2X,kBAAkB1C,EAAY2C,YAAavL,GAAMvL,KAAI,SAAA+W,GAC7D,IAAMC,EAAa,eAAKzP,GAAW,SAAAkD,GAAY,OAAAA,EAASmM,SAAWG,EAAaH,UAEhF,OAAO,yCACAG,GAAY,CACflW,SAAUmW,EAAcD,EAAalW,SAAWmW,EAAWnW,SAAYkW,EAAalW,cAEzFqB,QAAO,SAAAuI,GAAY,OAAAA,EAAS5J,SAAW,MAGtC,YAAAgU,cAAR,SACItN,EACA4M,EACA5I,GAEA,IAAK4I,EACD,OAAO5M,EAGX,IAAKgE,EACD,MAAM,IAAI,IAAiB,IAAqB9S,aAGpD,OAAO8O,EACF0P,OAAO/X,KAAK2X,kBAAkB1C,EAAY2C,YAAavL,IACvDrJ,QAAO,SAAAuI,GAAY,OAAAA,EAAS5J,SAAW,MAGxC,YAAAgW,kBAAR,SAA0BC,EAAuBvL,GAC7C,OAAOuL,EAAY9W,KAAI,SAAA4W,GACnB,IAAM3W,EAAO,eAAKsL,EAAKhE,UAAUgD,eAAe,SAAAE,GAAY,OAAAA,EAASnO,KAAOsa,KAE5E,MAAO,CACHA,OAAM,EACN/V,SAAUZ,EAAOA,EAAKY,SAAW,OAKrC,YAAA8V,4BAAR,SACIO,GAIA,QAFsBA,EAEC5a,IAE/B,EA7VA,G,wECPM6a,EAAmB,CACjB,wCACA,uCACA,sCACA,WACA,sBAGR,aACI,WACYvZ,GAAA,KAAAA,iBAmDhB,OAhDI,YAAAmY,mBAAA,SACIrC,EACAtX,EACA,G,IAAA,kBAAE6C,EAAA,EAAAA,QAAS,IAAAuW,OAAUC,QAAA,YAAAA,QAEfpW,EAAM,6BAA6BqU,EAAU,gBAC7ClZ,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAewZ,KAAK/X,EAAK,CACjC9E,KAAM6B,EACNoZ,OAAQ,CACJC,QAAS,YAAoB0B,EAAkB1B,IAEnDjb,QAAO,EACPyE,QAAO,KAIf,YAAAwV,kBAAA,SACIf,EACAS,EACA,G,IAAA,kBAAElV,EAAA,EAAAA,QAAS,IAAAuW,OAAUC,QAAA,YAAAA,QAEbnZ,EAAA,EAAAA,GAAI,6BACN+C,EAAM,6BAA6BqU,EAAU,iBAAiBpX,EAC9D9B,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAeyZ,IAAIhY,EAAK,CAChC9E,KAAI,EACJib,OAAQ,CACJC,QAAS,YAAoB0B,EAAkB1B,IAEnDjb,QAAO,EACPyE,QAAO,KAIf,YAAAyV,kBAAA,SACIhB,EACA4C,EACA,G,IAAErX,QAAA,YAAAA,QAEII,EAAM,6BAA6BqU,EAAU,iBAAiB4C,EAC9D9b,EAAU,CAAE2E,OAAQ,IAAYC,QAChCqW,EAAU,YAAa0B,GAE7B,OAAOjY,KAAKtB,eAAe0Z,OAAOjY,EAAK,CAAEmW,OAAQ,CAAEC,QAAO,GAAIjb,QAAO,EAAEyE,QAAO,KAEtF,EArDA,G,oCCfe,SAASsY,EAAe1S,GACnC,OAAU2S,OAAOC,SAAS5S,OAAM,wFAAwFA,EAD5H,mC,uHCiBA,0BACY,KAAA6S,qBAAuB,IAAI,IAC3B,KAAAC,qBAAuB,IAAI,IAkHvC,OAhHI,YAAAC,UAAA,SAAUlQ,EAAkBmQ,GACxB,IAAMtR,EAAiBsR,EAActR,eAAeuR,oBAC9C1M,EAAWyM,EAAczM,SAASwI,cAClCtN,EAAWuR,EAAcvR,SAASyR,cAClC9Q,EAAQ4Q,EAAc5Q,MAAM+Q,WAC5BC,EAAgBJ,EAAcK,eAAeC,iBAAiBzQ,EAAQ9I,SAAU8I,EAAQ0Q,WACxF9D,EAAkBuD,EAAcvD,gBAAgB+D,qBAChDjc,EAAeyb,EAAczb,aAAa2Y,kBAC1CuD,EAAiBT,EAAczb,aAAamc,oBAC5CC,EAAcX,EAAcrE,OAAOiF,iBACnCC,EAAgBb,EAAcrE,OAAOC,mBACrCkF,EAAiBd,EAAce,YAAYC,qBAC3CC,EAAcjB,EAAcK,eAAea,wBAC3C7R,EAAY2Q,EAAc5Q,MAAM+R,eAChCC,EAAmB3S,GAAYC,GAAkB,YAAsBD,EAAUC,GAEjF2S,EAAYP,GAAkBjR,EAAQyR,cACvC,YAAoBzR,EAAQyR,cAAgB,YAA6BzR,EAAQyR,cAC/EtB,EAAcnQ,QAAQ0R,kBAAiB,KAAKT,EAAeU,iBAC9DxB,EAAcnQ,QAAQ0R,kBAE1B,IAAKF,EACD,MAAM,IAAI,IAAiB,IAAqBjgB,qBAGpD,MAAO,CACHigB,UAAS,EACTjB,cAAeA,GAAiB/Y,KAAKoa,wBAAwBrB,GAC7D3R,SAAU2S,EACV1S,eAAgBA,GAAkB,YAAqBA,GACvD+N,gBAAiBA,GAAmB,YAAqBA,EAAiBlY,GAC1Ekc,eAAgBA,GAAkB,YAA4BA,GAAgB,GAC9E/M,KAAMH,GAAY,YAAkBA,GACpCnE,MAAOA,GAAS,YAAmBA,EAAOC,GAC1CA,UAAS,EACTQ,QAASA,EAAQyR,YACjBI,UAAW,CACPrC,QAAS,yCACF4B,GAAW,CACdU,eAAgBd,GAAiBA,EAAcc,kBAGvDC,OAAQ,8BACRhI,MAAO,eAAK+G,GAAeA,EAAYkB,aAAc,CACjD,YACA,UACA,gBACA,gBAKZ,YAAAC,4BAAA,SAA4BC,EAA2BC,GAC3C,IAAAX,EAAA,EAAAA,UAAW9N,EAAA,EAAAA,SAAUoI,EAAA,EAAAA,OAAQvM,EAAA,EAAAA,MAAOC,EAAA,EAAAA,UAAW,IAAAQ,eAAA,IAAU,EAAV,KAAcuQ,EAAA,EAAAA,cAAe6B,EAAA,EAAAA,kBAC9E3F,EAAc/I,GAAYA,EAAShP,aAAa,GAChDkY,EAAkBH,GAAeA,EAAYG,gBAC7CgE,EAAiBnE,GAAeA,EAAY4F,uBAElD,MAAO,CACHb,UAAS,EACTjB,cAAeA,GAAiB/Y,KAAKoa,wBAAwBrB,GAC7D3R,SAAUW,GAASA,EAAMV,gBAAkB6E,GAAY,YAAsBA,EAAS9E,SAAUW,EAAMV,gBACtGA,eAAgBU,GAASA,EAAMV,gBAAkB,YAAqBU,EAAMV,gBAC5E+N,gBAAiBA,GAAmBlJ,GAAY,YAAqBkJ,EAAiBlJ,EAAShP,cAC/Fkc,eAAgBA,GAAkB,YAA4BA,GAAgB,GAC9E/M,KAAMH,GAAY,YAAkBA,GACpCnE,MAAOA,GAAS,YAAmBA,EAAOC,GAC1CA,UAAS,EACTQ,QAASxI,KAAK8a,4BAA4BJ,EAAQlS,GAClD6R,UAAW,CACPrC,QAAS,yCACF4C,GAAiB,CACpBN,eAAgBhG,GAAUA,EAAOD,QAAQiG,kBAGjDC,OAAQ,8BACRhI,MAAO+B,GAAU,eAAKA,EAAOgF,YAAYkB,aAAc,CACnD,YACA,UACA,gBACA,gBAKJ,YAAAJ,wBAAR,SAAgCrB,GAC5B,MAA6B,iBAAzBA,EAAcrS,QAA8BqS,EAAcgC,QAI1DhC,EAAciC,oBAAsBjC,EAAciC,mBAAmBD,QAC9D,yCAAKhC,GAAa,CAAE3b,GAAI2b,EAAciC,mBAAmBD,UAG7DhC,EAPI,yCAAKA,GAAa,CAAEgC,QAAShC,EAAc3b,MAUlD,YAAA0d,4BAAR,SAAoCJ,EAA2BlS,GAC3D,MAAO,iBAAkBA,EAAS,yCAEvBA,GAAO,CACVyS,MAAOP,EAAOQ,qBACdC,SAAUT,EAAOU,wBAA0Bpb,KAAKyY,qBAAqBrH,SAASsJ,EAAOU,0BACtF,yCAEI5S,GAAO,CACVyS,MAAOP,EAAOW,SACdC,SAAUtb,KAAKwY,qBAAqB1H,SAAS4J,EAAOa,YAAc,IAClEC,OAAQd,EAAOe,UAAY,GAC3BN,SAAUnb,KAAKyY,qBAAqBrH,SAASsJ,EAAOgB,YAAc,OAGlF,EApHA,G,oCCVA,iBAKI,WACY1M,GAAA,KAAAA,UA6BhB,OA1BI,YAAA2M,cAAA,SAAcxJ,GAAd,WACI,OAAO,IAAI/C,SAAQ,SAACY,EAAS4L,GACzB,EAAK5M,QAAQ2M,cAAcxJ,GAAS,SAAC5S,EAAY/D,GACzC+D,EACAqc,EAAO,EAAKC,mBAAmBtc,IAE/ByQ,EAAQ,EAAK6L,mBAAmBrgB,WAMhD,YAAAsgB,yBAAA,SAAyB3J,GAAzB,WACI,OAAO,IAAI/C,SAAQ,WACf,EAAKJ,QAAQ8M,yBAAyB3J,OAItC,YAAA0J,mBAAR,SAA2BrgB,GACvB,MAAO,CACHF,QAASE,EAASF,QAClBD,KAAMG,EAASmf,KACfpf,OAAQC,EAASD,OACjBwgB,WAAYvgB,EAASugB,aAGjC,EAnCA,G,oCCPe,SAASC,EAAU1jB,GAC9B,OAAkC,KAA3B,GAAGA,GAAMkN,QAAQ,OAAyC,KAA1B,GAAGlN,GAAMkN,QAAQ,KAD5D,mC,6BCEA,IAAYyW,EAAZ,2CAAYA,GACR,qCADJ,CAAYA,MAAwB,M,kECMpC,YACI,WAAYzgB,EAAoBb,GAAhC,MACI,YAAMa,EAAU,CACZb,QAASA,GAAW,yFACtB,K,OAEF,EAAKrD,KAAO,qBACZ,EAAK+B,KAAO,gB,EAEpB,OATgD,yBAShD,EATA,CAAgD,K,OCahD,SAAS6iB,EAAWzgB,GAChB,OAAOA,EAAOmF,QAAO,SAACC,EAAkBtB,GACpC,OAAIA,EACO,yBAAIsB,EAAQ,CAAAtB,IAGhBsB,IACR,IAAIP,KAAK,K,wBCtBhB,WAGI,aAFQ,KAAA6b,gBAAyD,GAG7Dnc,KAAKoc,SAAS,WAAW,SAAC5gB,EAAUb,GAAY,WAAI,IAAaa,EAAU,CAAEb,QAAO,OACpFqF,KAAKoc,SAAS,YAAY,SAAC5gB,EAAUb,GAAY,ODL1C,SACXa,EACAb,GAEQ,IAAAU,EAAA,EAAAA,KACA,IAAAI,cAAA,IAAS,EAAT,KAER,OAAO,IAAI,IAAaD,EAAU,CAC9Bb,QAASuhB,EAAWzgB,IAAWJ,EAAKkO,QAAUlO,EAAKghB,OAAS1hB,EAC5Dc,OAAQA,EAAO6B,OACX7B,EAAOqF,KAAI,SAAAnG,GAAW,OAAG2N,KAAMjN,EAAKhC,KAAMsB,QAAO,MACjD,CAAC,CAAE2N,KAAMjN,EAAKhC,KAAMsB,QAASU,EAAKkO,QAAUlO,EAAKghB,UCNJC,CAA6B9gB,EAAUb,MACxFqF,KAAKoc,SAAS,cAAc,SAAC5gB,EAAUb,GAAY,OCN5C,SACXa,EACAb,GAEQ,IAAAU,EAAA,EAAAA,KAER,OAAO,IAAI,IAAaG,EAAU,CAC9Bb,QAASA,GAAWU,EAAKkO,QAAUlO,EAAKghB,MACxC5gB,OAAQ,CAAC,CACL6M,KAAMjN,EAAKiN,MAAQjN,EAAKhC,KACxBsB,QAASU,EAAKkO,QAAUlO,EAAKghB,UDJkBE,CAA+B/gB,EAAUb,MAC5FqF,KAAKoc,SAAS,WAAW,SAAC5gB,EAAUb,GAAY,mBAA4Ba,EAAUb,MACtFqF,KAAKoc,SAAS,WAAW,SAAA5gB,GAAY,WAAI,IAAaA,MA6D9D,OA1DI,YAAA4gB,SAAA,SAAS/iB,EAAcmjB,GACnBxc,KAAKmc,gBAAgB9iB,GAAQmjB,GAGjC,YAAAC,YAAA,SAAYjhB,EAAoBb,GAG5B,OAFsBqF,KAAKmc,gBAAgBnc,KAAK0c,SAASlhB,KAAcwE,KAAKmc,gBAAgB7L,SAEvE9U,EAAUb,IAG3B,YAAA+hB,SAAR,SAAiBlhB,GACb,GAAwB,IAApBA,EAASD,OACT,MAAO,UAGX,GAAIyE,KAAK2c,+BAA+BnhB,EAASH,MAC7C,MAAO,aAGX,GAAI2E,KAAK4c,6BAA6BphB,EAASH,MAAO,CAClD,IAAMwhB,EAAe,eAAKrhB,EAASH,KAAKhC,KAAKyjB,MAAM,MAEnD,OAAOD,GAAgB7c,KAAKmc,gBAAgBU,GACxCA,EACA,WAGR,IAAMtd,EAAQ,eAAK/D,EAASH,MAAQG,EAASH,KAAKI,QAElD,OAAI8D,GAASA,EAAM+I,MAAQtI,KAAKmc,gBAAgB5c,EAAM+I,MAC3C/I,EAAM+I,KAGV,WAGH,YAAAqU,+BAAR,SACII,GAEA,IAAMC,EAA0BD,EAEhC,OAAQ/c,KAAK4c,6BAA6BG,IACG,iBAAlCC,EAAwBX,OACS,iBAAjCW,EAAwB3jB,MACW,iBAAnC2jB,EAAwBzhB,QACW,iBAAnCyhB,EAAwBzT,QAG/B,YAAAqT,6BAAR,SACIG,GAEA,IAAME,EAAwBF,EAE9B,MAA+C,iBAAjCE,EAAsBxhB,QACO,iBAAhCwhB,EAAsBZ,OACS,iBAA/BY,EAAsB5jB,MACW,iBAAjC4jB,EAAsB1hB,QAEzC,EArEA,G,gDEAe,SAAS2hB,EACpB/I,EACAjC,GAEA,OAOJ,SAA4BA,GACxB,OAAOA,EAAO7Y,OAAS,IAAgB8jB,WARnCC,CAAmBlL,GACZ,YAASiC,GAAO,SAAAnc,GAAS,OAAAA,IAAUka,EAAOC,WAG9CgC,E,YCRI,SAAS3C,EAAW6L,EAAiBC,GAChD,YAAiB1d,IAAb0d,GAA0B,YAAQD,EAAcC,GACzCD,EAGJC,ECLI,SAASC,EACpB9kB,EACAH,EACAN,G,MAEA,OAAIS,GAAUA,EAAOG,eAAeN,IAAQ,YAAQG,EAAOH,GAAMN,GACtDS,EAGJ,yCACAA,KAAa,MACfH,GAAMN,EAAK,I,oBCGPwlB,EAAqC,CAC9C/hB,OAAQ,GACRgiB,SAAU,ICXC,SAASC,EACpBvJ,EACAjC,GAQA,YATA,IAAAiC,MAAA,GAGgB,0BAAqC,CACjDwG,KAAMgD,EACNliB,OAAQ,0BAAgBmiB,EAAeV,GACvCO,SAAUI,GAGPC,CAAQ3J,EAAOjC,GAG1B,SAASyL,EACLhD,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,IAAyB0kB,8BAC9B,KAAK,IAAyBC,yBAC9B,KAAK,IAAmBhK,sBACxB,KAAK,IAAgBiK,mBACjB,OAAOzM,EAAQmJ,EAAMzI,EAAOC,SAAWD,EAAOC,QAAQ9K,gBAE1D,QACI,OAAOsT,GAIf,SAASiD,EACLniB,EACAyW,GAEA,YAHA,IAAAzW,MAAoC+hB,EAAc/hB,QAG1CyW,EAAO7Y,MACf,KAAK,IAAmBya,sBACxB,KAAK,IAAmBE,sBACpB,OAAOuJ,EAAU9hB,EAAQ,iBAAamE,GAE1C,KAAK,IAAmBqU,mBACpB,OAAOsJ,EAAU9hB,EAAQ,YAAayW,EAAOC,SAEjD,KAAK,IAAyB+L,8BAC9B,KAAK,IAAyBH,8BAC1B,OAAOR,EAAU9hB,EAAQ,mBAAemE,GAE5C,KAAK,IAAyBue,2BAC1B,OAAOZ,EAAU9hB,EAAQ,cAAeyW,EAAOC,SAEnD,KAAK,IAAyBiM,yBAC9B,KAAK,IAAyBJ,yBAC1B,OAAOT,EAAU9hB,EAAQ,4BAAwBmE,GAErD,KAAK,IAAyBye,sBAC1B,OAAOd,EAAU9hB,EAAQ,uBAAwByW,EAAOC,SAE5D,QACI,OAAO1W,GAIf,SAASoiB,EACLJ,EACAvL,GAEA,YAHA,IAAAuL,MAAwCD,EAAcC,UAG9CvL,EAAO7Y,MACf,KAAK,IAAmBya,sBACpB,OAAOyJ,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAmBzJ,sBACxB,KAAK,IAAmBC,mBACpB,OAAOsJ,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAyBS,8BAC1B,OAAOX,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAyBU,2BAC9B,KAAK,IAAyBJ,8BAC1B,OAAOR,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAyBW,yBAC1B,OAAOb,EAAUE,EAAU,uBAAuB,GAEtD,KAAK,IAAyBY,sBAC9B,KAAK,IAAyBL,yBAC1B,OAAOT,EAAUE,EAAU,uBAAuB,GAEtD,QACI,OAAOA,G,YCPA,MA9Ef,SAASa,EAAgBC,EAAoBC,EAAgB5f,GACjD,cAAA6f,mBAAA,IAAc,EAAd,mDAGR,IAAKF,EACD,OAAOC,EAMX,IAAKA,GAAYD,IAAiBC,EAC9B,OAAOD,EAMX,IAAIG,EAAqB,EACrBC,EAAiB,EAEfC,EAAsB,SAAIC,EAAkBxB,EAAiBC,GAI/D,OAHAoB,GAAsBG,IAAkBxB,EAAe,EAAI,EAC3DsB,GAAkBE,IAAkBvB,EAAW,EAAI,EAE5CuB,GAGLhe,EAAS2d,EAAS1d,KAAI,SAACge,EAAStc,GAClC,IAAMuc,EAAcR,GAAgBA,EAAa/b,GAEjD,OAAI,YAAcuc,IAAgB,YAAcD,GACxCL,EAAYM,EAAaD,GAClBF,EACH,EAAYG,EAAaD,GACzBC,EACAD,GAIDF,EACHpN,EAAQuN,EAAaD,GACrBC,EACAD,GAIJ,kBAAQC,IAAgB,kBAAQD,GACzBF,EACHN,EAAaS,EAAaD,GAC1BC,EACAD,GAIDF,EACHpN,EAAQuN,EAAaD,GACrBC,EACAD,MAOR,OAAIJ,IAAuBF,EAASlhB,QAAWihB,GAAgBA,EAAajhB,SAAWkhB,EAASlhB,OACrFihB,EAKPI,IAAmBH,EAASlhB,OACrBkhB,EAGJ3d,GChDI,MA/Bf,SAASme,EAA8BC,EAAmBC,GACtD,OAAKD,EAMAC,GAAaD,IAAkBC,EAO5BznB,OAAOkJ,KAAKue,GACfte,QAAO,SAACC,EAAQvI,GACb,IAAM+kB,EAAexc,EAAOvI,GACtBglB,EAAW4B,EAAU5mB,GAE3B,OAAI,YAAc+kB,IAAiB,YAAcC,GACtCC,EAAU1c,EAAQvI,EAAK0mB,EAAY3B,EAAcC,IAGxD,kBAAQD,IAAiB,kBAAQC,GAC1BC,EAAU1c,EAAQvI,EAAK,EAAa+kB,EAAcC,IAGtDC,EAAU1c,EAAQvI,EAAKglB,KAC/B2B,GApBIA,EANAC,G,uBCKF,EAA2B,CACpCzjB,OAAQ,GACRgiB,SAAU,ICNC,SAAS0B,EACpBhL,EACAjC,GAQA,YATA,IAAAiC,MAAA,GAGgB,0BAA2B,CACvCwG,KAAM,EACNlf,OAAQ,0BAAgB,EAAeyhB,GACvCO,SAAU,GAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,EACLyI,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,IAAyB0kB,8BAC9B,KAAK,IAAmB/J,sBACxB,KAAK,IAAsB+C,4BAC3B,KAAK,IAAsBO,2BAC3B,KAAK,IAAsBJ,2BAC3B,KAAK,IAAsBhB,8BAC3B,KAAK,IAAsBO,6BAC3B,KAAK,IAAiB2I,qBACtB,KAAK,IAAiBC,sBACtB,KAAK,IAA0BC,8BAC/B,KAAK,IAA0BC,+BAC3B,OAAO,EAAY5E,EAAMzI,EAAOC,SAAWD,EAAOC,QAAQ9F,MAE9D,QACI,OAAOsO,GAIf,SAAS,EACL8C,EACAvL,GAEA,YAHA,IAAAuL,MAA8B,EAAcA,UAGpCvL,EAAO7Y,MACf,KAAK,IAAmBya,sBACpB,OAAOyJ,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAmBxJ,mBACxB,KAAK,IAAmBD,sBACpB,OAAOuJ,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,GAIf,SAAS,EACLhiB,EACAyW,GAEA,YAHA,IAAAzW,MAA0B,EAAcA,QAGhCyW,EAAO7Y,MACf,KAAK,IAAmBya,sBACxB,KAAK,IAAmBE,sBACpB,OAAOuJ,EAAU9hB,EAAQ,iBAAamE,GAE1C,KAAK,IAAmBqU,mBACpB,OAAOsJ,EAAU9hB,EAAQ,YAAayW,EAAOC,SAEjD,QACI,OAAO1W,G,YChDF,EAAqC,CAC9Ckf,KAAM,GACNlf,OAAQ,GACRgiB,SAAU,IC1BR+B,EAA8C,CAAEC,sBAAuB,IACvEC,EAAiD,GACjDC,EAAoD,GAE3C,SAASC,EACpBzL,EACAjC,G,UAEA,YAHA,IAAAiC,MAAA,GAGKjC,EAAOjT,MAASiT,EAAOjT,KAAKS,SAIjB,0BAAqC,CACjDib,KAAM,2BAAe,KACjB,EAACzI,EAAOjT,KAAKS,UAAW,E,IAE5BjE,OAAQ,2BAAe,KACnB,EAACyW,EAAOjT,KAAKS,UAAW,E,IAE5B+d,SAAU,2BAAe,KACrB,EAACvL,EAAOjT,KAAKS,UAAW,E,KAIzBoe,CAAQ3J,EAAOjC,GAfXiC,EAkBf,SAAS,EACLwG,EACAzI,G,MAEA,YAHA,IAAAyI,MAAA,GAGQzI,EAAO7Y,MACf,KAAK,IAAyBwmB,0BAC1B,OAAK3N,EAAOjT,MAASiT,EAAOjT,KAAK6gB,YAI1B,EAAYnF,EAAM,CACrB8E,uBAAqB,KACjB,EAACvN,EAAOjT,KAAK6gB,cAAc,E,KALxBnF,EASf,KAAK,IAAyBoF,4BAC1B,OAAOxC,EAAU5C,EAAM,wBAAyB,IAGpD,OAAOA,EAGX,SAAS,EACLlf,EACAyW,GAEA,YAHA,IAAAzW,MAAA,GAGQyW,EAAO7Y,MACf,KAAK,IAAyB2mB,0BAC9B,KAAK,IAAyBH,0BAC1B,OAAOtC,EAAU9hB,EAAQ,uBAAmBmE,GAEhD,KAAK,IAAyBqgB,uBAC1B,OAAO1C,EAAU9hB,EAAQ,kBAAmByW,EAAOC,SAEvD,KAAK,IAAyB+N,4BAC9B,KAAK,IAAyBH,4BAC1B,OAAOxC,EAAU9hB,EAAQ,yBAAqBmE,GAElD,KAAK,IAAyBugB,yBAC1B,OAAO5C,EAAU9hB,EAAQ,oBAAqByW,EAAOC,SAEzD,QACI,OAAO1W,GAIf,SAAS,EACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAA,GAGQvL,EAAO7Y,MACf,KAAK,IAAyB2mB,0BAC1B,OAAOzC,EAAUE,EAAU,kBAAkB,GAEjD,KAAK,IAAyBwC,uBAC9B,KAAK,IAAyBJ,0BAC1B,OAAOtC,EAAUE,EAAU,kBAAkB,GAEjD,KAAK,IAAyByC,4BAC1B,OAAO3C,EAAUE,EAAU,oBAAoB,GAEnD,KAAK,IAAyB0C,yBAC9B,KAAK,IAAyBJ,4BAC1B,OAAOxC,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,G,YChFF,EAA6B,CACtCxe,KAAM,GACNxD,OAAQ,GACRgiB,SAAU,ICfC,SAAS2C,EACpBjM,EACAjC,GAQA,YATA,IAAAiC,MAAA,GAGgB,0BAA6B,CACzCwG,KAAM,EACNlf,OAAQ,0BAAgB,EAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,EACLyI,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,IAAiBgnB,oBAClB,OAAO,EAAY1F,EAAMzI,EAAOC,SAEpC,QACI,OAAOwI,GAIf,SAAS,EACLlf,EACAyW,GAEA,YAHA,IAAAzW,MAA4B,EAAcA,QAGlCyW,EAAO7Y,MACf,KAAK,IAAiBgnB,oBAClB,OAAO9C,EAAU9hB,EAAQ,iBAAamE,GAE1C,KAAK,IAAiB0gB,iBAClB,OAAO/C,EAAU9hB,EAAQ,YAAayW,EAAOC,SAEjD,QACI,OAAO1W,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAgC,EAAcA,UAGtCvL,EAAO7Y,MACf,KAAK,IAAiBknB,oBAClB,OAAOhD,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAiB4C,oBACtB,KAAK,IAAiBC,iBAClB,OAAO/C,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,GC3CR,IAAM,GAA6B,CACtChiB,OAAQ,GACRgiB,SAAU,ICXC,SAAS+C,GACpBrM,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA6B,CACzCwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,IAAmB2a,sBACxB,KAAK,IAAiBoL,qBACtB,KAAK,IAAsBlJ,8BAC3B,KAAK,IAAiBmJ,sBACtB,KAAK,IAAgBpB,mBACjB,OAAO,EAAatD,EAAMzI,EAAOC,SAAWD,EAAOC,QAAQrJ,SAE/D,QACI,OAAO6R,GAIf,SAAS,GACLlf,EACAyW,GAEA,YAHA,IAAAzW,MAAA,IAGQyW,EAAO7Y,MACf,KAAK,IAAiBonB,qBACtB,KAAK,IAAiBrB,qBAClB,OAAO7B,EAAU9hB,EAAQ,wBAAoBmE,GAEjD,KAAK,IAAiB8gB,kBAClB,OAAOnD,EAAU9hB,EAAQ,mBAAoByW,EAAOC,SAExD,KAAK,IAAiBwO,sBACtB,KAAK,IAAiBtB,sBAClB,OAAO9B,EAAU9hB,EAAQ,yBAAqBmE,GAElD,KAAK,IAAiBghB,mBAClB,OAAOrD,EAAU9hB,EAAQ,oBAAqByW,EAAOC,SAEzD,QACI,OAAO1W,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAA,IAGQvL,EAAO7Y,MACf,KAAK,IAAiBonB,qBAClB,OAAOlD,EAAUE,EAAU,oBAAoB,GAEnD,KAAK,IAAiB2B,qBACtB,KAAK,IAAiBsB,kBAClB,OAAOnD,EAAUE,EAAU,oBAAoB,GAEnD,KAAK,IAAiBkD,sBAClB,OAAOpD,EAAUE,EAAU,oBAAoB,GAEnD,KAAK,IAAiB4B,sBACtB,KAAK,IAAiBuB,mBAClB,OAAOrD,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,GCjER,IAAM,GAAsC,CAC/ChiB,OAAQ,GACRgiB,SAAU,ICXC,SAASoD,GACpB1M,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAAsC,CAClDwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,IAAmB2a,sBACxB,KAAK,IAAsB+C,4BAC3B,KAAK,IAAsBG,2BAC3B,KAAK,IAAsBI,2BAC3B,KAAK,IAAsBpB,8BAC3B,KAAK,IAAiBkJ,qBACtB,KAAK,IAAiBC,sBACtB,KAAK,IAA0BC,8BAC/B,KAAK,IAA0BC,+BAC3B,OAAO,EAAa5E,EAAMzI,EAAOC,SAAWD,EAAOC,QAAQtF,kBAE/D,QACI,OAAO8N,GAIf,SAAS,GACLlf,EACAyW,GAEA,YAHA,IAAAzW,MAAqC,GAAcA,QAG3CyW,EAAO7Y,MACf,KAAK,IAA0BynB,8BAC/B,KAAK,IAA0BxB,8BAC3B,OAAO/B,EAAU9hB,EAAQ,iCAA6BmE,GAE1D,KAAK,IAA0BmhB,2BAC3B,OAAOxD,EAAU9hB,EAAQ,4BAA6ByW,EAAOC,SAEjE,KAAK,IAA0B6O,+BAC/B,KAAK,IAA0BzB,+BAC3B,OAAOhC,EAAU9hB,EAAQ,kCAA8BmE,GAE3D,KAAK,IAA0BqhB,4BAC3B,OAAO1D,EAAU9hB,EAAQ,6BAA8ByW,EAAOC,SAElE,QACI,OAAO1W,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAyC,GAAcA,UAG/CvL,EAAO7Y,MACf,KAAK,IAA0BynB,8BAC3B,OAAOvD,EAAUE,EAAU,6BAA6B,GAE5D,KAAK,IAA0B6B,8BAC/B,KAAK,IAA0ByB,2BAC3B,OAAOxD,EAAUE,EAAU,6BAA6B,GAE5D,KAAK,IAA0BuD,+BAC3B,OAAOzD,EAAUE,EAAU,6BAA6B,GAE5D,KAAK,IAA0B8B,+BAC/B,KAAK,IAA0B0B,4BAC3B,OAAO1D,EAAUE,EAAU,6BAA6B,GAE5D,QACI,OAAOA,GCpFR,IAAM,GAA+B,GCE7B,SAASyD,GACpB/M,EACAjC,GAMA,YAPA,IAAAiC,MAAA,IAGgB,0BAA+C,CAC3DwG,KAAM,IAGHmD,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,IAAmB2a,sBACpB,OAAO,EAAY2G,EAAMzI,EAAOC,SAAWD,EAAOC,QAAQ/K,UAE9D,QACI,OAAOuT,G,YCUF,GAAuC,CAChDA,KAAM,GACNlf,OAAQ,GACRgiB,SAAU,ICjCC,SAAS0D,GACpBhN,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA+D,CAC3EwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,G,QAEA,YAHA,IAAAyI,MAAkC,GAAcA,MAGxCzI,EAAO7Y,MACf,KAAK,KAA2B+nB,oBAC5B,OAAO,EAAYzG,IAAI,MAClBzI,EAAOjT,MAAQiT,EAAOjT,KAAKS,UAAW,CACnC2hB,eAAe,G,IAI3B,KAAK,KAA2BC,sBAC5B,OAAO,EAAY3G,IAAI,MAClBzI,EAAOjT,MAAQiT,EAAOjT,KAAKS,UAAW,CACnC2hB,eAAe,G,IAK3B,OAAO1G,EAGX,SAAS,GACLlf,EACAyW,GAEA,YAHA,IAAAzW,MAAsC,GAAcA,QAG5CyW,EAAO7Y,MACf,KAAK,KAA2BkoB,oBAChC,KAAK,KAA2BH,oBAC5B,OAAO,EAAY3lB,EAAQ,CACvB+lB,qBAAiB5hB,EACjB6hB,wBAAoB7hB,IAG5B,KAAK,KAA2B8hB,iBAC5B,OAAO,EAAYjmB,EAAQ,CACvB+lB,gBAAiBtP,EAAOC,QACxBsP,mBAAoBvP,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGvD,KAAK,KAA2BiiB,sBAChC,KAAK,KAA2BL,sBAC5B,OAAO,EAAY7lB,EAAQ,CACvBmmB,uBAAmBhiB,EACnBiiB,0BAAsBjiB,IAG9B,KAAK,KAA2BkiB,mBAC5B,OAAO,EAAYrmB,EAAQ,CACvBmmB,kBAAmB1P,EAAOC,QAC1B0P,qBAAsB3P,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGzD,KAAK,KAA2BqiB,gBAChC,KAAK,KAA2BC,gBAC5B,OAAO,EAAYvmB,EAAQ,CACvBwmB,iBAAariB,EACbsiB,oBAAgBtiB,IAGxB,KAAK,KAA2BuiB,aAC5B,OAAO,EAAY1mB,EAAQ,CACvBwmB,YAAa/P,EAAOC,QACpB+P,eAAgBhQ,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGnD,KAAK,KAA2B0iB,iBAChC,KAAK,KAA2BC,iBAC5B,OAAO,EAAY5mB,EAAQ,CACvB6mB,kBAAc1iB,EACd2iB,qBAAiB3iB,IAGzB,KAAK,KAA2B4iB,cAC5B,OAAO,EAAY/mB,EAAQ,CACvB6mB,aAAcpQ,EAAOC,QACrBoQ,gBAAiBrQ,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGpD,KAAK,KAA2B+iB,yBAChC,KAAK,KAA2BC,0BAC5B,OAAO,EAAYjnB,EAAQ,CACvBknB,4BAAwB/iB,EACxBgjB,+BAA2BhjB,IAGnC,KAAK,KAA2BijB,wBAC5B,OAAO,EAAYpnB,EAAQ,CACvBknB,uBAAwBzQ,EAAOC,QAC/ByQ,0BAA2B1Q,EAAOjT,KAAKS,WAG/C,QACI,OAAOjE,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAA0C,GAAcA,UAGhDvL,EAAO7Y,MACf,KAAK,KAA2BkoB,oBAC5B,OAAO,EAAY9D,EAAU,CACzBqF,gBAAgB,EAChBrB,mBAAoBvP,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGvD,KAAK,KAA2BgiB,iBAChC,KAAK,KAA2BN,oBAC5B,OAAO,EAAY3D,EAAU,CACzBqF,gBAAgB,EAChBrB,wBAAoB7hB,IAG5B,KAAK,KAA2B+hB,sBAC5B,OAAO,EAAYlE,EAAU,CACzBsF,kBAAkB,EAClBlB,qBAAsB3P,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGzD,KAAK,KAA2BoiB,mBAChC,KAAK,KAA2BR,sBAC5B,OAAO,EAAY7D,EAAU,CACzBsF,kBAAkB,EAClBlB,0BAAsBjiB,IAG9B,KAAK,KAA2BmiB,gBAC5B,OAAO,EAAYtE,EAAU,CACzBuF,aAAa,EACbd,eAAgBhQ,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGnD,KAAK,KAA2ByiB,aAChC,KAAK,KAA2BH,gBAC5B,OAAO,EAAYvE,EAAU,CACzBuF,aAAa,EACbd,oBAAgBtiB,IAGxB,KAAK,KAA2BwiB,iBAC5B,OAAO,EAAY3E,EAAU,CACzBwF,cAAc,EACdV,gBAAiBrQ,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGpD,KAAK,KAA2B8iB,cAChC,KAAK,KAA2BH,iBAC5B,OAAO,EAAY5E,EAAU,CACzBwF,cAAc,EACdV,qBAAiB3iB,IAGzB,KAAK,KAA2B6iB,yBAC5B,OAAO,EAAYhF,EAAU,CACzByF,qBAAqB,EACrBN,0BAA2B1Q,EAAOjT,KAAKS,WAG/C,KAAK,KAA2BgjB,0BAChC,KAAK,KAA2BG,wBAC5B,OAAO,EAAYpF,EAAU,CACzByF,qBAAqB,EACrBN,+BAA2BhjB,IAGnC,QACI,OAAO6d,G,aC9KF,GAA8B,CACvChiB,OAAQ,GACRgiB,SAAU,ICTC,SAAS0F,GACpBhP,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA8B,CAC1CwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,KAAkB+pB,uBACnB,OAAO,EAAazI,EAAMzI,EAAOC,SAErC,QACI,OAAOwI,GAIf,SAAS,GACLlf,EACAyW,GAEA,YAHA,IAAAzW,MAA6B,GAAcA,QAGnCyW,EAAO7Y,MACf,KAAK,KAAkBgqB,uBACvB,KAAK,KAAkBD,uBACnB,OAAO7F,EAAU9hB,EAAQ,iBAAamE,GAE1C,KAAK,KAAkB0jB,oBACnB,OAAO/F,EAAU9hB,EAAQ,YAAayW,EAAOC,SAEjD,QACI,OAAO1W,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAiC,GAAcA,UAGvCvL,EAAO7Y,MACf,KAAK,KAAkBgqB,uBACnB,OAAO9F,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAkB2F,uBACvB,KAAK,KAAkBE,oBACnB,OAAO/F,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,GChCR,IAAM,GAA4B,CACrChiB,OAAQ,GACRwD,KAAM,GACNwe,SAAU,IC3BC,SAAS8F,GACpBpP,EACAjC,GASA,YAVA,IAAAiC,MAAA,IAGgB,0BAA4B,CACxCwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCje,KAAMukB,GACN/F,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,IAAgB4kB,mBACrB,KAAK,IAAgBwF,2BACjB,OAAO,EAAY9I,EAAM,eAAKzI,EAAOC,QAAS,CAAC,iBAAkB,aAErE,QACI,OAAOwI,GAIf,SAAS6I,GACLvkB,EACAiT,GAEA,OAAQA,EAAO7Y,MACf,KAAK,IAAgBqqB,uBACrB,KAAK,IAAgBC,qBACjB,OAAO,EAAY1kB,EAAM,yCAClBiT,EAAOjT,MAAI,CACdgK,YAAaiJ,EAAOC,SAAWD,EAAOC,QAAQpK,MAAMkB,YACpDD,WAAYkJ,EAAOC,SAAWD,EAAOC,QAAQpK,MAAM3L,MACnDoM,QAAS0J,EAAOC,SAAWD,EAAOC,QAAQpK,OAASmK,EAAOC,QAAQpK,MAAMS,WAGhF,QACI,OAAOvJ,GAIf,SAAS,GACLxD,EACAyW,GAEA,YAHA,IAAAzW,MAA2B,GAAcA,QAGjCyW,EAAO7Y,MACf,KAAK,IAAgBuqB,mBACrB,KAAK,IAAgB3F,mBACrB,KAAK,IAAgBwF,2BACrB,KAAK,IAAgBI,2BACjB,OAAOtG,EAAU9hB,EAAQ,iBAAamE,GAE1C,KAAK,IAAgBkkB,gBACrB,KAAK,IAAgBC,wBACjB,OAAOxG,EAAU9hB,EAAQ,YAAayW,EAAOC,SAEjD,QACI,OAAO1W,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAA+B,GAAcA,UAGrCvL,EAAO7Y,MACf,KAAK,IAAgBuqB,mBACrB,KAAK,IAAgBC,2BACjB,OAAOtG,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAgBQ,mBACrB,KAAK,IAAgB6F,gBACrB,KAAK,IAAgBL,2BACrB,KAAK,IAAgBM,wBACjB,OAAOxG,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,G,aCtFA,SAASuG,GAAe7P,EAA0BjC,GAK7D,YALmC,IAAAiC,MAAA,IACnB,0BAA6C,CACzDwG,KAAM,IAGHmD,CAAQ3J,EAAOjC,GAG1B,SAAS,GAAYyI,EAAuCzI,GACxD,OAAQA,EAAO7Y,MACf,KAAK,KAAkB4qB,uBACnB,OAAO/R,EAAOC,QAElB,QACI,OAAOwI,G,aCEF,GAAoC,CAC7Clf,OAAQ,GACRgiB,SAAU,ICdC,SAASyG,GACpB/P,EACAjC,GASA,YAVA,IAAAiC,MAAA,IAGgB,0BAAoC,CAChDwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCje,KAAM,GACNwe,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,KAAwBwG,2BACzB,OCrBO,SACXskB,EACApjB,EACA2S,GAEA,IAAK3S,EACD,OAAOojB,EAGX,IAAMC,EAAmB,eAAKrjB,EAAM,MAC9ByB,EAAQ,oBAAU2hB,EAA4B,iBAAdzQ,EAAyB,iBAAOA,GAAcA,GAAa0Q,GAC3F5F,EAAW,yBAAI2F,GAErB,IAAe,IAAX3hB,EACAgc,EAAS/R,KAAK1L,OACX,CACH,IAAM8W,EAAesM,EAAM3hB,GAE3Bgc,EAAShc,GAAS,YAAcqV,IAAiB,YAAc9W,GAC3D,EAAY8W,EAAc9W,GAC1BA,EAGR,OAAOyd,EDFI6F,CAAY1J,GAAQ,GAAIzI,EAAOC,QAASD,EAAOC,SAAW,CAC7D/U,GAAI8U,EAAOC,QAAQ/U,GACnB2d,QAAS7I,EAAOC,QAAQ4I,UAGhC,KAAK,KAAwB3b,4BACzB,OAAO,EAAaub,EAAMzI,EAAOC,QAAS,CACtCsM,YAAa,SAAC6F,EAASC,GAAY,OAC/BD,EAAQlnB,KAAOmnB,EAAQnnB,IAAMknB,EAAQvJ,UAAYwJ,EAAQxJ,WAIrE,QACI,OAAOJ,GAIf,SAAS,GACL1b,EACAiT,GAEA,OAAQA,EAAO7Y,MACf,KAAK,KAAwB+F,4BACzB,OAAO,EAAYH,EAAMiT,EAAOjT,MAEpC,QACI,OAAOA,GAIf,SAAS,GACLxD,EACAyW,GAEA,YAHA,IAAAzW,MAAmC,GAAcA,QAGzCyW,EAAO7Y,MACf,KAAK,KAAwB0F,4BAC7B,KAAK,KAAwBK,4BACzB,OAAOme,EAAU9hB,EAAQ,iBAAamE,GAE1C,KAAK,KAAwBJ,yBACzB,OAAO+d,EAAU9hB,EAAQ,YAAayW,EAAOC,SAEjD,KAAK,KAAwBxS,2BAC7B,KAAK,KAAwBE,2BACzB,OAAO,EAAYpE,EAAQ,CACvB+oB,kBAAc5kB,EACd6kB,qBAAiB7kB,IAGzB,KAAK,KAAwBE,wBACzB,OAAO,EAAYrE,EAAQ,CACvB+oB,aAActS,EAAOjT,KAAKS,SAC1B+kB,gBAAiBvS,EAAOC,UAGhC,QACI,OAAO1W,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAuC,GAAcA,UAG7CvL,EAAO7Y,MACf,KAAK,KAAwB0F,4BACzB,OAAOwe,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAwBre,4BAC7B,KAAK,KAAwBI,yBACzB,OAAO+d,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAwB9d,2BACzB,OAAO,EAAY8d,EAAU,CACzBiH,iBAAiB,EACjBF,aAActS,EAAOjT,KAAKS,WAGlC,KAAK,KAAwBG,2BAC7B,KAAK,KAAwBC,wBACzB,OAAO,EAAY2d,EAAU,CACzBiH,iBAAiB,EACjBF,kBAAc5kB,IAGtB,QACI,OAAO6d,G,YE9EF,GAAsC,CAC/C9C,KAAM,GACNlf,OAAQ,GACRgiB,SAAU,ICjCC,SAASkH,GACpBxQ,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA6D,CACzEwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,G,QAEA,YAHA,IAAAyI,MAAiC,GAAcA,MAGvCzI,EAAO7Y,MACf,KAAK,KAA0B+nB,oBAC3B,OAAO,EAAYzG,IAAI,MAClBzI,EAAOjT,MAAQiT,EAAOjT,KAAKS,UAAW,CACnC2hB,eAAe,G,IAI3B,KAAK,KAA0BC,sBAC3B,OAAO,EAAY3G,IAAI,MAClBzI,EAAOjT,MAAQiT,EAAOjT,KAAKS,UAAW,CACnC2hB,eAAe,G,IAK3B,OAAO1G,EAGX,SAAS,GACLlf,EACAyW,GAEA,YAHA,IAAAzW,MAAqC,GAAcA,QAG3CyW,EAAO7Y,MACf,KAAK,KAA0BkoB,oBAC/B,KAAK,KAA0BH,oBAC3B,OAAO,EAAY3lB,EAAQ,CACvB+lB,qBAAiB5hB,EACjB6hB,wBAAoB7hB,IAG5B,KAAK,KAA0B8hB,iBAC3B,OAAO,EAAYjmB,EAAQ,CACvB+lB,gBAAiBtP,EAAOC,QACxBsP,mBAAoBvP,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGvD,KAAK,KAA0BiiB,sBAC/B,KAAK,KAA0BL,sBAC3B,OAAO,EAAY7lB,EAAQ,CACvBmmB,uBAAmBhiB,EACnBiiB,0BAAsBjiB,IAG9B,KAAK,KAA0BkiB,mBAC3B,OAAO,EAAYrmB,EAAQ,CACvBmmB,kBAAmB1P,EAAOC,QAC1B0P,qBAAsB3P,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGzD,KAAK,KAA0BklB,iBAC/B,KAAK,KAA0BC,iBAC3B,OAAO,EAAYppB,EAAQ,CACvBqpB,kBAAcllB,EACdmlB,qBAAiBnlB,IAGzB,KAAK,KAA0BolB,cAC3B,OAAO,EAAYvpB,EAAQ,CACvBqpB,aAAc5S,EAAOC,QACrB4S,gBAAiB7S,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGpD,KAAK,KAA0BulB,kBAC/B,KAAK,KAA0BC,kBAC3B,OAAO,EAAYzpB,EAAQ,CACvB0pB,mBAAevlB,EACfwlB,sBAAkBxlB,IAG1B,KAAK,KAA0BylB,eAC3B,OAAO,EAAY5pB,EAAQ,CACvB0pB,cAAejT,EAAOC,QACtBiT,iBAAkBlT,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGrD,KAAK,KAA0B+iB,yBAC/B,KAAK,KAA0BC,0BAC3B,OAAO,EAAYjnB,EAAQ,CACvBknB,4BAAwB/iB,EACxBgjB,+BAA2BhjB,IAGnC,KAAK,KAA0BijB,wBAC3B,OAAO,EAAYpnB,EAAQ,CACvBknB,uBAAwBzQ,EAAOC,QAC/ByQ,0BAA2B1Q,EAAOjT,KAAKS,WAG/C,QACI,OAAOjE,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAyC,GAAcA,UAG/CvL,EAAO7Y,MACf,KAAK,KAA0BkoB,oBAC3B,OAAO,EAAY9D,EAAU,CACzBqF,gBAAgB,EAChBrB,mBAAoBvP,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGvD,KAAK,KAA0BgiB,iBAC/B,KAAK,KAA0BN,oBAC3B,OAAO,EAAY3D,EAAU,CACzBqF,gBAAgB,EAChBrB,wBAAoB7hB,IAG5B,KAAK,KAA0B+hB,sBAC3B,OAAO,EAAYlE,EAAU,CACzBsF,kBAAkB,EAClBlB,qBAAsB3P,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGzD,KAAK,KAA0BoiB,mBAC/B,KAAK,KAA0BR,sBAC3B,OAAO,EAAY7D,EAAU,CACzBsF,kBAAkB,EAClBlB,0BAAsBjiB,IAG9B,KAAK,KAA0BglB,iBAC3B,OAAO,EAAYnH,EAAU,CACzB6H,aAAa,EACbP,gBAAiB7S,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGpD,KAAK,KAA0BslB,cAC/B,KAAK,KAA0BH,iBAC3B,OAAO,EAAYpH,EAAU,CACzB6H,aAAa,EACbP,qBAAiBnlB,IAGzB,KAAK,KAA0BqlB,kBAC3B,OAAO,EAAYxH,EAAU,CACzB8H,cAAc,EACdH,iBAAkBlT,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGrD,KAAK,KAA0B2lB,eAC/B,KAAK,KAA0BH,kBAC3B,OAAO,EAAYzH,EAAU,CACzB8H,cAAc,EACdH,sBAAkBxlB,IAG1B,KAAK,KAA0B6iB,yBAC3B,OAAO,EAAYhF,EAAU,CACzByF,qBAAqB,EACrBN,0BAA2B1Q,EAAOjT,KAAKS,WAG/C,KAAK,KAA0BgjB,0BAC/B,KAAK,KAA0BG,wBAC3B,OAAO,EAAYpF,EAAU,CACzByF,qBAAqB,EACrBN,+BAA2BhjB,IAGnC,QACI,OAAO6d,G,aCrKF,GAAgB,CACzB9C,KAAM,GACNlf,OAAQ,GACRgiB,SAAU,ICnBC,SAAS+H,GACpBrR,EACAjC,GASA,YAVA,IAAAiC,MAAA,IAGgB,0BAAiC,CAC7CwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCje,KAAM,GACNwe,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,GAEA,YAHA,IAAAyI,MAA4B,GAAcA,MAGlCzI,EAAO7Y,MACf,KAAK,KAAqBosB,yBACtB,OAAO,EAAa9K,EAAMzI,EAAOC,SAAWD,EAAOC,QAAQuT,oBAAsB,IAErF,QACI,OAAO/K,GAIf,SAAS,GACL1b,EACAiT,GAEA,OAAQA,EAAO7Y,MACf,KAAK,KAAqBosB,yBAC1B,KAAK,KAAqBE,0BACtB,OAAO,EAAY1mB,EAAMiT,EAAOjT,MAEpC,QACI,OAAOA,GAIf,SAAS,GACLxD,EACAyW,GAEA,YAHA,IAAAzW,MAA+B,GAAcA,QAGrCyW,EAAO7Y,MACf,KAAK,KAAqBusB,yBAC1B,KAAK,KAAqBH,yBACtB,OAAOlI,EAAU9hB,EAAQ,iBAAamE,GAE1C,KAAK,KAAqBimB,0BAC1B,KAAK,KAAqBF,0BACtB,OAAO,EAAYlqB,EAAQ,CACvBqqB,iBAAalmB,EACbmmB,sBAAkBnmB,IAG1B,KAAK,KAAqBomB,sBACtB,OAAOzI,EAAU9hB,EAAQ,YAAayW,EAAOC,SAEjD,KAAK,KAAqB8T,uBACtB,OAAO,EAAYxqB,EAAQ,CACvBqqB,YAAa5T,EAAOC,QACpB4T,iBAAkB7T,EAAOjT,KAAKnD,eAGtC,QACI,OAAOL,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAkC,GAAcA,UAGxCvL,EAAO7Y,MACf,KAAK,KAAqBusB,yBACtB,OAAOrI,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAqBoI,0BACtB,OAAO,EAAYpI,EAAU,CACzByI,YAAY,EACZC,mBAAoBjU,EAAOjT,KAAKnD,eAGxC,KAAK,KAAqB2pB,yBAC1B,KAAK,KAAqBO,sBACtB,OAAOzI,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAqBkI,0BAC1B,KAAK,KAAqBM,uBACtB,OAAO,EAAYxI,EAAU,CACzByI,YAAY,EACZC,wBAAoBvmB,IAG5B,QACI,OAAO6d,G,aChGF,GAAqC,CAC9C9C,KAAM,ICHK,SAASyL,GACpBjS,EACAjC,G,MAEA,YAHA,IAAAiC,MAAA,IAGKjC,EAAOjT,MAASiT,EAAOjT,KAAKS,SAIjB,0BAAqC,CACjDib,KAAM,2BAAe,KACjB,EAACzI,EAAOjT,KAAKS,UAAW,G,KAIzBoe,CAAQ3J,EAAOjC,GATXiC,EAYf,SAAS,GACLwG,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,KAAyBgtB,iCAC1B,OAAO9I,EAAU5C,EAAM,UAAkBzI,EAAOC,SAAWD,EAAOC,QAAQmU,SAE9E,KAAK,KAAyBC,kCAC1B,OAAOhJ,EAAU5C,EAAM,WAAmBzI,EAAOC,SAAWD,EAAOC,QAAQlI,UAE/E,KAAK,KAAyBuc,4BAC1B,OAAOjJ,EAAU5C,EAAM,WAAYzI,EAAOC,SAE9C,KAAK,KAAyBsU,qBAC1B,OAAO,EAAY9L,EAAMzI,EAAOC,SAEpC,QACI,OAAOwI,G,aCjBF,GAAkC,CAC3Clf,OAAQ,CACJirB,0BAA2B,GAC3BC,YAAa,GACbb,YAAa,IAEjBrI,SAAU,CACNmJ,WAAY,GACZC,yBAA0B,GAC1BX,WAAY,KCvBL,SAASY,GACpB3S,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAAsE,CAClFwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,IAAmB2a,sBACxB,KAAK,IAAsByC,6BAC3B,KAAK,IAAsBM,4BAC3B,KAAK,IAAsBG,2BAC3B,KAAK,IAAsBI,2BAC3B,KAAK,IAAsBpB,8BAC3B,KAAK,IAAiBkJ,qBACtB,KAAK,IAAiBC,sBAClB,OAAO,EAAa1E,EAAMzI,EAAOC,SAAWD,EAAOC,QAAQjV,cAE/D,KAAK,KAAmB6pB,yBACpB,OAAO,EAAapM,EAAM,IAE9B,QACI,OAAOA,GAIf,SAAS,GACLlf,EACAyW,G,gBAEA,YAHA,IAAAzW,MAAiC,GAAcA,QAGvCyW,EAAO7Y,MACf,KAAK,IAAmBya,sBACxB,KAAK,IAAmBE,sBACxB,KAAK,IAAsByC,6BAC3B,KAAK,IAAsBJ,6BACvB,OAAOkH,EAAU9hB,EAAQ,iBAAamE,GAE1C,KAAK,IAAmBqU,mBACxB,KAAK,IAAsByC,0BACvB,OAAO6G,EAAU9hB,EAAQ,YAAayW,EAAOC,SAEjD,KAAK,IAAsB2E,4BAC3B,KAAK,IAAsBC,4BACvB,OAAOwG,EAAU9hB,EAAQ,mBAAemE,GAE5C,KAAK,IAAsBoX,yBACvB,OAAOuG,EAAU9hB,EAAQ,cAAeyW,EAAOC,SAEnD,KAAK,IAAsB+E,2BAC3B,KAAK,IAAsBD,2BACvB,OAAI/E,EAAOjT,KACA,EAAYxD,EAAQ,CACvBkrB,aAAW,KACP,EAACzU,EAAOjT,KAAK7B,SAAKwC,E,KAKvBnE,EAEX,KAAK,IAAsB0b,wBACvB,OAAIjF,EAAOjT,KACA,EAAYxD,EAAQ,CACvBkrB,aAAW,KACP,EAACzU,EAAOjT,KAAK7B,IAAK8U,EAAOC,Q,KAK9B1W,EAEX,KAAK,IAAsB6b,2BAC3B,KAAK,IAAsBD,2BACvB,OAAInF,EAAOjT,KACA,EAAYxD,EAAQ,CACvBqqB,aAAW,KACP,EAAC5T,EAAOjT,KAAK7B,SAAKwC,E,KAKvBnE,EAEX,KAAK,IAAsB8b,wBACvB,OAAIrF,EAAOjT,KACA,EAAYxD,EAAQ,CACvBqqB,aAAW,KACP,EAAC5T,EAAOjT,KAAK7B,IAAK8U,EAAOC,Q,KAK9B1W,EAEX,KAAK,IAAsBwa,8BAC3B,KAAK,IAAsBC,8BACvB,OAAIhE,EAAOjT,KACA,EAAYxD,EAAQ,CACvBirB,2BAAyB,KACrB,EAACxU,EAAOjT,KAAK7B,SAAKwC,E,KAKvBnE,EAEX,KAAK,IAAsB0a,2BACvB,OAAIjE,EAAOjT,KACA,EAAYxD,EAAQ,CACvBirB,2BAAyB,KACrB,EAACxU,EAAOjT,KAAK7B,IAAK8U,EAAOC,Q,KAK9B1W,EAEX,QACI,OAAOA,GAIf,SAAS,GACLgiB,EACAvL,G,gBAEA,YAHA,IAAAuL,MAAqC,GAAcA,UAG3CvL,EAAO7Y,MACf,KAAK,IAAmBya,sBACpB,OAAOyJ,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAsBpH,6BACvB,OAAOkH,EAAUE,EAAU,4BAA4B,GAE3D,KAAK,IAAmBzJ,sBACxB,KAAK,IAAmBC,mBACpB,OAAOsJ,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAsBhH,6BAC3B,KAAK,IAAsBC,0BACvB,OAAO6G,EAAUE,EAAU,4BAA4B,GAE3D,KAAK,IAAsB3G,4BACvB,OAAOyG,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAsB1G,4BAC3B,KAAK,IAAsBC,yBACvB,OAAOuG,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAsBxG,2BACvB,OAAI/E,EAAOjT,KACA,EAAYwe,EAAU,CACzBmJ,YAAU,KACN,EAAC1U,EAAOjT,KAAK7B,KAAK,E,KAKvBqgB,EAEX,KAAK,IAAsBvG,2BAC3B,KAAK,IAAsBC,wBACvB,OAAIjF,EAAOjT,KACA,EAAYwe,EAAU,CACzBmJ,YAAU,KACN,EAAC1U,EAAOjT,KAAK7B,KAAK,E,KAKvBqgB,EAEX,KAAK,IAAsBpG,2BACvB,OAAInF,EAAOjT,KACA,EAAYwe,EAAU,CACzByI,YAAU,KACN,EAAChU,EAAOjT,KAAK7B,KAAK,E,KAKvBqgB,EAEX,KAAK,IAAsBnG,2BAC3B,KAAK,IAAsBC,wBACvB,OAAIrF,EAAOjT,KACA,EAAYwe,EAAU,CACzByI,YAAU,KACN,EAAChU,EAAOjT,KAAK7B,KAAK,E,KAKvBqgB,EAEX,KAAK,IAAsBxH,8BACvB,OAAI/D,EAAOjT,KACA,EAAYwe,EAAU,CACzBoJ,0BAAwB,KACpB,EAAC3U,EAAOjT,KAAK7B,KAAK,E,KAKvBqgB,EAEX,KAAK,IAAsBvH,8BAC3B,KAAK,IAAsBC,2BACvB,OAAIjE,EAAOjT,KACA,EAAYwe,EAAU,CACzBoJ,0BAAwB,KACpB,EAAC3U,EAAOjT,KAAK7B,KAAK,E,KAKvBqgB,EAEX,QACI,OAAOA,G,aChOF,GAAsC,CAC/ChiB,OAAQ,GACRgiB,SAAU,ICTC,SAASuJ,GACpB7S,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAAsC,CAClDwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,GAEA,OAAQA,EAAO7Y,MACf,KAAK,KAA0B4tB,+BAC3B,OAAO,EAAatM,EAAMzI,EAAOC,SAErC,QACI,OAAOwI,GAIf,SAAS,GACLlf,EACAyW,GAEA,YAHA,IAAAzW,MAAqC,GAAcA,QAG3CyW,EAAO7Y,MACf,KAAK,KAA0B6tB,+BAC/B,KAAK,KAA0BD,+BAC3B,OAAO1J,EAAU9hB,EAAQ,iBAAamE,GAE1C,KAAK,KAA0BunB,4BAC3B,OAAO5J,EAAU9hB,EAAQ,YAAayW,EAAOC,SAEjD,QACI,OAAO1W,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAyC,GAAcA,UAG/CvL,EAAO7Y,MACf,KAAK,KAA0B6tB,+BAC3B,OAAO3J,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAA0BwJ,+BAC/B,KAAK,KAA0BE,4BAC3B,OAAO5J,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,G,aC/BF,GAAuC,CAChD9C,KAAM,GACNlf,OAAQ,GACRgiB,SAAU,IC7BC,SAAS2J,GACpBjT,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA+D,CAC3EwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,G,QAEA,YAHA,IAAAyI,MAAkC,GAAcA,MAGxCzI,EAAO7Y,MACf,KAAK,KAA2B+nB,oBAC5B,OAAO,EAAYzG,IAAI,MAClBzI,EAAOjT,MAAQiT,EAAOjT,KAAKS,UAAW,CACnC2hB,eAAe,G,IAI3B,KAAK,KAA2BC,sBAC5B,OAAO,EAAY3G,IAAI,MAClBzI,EAAOjT,MAAQiT,EAAOjT,KAAKS,UAAW,CACnC2hB,eAAe,G,IAK3B,OAAO1G,EAGX,SAAS,GACLlf,EACAyW,GAEA,YAHA,IAAAzW,MAAsC,GAAcA,QAG5CyW,EAAO7Y,MACf,KAAK,KAA2BkoB,oBAChC,KAAK,KAA2BH,oBAC5B,OAAO,EAAY3lB,EAAQ,CACvB+lB,qBAAiB5hB,EACjB6hB,wBAAoB7hB,IAG5B,KAAK,KAA2B8hB,iBAC5B,OAAO,EAAYjmB,EAAQ,CACvB+lB,gBAAiBtP,EAAOC,QACxBsP,mBAAoBvP,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGvD,KAAK,KAA2BiiB,sBAChC,KAAK,KAA2BL,sBAC5B,OAAO,EAAY7lB,EAAQ,CACvBmmB,uBAAmBhiB,EACnBiiB,0BAAsBjiB,IAG9B,KAAK,KAA2BkiB,mBAC5B,OAAO,EAAYrmB,EAAQ,CACvBmmB,kBAAmB1P,EAAOC,QAC1B0P,qBAAsB3P,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGzD,KAAK,KAA2B2nB,uBAChC,KAAK,KAA2BC,uBAC5B,OAAO,EAAY7rB,EAAQ,CACvB8rB,wBAAoB3nB,EACpB4nB,2BAAuB5nB,IAG/B,KAAK,KAA2B6nB,oBAC5B,OAAO,EAAYhsB,EAAQ,CACvB8rB,mBAAoBrV,EAAOC,QAC3BqV,sBAAuBtV,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAG1D,KAAK,KAA2BgoB,sBAChC,KAAK,KAA2BC,sBAC5B,OAAO,EAAYlsB,EAAQ,CACvBmsB,uBAAmBhoB,EACnBioB,0BAAsBjoB,IAG9B,KAAK,KAA2BkoB,mBAC5B,OAAO,EAAYrsB,EAAQ,CACvBmsB,kBAAmB1V,EAAOC,QAC1B0V,qBAAsB3V,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGzD,QACI,OAAOjE,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAA0C,GAAcA,UAGhDvL,EAAO7Y,MACf,KAAK,KAA2BkoB,oBAC5B,OAAO,EAAY9D,EAAU,CACzBqF,gBAAgB,EAChBrB,mBAAoBvP,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGvD,KAAK,KAA2BgiB,iBAChC,KAAK,KAA2BN,oBAC5B,OAAO,EAAY3D,EAAU,CACzBqF,gBAAgB,EAChBrB,wBAAoB7hB,IAG5B,KAAK,KAA2B+hB,sBAC5B,OAAO,EAAYlE,EAAU,CACzBsF,kBAAkB,EAClBlB,qBAAsB3P,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGzD,KAAK,KAA2BoiB,mBAChC,KAAK,KAA2BR,sBAC5B,OAAO,EAAY7D,EAAU,CACzBsF,kBAAkB,EAClBlB,0BAAsBjiB,IAG9B,KAAK,KAA2BynB,uBAC5B,OAAO,EAAY5J,EAAU,CACzBsK,mBAAmB,EACnBP,sBAAuBtV,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAG1D,KAAK,KAA2B+nB,oBAChC,KAAK,KAA2BH,uBAC5B,OAAO,EAAY7J,EAAU,CACzBsK,mBAAmB,EACnBP,2BAAuB5nB,IAG/B,KAAK,KAA2B8nB,sBAC5B,OAAO,EAAYjK,EAAU,CACzBuK,mBAAmB,EACnBH,qBAAsB3V,EAAOjT,MAAQiT,EAAOjT,KAAKS,WAGzD,KAAK,KAA2BooB,mBAChC,KAAK,KAA2BH,sBAC5B,OAAO,EAAYlK,EAAU,CACzBuK,mBAAmB,EACnBH,0BAAsBjoB,IAG9B,QACI,OAAO6d,G,aC5JT,GAAkC,CACpChiB,OAAQ,GACRgiB,SAAU,IAGC,SAASwK,GACpB9T,EACAjC,GAOA,YARA,IAAAiC,MAAA,IAGgB,0BAAkC,CAC9C1Y,OAAQ,0BAAgB,GAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLzW,EACAyW,GAEA,YAHA,IAAAzW,MAAiC,GAAcA,QAGvCyW,EAAO7Y,MACf,KAAK,KAAsB6uB,0BAC3B,KAAK,KAAsBC,0BACvB,OAAO5K,EAAU9hB,EAAQ,kBAAcmE,GAE3C,KAAK,KAAsBwoB,uBACvB,OAAO7K,EAAU9hB,EAAQ,aAAcyW,EAAOC,SAElD,QACI,OAAO1W,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAqC,GAAcA,UAG3CvL,EAAO7Y,MACf,KAAK,KAAsB6uB,0BACvB,OAAO3K,EAAUE,EAAU,cAAc,GAE7C,KAAK,KAAsB0K,0BAC3B,KAAK,KAAsBC,uBACvB,OAAO7K,EAAUE,EAAU,cAAc,GAE7C,QACI,OAAOA,G,aChCF,GAA+B,CACxChiB,OAAQ,GACRgiB,SAAU,ICVC,SAAS4K,GACpBlU,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA+B,CAC3CwG,KAAM,GACNlf,OAAQ,0BAAgB,GAAeyhB,GACvCO,SAAU,IAGPK,CAAQ3J,EAAOjC,GAG1B,SAAS,GACLyI,EACAzI,GAGA,OAAQA,EAAO7Y,MACf,KAAK,IAAmB2a,sBACxB,KAAK,IAAmBY,wBACxB,KAAK,KAAsBuT,0BAC3B,KAAK,IAAyBpK,8BAC9B,KAAK,IAAiBqB,qBACtB,KAAK,IAAiBC,sBACtB,KAAK,IAAsBtI,4BAC3B,KAAK,IAAsBG,2BAC3B,KAAK,IAAsBI,2BAC3B,KAAK,IAAsBpB,8BAC3B,KAAK,IAAsBO,6BAC3B,KAAK,IAA0B6I,8BAC/B,KAAK,IAA0BC,+BAC/B,KAAK,KAAyBsF,iBAC1B,OAAO,EAAYlK,EAAM,eAAKzI,EAAOC,QAAS,CAC1C,iBACA,OACA,eACA,WACA,UACA,sBAGR,KAAK,IAAgBwR,qBACjB,OAAOpG,EAAU5C,EAAM,UAAWzI,EAAOC,SAAWD,EAAOC,QAAQpK,MAAMK,SAE7E,QACI,OAAOuS,GAIf,SAAS,GACLlf,EACAyW,GAEA,YAHA,IAAAzW,MAA8B,GAAcA,QAGpCyW,EAAO7Y,MACf,KAAK,IAAmBya,sBACxB,KAAK,IAAmBE,sBACpB,OAAOuJ,EAAU9hB,EAAQ,iBAAamE,GAE1C,KAAK,IAAmBqU,mBACpB,OAAOsJ,EAAU9hB,EAAQ,YAAayW,EAAOC,SAEjD,KAAK,IAAmBwC,wBACxB,KAAK,IAAmBC,wBACpB,OAAO2I,EAAU9hB,EAAQ,mBAAemE,GAE5C,KAAK,IAAmBiV,qBACpB,OAAO0I,EAAU9hB,EAAQ,cAAeyW,EAAOC,SAEnD,QACI,OAAO1W,GAIf,SAAS,GACLgiB,EACAvL,GAEA,YAHA,IAAAuL,MAAkC,GAAcA,UAGxCvL,EAAO7Y,MACf,KAAK,IAAmBya,sBACpB,OAAOyJ,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAmBxJ,mBACxB,KAAK,IAAmBD,sBACpB,OAAOuJ,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAmB9I,wBACpB,OAAO4I,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAmB5I,qBACxB,KAAK,IAAmBD,wBACpB,OAAO2I,EAAUE,EAAU,cAAc,GAE7C,KAAK,KAAyBmH,iBAC1B,OAAOrH,EAAUE,EAAU,wBAAwB,GAEvD,KAAK,KAAyBuH,cAC9B,KAAK,KAAyBH,iBAC1B,OAAOtH,EAAUE,EAAU,wBAAwB,GAEvD,QACI,OAAOA,G,sBC/GA,SAAS6K,GAAoCzhB,GACxD,OAcJ,SAAuCA,EAAW0hB,GAC9C,IAAMC,EAAQ/wB,OAAOY,OAAOwO,GAa5B,OAGJ,SAA6BA,EAAgB4hB,GACzC,IAAI9vB,EAAYlB,OAAOixB,eAAe7hB,GAEtC,KAAOlO,GACH8vB,EAAS9vB,GAETA,EAAYlB,OAAOixB,eAAe/vB,GApBtCgwB,CAAoB9hB,GAAQ,SAAAlO,GACxBlB,OAAOsP,oBAAoBpO,GACtBqO,SAAQ,SAAA1P,GACQ,gBAATA,GAAiD,mBAAhBkxB,EAAMlxB,IAA2C,MAAnBA,EAAKsxB,OAAO,KAI/EJ,EAAMlxB,GAAQixB,EAAK1hB,EAAiCvP,EAAiBkxB,UAI1EA,EA5BAK,CAAYhiB,GAAQ,SAACA,EAAQvP,GAChC,kB,UAAC,kDAAmB,6BAAW,EAAAuP,EAAOvP,IAAMJ,KAAI,kCAAC2P,GAAWX,SCS7D,SAAS4iB,KACZ,IAAMC,EAA2B,cAC7B,SAAC5U,GAAuB,OAAAA,EAAMwG,QAC9B,SAAArG,GAAU,gBAAC0U,EAA2B1qB,QAA3B,IAAA0qB,MAAA,IACP,IAAMC,EAAkB,eAAKD,EAAW,CAAE1gB,KAAMhK,IAGhD,OAFegW,EAASA,EAAOgF,YAAY4P,WAAWC,sBAAwB,IAEhEroB,KAAI,SAACsoB,GAAe,OAAAC,EAAaD,EAAOJ,EAAWC,UAInEK,EAA0B,cAC5B,SAACnV,GAAuB,OAAAA,EAAMwG,QAC9B,SAAArG,GAAU,gBAAC0U,EAA2B1qB,QAA3B,IAAA0qB,MAAA,IACP,IAAMC,EAAkB,eAAKD,EAAW,CAAE1gB,KAAMhK,IAGhD,OAFegW,EAASA,EAAOgF,YAAY4P,WAAWK,qBAAuB,IAE/DzoB,KAAI,SAACsoB,GAAe,OAAAC,EAAaD,EAAOJ,EAAWC,UAIzE,SAASI,EAAaD,EAAkBJ,EAAsBC,GAC1D,MAAmB,gBAAfG,EAAM9xB,KAed,SAAwB8xB,EAAkBJ,EAA2B3qB,QAA3B,IAAA2qB,MAAA,IACtC,IAAKA,EAAU1rB,OACX,OAAO8rB,EAGH,cAAA9gB,YAAA,IAAO,EAAP,KACFJ,EAAQ8gB,EAAUloB,KAAI,SAAC,GAAwB,OACjD9I,MAD2B,EAAAsQ,KAE3BkhB,MAFiC,EAAAlyB,SAKrC,OAAO,yCACA8xB,GAAK,CACRxqB,QAAS,CAAEsJ,MAAK,GAChBoI,QAAShI,EACTjP,KAAM,QACNowB,UAAW,WACXC,SAAU,WA/BHC,CAAeP,EAAOJ,EAAWC,GAGzB,oBAAfG,EAAM9xB,KAgCd,SAAyB8xB,EAAkB/qB,GACjC,YAAE,IAAAurB,oBAAA,IAAe,EAAf,KAAmBC,EAAA,EAAAA,cAE3B,IAAKD,EAAatsB,OACd,OAAO,yCACA8rB,GAAK,CACRpc,SAA2B,MAAjB6c,GAAgCA,IAIlD,IAAM3hB,EAAQ0hB,EAAa9oB,KAAI,SAAC,GAAwB,OACpD9I,MAD8B,EAAAsQ,KAE9BkhB,MAFoC,EAAAlyB,SAKxC,OAAO,yCACA8xB,GAAK,CACR9xB,KAAM,sBACNsH,QAAS,CAAEsJ,MAAK,GAChB8E,SAA2B,MAAjB6c,GAA+BA,EACzCxwB,KAAM,QACNowB,UAAW,WACXC,SAAU,WArDHI,CAAgBV,EAAOH,GAGf,eAAfG,EAAM9xB,KAsDd,SAA0B8xB,EAAkB/qB,GAChC,cAAA0rB,sBAAA,IAAiB,EAAjB,KAER,QAAuBnqB,IAAnBmqB,EACA,OAAOX,EAGX,OAAO,yCAAKA,GAAK,CAAEpc,SAAUnR,QAAQkuB,KA5D1BC,CAAiBZ,EAAOH,GAG5BG,EA4DX,OAAO,uBAAW,SACdjV,GAEA,YAFA,IAAAA,MAAA,GAEO,CACH4U,yBAA0BA,EAAyB5U,GACnDmV,wBAAyBA,EAAwBnV,O,sBC7G7D,IAmDe,GAnDoC,CAC/C,iBAAkB,CACd8V,SAAU,UACVvjB,OAAQ,UAEZ,eAAgB,CACZujB,SAAU,UACVvjB,OAAQ,QAEZiH,UAAW,CACPsc,SAAU,YACVvjB,OAAQ,eAEZwjB,gBAAiB,CACbD,SAAU,YACVvjB,OAAQ,UAEZyjB,aAAc,CACVF,SAAU,eACVvjB,OAAQ,eAEZ0jB,OAAQ,CACJH,SAAU,SACVvjB,OAAQ,eAEZ2jB,SAAU,CACNJ,SAAU,WACVvjB,OAAQ,eAEZ4jB,YAAa,CACTL,SAAU,cACVvjB,OAAQ,eAEZ6jB,SAAU,CACNN,SAAU,WACVvjB,OAAQ,eAEZ8jB,WAAY,CACRP,SAAU,aACVvjB,OAAQ,eAEZ+jB,UAAW,CACPR,SAAU,YACVvjB,OAAQ,eAEZ,0BAA2B,CACvBujB,SAAU,cACVvjB,OAAQ,gBC7ChB,SAASgkB,GAAUztB,GACf,OAAO,iBAAO,CACVM,UAAWN,EAAQM,UACnBC,SAAUP,EAAQO,SAClBC,QAASR,EAAQQ,QACjBE,SAAUV,EAAQU,SAClBE,SAAUZ,EAAQY,SAClBC,KAAMb,EAAQa,KACdE,gBAAiBf,EAAQe,gBACzBM,YAAarB,EAAQqB,YACrBF,WAAYnB,EAAQmB,WACpBG,MAAOtB,EAAQsB,MACfC,aAAcvB,EAAQuB,cACvB,YCqBA,SAASmsB,KACZ,IAAM9U,EAAkB,cACpB,SAAC1B,GAA4B,OAAAA,EAAMwG,QACnC,SAAAzd,GAAgB,kBAAM,OAAAA,MAGpB0tB,EAAqB,cACvB,SAACzW,GAA4B,OAAAA,EAAMwG,QACnC,SAAAzd,GAAgB,gBAACE,GACb,GAAKF,GAAiBA,EAAaI,OAInC,OAAO,eAAKJ,EAAc,CAAEE,GAAE,QAIhC+X,EAA0B,cAC5B,SAAChB,GAA4B,OAAAA,EAAMwG,QACnC,SAAAzd,GAAgB,gBAACD,GACb,GAAKC,GAAiBA,EAAaI,OAInC,OAAO,eAAKJ,GAAc,SAAA+X,GACtB,OD/DuB4V,EC+DR5V,EAAYG,gBD/DwB0V,EC+DP7tB,ED9DjD,kBAAQytB,GAAUG,GAAWH,GAAUI,IADnC,IAAwBD,EAA4BC,SCoEzDzR,EAAoB,cACtB,SAAClF,GAA4B,OAAAA,EAAMwG,QACnC,SAAAzd,GAAgB,kBACZ,GAAIA,GAAgBA,EAAaI,OAC7B,OAAOJ,EAAa,GAAG2d,2BAK7BkQ,EAAe,cACjB,SAAC5W,GAA4B,OAAAA,EAAM1Y,OAAOuvB,aAC1C,SAAAzrB,GAAS,kBAAM,OAAAA,MAGb0rB,EAAiB,cACnB,SAAC9W,GAA4B,OAAAA,EAAM1Y,OAAOghB,eAC1C,SAAAld,GAAS,kBAAM,OAAAA,MAGb2rB,EAA8B,cAChC,SAAC/W,GAA4B,OAAAA,EAAM1Y,OAAO0vB,4BAC1C,SAAA5rB,GAAS,kBAAM,OAAAA,MAGb6rB,EAAqB,aACvBvV,GACA,SAACrP,EAAqB,GAA8C,OAA5C,EAAA6F,KAAiDiJ,WACzE,SAACO,EAAiBP,GAAY,kBAC1B,IAAMjJ,EAAOiJ,IAEb,IAAKjJ,EACD,MAAO,GAGX,IAAMgf,GAAuBxV,KAAqB,IAAIjV,QAClD,SAAC0qB,EAASrW,GAAgB,OAAAqW,EAAQvT,OAAO9C,EAAY2C,eACrD,IAGJ,OAAQvL,EAAKhE,UAAUgD,eAAiB,IAAIrI,QACxC,SAAAjC,GAAQ,OAAAsqB,EAAoB7lB,QAAQzE,EAAK3D,IAAgB,SAK/DmuB,EAAiB,cACnB,SAACpX,GAA4B,OAAAA,EAAM1Y,OAAOkrB,eAC1C,SAAAA,GAAe,gBAACvP,GACZ,OAAIA,EACOuP,EAAYvP,GAGhB,eAAKuP,OAId6E,EAAiB,cACnB,SAACrX,GAA4B,OAAAA,EAAM1Y,OAAOqqB,eAC1C,SAAAA,GAAe,gBAAC1O,GACZ,OAAIA,EACO0O,EAAY1O,GAGhB,eAAK0O,OAId2F,EAAyB,aAC3BtW,EACAoW,EACAN,GACA,SAAC9V,EAAyBoW,EAAgBN,GAAmB,gBAAChuB,GAC1D,IAAMgY,EAAcE,EAAwBlY,GAE5C,OAAOgY,EAAcsW,EAAetW,EAAY7X,IAAM6tB,QAIxDS,EAA+B,cACjC,SAACvX,GAA4B,OAAAA,EAAM1Y,OAAOirB,6BAC1C,SAAAA,GAA6B,gBAACtP,GAC1B,OAAIA,EACOsP,EAA0BtP,GAG9B,eAAKsP,OAIdiF,EAAY,cACd,SAACxX,GAA4B,OAAAA,EAAMsJ,SAASkO,aAC5C,SAAAA,GAAa,kBAAM,OAAc,IAAdA,MAGjBC,EAA2B,cAC7B,SAACzX,GAA4B,OAAAA,EAAMsJ,SAASmO,4BAC5C,SAAAA,GAA4B,kBAAM,OAA6B,IAA7BA,MAGhCC,EAAa,cACf,SAAC1X,GAA4B,OAAAA,EAAMsJ,SAASoO,cAC5C,SAAAA,GAAc,kBAAM,OAAe,IAAfA,MAGlBjF,EAAa,cACf,SAACzS,GAA4B,OAAAA,EAAMsJ,SAASmJ,cAC5C,SAAAA,GAAc,gBAACxP,GACX,OAAIA,GACqC,IAA9BwP,EAAWxP,IAGM,IAArB,eAAKwP,OAIdV,EAAa,cACf,SAAC/R,GAA4B,OAAAA,EAAMsJ,SAASyI,cAC5C,SAAAA,GAAc,gBAAC9O,GACX,OAAIA,GACqC,IAA9B8O,EAAW9O,IAGM,IAArB,eAAK8O,OAId4F,EAAmB,aACrB3W,EACAyR,EACAiF,GACA,SAAC1W,EAAyByR,EAAYiF,GAAe,gBAAC5uB,GAClD,IAAMgY,EAAcE,EAAwBlY,GAE5C,OAAOgY,EAAc2R,EAAW3R,EAAY7X,IAAMyuB,QAIpDhF,EAA2B,cAC7B,SAAC1S,GAA4B,OAAAA,EAAMsJ,SAASoJ,4BAC5C,SAAAA,GAA4B,gBAACzP,GACzB,OAAIA,GACmD,IAA5CyP,EAAyBzP,IAGM,IAAnC,eAAKyP,OAIpB,OAAO,uBAAW,SACd1S,EACA9H,GAEA,YAHA,IAAA8H,MAAA,IAGO,CACH0B,gBAAiBA,EAAgB1B,GACjCyW,mBAAoBA,EAAmBzW,GACvCgB,wBAAyBA,EAAwBhB,GACjDkF,kBAAmBA,EAAkBlF,GACrC4W,aAAcA,EAAa5W,GAC3B8W,eAAgBA,EAAe9W,GAC/B+W,4BAA6BA,EAA4B/W,GACzDiX,mBAAoBA,EAAmBjX,EAAO,CAAE9H,KAAI,IACpDkf,eAAgBA,EAAepX,GAC/BqX,eAAgBA,EAAerX,GAC/BsX,uBAAwBA,EAAuBtX,GAC/CuX,6BAA8BA,EAA6BvX,GAC3DwX,UAAWA,EAAUxX,GACrByX,yBAA0BA,EAAyBzX,GACnD0X,WAAYA,EAAW1X,GACvByS,WAAYA,EAAWzS,GACvB+R,WAAYA,EAAW/R,GACvB2X,iBAAkBA,EAAiB3X,GACnC0S,yBAA0BA,EAAyB1S,OCnOxD,IAAM,GAAkC,CAC3C1Y,OAAQ,GACRgiB,SAAU,ICQP,SAASsO,KACZ,ICPMnT,EAKA2S,EAKAS,EAKAjB,EAKAnE,EAKAqF,EAKAN,EC9BAvX,EAKA0O,EAaAzB,EAiBA0B,EAaAmJ,EAWAC,EC5DAC,EAKAC,EAKAC,EAKAC,EAKAC,ECzBA3T,ECCAnE,ECDAyE,ECiBAsT,EASAC,EAWAC,EAWAC,EAyBAC,EAmBA3S,EASA4S,EASAC,EASAC,EP1GAC,GCPArU,EAAoB,cACtB,SAACzE,GAA+B,OAAAA,EAAMwG,QACtC,SAAAA,GAAQ,kBAAM,OAAAA,MAGZ4Q,EAAiB,cACnB,SAACpX,GAA+B,OAAAA,EAAM1Y,OAAOkrB,eAC7C,SAAApnB,GAAS,kBAAM,OAAAA,MAGbysB,EAA0B,cAC5B,SAAC7X,GAA+B,OAAAA,EAAM1Y,OAAOyxB,wBAC7C,SAAA3tB,GAAS,kBAAM,OAAAA,MAGbwrB,EAAe,cACjB,SAAC5W,GAA+B,OAAAA,EAAM1Y,OAAOuvB,aAC7C,SAAAzrB,GAAS,kBAAM,OAAAA,MAGbqnB,EAAa,cACf,SAACzS,GAA+B,QAAEA,EAAMsJ,SAASmJ,cACjD,SAAArrB,GAAU,kBAAM,OAAAA,MAGd0wB,EAAsB,cACxB,SAAC9X,GAA+B,QAAEA,EAAMsJ,SAASwO,uBACjD,SAAA1wB,GAAU,kBAAM,OAAAA,MAGdowB,EAAY,cACd,SAACxX,GAA+B,QAAEA,EAAMsJ,SAASkO,aACjD,SAAApwB,GAAU,kBAAM,OAAAA,MAGb,uBAAW,SACd4Y,GAEA,YAFA,IAAAA,MAAA,GAEO,CACHyE,kBAAmBA,EAAkBzE,GACrCoX,eAAgBA,EAAepX,GAC/B6X,wBAAyBA,EAAwB7X,GACjD4W,aAAcA,EAAa5W,GAC3ByS,WAAYA,EAAWzS,GACvB8X,oBAAqBA,EAAoB9X,GACzCwX,UAAWA,EAAUxX,QDrCvBgZ,EQbH,WACH,IAAM7X,EAAU,cACZ,SAACnB,GAAqB,OAAAA,EAAMwG,QAC5B,SAAAtO,GAAQ,kBAAM,OAAAA,MAGZ0e,EAAe,cACjB,SAAC5W,GAAqB,OAAAA,EAAM1Y,OAAOuvB,aACnC,SAAAzrB,GAAS,kBAAM,OAAAA,MAGbosB,EAAY,cACd,SAACxX,GAAqB,QAAEA,EAAMsJ,SAASkO,aACvC,SAAApwB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACd4Y,GAEA,YAFA,IAAAA,MAAA,GAEO,CACHmB,QAASA,EAAQnB,GACjB4W,aAAcA,EAAa5W,GAC3BwX,UAAWA,EAAUxX,ORTFiZ,GACrBC,GETAjZ,EAAW,cACb,SAACD,GAA+B,OAAAA,KAChC,SAAAA,GAAS,kBAAM,OAAAA,MAGb2O,EAAiB,cACnB,SAAC3O,GAA+B,OAAAA,EAAMsJ,YACtC,SAAAA,GAAY,2BAAQ,SAAC/d,GACjB,GAAIA,EAAU,CACV,IAAMgH,EAAS+W,EAAS/d,GAExB,OAA6C,KAArCgH,GAAUA,EAAOoc,gBAG7B,OAAO,eAAKrF,EAAU,CAAEqF,gBAAgB,UAI1CzB,EAAgB,cAClB,SAAClN,GAA+B,OAAAA,EAAMwG,QACtC,SAAAA,GAAQ,2BAAQ,SAACjb,EAAoCogB,GACjD,IAAMpZ,EAASiU,EAAKjb,GAEpB,QAAKgH,IAIAoZ,GAIgD,IAA9CpZ,EAAO+Y,sBAAsBK,GAHzB,eAAKpZ,EAAO+Y,uBAAuB,SAAA4B,GAAiB,OAAkB,IAAlBA,YAOjE0B,EAAmB,cACrB,SAAC5O,GAA+B,OAAAA,EAAMsJ,YACtC,SAAAA,GAAY,2BAAQ,SAAC/d,GACjB,GAAIA,EAAU,CACV,IAAMgH,EAAS+W,EAAS/d,GAExB,OAA+C,KAAvCgH,GAAUA,EAAOqc,kBAG7B,OAAO,eAAKtF,EAAU,CAAEsF,kBAAkB,UAI5CmJ,EAAqB,cACvB,SAAC/X,GAA+B,OAAAA,EAAM1Y,UACtC,SAAAA,GAAU,2BAAQ,SAACiE,GACf,IAAMgH,EAAShH,EACXjE,EAAOiE,GACP,eAAK,iBAAOjE,IAAS,SAAAiL,GAAU,SAAGA,IAAUA,EAAO8a,oBAEvD,OAAO9a,GAAUA,EAAO8a,sBAI1B2K,EAAuB,cACzB,SAAChY,GAA+B,OAAAA,EAAM1Y,UACtC,SAAAA,GAAU,2BAAQ,SAACiE,GACf,IAAMgH,EAAShH,EACXjE,EAAOiE,GACP,eAAK,iBAAOjE,IAAS,SAAAiL,GAAU,SAAGA,IAAUA,EAAOkb,sBAEvD,OAAOlb,GAAUA,EAAOkb,wBAIzB,uBAAW,SACdzN,GAEA,YAFA,IAAAA,MAAA,GAEO,CACHC,SAAUA,EAASD,GACnB2O,eAAgBA,EAAe3O,GAC/BkN,cAAeA,EAAclN,GAC7B4O,iBAAkBA,EAAiB5O,GACnC+X,mBAAoBA,EAAmB/X,GACvCgY,qBAAsBA,EAAqBhY,QFrE7CmZ,ESZH,WAEH,IAAMC,EAAY,cACd,SAACpZ,GAAuB,OAAAA,EAAMwG,QAC9B,SAAAA,GAAQ,kBAAM,OAAAA,MAGZpB,EAAiB,cACnB,SAACpF,GAAuB,OAAAA,EAAMwG,MAAQxG,EAAMwG,KAAKrB,eACjD,SAAAqB,GAAQ,kBAAM,OAAAA,MAGZpG,EAAmB,cACrB,SAACJ,GAAuB,OAAAA,EAAMwG,MAAQxG,EAAMwG,KAAKtG,WACjD,SAAAsG,GAAQ,kBAAM,OAAAA,MAGZ6S,EAAoB,cACtB,SAACrZ,GAAuB,OAAAA,EAAMlV,MAAQkV,EAAMlV,KAAKwuB,kBACjD,SAAA9S,GAAQ,kBAAM,OAAAA,MAGZoQ,EAAe,cACjB,SAAC5W,GAAuB,OAAAA,EAAM1Y,OAAOuvB,aACrC,SAAAzrB,GAAS,kBAAM,OAAAA,MAGbosB,EAAY,cACd,SAACxX,GAAuB,QAAEA,EAAMsJ,SAASkO,aACzC,SAAApwB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACd4Y,GAEA,YAFA,IAAAA,MAAA,GAEO,CACHoZ,UAAWA,EAAUpZ,GACrBoF,eAAgBA,EAAepF,GAC/BI,iBAAkBA,EAAiBJ,GACnCqZ,kBAAmBA,EAAkBrZ,GACrC4W,aAAcA,EAAa5W,GAC3BwX,UAAWA,EAAUxX,OT7BAuZ,GACvBC,EUhBH,WACH,IAAMC,EAAe,cACjB,SAACzZ,GAAwB,OAAAA,EAAMwG,QAC/B,SAAAqO,GAAa,kBAAM,OAAAA,MAGjB+B,EAAe,cACjB,SAAC5W,GAAwB,OAAAA,EAAM1Y,OAAOuvB,aACtC,SAAAzrB,GAAS,kBAAM,OAAAA,MAGbosB,EAAY,cACd,SAACxX,GAAwB,QAAEA,EAAMsJ,SAASkO,aAC1C,SAAApwB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACd4Y,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHyZ,aAAcA,EAAazZ,GAC3B4W,aAAcA,EAAa5W,GAC3BwX,UAAWA,EAAUxX,OVNC0Z,GACxBC,GGbA1B,EAAa,cACf,SAACjY,GAAuB,OAAAA,EAAMwG,QAC9B,SAAAA,GAAQ,kBAAM,OAAAA,MAGZ0R,EAAiB,cACnB,SAAClY,GAAuB,OAAAA,EAAM1Y,OAAOsyB,qBACrC,SAAAxuB,GAAS,kBAAM,OAAAA,MAGb+sB,EAAgB,cAClB,SAACnY,GAAuB,OAAAA,EAAM1Y,OAAOuyB,oBACrC,SAAAzuB,GAAS,kBAAM,OAAAA,MAGbgtB,EAAa,cACf,SAACpY,GAAuB,QAAEA,EAAMsJ,SAASwQ,oBACzC,SAAA1yB,GAAU,kBAAM,OAAAA,MAGdixB,EAAa,cACf,SAACrY,GAAuB,QAAEA,EAAMsJ,SAASyQ,oBACzC,SAAA3yB,GAAU,kBAAM,OAAAA,MAGb,uBAAW,SACd4Y,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHiY,WAAYA,EAAWjY,GACvBkY,eAAgBA,EAAelY,GAC/BmY,cAAeA,EAAcnY,GAC7BoY,WAAYA,EAAWpY,GACvBqY,WAAYA,EAAWrY,QHnBzBga,GInBAtV,EAAc,cAChB,SAAC1E,GAAyB,OAAAA,EAAMwG,QAChC,SAAAvT,GAAY,kBAAM,OAAAA,MAGf,uBAAW,SACd+M,GAEA,YAFA,IAAAA,MAAA,IAEO,CACH0E,YAAaA,EAAY1E,QJW3Bia,EWdH,WACH,IAAMC,EAAiB,cACnB,SAACla,GAAiC,OAAAA,EAAM1Y,OAAOymB,kBAC/C,SAAC/N,GAAiC,OAAAA,EAAM1Y,OAAOwmB,eAC/C,SAACC,EAAgBD,GAAgB,gBAACviB,GAC9B,IAAIA,GAAYwiB,IAAmBxiB,EAInC,OAAOuiB,MAITqM,EAAkB,cACpB,SAACna,GAAiC,OAAAA,EAAM1Y,OAAO8mB,mBAC/C,SAACpO,GAAiC,OAAAA,EAAM1Y,OAAO6mB,gBAC/C,SAACC,EAAiBD,GAAiB,gBAAC5iB,GAChC,IAAIA,GAAY6iB,IAAoB7iB,EAIpC,OAAO4iB,MAIT4J,EAAqB,cACvB,SAAC/X,GAAiC,OAAAA,EAAM1Y,OAAOgmB,sBAC/C,SAACtN,GAAiC,OAAAA,EAAM1Y,OAAO+lB,mBAC/C,SAACC,EAAoBD,GAAoB,gBAAC9hB,GACtC,IAAIA,GAAY+hB,IAAuB/hB,EAIvC,OAAO8hB,MAIT+M,EAA4B,cAC9B,SAACpa,GAAiC,OAAAA,EAAM1Y,OAAOmnB,6BAC/C,SAACzO,GAAiC,OAAAA,EAAM1Y,OAAOknB,0BAC/C,SAACC,EAA2BD,GAA2B,gBAACjjB,GACpD,IAAIA,GAAYkjB,IAA8BljB,EAI9C,OAAOijB,MAITK,EAAc,cAChB,SAAC7O,GAAiC,OAAAA,EAAMsJ,SAASyE,kBACjD,SAAC/N,GAAiC,OAAAA,EAAMsJ,SAASuF,eACjD,SAACd,EAAgBc,GAAgB,gBAACtjB,GAC9B,QAAIA,GAAYwiB,IAAmBxiB,MAI1BsjB,MAIXC,EAAe,cACjB,SAAC9O,GAAiC,OAAAA,EAAMsJ,SAAS8E,mBACjD,SAACpO,GAAiC,OAAAA,EAAMsJ,SAASwF,gBACjD,SAACV,EAAiBU,GAAiB,gBAACvjB,GAChC,QAAIA,GAAY6iB,IAAoB7iB,MAI3BujB,MAIXH,EAAiB,cACnB,SAAC3O,GAAiC,OAAAA,EAAMsJ,SAASgE,sBACjD,SAACtN,GAAiC,OAAAA,EAAMsJ,SAASqF,kBACjD,SAACrB,EAAoBqB,GAAmB,gBAACpjB,GACrC,QAAIA,GAAY+hB,IAAuB/hB,MAI9BojB,MAIXzB,EAAgB,cAClB,SAAClN,GAAiC,OAAAA,EAAMwG,QACxC,SAAAA,GAAQ,gBAACjb,GACL,SACIib,EAAKjb,KACLib,EAAKjb,GAAU2hB,mBAKrB6B,EAAsB,cACxB,SAAC/O,GAAiC,OAAAA,EAAMsJ,SAASmF,6BACjD,SAACzO,GAAiC,OAAAA,EAAMsJ,SAASyF,uBACjD,SAACN,EAA2BM,GAAwB,gBAACxjB,GACjD,QAAIA,GAAYkjB,IAA8BljB,MAIrCwjB,MAIjB,OAAO,uBAAW,SACd/O,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHka,eAAgBA,EAAela,GAC/Bma,gBAAiBA,EAAgBna,GACjC+X,mBAAoBA,EAAmB/X,GACvCoa,0BAA2BA,EAA0Bpa,GACrD6O,YAAaA,EAAY7O,GACzB8O,aAAcA,EAAa9O,GAC3B2O,eAAgBA,EAAe3O,GAC/BkN,cAAeA,EAAclN,GAC7B+O,oBAAqBA,EAAoB/O,OXzGVqa,GACjCC,EYhBH,WACH,IAAMC,EAAsB,cACxB,SAACva,GAAgC,OAAAA,EAAMwG,QACvC,SAAAA,GAAQ,kBAAM,OAAAA,MAGZ0R,EAAiB,cACnB,SAAClY,GAAgC,OAAAA,EAAM1Y,OAAOkzB,8BAC9C,SAAApvB,GAAS,kBAAM,OAAAA,MAGb+sB,EAAgB,cAClB,SAACnY,GAAgC,OAAAA,EAAM1Y,OAAOmzB,6BAC9C,SAAArvB,GAAS,kBAAM,OAAAA,MAGbgtB,EAAa,cACf,SAACpY,GAAgC,QAAEA,EAAMsJ,SAASoR,6BAClD,SAAAtzB,GAAU,kBAAM,OAAAA,MAGdixB,EAAa,cACf,SAACrY,GAAgC,QAAEA,EAAMsJ,SAASqR,6BAClD,SAAAvzB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACd4Y,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHua,oBAAqBA,EAAoBva,GACzCkY,eAAgBA,EAAelY,GAC/BmY,cAAeA,EAAcnY,GAC7BoY,WAAYA,EAAWpY,GACvBqY,WAAYA,EAAWrY,OZlBO4a,GAChCC,EaZH,WACH,IAAMC,EAAgC,cAClC,SAAC9a,GAA2B,OAAAA,EAAMwG,QAClC,SAAAjB,GAAe,gBAACX,GACZ,GAAKW,EAAL,CAIA,IAAMwV,EAAmBnW,EAAcgC,QAAahC,EAAcgC,QAAO,IAAIhC,EAAc3b,GAAO2b,EAAc3b,GAE1G+xB,EAAgB,GAAqBD,GAE3C,OAAKC,EAIE,iBAA0BzV,EAAayV,GAHnC,QAObC,EAAoB,cACtB,SAACjb,GAA2B,OAAAA,EAAMwG,QAClC,SAACjB,GAAqB,YAArB,IAAAA,MAAA,IAAqB,SAAC5d,GACnB,IAAMuzB,EAAQ,iBAAO,IAErB,OAAO3V,EAAY4V,MAAK,SAAC1zB,GACrB,OAAAA,EAAW2zB,cAAgBzzB,GACL,gBAAtBF,EAAW8K,QACX2oB,EAAMG,MAAK,SAAAze,GAAQ,yBAAQnV,EAAYmV,aAK7C0e,EAAiB,cACnB,SAACtb,GAA2B,OAAAA,EAAMwG,QAClC,SAAAjB,GAAe,kBACX,GAAKA,EAUL,OANwB,kBAAQ,IAAsB,SAAA3I,GAClD,wBAAO2I,GAAa,SAAC9d,GACjB,MAAuB,gBAAhBmV,EAAKrK,QAA4B,kBAAQ9K,EAAYmV,aAQtE4I,EAAqB,cACvB,SAACxF,GAA2B,OAAAA,EAAMlV,QAClC,SAAAA,GAAQ,kBAAM,OAAAA,MAGZ8rB,EAAe,cACjB,SAAC5W,GAA2B,OAAAA,EAAM1Y,OAAOuvB,aACzC,SAAAA,GAAa,kBAAM,OAAAA,MAGjBQ,EAAiB,cACnB,SAACrX,GAA2B,OAAAA,EAAM1Y,OAAOsqB,oBACzC,SAAC5R,GAA2B,OAAAA,EAAM1Y,OAAOqqB,eACzC,SAACC,EAAkBD,GAAgB,gBAAChqB,GAChC,IAAIA,GAAgBiqB,IAAqBjqB,EAIzC,OAAOgqB,MAIT6F,EAAY,cACd,SAACxX,GAA2B,OAAAA,EAAMsJ,SAASkO,aAC3C,SAAAA,GAAa,kBAAM,QAAEA,MAGnBzF,EAAa,cACf,SAAC/R,GAA2B,OAAAA,EAAMsJ,SAAS0I,sBAC3C,SAAChS,GAA2B,OAAAA,EAAMsJ,SAASyI,cAC3C,SAACC,EAAoBD,GAAe,gBAACpqB,GACjC,QAAIA,GAAgBqqB,IAAuBrqB,MAIlCoqB,MAIjB,OAAO,uBAAW,SACd/R,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHib,kBAAmBA,EAAkBjb,GACrCsb,eAAgBA,EAAetb,GAC/B8a,8BAA+BA,EAA8B9a,GAC7DwF,mBAAoBA,EAAmBxF,GACvC4W,aAAcA,EAAa5W,GAC3BqX,eAAgBA,EAAerX,GAC/BwX,UAAWA,EAAUxX,GACrB+R,WAAYA,EAAW/R,ObxFEub,GAC3BC,EAAqB7G,KACrB8G,EcjBH,WACH,IAAMC,EAAoB,cACtB,SAAC1b,GAA8B,OAAAA,EAAMwG,QACrC,SAAA3B,GAAkB,kBAAM,OAAAA,MAGtBa,EAAwB,cAC1B,SAAC1F,GAA8B,OAAAA,EAAMlV,QACrC,SAAAA,GAAQ,kBAAM,OAAAA,MAGZga,EAAmB,cACrB,SAAC9E,GAA8B,OAAAA,EAAMwG,QACrC,SAAA3B,GAAkB,gBAACtZ,EAAkBwZ,GACjC,OAAOA,EACH,eAAKF,EAAgB,CAAE5b,GAAIsC,EAAUqb,QAAS7B,IAC9C,eAAKF,EAAgB,CAAE5b,GAAIsC,QAIjCqrB,EAAe,cACjB,SAAC5W,GAA8B,OAAAA,EAAM1Y,OAAOuvB,aAC5C,SAAAA,GAAa,kBAAM,OAAAA,MAGjB8E,EAAqB,cACvB,SAAC3b,GAA8B,OAAAA,EAAM1Y,OAAO+oB,gBAC5C,SAACrQ,GAA8B,OAAAA,EAAM1Y,OAAOgpB,mBAC5C,SAACD,EAAcC,GAAoB,gBAAC/kB,GAChC,IAAIA,GAAY8kB,IAAiB9kB,EAIjC,OAAO+kB,MAITkH,EAAY,cACd,SAACxX,GAA8B,OAAAA,EAAMsJ,SAASkO,aAC9C,SAAAA,GAAa,kBAAM,QAAEA,MAGnBjH,EAAkB,cACpB,SAACvQ,GAA8B,OAAAA,EAAMsJ,SAAS+G,gBAC9C,SAACrQ,GAA8B,OAAAA,EAAMsJ,SAASiH,mBAC9C,SAACF,EAAcE,GAAoB,gBAAChlB,GAChC,QAAIA,GAAY8kB,IAAiB9kB,MAIxBglB,MAIjB,OAAO,uBAAW,SACdvQ,GAEA,YAFA,IAAAA,MAAA,IAEO,CACH0b,kBAAmBA,EAAkB1b,GACrC0F,sBAAuBA,EAAsB1F,GAC7C8E,iBAAkBA,EAAiB9E,GACnC4W,aAAcA,EAAa5W,GAC3B2b,mBAAoBA,EAAmB3b,GACvCwX,UAAWA,EAAUxX,GACrBuQ,gBAAiBA,EAAgBvQ,Od/CL4b,GAC9BC,EenBH,WACH,IAAM9D,EAAqB,cACvB,SAAC/X,GAAgC,OAAAA,EAAM1Y,OAAOgmB,sBAC9C,SAACtN,GAAgC,OAAAA,EAAM1Y,OAAO+lB,mBAC9C,SAACC,EAAoBD,GAAoB,gBAAC9hB,GACtC,IAAIA,GAAY+hB,IAAuB/hB,EAIvC,OAAO8hB,MAITyO,EAAkB,cACpB,SAAC9b,GAAgC,OAAAA,EAAM1Y,OAAOspB,mBAC9C,SAAC5Q,GAAgC,OAAAA,EAAM1Y,OAAOqpB,gBAC9C,SAACC,EAAiBD,GAAiB,gBAACplB,GAChC,IAAIA,GAAYqlB,IAAoBrlB,EAIpC,OAAOolB,MAIToL,EAAmB,cACrB,SAAC/b,GAAgC,OAAAA,EAAM1Y,OAAO2pB,oBAC9C,SAACjR,GAAgC,OAAAA,EAAM1Y,OAAO0pB,iBAC9C,SAACC,EAAkBD,GAAkB,gBAACzlB,GAClC,IAAIA,GAAY0lB,IAAqB1lB,EAIrC,OAAOylB,MAITgL,EAA4B,cAC9B,SAAChc,GAAgC,OAAAA,EAAM1Y,OAAOmnB,6BAC9C,SAACzO,GAAgC,OAAAA,EAAM1Y,OAAOknB,0BAC9C,SAACC,EAA2BD,GAA2B,gBAACjjB,GACpD,IAAIA,GAAYkjB,IAA8BljB,EAI9C,OAAOijB,MAITG,EAAiB,cACnB,SAAC3O,GAAgC,OAAAA,EAAMsJ,SAASgE,sBAChD,SAACtN,GAAgC,OAAAA,EAAMsJ,SAASqF,kBAChD,SAACrB,EAAoBqB,GAAmB,gBAACpjB,GACrC,QAAIA,GAAY+hB,IAAuB/hB,MAI9BojB,MAIXzB,EAAgB,cAClB,SAAClN,GAAgC,OAAAA,EAAMwG,QACvC,SAAAA,GAAQ,gBAACjb,GACL,SACIib,EAAKjb,KACLib,EAAKjb,GAAU2hB,mBAKrBiE,EAAc,cAChB,SAACnR,GAAgC,OAAAA,EAAMsJ,SAASsH,mBAChD,SAAC5Q,GAAgC,OAAAA,EAAMsJ,SAAS6H,eAChD,SAACP,EAAiBO,GAAgB,gBAAC5lB,GAC/B,QAAIA,GAAYqlB,IAAoBrlB,MAI3B4lB,MAIXC,EAAe,cACjB,SAACpR,GAAgC,OAAAA,EAAMsJ,SAAS2H,oBAChD,SAACjR,GAAgC,OAAAA,EAAMsJ,SAAS8H,gBAChD,SAACH,EAAkBG,GAAiB,gBAAC7lB,GACjC,QAAIA,GAAY0lB,IAAqB1lB,MAI5B6lB,MAIXrC,EAAsB,cACxB,SAAC/O,GAAgC,OAAAA,EAAMsJ,SAASmF,6BAChD,SAACzO,GAAgC,OAAAA,EAAMsJ,SAASyF,uBAChD,SAACN,EAA2BM,GAAwB,gBAACxjB,GACjD,QAAIA,GAAYkjB,IAA8BljB,MAIrCwjB,MAIjB,OAAO,uBAAW,SACd/O,GAEA,YAFA,IAAAA,MAAA,IAEO,CACH+X,mBAAoBA,EAAmB/X,GACvC8b,gBAAiBA,EAAgB9b,GACjC+b,iBAAkBA,EAAiB/b,GACnCgc,0BAA2BA,EAA0Bhc,GACrD2O,eAAgBA,EAAe3O,GAC/BkN,cAAeA,EAAclN,GAC7BmR,YAAaA,EAAYnR,GACzBoR,aAAcA,EAAapR,GAC3B+O,oBAAqBA,EAAoB/O,OfpGXic,GAChCC,GKzBA3b,EAAc,cAChB,SAACP,GAA+B,OAAAA,EAAMwG,QACtC,SAAAA,GAAQ,gBAAkDjb,GACtD,OAAOib,EAAKjb,OAIb,uBAAW,SACdyU,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHO,YAAaA,EAAYP,QLe3Bmc,GM3BAnX,EAAqB,cACvB,SAAChF,GAA4B,OAAAA,EAAMwG,QACnC,SAAAzd,GAAgB,kBACZ,GAAKA,GAAiBA,EAAa,GAInC,OAAOA,EAAa,GAAGkY,oBAIxB,uBAAW,SACdjB,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHgF,mBAAoBA,EAAmBhF,QNazCoc,EgB3BH,WACH,IAAMC,EAAuB,cACzB,SAACrc,GAAgC,OAAAA,EAAMwG,QACvC,SAAAA,GAAQ,kBAAM,OAAAA,MAGZoQ,EAAe,cACjB,SAAC5W,GAAgC,OAAAA,EAAM1Y,OAAOuvB,aAC9C,SAAAzrB,GAAS,kBAAM,OAAAA,MAGbosB,EAAY,cACd,SAACxX,GAAgC,OAAAA,EAAMsJ,SAASkO,aAChD,SAAApwB,GAAU,kBAAM,QAAEA,MAGtB,OAAO,uBAAW,SACd4Y,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHqc,qBAAsBA,EAAqBrc,GAC3C4W,aAAcA,EAAa5W,GAC3BwX,UAAWA,EAAUxX,OhBKSsc,GAChCC,EiBzBH,WACH,IAAMC,EAAwB,cAC1B,SAACxc,GAAiC,OAAAA,EAAM1Y,OAAO+rB,yBAC/C,SAACrT,GAAiC,OAAAA,EAAM1Y,OAAO8rB,sBAC/C,SAACC,EAAuBD,GAAuB,gBAAC7nB,GAC5C,IAAIA,GAAY8nB,IAA0B9nB,EAI1C,OAAO6nB,MAITqJ,EAAuB,cACzB,SAACzc,GAAiC,OAAAA,EAAM1Y,OAAOosB,wBAC/C,SAAC1T,GAAiC,OAAAA,EAAM1Y,OAAOmsB,qBAC/C,SAACC,EAAsBD,GAAsB,gBAACloB,GAC1C,IAAIA,GAAYmoB,IAAyBnoB,EAIzC,OAAOkoB,MAITsE,EAAqB,cACvB,SAAC/X,GAAiC,OAAAA,EAAM1Y,OAAOgmB,sBAC/C,SAACtN,GAAiC,OAAAA,EAAM1Y,OAAO+lB,mBAC/C,SAACC,EAAoBD,GAAoB,gBAAC9hB,GACtC,IAAIA,GAAY+hB,IAAuB/hB,EAIvC,OAAO8hB,MAITuG,EAAoB,cACtB,SAAC5T,GAAiC,OAAAA,EAAMsJ,SAAS+J,yBACjD,SAACrT,GAAiC,OAAAA,EAAMsJ,SAASsK,qBACjD,SAACP,EAAuBO,GAAsB,gBAACroB,GAC3C,QAAIA,GAAY8nB,IAA0B9nB,MAIjCqoB,MAIXC,EAAoB,cACtB,SAAC7T,GAAiC,OAAAA,EAAMsJ,SAASoK,wBACjD,SAAC1T,GAAiC,OAAAA,EAAMsJ,SAASuK,qBACjD,SAACH,EAAsBG,GAAsB,gBAACtoB,GAC1C,QAAIA,GAAYmoB,IAAyBnoB,MAIhCsoB,MAIXlF,EAAiB,cACnB,SAAC3O,GAAiC,OAAAA,EAAMsJ,SAASgE,sBACjD,SAACtN,GAAiC,OAAAA,EAAMsJ,SAASqF,kBACjD,SAACrB,EAAoBqB,GAAmB,gBAACpjB,GACrC,QAAIA,GAAY+hB,IAAuB/hB,MAI9BojB,MAIXzB,EAAgB,cAClB,SAAClN,GAAiC,OAAAA,EAAMwG,QACxC,SAAAA,GAAQ,gBAACjb,GACL,SACIib,EAAKjb,KACLib,EAAKjb,GAAU2hB,mBAK3B,OAAO,uBAAW,SACdlN,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHwc,sBAAuBA,EAAsBxc,GAC7Cyc,qBAAsBA,EAAqBzc,GAC3C+X,mBAAoBA,EAAmB/X,GACvC4T,kBAAmBA,EAAkB5T,GACrC6T,kBAAmBA,EAAkB7T,GACrC2O,eAAgBA,EAAe3O,GAC/BkN,cAAeA,EAAclN,OjBpEE0c,GACjCC,EAA4BnG,KAC5BoG,GkBJH,WACH,IAAMrc,EAAc,cAChB,SAACP,GAAyB,OAAAA,EAAMwG,QAChC,SAACnU,EAAkB,GAAqD,OAAnD,EAAAa,eAAkEuR,qBACvF,SAACpS,EAAkB,GAA2C,OAAzC,EAAA6F,KAA8CiJ,WACnE,SAAC9O,EAAkB,GAA+C,OAA7C,EAAAY,SAAsDyR,eAC3E,SAACrS,EAAkB,GAAmD,OAAjD,EAAAtJ,aAA8D2Y,mBACnF,SAACrP,EAAkB,GAA8C,OAA5C,EAAAsC,QAAoDsjB,cACzE,SAAC5lB,EAAkB,GAAuD,OAArD,EAAAqG,iBAAsE6hB,uBAC3F,SAAC/T,EAAM/B,EAAmBtD,EAASuD,EAAahD,EAAiBuW,EAAYsC,GAAwB,kBACjG,IAAMrnB,EAAiBuR,IACjBvM,EAAOiJ,IACPlO,EAAWyR,IACX3b,EAAe2Y,KAAqB,GACpC/M,EAAUsjB,KAAgB,GAC1Bvf,EAAmB6hB,KAAyB,GAElD,GAAK/T,GAAStO,GAASjF,EAIvB,OAAO,yCACAuT,GAAI,CACPtT,eAAc,EACdgF,KAAI,EACJjF,SAAQ,EACRlK,aAAY,EACZ4L,QAAO,EACP+D,iBAAgB,QAKtBmkB,EAAwB,aAC1Btc,GACA,SAAAA,GAAe,gBAACuc,GACZ,IAAM/kB,EAAWwI,IAEjB,GAAKxI,EAAL,CAIA,IAAMvB,EAAauB,EAASvB,YAAc,EACpClD,EAAcyE,EAAS9E,SAASK,aAAe,EAErD,OAAOwpB,EAAiBnsB,KAAKosB,IAAIvmB,EAAalD,EAAa,GAAKyE,EAASilB,wBAI3EpG,EAAe,cACjB,SAAC5W,GAAyB,OAAAA,EAAM1Y,OAAOuvB,aACvC,SAAAzrB,GAAS,kBAAM,OAAAA,MAGbgsB,EAAiB,cACnB,SAACpX,GAAyB,OAAAA,EAAM1Y,OAAOkrB,eACvC,SAAApnB,GAAS,kBAAM,OAAAA,MAGb6xB,EAAuB,cACzB,SAACjd,GAAyB,OAAAA,EAAMsJ,SAAS2T,wBACzC,SAAAA,GAAwB,kBAAM,OAAyB,IAAzBA,MAG5BzF,EAAY,cACd,SAACxX,GAAyB,OAAAA,EAAMsJ,SAASkO,aACzC,SAAAA,GAAa,kBAAM,OAAc,IAAdA,MAGjB/E,EAAa,cACf,SAACzS,GAAyB,OAAAA,EAAMsJ,SAASmJ,cACzC,SAAAA,GAAc,kBAAM,OAAe,IAAfA,MAGxB,OAAO,uBAAW,SACdzS,EACA9M,EACAgF,EACAnP,EACA4L,EACA1B,EACAyF,GAEA,YARA,IAAAsH,MAAA,IAQO,CACHO,YAAaA,EAAYP,EAAO,CAC5B9M,eAAc,EACdgF,KAAI,EACJnP,aAAY,EACZ4L,QAAO,EACP1B,SAAQ,EACRyF,iBAAgB,IAEpBmkB,sBAAuBA,EAAsB7c,EAAO,CAChD9M,eAAc,EACdgF,KAAI,EACJnP,aAAY,EACZ4L,QAAO,EACP1B,SAAQ,EACRyF,iBAAgB,IAEpBke,aAAcA,EAAa5W,GAC3BoX,eAAgBA,EAAepX,GAC/Bid,qBAAsBA,EAAqBjd,GAC3CwX,UAAWA,EAAUxX,GACrByS,WAAYA,EAAWzS,OlBpGAkd,GACzBC,GmBnBH,WACH,IAAMxY,EAAW,cACb,SAAC3E,GAAsB,OAAAA,EAAMwG,QAC7B,SAACnU,EAAe,GAAkD,OAAhD,EAAAa,eAA+DuR,uBACjF,SAACpS,EAAe,GAA2C,OAAzC,EAAAsC,QAAiDsjB,gBACnE,SAACzR,EAAMtT,EAAgByB,GAAiB,YAAjB,IAAAA,MAAA,IAAiB,WACpC,GAAK6R,GAAStT,EAId,OAAO,yCACAsT,GAAI,CACPtT,eAAc,EACdyB,QAAO,QAKbgR,EAAe,cACjB,SAAC3F,GAAsB,OAAAA,EAAMlV,QAC7B,SAAAA,GAAQ,kBAAM,OAAAA,MAGZ8rB,EAAe,cACjB,SAAC5W,GAAsB,OAAAA,EAAM1Y,OAAOuvB,aACpC,SAAAzrB,GAAS,kBAAM,OAAAA,MAGbosB,EAAY,cACd,SAACxX,GAAsB,QAAEA,EAAMsJ,SAASkO,aACxC,SAAApwB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACd4Y,EACA9M,EACAyB,GAEA,YAJA,IAAAqL,MAAA,IAIO,CACH2E,SAAUA,EAAS3E,EAAO,CAAE9M,eAAc,EAAEyB,QAAO,IACnDgR,aAAcA,EAAa3F,GAC3B4W,aAAcA,EAAa5W,GAC3BwX,UAAWA,EAAUxX,OnBvBDod,GACtBC,IOhBA/E,EAAqB,cACvB,SAAC,GAA2C,OAAzC,EAAA1kB,MAA+C+R,gBAClD,SAAAA,GAAgB,kBACZ,IAAM7a,EAAO6a,IAEb,OAAO7a,GAAQA,EAAKuJ,YAItBkkB,EAAoB,cACtB,SAAC,GAA2C,OAAzC,EAAA3kB,MAA+C+Q,YAClD,SAAAA,GAAY,kBACR,IAAM/Q,EAAQ+Q,IAEd,OAAO,eAAK/Q,GAASA,EAAME,UAAU,SAAC,G,IAAEmB,EAAA,EAAAA,WACpC,MAAe,oBAAfA,GAAmD,gBAAfA,SAK1CujB,EAAmB,cACrB,SAAC,GAA8C,OAA5C,EAAAzgB,SAAqDwI,eACxD,SAAAA,GAAe,kBACX,IAAMxI,EAAWwI,IAEjB,OAAO,eAAKxI,GAAYA,EAASjE,UAAU,SAAC,GACxC,OAD0C,EAAAwpB,eACzB,YAKvB7E,EAAe,aACjBH,EACAE,EACAD,GACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAMgF,EAAkBjF,IAExB,GAAIiF,GAAmBA,EAAgBt0B,GACnC,MAAO,CACHgM,WAAYsoB,EAAgBt0B,GAC5B8b,UAAWwY,EAAgB3W,SAInC,IAAMvS,EAAUmkB,KAAsBD,IAEtC,OAAIlkB,GAAWA,EAAQY,WACZ,CACHA,WAAYZ,EAAQY,WACpB8P,UAAW1Q,EAAQ0Q,gBAH3B,MASF2T,EAAmB,aACrBJ,EACAE,EACAD,GACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAMgF,EAAkBjF,IAExB,GAAIiF,GAAmBA,EAAgBn2B,OACnC,OAAOm2B,EAAgBn2B,OAAOiW,QAAQ,kBAAmB,IAG7D,IAAMhJ,EAAUmkB,KAAsBD,IAEtC,OAAIlkB,EACOA,EAAQe,OAAOyB,UAD1B,MAMFkP,EAAkB,cACpB,SAAC,GAA2C,OAAzC,EAAAnS,MAA+C+R,gBAClD,SAAAA,GAAgB,kBACZ,IAAM7a,EAAO6a,IAEb,OAAO7a,GAAQA,EAAK7C,UAItB0wB,EAAwB,aAC1BL,GACA,SAAAA,GAAsB,kBAClB,IAAMjkB,EAAUikB,IAEhB,OAAOjkB,GAAWA,EAAQmpB,gBAI5B5E,EAAwB,cAC1B,SAAC,GAA8C,OAA5C,EAAA7gB,SAAqD8kB,yBACxD,SAAAA,GAAyB,gBAACC,QAAA,IAAAA,OAAA,GACtB,IAAMtmB,EAAaqmB,EAAsBC,GAEzC,QAAOtmB,GAAaA,EAAa,MAInCqiB,EAAyB,aAC3BH,GACA,SAAAA,GAAoB,gBAAC9T,GACjB,SAAIA,IAAiBA,EAAc6Y,QAI5B/E,MAAuB,MAAeA,MAAuB,SAIrE,uBAAW,SACd3gB,EACAnE,GAEA,MAAO,CACH6kB,aAAcA,EAAa,CAAE1gB,SAAQ,EAAEnE,MAAK,IAC5C8kB,iBAAkBA,EAAiB,CAAE3gB,SAAQ,EAAEnE,MAAK,IACpDmS,gBAAiBA,EAAgB,CAAEhO,SAAQ,EAAEnE,MAAK,IAClD+kB,sBAAuBA,EAAsB,CAAE5gB,SAAQ,EAAEnE,MAAK,IAC9DglB,sBAAuBA,EAAsB,CAAE7gB,SAAQ,EAAEnE,MAAK,IAC9DilB,uBAAwBA,EAAuB,CAAE9gB,SAAQ,EAAEnE,MAAK,SP1GlE8pB,GoBlCH,WACH,IAAMvF,EAAgB,cAClB,SAACnY,GAA4B,OAAAA,EAAM1Y,OAAOq2B,cAC1C,SAAAvyB,GAAS,kBAAM,OAAAA,MAGbgtB,EAAa,cACf,SAACpY,GAA4B,QAAEA,EAAMsJ,SAAS8O,cAC9C,SAAAhxB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACd4Y,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHmY,cAAeA,EAAcnY,GAC7BoY,WAAYA,EAAWpY,OpBkBG4d,GAElC,OAAO,SAAC5d,EAAOvV,QAAA,IAAAA,MAAA,IACX,INxCiFkC,EMwC3EuG,EAAiB4lB,EAA6B9Y,EAAM9M,gBACpDgF,EAAO8gB,EAAmBhZ,EAAM9H,MAChC2lB,EAAiB3E,EAA6BlZ,EAAM6d,gBACpD1d,EAASgZ,EAAqBnZ,EAAMG,QACpC0U,EAAY2E,EAAsBxZ,EAAM6U,WACxClgB,EAAUglB,EAAqB3Z,EAAMrL,SACrC1B,EAAW+mB,EAAuBha,EAAM/M,UACxC6qB,EAAqB7D,EAA+Bja,EAAM8d,oBAC1DC,EAAOvC,EAAmBxb,EAAMG,QAChCzH,EAAmB4hB,EAA8Bta,EAAMtH,kBACvD6M,EAAcsV,EAAyB7a,EAAMuF,aAC7CV,EAAiB4W,EAA4Bzb,EAAM6E,gBACnDmZ,EAAoBnC,EAA8B7b,EAAMge,mBACxDC,EAAiB/B,EAA6Blc,EAAMie,gBACpDhd,EAAkBkb,EAA8Bnc,EAAMjX,cACtDm1B,EAAoB9B,EAA8Bpc,EAAMke,mBACxDC,EAAqB5B,EAA+Bvc,EAAMme,oBAC1D7qB,EAAcoqB,GAA0B1d,EAAM1M,aAG9CvK,EAAe4zB,EAA0B3c,EAAMjX,aAAcmP,GAC7DH,EAAW6kB,GAAuB5c,EAAMjI,SAAU7E,EAAgBgF,EAAMnP,EAAc4L,EAAS1B,EAAUyF,GACzG9E,EAAQupB,GAAoBnd,EAAMpM,MAAOV,EAAgByB,GAGzDypB,EAAY,CACdlrB,eAAc,EACdgF,KAAI,EACJH,SAAQ,EACR8lB,eAAc,EACd1d,OAAM,EACNpX,aAAY,EACZ8rB,UAAS,EACTlgB,QAAO,EACP1B,SAAQ,EACR6qB,mBAAkB,EAClBC,KAAI,EACJrlB,iBAAgB,EAChB6M,YAAW,EACX3R,MAAK,EACLS,QAjBYgpB,GAAsBtlB,EAAUnE,GAkB5CiR,eAAc,EACdmZ,kBAAiB,EACjBC,eAAc,EACdhd,gBAAe,EACfid,kBAAiB,EACjBC,mBAAkB,EAClB7qB,YAAW,GAGf,OAAO7I,EAAQ4zB,oBN1FkE1xB,EM0FzByxB,ENzFrD96B,OAAOkJ,KAAKG,GACdF,QAAO,SAACC,EAAQvI,GAGb,OAFAuI,EAAOvI,GAAOgwB,GAAkBxnB,EAAIxI,IAE7BuI,IACR,KMoFkE0xB,GqB3F9D,SAASE,GACpBC,EACA9zB,QADA,IAAA8zB,MAAA,IAGA,ICPAC,ECDMC,EFQAC,GERAD,EAAU,IAAI,EAEY,CAC5B,eACA,aACA,mBACA,sBACA,sBACA,yBACA,0BACA,yBACA,qCACA,sBACA,uBACA,uBACA,iBAGoB5rB,SAAQ,SAAA3N,GAC5Bu5B,EAAQxW,SAAS/iB,GAAM,SAACmC,EAAUb,GAAY,WAAI,EAAmBa,EAAUb,SAGnFi4B,EAAQxW,SAAS,4BAA4B,SAAA5gB,GAAY,WAAI,IAA0BA,MACvFo3B,EAAQxW,SAAS,4BAA4B,SAAA5gB,GAAY,WAAI,IAA0BA,MDtBvFm3B,ECwBOC,EDtBA,SAAAE,GAAW,sBAAKA,GAASxgB,KAAK,sBAA0B,SAAAJ,GAC3D,GAAIA,aAAkBpX,OAASoX,EAAOC,mBAAmBrX,MACrD,MAAMoX,EAGV,IAUYzZ,EAVGyZ,EAAOC,UAWO,iBAAX1Z,GAIf,CAAC,OAAQ,UAAW,SAAU,cAAcs6B,OAAM,SAAAz6B,GACrD,OAAAG,EAAOG,eAAeN,MAhBU,CAC5B,IAAMqC,EAAUuX,EAAOC,QAAQ9W,MAAQ6W,EAAOC,QAAQ9W,KAAKkO,OAE3D,MAAM,yCAAK2I,GAAM,CAAEC,QAASwgB,EAAoBlW,YAAYvK,EAAOC,QAASxX,KAOxF,IAAoBlC,EAJZ,MAAMyZ,QDLJ8gB,EAAkCjH,KAGxC,OAAO,0BGEA,0BAAgB,CACnB1kB,eAAgBqW,EAChBrR,KAAM8S,EACNjT,SAAUmc,GACV2J,eAAgBpS,EAChBtL,OAAQ8L,EACRljB,aAAc4pB,GACdkC,UAAW7F,GACXra,QAAS0X,GACTpZ,SAAU8Z,GACV+Q,mBAAoB9Q,GACpBtU,iBAAkBgU,GAClBnH,YAAa8L,GACbzd,MAAOwb,GACP/a,QAASwb,GACThL,eAAgBkL,GAChBiO,kBAAmBxN,GACnByN,eAAgBhM,GAChBiM,kBAAmBrL,GACnBsL,mBAAoBlL,GACpB3f,YAAawgB,KHpBbyK,EAAY,oBACVG,kBAAiB,EAAEI,iBALA,SAAC9e,GAA8B,OAAA6e,EAAgC7e,KAK1CvV,I,uGIXlD,YACI,WAAYpD,GAAZ,MACI,YAAMA,EAAU,CAAEb,QAASa,EAASH,KAAKghB,SAAQ,K,OAEjD,EAAK/kB,KAAO,4BACZ,EAAK+B,KAAO,yB,EAEpB,OAPuD,yBAOvD,EAPA,C,MAAuD,GCDvD,aACI,WACYqF,GAAA,KAAAA,iBAmChB,OAhCI,YAAAmV,aAAA,SAAazW,EAAY,G,IAAA,kBAAE,IAAAkZ,OAAUC,QAAA,YAAAA,QAAgBxW,EAAA,EAAAA,QAC3CI,EAAM,4BAA4B/C,EAClC9B,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe9G,IAAIuI,EAAK,CAChCmW,OAAQ,CACJC,QAAS,YAAoB,IAA2BA,IAE5Djb,QAAO,EACPyE,QAAO,IACRT,OAAM,SAAAC,GACL,GAAIA,EAAMhE,QAAU,KAAOgE,EAAMhE,OAAS,IACtC,MAAM,IAAI,EAA0BgE,GAGxC,MAAMA,MAId,YAAAkV,eAAA,SAAerX,EAAY/B,EAA2B,G,IAAA,kBAAE,IAAAib,OAAUC,QAAA,YAAAA,QAAgBxW,EAAA,EAAAA,QACxEI,EAAM,4BAA4B/C,EAClC9B,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAeyZ,IAAIhY,EAAK,CAChCmW,OAAQ,CACJC,QAAS,YAAoB,IAA2BA,IAE5Dlb,KAAI,EACJC,QAAO,EACPyE,QAAO,KAGnB,EArCA,G,oCCTA,IAAYmzB,EAAZ,2CAAYA,GACR,mEACA,0EACA,wEAHJ,CAAYA,MAAgB,M,qCCQb,SAASC,EAA6BhqB,GACjD,MAAO,CACHb,KAAMa,EAAgBb,KACtBO,iBAAkBM,EAAgB4D,KAClCvD,iBAAkBL,EAAgBM,UAClCN,gBAAiB,CACbO,QAASP,EAAgBO,QACzBpB,KAAMa,EAAgBb,KACtBqB,aAAcR,EAAgBQ,eAb1C,mC,6BCHA,mCAaA,aAGI,WACIypB,EACQC,GAAA,KAAAA,gBAERrzB,KAAKszB,cAAiC,MAAjBF,EAAuB,IAAM,YAASA,GAAcztB,OA8CjF,OAtCI,YAAAuS,KAAA,SACIqb,EACA30B,GAFJ,WAII,GAAI0Z,SAAWtY,KAAKqzB,cAApB,CAIA,IAAKrzB,KAAKqzB,cACN,MAAM,IAAIv4B,MAAM,4DAGpB,IAAM+F,EAASjC,GAAW,oBAAwB0Z,OAAQ,WACrDhG,KACG,kBAAO,SAAAihB,GACH,OAAAA,EAAM5tB,SAAW,EAAK2tB,eACtB,YAAcC,EAAM5Y,KAAM4Y,EAAM5Y,KAAKthB,QACkC,IAAvE,CAACuF,EAAQ40B,YAAa50B,EAAQ60B,WAAWjuB,QAAQ+tB,EAAM5Y,KAAKthB,SAEhE,eAAI,SAAAk6B,GACA,GAAI30B,EAAQ60B,YAAcF,EAAM5Y,KAAKthB,KACjC,MAAMk6B,EAAM5Y,KAGhB,OAAO4Y,EAAM5Y,QAEjB,eAAK,IAER+Y,YAIL,OAFA1zB,KAAKqzB,cAAcM,YAAYJ,EAAOvzB,KAAKszB,eAEpCzyB,IAGX,YAAA+yB,UAAA,SAAUtb,GACNtY,KAAKqzB,cAAgB/a,GAE7B,EArDA,G,uECPA,aAKI,WACIub,GAEA7zB,KAAK8zB,cAAgB,YAASD,GAAcluB,OAC5C3F,KAAK+zB,cAAe,EACpB/zB,KAAKg0B,WAAa,GAqE1B,OAlEI,YAAAC,OAAA,WACQj0B,KAAK+zB,eAIT/zB,KAAK+zB,cAAe,EAEpBzb,OAAO4b,iBAAiB,UAAWl0B,KAAKm0B,kBAG5C,YAAAC,WAAA,WACSp0B,KAAK+zB,eAIV/zB,KAAK+zB,cAAe,EAEpBzb,OAAO+b,oBAAoB,UAAWr0B,KAAKm0B,kBAG/C,YAAAG,YAAA,SAA2Cj7B,EAAak7B,GACpD,IAAIC,EAAYx0B,KAAKg0B,WAAW36B,GAE3Bm7B,IACDx0B,KAAKg0B,WAAW36B,GAAQm7B,EAAY,KAGH,IAAjCA,EAAUhvB,QAAQ+uB,IAClBC,EAAU/nB,KAAK8nB,IAIvB,YAAAE,eAAA,SAA8Cp7B,EAAak7B,GACvD,IAAMC,EAAYx0B,KAAKg0B,WAAW36B,GAElC,GAAKm7B,EAAL,CAIA,IAAMhyB,EAAQgyB,EAAUhvB,QAAQ+uB,GAE5B/xB,GAAS,GACTgyB,EAAUE,OAAOlyB,EAAO,KAIhC,YAAAmyB,QAAA,SAAuCpB,GACnC,IAAMiB,EAAYx0B,KAAKg0B,WAAWT,EAAMl6B,MAEnCm7B,GAILA,EAAUxtB,SAAQ,SAAAutB,GAAY,OAAAA,EAAShB,OAInC,YAAAY,eAAR,SAAuBZ,GACdA,EAAM5tB,SAAW3F,KAAK8zB,eACtB,YAAcP,EAAM5Y,KAAoC4Y,EAAM5Y,KAAKthB,OAKxE2G,KAAK20B,QAAQpB,EAAM5Y,OAPvB,sBADC,K,mCAUL,EA/EA,GAAqB,O,iJCIN,SAASia,EAAiD/tB,GACrE,IAAMC,EAAe,YAAG,a,+CAAsB,OAAR,yBAAQ,EAAzB,CAAiBD,GAiBtC,OAfApP,OAAOsP,oBAAoBF,EAAOlO,WAC7BqO,SAAQ,SAAA1O,GACL,IAAMmO,EAAahP,OAAOwP,yBAAyBJ,EAAOlO,UAAWL,GAEhEmO,GAAsB,gBAARnO,GAInBb,OAAOC,eACHoP,EAAgBnO,UAChBL,EAQhB,SAAmDuO,EAAgBvO,EAAamO,GAC5E,GAAgC,mBAArBA,EAAWzO,MAClB,OAAOyO,EAGX,IAAIouB,EAAW,IAAI,IACfnuB,EAASD,EAAWzO,MACpB88B,EAAiB,kBAAQpuB,GAE7B,OAAO,YAAcG,EAAQvO,EAAK,CAC9BV,IAAA,sBACUI,EAAQ,W,IAAE,sDACZ,IAAM+8B,EAAcD,EAAe59B,KAAI,MAAnB49B,EAAc,0BAAM,GAAS5uB,IAEjD,GAAuC,IAAnC2uB,EAASG,aAAY,MAArBH,EAAyB3uB,GACzB,OAAO6uB,EAGX,IAAMzX,EAAW5W,EAAOxP,KAAI,MAAXwP,EAAM,0BAAM,GAASR,IAEtC,OAAI,YAAQoX,EAAUyX,EAAa,CAAE9xB,UAAW,SAAA3K,GAAO,OAAC,YAAUA,MACvDy8B,GAGXD,EAAeG,MAAMruB,IAAIiuB,EAASK,OAAM,MAAfL,EAAmB3uB,GAAOoX,GAE5CA,IAKX,OAFA7lB,OAAOC,eAAesI,KAAM1H,EAAK,yCAAKmO,GAAU,CAAEzO,MAAK,KAEhDA,GAEX4O,IAAG,SAAC5O,GACA68B,EAAW,IAAI,IACfnuB,EAAS1O,EACT88B,EAAiB,kBAAQpuB,MA3CrByuB,CAAwBtuB,EAAOlO,UAAWL,EAAKmO,OAIpDK,ECrBX,IAAqB,EAArB,WAMI,WAAYyrB,GACRvyB,KAAKo1B,gBAAkB7C,EAAUP,eAUzC,OAPI,YAAAqD,yBAAA,SAAyB31B,GACrB,OAAOM,KAAKo1B,gBAAgBlJ,mBAAmBxsB,IAGnD,YAAA41B,2BAAA,SAA2B51B,GACvB,OAAOM,KAAKo1B,gBAAgBjJ,qBAAqBzsB,IAfpC61B,EAA2B,sBAD/C,GACoBA,GAArB,GCAqB,EAArB,WAMI,WAAYhD,GACRvyB,KAAKo1B,gBAAkB7C,EAAUP,eAUzC,OAPI,YAAAwD,qBAAA,SAAqB91B,GACjB,OAAOM,KAAKo1B,gBAAgBtS,eAAepjB,IAG/C,YAAA+1B,uBAAA,SAAuB/1B,GACnB,OAAOM,KAAKo1B,gBAAgBrS,iBAAiBrjB,IAfhCg2B,EAA4B,sBADhD,GACoBA,GAArB,GCDe,SAASC,EAA8BpD,GAIlD,MAAO,CACH92B,OAJW,IAAI,EAA4B82B,GAK3C9U,SAJa,IAAI,EAA6B8U,ICEtD,ICVKqD,EDUgB,EAArB,WAMI,WACYC,EACAC,GAFZ,WACY,KAAAD,SACA,KAAAC,+BAER91B,KAAK+1B,OAASJ,EAA8B31B,KAAK61B,OAAOzhB,YAExDpU,KAAK61B,OAAOG,WAAU,SAAA7hB,GAClB,EAAK4hB,OAASJ,EAA8BxhB,MAqHxD,OAlGI,YAAAC,SAAA,WACI,OAAOpU,KAAK+1B,QAiChB,YAAAC,UAAA,SACIC,G,UADJ,OAEI,oDAEA,OAAO,EAAAj2B,KAAK61B,QAAOG,UAAS,kCACxB,WAAM,OAAAC,EAAW,EAAK7hB,aACtB,SAAAD,GAAS,OAAAA,EAAM6d,eAAe5d,aAC3B8hB,EAAQp1B,KAAI,SAAAkC,GAAU,gBAACmR,GAAqC,OAAAnR,EAAO2yB,EAA8BxhB,WAsB5G,YAAAgiB,iBAAA,SAAiBv3B,GAAjB,IEzGgCxB,EFyGhC,OACUg5B,GE1GsBh5B,EF0GKwB,EAAQkhB,YEzGtC,kBAAkB5a,KAAK9H,GF0GtB,CAACwB,EAAQkhB,aGvGN,SAA4BuW,EAAkBC,GACzD,IAAMC,EAAanxB,SAASoxB,iBAAiBH,GAE7C,IAAKE,EAAWj5B,OACZ,MAAM,IAAI,IAAqB,2DAA2D+4B,GAG9F,OAAO/zB,MAAM3J,UAAUiY,MAAM1Z,KAAKq/B,GAC7Bz1B,KAAI,SAAC21B,GAKF,OAJKA,EAAUr5B,KACXq5B,EAAUr5B,GAAK,mBAASk5B,IAGrBG,EAAUr5B,MH2FjBs5B,CAAmB93B,EAAQkhB,YAAgBlhB,EAAQc,SAAQ,eAE/D,OAAO0P,QAAQC,IACX+mB,EAAat1B,KAAI,SAAAgf,GACb,IAAM5N,EAAS,EAAK4jB,6BAA6BnnB,WAAW,yCAAK/P,GAAO,CAAEkhB,YAAW,KAC/E6W,EAAU,0BAA0B/3B,EAAQc,SAAQ,IAAIogB,EAE9D,OAAO,EAAK+V,OAAOe,SAAS1kB,EAAQ,CAAEykB,QAAO,QAGhD33B,MAAK,WAAM,SAAKoV,eAezB,YAAAyiB,mBAAA,SAAmBj4B,GAAnB,WACUsT,EAASlS,KAAK81B,6BAA6BgB,aAAal4B,GACxD+3B,EAAU,0BAA0B/3B,EAAQc,SAElD,OAAOM,KAAK61B,OAAOe,SAAS1kB,EAAQ,CAAEykB,QAAO,IACxC33B,MAAK,WAAM,SAAKoV,eAhIR2iB,EAAyB,sBAD7C,KACoBA,GAArB,G,wCIGA,WACI,WACYC,EACAC,GADA,KAAAD,YACA,KAAAC,8BAuChB,OApCI,YAAAtoB,WAAA,SAAW/P,GAAX,WACI,OAAO,SAAA2T,GACH,IAAMtT,EAAO,CAAES,SAAUd,EAAQc,SAAUogB,YAAalhB,EAAQkhB,aAEhE,OAAIvN,EAAM6B,WAAW4d,eAAe3Q,cAAcziB,EAAQc,SAAUd,EAAQkhB,aACjE,kBAGJ,iBACH,aAAG,uBAAa,IAAyBE,+BAA2BpgB,EAAWX,IAC/E,EAAKg4B,4BAA4Bx3B,kBAAkBb,EAAQc,SAAU,CAAEK,QAASnB,EAAQmB,QAAS2S,UAAU,IAC3G,iBAAM,WAAM,SAAKskB,UAAUp/B,IAAIgH,EAAQc,UAAUiP,WAAW/P,GACvDI,MAAK,WAAM,8BAAa,IAAyB6gB,+BAA2BjgB,EAAWX,UAC9FqT,KACE,sBAAW,SAAA/S,GAAS,mBAAiB,IAAyB0gB,uBAAwB1gB,EAAON,SAKzG,YAAA63B,aAAA,SAAal4B,GAAb,WACI,OAAO,SAAA2T,GACH,IAAMtT,EAAO,CAAES,SAAUd,EAAQc,UAEjC,OAAK6S,EAAM6B,WAAW4d,eAAe3Q,cAAcziB,EAAQc,UAIpD,iBACH,aAAG,uBAAa,IAAyBwgB,iCAA6BtgB,EAAWX,IACjF,iBAAM,WAAM,SAAK+3B,UAAUp/B,IAAIgH,EAAQc,UAAUo3B,eAC5C93B,MAAK,WAAM,8BAAa,IAAyB+gB,iCAA6BngB,EAAWX,UAChGqT,KACE,sBAAW,SAAA/S,GAAS,mBAAiB,IAAyB4gB,yBAA0B5gB,EAAON,OARxF,oBAYvB,EA1CA,G,4HHbA,SAAK22B,GACD,2BACA,qCACA,kDACA,2CACA,qCACA,0BACA,gCAPJ,CAAKA,MAAwB,KAUd,Q,kBIEf,WAII,WACYC,EACAqB,EACAC,EACAC,EACAC,EACAC,QAAA,IAAAA,OAAA,GALA,KAAAzB,SACA,KAAAqB,yBACA,KAAAC,uBACA,KAAAC,sBACA,KAAAC,cACA,KAAAC,eA0MhB,OAvMI,YAAA3oB,WAAA,SAAW/P,GAAX,WACU24B,GAAiBv3B,KAAKs3B,aAAe14B,EAAQ44B,sBAAwB54B,EAAQsrB,kBAAoB,GACjG/V,EAAQnU,KAAK61B,OAAOzhB,WACpB2E,EAAgB/Y,KAAKy3B,eAAiBtjB,EAAM6E,eAAeC,iBAAiBra,EAAQc,UAE1F,IAAKqZ,IAAkBA,EAAcnK,YACjC,MAAM,IAAI,IAAiB,IAAqB5U,sBAKpD,OAFAgG,KAAKm3B,qBAAqBxoB,WAAWoK,EAAcnK,aAE5CQ,QAAQC,IAAI,CACfrP,KAAKm3B,qBAAqB7nB,oBAC1BtP,KAAKo3B,oBAAoBnpB,eAExBjP,MAAK,SAAC,G,IAACoP,EAAA,KAAgBF,EAAA,KACpB,EAAKqB,gBAAkBnB,EAEvB,IAAMspB,EAAiB,GACjBC,EAAoB,GAQ1B,OANIJ,EAAcK,YACdF,EAAejrB,KAAKyB,EAAO2pB,QAAQC,QAEnCH,EAAkBlrB,KAAKyB,EAAO2pB,QAAQC,QAGnC5pB,EAAO6pB,OAAOC,OAAO,CACxBC,IAAKlf,EAAczE,OAAO4jB,SAAW,UAAY,aACjDC,SAAQZ,EAAca,qBACtBC,QAAS,CACLC,QAASZ,EACTa,WAAYZ,GAEhBa,MAAO,oBACHC,MAAO,OACPjP,MAAO,EAAK8N,aAAe,cAAW13B,GACnC,eAAK23B,EAAciB,MAAO,SAAU,OAAQ,QAAS,QAAS,QAAS,UAAW,iBAEzFhwB,QAAS,WAAM,SAAKkwB,cAAcnB,EAAcniB,gBAAiBmiB,EAAcoB,iBAC/EC,YAAa,SAAAje,GAAQ,SAAKke,iBAAiBle,EAAM4c,EAAca,qBAAsBb,EAAcuB,oBACpGl6B,EAAQkhB,iBAIvB,YAAAgX,aAAA,WAMI,OALA92B,KAAKuP,qBAAkB3P,EACvBI,KAAKy3B,oBAAiB73B,EAEtBI,KAAKm3B,qBAAqBpnB,WAEnBX,QAAQY,WAGX,YAAA0oB,cAAR,SACIz7B,EACA87B,GAFJ,WAII,OAAO/4B,KAAK61B,OAAOe,SAAS52B,KAAKk3B,uBAAuBhjB,uBACnDlV,MAAK,SAAAmV,GACF,IAAMjI,EAAWiI,EAAMjI,SAASwI,cAC1BJ,EAASH,EAAMG,OAAOiF,iBACtBnS,EAAW+M,EAAM/M,SAASyR,cAC1BzD,OAA8BxV,IAAZ3C,EACpBmK,GAAYA,EAASE,WAAaF,EAASE,UAAU,GACrDrK,EAEJ,IAAK,EAAKsS,gBACN,MAAM,IAAI,IAAoB,IAAwBypB,8BAG1D,IAAK9sB,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,IAAK6a,EACD,MAAM,IAAI,IAAiB,IAAqB5a,uBAGpD,OAAO,EAAK6V,gBAAgB0pB,cAAc,CACtCC,KAAM,WACNC,uBAAuB,EACvBC,yBAAyB,EACzBC,wBAAyBjkB,EAAkB,EAAKkkB,uBAAuBlkB,QAAmBxV,EAC1FsB,OAAQgL,EAASilB,mBACjBhpB,SAAUmM,EAAOnM,SAASG,KAC1BixB,YAAa,EAAKjC,kBAGzBh4B,OAAM,SAAAC,GAKH,MAJIw5B,GACAA,EAAQx5B,GAGNA,MAIV,YAAAs5B,iBAAR,SACIle,EACAyd,EACAW,GAHJ,WAKI,IAAK/4B,KAAKuP,kBAAoBvP,KAAKy3B,eAC/B,MAAM,IAAI,IAAoB,IAAwBuB,8BAG1D,IAAMt5B,EAAWM,KAAKy3B,eAAer6B,GAErC,OAAOgS,QAAQC,IAAI,CACfrP,KAAKuP,gBAAgBiqB,gBAAgB7e,GACrC3a,KAAKm3B,qBAAqBznB,iBAAiB,CAAExB,QAAQ,MAEpDlP,MAAK,SAAC,G,IAACmT,EAAA,KAAWrC,EAAA,KAAAA,WAWf,OAVA,EAAKunB,YAAYoC,SAAS,gBAAiB,CACvCC,aAAc,SACdzP,SAAUvqB,EACVwS,OAAQkmB,EAAuB,kBAAoB,wBACnDxG,MAAOzf,EAAQyf,MACf+H,YAAa7pB,EACb8pB,iBAAkBC,KAAKC,UAAU,EAAKC,4BAA4B5nB,IAClE6nB,gBAAiBH,KAAKC,UAAU,EAAKG,2BAA2B9nB,MAG7DA,KAEV7S,OAAM,SAAAC,GAKH,MAJIw5B,GACAA,EAAQx5B,GAGNA,MAIV,YAAAw6B,4BAAR,SAAoC5nB,GAChC,IAAMiD,EAAkBjD,EAAQ+nB,QAAQ9kB,gBAElC,GADgBA,GAAmBA,EAAgB+kB,eAAiB,IACpE,WAAC58B,EAAA,KAAWC,EAAA,KAElB,MAAO,CACHkK,MAAOyK,EAAQ+nB,QAAQxyB,MACvB0yB,WAAY78B,EACZ88B,UAAW78B,EACX88B,aAAcnoB,EAAQ+nB,QAAQ37B,MAC9Bg8B,eAAgBnlB,GAAmBA,EAAgBolB,MACnDC,eAAgBrlB,GAAmBA,EAAgBslB,MACnD58B,KAAMsX,GAAmBA,EAAgBtX,KACzCqW,MAAOiB,GAAmBA,EAAgBjB,MAC1CwmB,aAAcvlB,GAAmBA,EAAgB9W,YACjDs8B,YAAaxlB,GAAmBA,EAAgBhX,aAIhD,YAAA67B,2BAAR,SAAmC9nB,GAC/B,IAAM9K,EAAiB8K,EAAQ+nB,QAAQ7yB,eACjC+N,EAAkBjD,EAAQ+nB,QAAQ9kB,gBAExC,OAAI/N,EACO,CACHK,MAAOyK,EAAQ+nB,QAAQxyB,MACvB0yB,WAAYjoB,EAAQ+nB,QAAQ38B,UAC5B88B,UAAWloB,EAAQ+nB,QAAQ18B,SAC3B88B,aAAcnoB,EAAQ+nB,QAAQ37B,MAC9Bg8B,eAAgBlzB,EAAemzB,MAC/BC,eAAgBpzB,EAAeqzB,MAC/B58B,KAAMuJ,EAAevJ,KACrBqW,MAAO9M,EAAe8M,MACtBwmB,aAActzB,EAAe/I,YAC7Bs8B,YAAavzB,EAAejJ,YAI7B,CACHsJ,MAAOyK,EAAQ+nB,QAAQxyB,MACvB0yB,WAAYjoB,EAAQ+nB,QAAQ38B,UAC5B88B,UAAWloB,EAAQ+nB,QAAQ18B,SAC3B88B,aAAcnoB,EAAQ+nB,QAAQ37B,MAC9Bg8B,eAAgBnlB,GAAmBA,EAAgBolB,MACnDC,eAAgBrlB,GAAmBA,EAAgBslB,MACnD58B,KAAMsX,GAAmBA,EAAgBtX,KACzCqW,MAAOiB,GAAmBA,EAAgBjB,MAC1CwmB,aAAcvlB,GAAmBA,EAAgB9W,YACjDs8B,YAAaxlB,GAAmBA,EAAgBhX,aAIhD,YAAAk7B,uBAAR,SAA+Br8B,GAC3B,MAAO,CACHu9B,MAAOv9B,EAAQU,SACf+8B,MAAOz9B,EAAQY,SACfC,KAAMb,EAAQa,KACdqW,MAAOlX,EAAQiB,oBACfE,WAAYnB,EAAQmB,WACpBE,YAAarB,EAAQqB,YACrBC,MAAOtB,EAAQsB,MACf47B,cAAkBl9B,EAAQM,UAAS,IAAIN,EAAQO,WAG3D,EApNA,GCHqB,EAArB,WAII,WACYq4B,EACAwB,EACAH,EACA2D,GAHA,KAAAhF,SACA,KAAAwB,cACA,KAAAH,yBACA,KAAA2D,6BA+EhB,OA5EI,YAAAlsB,WAAA,SAAW/P,GAAX,WACYkhB,EAAA,EAAAA,YAAapgB,EAAA,EAAAA,SAErB,IAAKogB,IAAgBpgB,EACjB,MAAM,IAAI,IAAqB,qEAKnC,OAFAM,KAAK86B,UAAYp7B,EAEVM,KAAK61B,OAAOe,SAAS52B,KAAKk3B,uBAAuBhjB,uBACnDlV,MAAK,WAAM,SAAK67B,2BAA2BlsB,WAAW,EAAKosB,mBAC3D/7B,MAAK,WACF,EAAKg8B,cAAgB,EAAKC,oBAAoBnb,OAI1D,YAAAgX,aAAA,WAMI,OALI92B,KAAKg7B,eAAiBh7B,KAAKg7B,cAAcE,aACzCl7B,KAAKg7B,cAAcE,WAAWC,YAAYn7B,KAAKg7B,eAC/Ch7B,KAAKg7B,mBAAgBp7B,GAGlBI,KAAK66B,2BAA2B/D,gBAGnC,YAAAmE,oBAAR,SAA4Bnb,GACxB,IAAM2W,EAAYrxB,SAASg2B,eAAetb,GAE1C,IAAK2W,EACD,MAAM,IAAI,IAAqB,+DAGnC,IAAM4E,EAAkBr7B,KAAK66B,2BAA2BS,aAAat7B,KAAKu7B,0BAI1E,OAFA9E,EAAU+E,YAAYH,GAEfA,GAGH,YAAAN,aAAR,WACI,IAAK/6B,KAAK86B,UACN,MAAM,IAAI,IAAoB,IAAwB/rB,uBAG1D,OAAO/O,KAAK86B,WAIR,YAAAS,yBAAR,SAAiChI,GADjC,WAII,OAFAA,EAAMkI,iBAECz7B,KAAK66B,2BAA2Ba,gBAClC18B,MAAK,SAAAib,GAAe,SAAK4gB,2BAA2Bc,cAAc1hB,GAClEjb,MAAK,WACEib,EAAY7E,iBACZ,EAAKylB,2BAA2Be,sBAAsB3hB,EAAY7E,uBAGzEpW,MAAK,WAAM,SAAK68B,8BAChBv8B,OAAM,SAAAC,GAAS,SAAKu8B,SAASv8B,OAG9B,YAAAs8B,yBAAR,WACI77B,KAAKq3B,YAAYoC,SAAS,gBAAiB,CACvCn+B,QAAS,CACL2E,OAAQ,YACR,eAAgB,wCAKpB,YAAA67B,SAAR,SAAiBv8B,GACb,GAAIA,GAA2B,aAAlBA,EAAM5E,QACf,MAAM4E,GAzBd,sBADC,K,6CA6BL,EAvFA,G,SCFqB,EAArB,WAKI,WACYs2B,EACAqB,EACA6E,GAFA,KAAAlG,SACA,KAAAqB,yBACA,KAAA6E,0BAwFhB,OArFI,YAAAptB,WAAA,SAAW/P,GAAX,WACYkhB,EAAA,EAAAA,YAAapgB,EAAA,EAAAA,SAErB,IAAKogB,IAAgBpgB,EACjB,MAAM,IAAI,IAAqB,qEAKnC,OAFAM,KAAK86B,UAAYp7B,EAEVM,KAAK61B,OAAOe,SAAS52B,KAAKk3B,uBAAuBhjB,uBACnDlV,MAAK,SAAAmV,GACF,IAAM4E,EAAgB5E,EAAM6E,eAAeC,iBAAiBvZ,GAE5D,IAAKqZ,IAAkBA,EAAciC,mBAAmBxG,WACpD,MAAM,IAAI,IAAiB,IAAqBxa,sBAGpD,OAAO,EAAK+hC,wBAAwBC,KAAKjjB,EAAczE,OAAO4jB,aAEjEl5B,MAAK,SAAAi9B,GACF,EAAKC,kBAAoBD,EACzB,EAAKE,cAAgB,EAAKlB,oBAAoBnb,OAI1D,YAAAgX,aAAA,WAOI,OANI92B,KAAKm8B,eAAiBn8B,KAAKm8B,cAAcjB,aACzCl7B,KAAKm8B,cAAc9H,oBAAoB,QAASr0B,KAAKu7B,0BACrDv7B,KAAKm8B,cAAcjB,WAAWC,YAAYn7B,KAAKm8B,eAC/Cn8B,KAAKm8B,mBAAgBv8B,GAGlBwP,QAAQY,WAGX,YAAAirB,oBAAR,SAA4Bnb,GACxB,IAAMsc,EAAkBh3B,SAASg2B,eAAetb,GAEhD,IAAKsc,EACD,MAAM,IAAIthC,MAAM,wCAGpB,IAAMuhC,EAASj3B,SAASC,cAAc,SAQtC,OANAg3B,EAAOhjC,KAAO,QACdgjC,EAAOC,IAAM,4EACbF,EAAgBZ,YAAYa,GAE5BA,EAAOnI,iBAAiB,QAASl0B,KAAKu7B,0BAE/Bc,GAGH,YAAAE,yBAAR,WACI,IAAMpoB,EAAQnU,KAAK61B,OAAOzhB,WACpBlI,EAAWiI,EAAMjI,SAASwI,cAC1BqE,EAAgB/Y,KAAK86B,UAAY3mB,EAAM6E,eAAeC,iBAAiBjZ,KAAK86B,WAAa,KAE/F,IAAK5uB,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,IAAKsf,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpD,MAAO,CACHwa,WAAYuE,EAAciC,mBAAmBxG,WAC7CgoB,iBAAkBzjB,EAAciC,mBAAmBwhB,iBACnDt7B,OAAQgL,EAASG,KAAKowB,WAAW35B,WACjCqF,SAAU+D,EAASG,KAAKlE,SAASG,KACjCo0B,OAAQxwB,EAASG,KAAKjP,GACtBu/B,yBAAyB,EACzB1zB,YAAa,YAAe,UAK5B,YAAAsyB,yBAAR,WACI,IAAKv7B,KAAKk8B,kBACN,MAAM,IAAI,IAAoB,IAAwBlD,8BAG1Dh5B,KAAKk8B,kBAAkBhwB,SAASlM,KAAKu8B,6BALzC,sBADC,K,6CAQL,EAhGA,G,UCIA,WAGI,WACY1G,EACAqB,EACAE,EACAC,EACAuF,QAAA,IAAAA,MAAA,IAJA,KAAA/G,SACA,KAAAqB,yBACA,KAAAE,sBACA,KAAAC,cACA,KAAAuF,QAoHhB,OAjHI,YAAAjuB,WAAA,SAAW/P,GAAX,WACU24B,EAAgB34B,EAAQsP,OACxBiG,EAAQnU,KAAK61B,OAAOzhB,WACpB2E,EAAgB/Y,KAAKy3B,eAAiBtjB,EAAM6E,eAAeC,iBAAiBra,EAAQc,UAE1F,IAAK63B,EACD,MAAM,IAAI,IAGd,IAAKxe,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpD,OAAOgG,KAAKo3B,oBAAoBnpB,WAAW8K,EAAczE,OAAOuoB,YAC3D79B,MAAK,SAAAkP,G,MACF,IAAK6K,IAAkBA,EAAczE,OAAOuoB,WACxC,MAAM,IAAI,IAAiB,IAAqB7iC,sBAGpD,IAAM6iC,EAAa9jB,EAAczE,OAAOuoB,WAClC5E,EAAMlf,EAAczE,OAAO4jB,SAAW,UAAY,aAClDtpB,IAAW,MAAyBqpB,GAAMV,EAAcuF,SAAQ,GAEhEpF,EAAiB,GACjBC,EAAoB,GAQ1B,OANIJ,EAAcK,YACdF,EAAejrB,KAAKyB,EAAO2pB,QAAQC,QAEnCH,EAAkBlrB,KAAKyB,EAAO2pB,QAAQC,QAGnC5pB,EAAO6pB,OAAOC,OAAO,CACxBC,IAAG,EACHrqB,OAAQgB,EACRupB,OAAQZ,EAAca,qBACtBC,QAAS,CACLC,QAASZ,EACTa,WAAYZ,GAEhBa,MAAO,oBACHC,MAAO,QACJ,eAAKlB,EAAciB,MAAO,SAAU,OAAQ,QAAS,QAAS,QAAS,UAAW,iBAEzFhwB,QAAS,SAAChC,EAAGu2B,GAAY,SAAKrE,cAAcmE,EAAYE,EAASxF,EAAcoB,iBAC/EC,YAAa,SAACje,EAAMoiB,GAAY,SAAKlE,iBAAiBle,EAAMoiB,EAASxF,EAAca,qBAAsBb,EAAcuB,oBACxHl6B,EAAQkhB,iBAIvB,YAAAgX,aAAA,WAGI,OAFA92B,KAAKy3B,oBAAiB73B,EAEfwP,QAAQY,WAGX,YAAA0oB,cAAR,SAAsBmE,EAAoBE,EAAyBhE,GAAnE,WACI,IAAKgE,EACD,MAAM,IAAI,IAAoB,IAAwB/D,8BAG1D,OAAOh5B,KAAK61B,OAAOe,SAAS52B,KAAKk3B,uBAAuBhjB,uBACnDlV,MAAK,SAAAmV,GACF,IAAM9H,EAAO8H,EAAM9H,KAAKiJ,UAClBonB,EAASrwB,EAAOA,EAAKjP,GAAK,GAEhC,OAAO2/B,EAAQ/kB,QAAQE,KAAQ,EAAK0kB,MAAK,wCAAyC,CAAEC,WAAU,EAAEH,OAAM,GAAI,CACtGphC,QAAS,CACL,iBAAkB,UAI7B0D,MAAK,SAAAg+B,GAAO,OAAAA,EAAI5/B,MAChBkC,OAAM,SAAAC,GAKH,MAJIw5B,GACAA,EAAQx5B,GAGNA,MAIV,YAAAs5B,iBAAR,SACIle,EACAoiB,EACA3E,EACA0D,GAJJ,WAMI,IAAK97B,KAAKy3B,eACN,MAAM,IAAI,IAAoB,IAAwBuB,8BAG1D,IAAK+D,EACD,MAAM,IAAI,IAAoB,IAAwB/D,8BAG1D,IAAKre,EAAKsiB,YAActiB,EAAKuiB,QACzB,MAAM,IAAI,IAAiB,IAAqBpjC,gBAGpD,IAAM4F,EAAWM,KAAKy3B,eAAer6B,GAErC,OAAO2/B,EAAQv0B,QAAQ5Q,IAAI+iB,EAAKsiB,WAAWj+B,MAAK,SAAAmT,GAC5C,EAAKklB,YAAYoC,SAAS,gBAAiB,CACvCC,aAAc,SACdzP,SAAUvqB,EACVwS,OAAQkmB,EAAuB,kBAAoB,wBACnD+E,UAAWxiB,EAAKsiB,UAChBG,QAASziB,EAAKuiB,QACdG,UAAWxD,KAAKC,UAAU3nB,EAAQmrB,MAAMC,kBAIxD,EA5HA,G,UCLA,WAII,WACY1H,EAEAqB,EACAsG,GAHA,KAAA3H,SAEA,KAAAqB,yBACA,KAAAsG,8BA8FhB,OA3FI,YAAA7uB,WAAA,SAAW/P,GAAX,WACYkhB,EAAA,EAAAA,YAAapgB,EAAA,EAAAA,SAErB,IAAKogB,EACD,MAAM,IAAI,IAAqB,qEAKnC,OAFA9f,KAAK86B,UAAYp7B,EAEVM,KAAK61B,OAAOe,SAAS52B,KAAKk3B,uBAAuBhjB,uBACnDlV,MAAK,WAAM,SAAKw+B,4BAA4B7uB,WAAW,EAAKosB,mBAC5D/7B,MAAK,WACF,EAAKg8B,cAAgB,EAAKC,oBAAoBnb,OAK1D,YAAAgX,aAAA,WAMI,OALI92B,KAAKg7B,eAAiBh7B,KAAKg7B,cAAcE,aACzCl7B,KAAKg7B,cAAcE,WAAWC,YAAYn7B,KAAKg7B,eAC/Ch7B,KAAKg7B,mBAAgBp7B,GAGlBI,KAAKw9B,4BAA4B1G,gBAGpC,YAAAmE,oBAAR,SAA4Bnb,GAGxB,IAFkB1a,SAASq4B,cAAc,IAAI3d,GAGzC,MAAM,IAAI,IAAqB,+DAGnC,IAAM3L,EAAQnU,KAAK61B,OAAOzhB,WACpB2E,EAAiB5E,EAAM6E,eAAeC,iBAAiBjZ,KAAK+6B,gBAE5DzmB,EAASH,EAAMG,OAAOiF,iBAE5B,IAAKjF,EACD,MAAM,IAAI,IAAiB,IAAqB5a,uBAGpD,IAAKqf,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAG7C,QAAAsa,OAASuoB,EAAA,EAAAA,WAAY3E,EAAA,EAAAA,SAAW,IAAAld,mBAAqB0iB,EAAA,EAAAA,iBAAkBC,EAAA,EAAAA,eAAgBC,EAAA,EAAAA,OAE9F,IAAKf,IAAe3E,EAChB,MAAM,IAAI,IAGd,IAAM2F,EAAsB,CACxBhB,WAAU,EACViB,QAAS5F,EACTwF,iBAAgB,EAChBC,eAAc,EACdC,OAAM,EACNG,YAAa,aACbC,sBAAuB,CACnB79B,IAAQmU,EAAO2pB,MAAMC,SAAQ,0BAA0Bl+B,KAAK+6B,gBAEhEoD,UAAW,IAAoBC,MAGnC,OAAOp+B,KAAKw9B,4BAA4BlC,aAAa,IAAIxb,EAAe+d,IAGpE,YAAA9C,aAAR,WACI,IAAK/6B,KAAK86B,UACN,MAAM,IAAI,IAAiB,IAAqB9gC,sBAGpD,OAAOgG,KAAK86B,WAkBpB,EAtGA,GC4Be,SAASuD,EACpBz/B,GAEA,IAAM0/B,EAAO1/B,GAAWA,EAAQ0/B,KAC1B/rB,EAAQ,cACRgsB,EAAgB,8BAAoB,CAAED,KAAI,IAC1CE,EAAa,2BAAiB,CAAEF,KAAI,IAE1C,OAAO,IAAI,EACP/rB,EACA,IAAI,ECxBG,SACXA,EACAgsB,EACAC,EACAF,GAEA,IAAMG,EAAW,IAAI,IACfC,EAAe,4BACfC,EAAwB,IAAI,IAC9B,IAAI,IAAsBJ,GAC1B,IAAI,IAAoB,IAAI,IAAoBA,KA6EpD,OA1EAE,EAASriB,SAAS,EAAyBwiB,kBAAkB,WACzD,WAAI,EACArsB,EACAosB,EACA,IAAI,IAAoB,IAAI,IAAsBD,IAClD,IAAI,IAAmBA,GACvBF,MAIRC,EAASriB,SAAS,EAAyByiB,yBAAyB,WAChE,WAAI,EACAtsB,EACAosB,EACA,IAAI,IAAoB,IAAI,IAAsBD,IAClD,IAAI,IAAmBA,GACvBF,GACA,MAIRC,EAASriB,SAAS,EAAyB0iB,YAAY,WACnD,WAAI,EACAvsB,EACAosB,EACA,IAAI,IAAuBD,OAGnCD,EAASriB,SAAS,EAAyB2iB,qBAAqB,WAC5D,WAAI,EACAxsB,EACAisB,EACAG,EACA,YACIpsB,EACA,IAAI,IACA,IAAI,IACA,IAAI,IAAsBmsB,UAO9CD,EAASriB,SAAS,EAAyB4iB,kBAAkB,WACzD,WAAI,EACAzsB,EACAisB,EACAG,EACA,YACIpsB,EACA,IAAI,SAKhBksB,EAASriB,SAAS,EAAyB6iB,eAAe,WACtD,WAAI,EACA1sB,EACAosB,EACA,IAAI,IAAmBD,GACvBF,EACAF,MAIRG,EAASriB,SAAS,EAAyB8iB,aAAa,WACpD,WAAI,EACA3sB,EACAosB,EACA,YAAiCpsB,OAIlCksB,ED9DCU,CAA6B5sB,EAAOgsB,EAAeC,EAAYF,GAC/D,IAAI,IAA2B,IAAI,IAA2BC,MA9C1E,mC,iCEEYa,E,oECOZ,YACI,WAAY5jC,GAAZ,MACI,YAAMA,EAAU,CAAEb,QAASa,EAASH,KAAKghB,SAAQ,K,OAEjD,EAAK/kB,KAAO,yBACZ,EAAK+B,KAAO,sB,EAEpB,OAPoD,yBAOpD,EAPA,C,MAAoD,G,SDPpD,SAAY+lC,GACR,uCACA,mCACA,+BAHJ,CAAYA,MAAsB,KAYlC,I,EAAA,YACI,WACIzkC,EACOvB,QAAA,IAAAA,MAAkCgmC,EAAuBC,cAFpE,MAII,YAAM1kC,GAAW,uCAAqC,K,OAF/C,EAAAvB,UAIP,EAAK9B,KAAO,qBACZ,EAAK+B,KAAO,iB,EAEpB,OAVgD,yBAUhD,EAVA,CAAgD,K,SEM3B,EAArB,WAOI,WACYimC,EACAC,EACAC,EACAC,EACA/gC,EACAghC,EACAC,EACAC,GARZ,WACY,KAAAN,iBACA,KAAAC,mBACA,KAAAC,iBACA,KAAAC,oBACA,KAAA/gC,iBACA,KAAAghC,WACA,KAAAC,YACA,KAAAC,WAER5/B,KAAK6/B,aAAc,EAEf7/B,KAAK4/B,SAASE,YACd9/B,KAAKu/B,iBAAiBjL,YAAY,IAA0ByL,iBAAkB//B,KAAK4/B,SAASE,YAG5F9/B,KAAK4/B,SAAS7G,SACd/4B,KAAKu/B,iBAAiBjL,YAAY,IAA0B0L,cAAehgC,KAAK4/B,SAAS7G,SAGzF/4B,KAAK4/B,SAASK,QACdjgC,KAAKu/B,iBAAiBjL,YAAY,IAA0B4L,eAAgBlgC,KAAK4/B,SAASK,QAG1FjgC,KAAK4/B,SAASO,aACdngC,KAAKu/B,iBAAiBjL,YAAY,IAA0B8L,YAAapgC,KAAK4/B,SAASO,aAGvFngC,KAAK4/B,SAASS,WACdrgC,KAAKu/B,iBAAiBjL,YAAY,IAA0BgM,UAAWtgC,KAAK4/B,SAASS,WAGzFrgC,KAAKu/B,iBAAiBjL,YAAY,IAA0B8L,aAAa,WAAM,SAAKG,sBA4H5F,OAzHI,YAAAC,OAAA,sBACI,OAAIxgC,KAAK6/B,YACEzwB,QAAQY,QAAQhQ,OAG3BA,KAAK6/B,aAAc,EACnB7/B,KAAKu/B,iBAAiBtL,SACtBj0B,KAAKy/B,kBAAkBgB,KAAKzgC,KAAK4/B,SAAS9f,aAEnC9f,KAAK0gC,eACP1hC,MAAK,WAAM,SAAK2hC,mBAChB3hC,MAAK,SAAAmB,GAAO,SAAKm/B,eAAesB,YAAYzgC,EAAK,EAAKy/B,SAAS9f,gBAC/D9gB,MAAK,SAAA6hC,GACF,EAAKC,QAAUD,EAEf,EAAKN,mBACL,EAAKd,kBAAkBsB,UAE1BzhC,OAAM,SAAAC,GAGH,OAFA,EAAKsgC,aAAc,EAEZ,EAAKmB,kBAAkBzhC,GACzBD,OAAM,WAQH,MAPA,EAAKigC,iBAAiB5K,QAAQ,CAC1Bt7B,KAAM,IAA0B4nC,WAChC9uB,QAAS5S,IAGb,EAAKkgC,kBAAkBsB,OAEjBxhC,QAGjBP,MAAK,WAAM,cAGpB,YAAAkiC,OAAA,WACSlhC,KAAK6/B,cAIV7/B,KAAK6/B,aAAc,EACnB7/B,KAAKu/B,iBAAiBnL,aAElBp0B,KAAK8gC,SAAW9gC,KAAK8gC,QAAQ5F,aAC7Bl7B,KAAK8gC,QAAQ5F,WAAWC,YAAYn7B,KAAK8gC,SACzC9gC,KAAK8gC,QAAQK,cAAcC,WAI3B,YAAAb,iBAAR,WACSvgC,KAAK8gC,SAAY9gC,KAAK8gC,QAAQO,eAAkBrhC,KAAK4/B,SAAS0B,SAInEthC,KAAKw/B,eAAe5L,UAAU5zB,KAAK8gC,QAAQO,eAE3CrhC,KAAKw/B,eAAetnB,KAAK,CACrB7e,KAAM,IAAyBkoC,gBAC/BpvB,QAASnS,KAAK4/B,SAAS0B,WAIvB,YAAAX,cAAR,WACI,MAAK,kBAAkBz7B,KAAK,YAASlF,KAAK4/B,SAASz/B,KAAK0F,UAIjD7F,KAAKtB,eAAewZ,KAAKlY,KAAK4/B,SAASz/B,KACzCnB,MAAK,SAAC,GAA8B,OAApB,OAAA2yB,eAChBryB,OAAM,SAAA9D,GAAY,OAAA4T,QAAQwM,OAAO,IAAI,EAAuBpgB,OALtD4T,QAAQY,QAAQhQ,KAAK4/B,SAASz/B,MAerC,YAAAugC,aAAR,WACI,GAAI1gC,KAAK0/B,SAAS8B,QA/HW,mBAgIzB,OAAOpyB,QAAQY,UAGnBhQ,KAAK0/B,SAAS+B,QAnIe,mBAmIgB,GAQ7CzhC,KAAK0/B,SAAS+B,QA1IuB,yBA0IgB/+B,KAAKg/B,OAElD,IACF/P,EADE,+BAAAhsB,OACqB,6CAA6Cg8B,mBAAmB3hC,KAAK2/B,UAAUr6B,MAK5G,OAHAF,SAAS/J,KAAKm9B,MAAMoJ,WAAa,SACjC5hC,KAAK2/B,UAAUnuB,QAAQmgB,GAEhB,IAAIviB,SAAe,gBAGtB,YAAA4xB,kBAAR,SAA0BzhC,GACtB,IAAMsiC,EAAcC,OAAO9hC,KAAK0/B,SAAS8B,QAtJJ,2BA6JrC,QALMK,GAAen/B,KAAKg/B,MAAQG,EA1JG,MA2JjCtiC,aAAiB,GACjBA,EAAMnG,UAAYgmC,EAAuB2C,gBAO7C/hC,KAAK0/B,SAASsC,WAjKuB,0BAkKrChiC,KAAK0/B,SAASsC,WAnKe,mBAqKtBhiC,KAAK0gC,gBANDtxB,QAAQwM,UA3JNqmB,EAAgB,sBADpC,KACoBA,GAArB,GClBMC,EAAyC,CAC3CC,KAAM,GACNC,MAAO,UACPC,gBAAiB,WAGfC,EAAqB,+C,EAE3B,WAKI,WACI1jC,GAEAoB,KAAKuiC,QAAU,yCAAKL,GAAmBtjC,GAAWA,EAAQ0iC,QAE1DthC,KAAKwiC,mBAELxiC,KAAKyiC,WAAaziC,KAAK0iC,kBACvB1iC,KAAK2iC,WAAa3iC,KAAK4iC,kBAEvB5iC,KAAKyiC,WAAWjH,YAAYx7B,KAAK2iC,YA4FzC,OAzFI,YAAAlC,KAAA,SAAKoC,GACD,GAAIA,EAAU,CACV,IAAM,EAASz9B,SAASg2B,eAAeyH,GAEvC,IAAK,EACD,MAAM,IAAI/nC,MAAM,8EAGpB,EAAO0gC,YAAYx7B,KAAKyiC,YAG5BziC,KAAKyiC,WAAWjK,MAAMoJ,WAAa,UACnC5hC,KAAKyiC,WAAWjK,MAAMsK,QAAU,KAGpC,YAAA/B,KAAA,sBACUgC,EAAsB,WACxB,EAAKN,WAAWjK,MAAMoJ,WAAa,SAEnC,EAAKa,WAAWpO,oBAAoB,gBAAiB0O,IAGzD/iC,KAAKyiC,WAAWvO,iBAAiB,gBAAiB6O,GAElD/iC,KAAKyiC,WAAWjK,MAAMsK,QAAU,KAG5B,YAAAJ,gBAAR,WACI,IAAMjM,EAAYrxB,SAASC,cAAc,OAazC,OAXAoxB,EAAU+B,MAAMwK,QAAU,QAC1BvM,EAAU+B,MAAMyK,OAAS,IACzBxM,EAAU+B,MAAM0K,KAAO,IACvBzM,EAAU+B,MAAM2K,OAAS,OACzB1M,EAAU+B,MAAM4K,MAAQ,OACxB3M,EAAU+B,MAAM6K,SAAW,WAC3B5M,EAAU+B,MAAM8K,MAAQ,IACxB7M,EAAU+B,MAAM+K,IAAM,IACtB9M,EAAU+B,MAAMgL,WAAa,qBAC7B/M,EAAU+B,MAAMsK,QAAU,IAEnBrM,GAGH,YAAAmM,gBAAR,WACI,IAAMa,EAAYr+B,SAASC,cAAc,OAiBzC,OAfAo+B,EAAUjL,MAAMwK,QAAU,QAC1BS,EAAUjL,MAAM4K,MAAWpjC,KAAKuiC,QAAQJ,KAAI,KAC5CsB,EAAUjL,MAAM2K,OAAYnjC,KAAKuiC,QAAQJ,KAAI,KAC7CsB,EAAUjL,MAAMkL,aAAkB1jC,KAAKuiC,QAAQJ,KAAI,KACnDsB,EAAUjL,MAAMmL,OAAS,YACzBF,EAAUjL,MAAMoL,YAAiB5jC,KAAKuiC,QAAQF,gBAAe,IAAIriC,KAAKuiC,QAAQF,gBAAe,IAAIriC,KAAKuiC,QAAQH,MAAK,IAAIpiC,KAAKuiC,QAAQH,MACpIqB,EAAUjL,MAAMqL,OAAS,SACzBJ,EAAUjL,MAAM6K,SAAW,WAC3BI,EAAUjL,MAAM0K,KAAO,IACvBO,EAAUjL,MAAM8K,MAAQ,IACxBG,EAAUjL,MAAM+K,IAAM,MACtBE,EAAUjL,MAAM9f,UAAY,gCAC5B+qB,EAAUjL,MAAMsL,eAAiB,cACjCL,EAAUjL,MAAMuL,UAAezB,EAAkB,uDAE1CmB,GAGH,YAAAjB,iBAAR,WAGI,IAAIp9B,SAASg2B,eAAekH,GAA5B,CAIA,IAAM9J,EAAQpzB,SAASC,cAAc,SAErCmzB,EAAMp7B,GAAKklC,EAEXl9B,SAAS4+B,KAAKxI,YAAYhD,GAEtBA,EAAMyL,iBAAiBC,eAGvB1L,EAAMyL,MAAME,WAAW,gCACN7B,EAAkB,sLAIhC,KAGf,EA3GA,G,mBCJA,WACI,WACY1C,GAAA,KAAAA,WAyEhB,OAtEI,YAAAgB,YAAA,SAAYtE,EAAaxc,GACrB,IAAM2W,EAAYrxB,SAASg2B,eAAetb,GAClC,sBAAA/f,eAAA,IAAU,EAAV,MAER,IAAK02B,EACD,MAAM,IAAI,EACN,+EACA2I,EAAuBgF,kBAI/B,IAAMvD,EAASz7B,SAASC,cAAc,UAUtC,OARAw7B,EAAOvE,IAAMA,EACbuE,EAAOrI,MAAMmL,OAAS,OACtB9C,EAAOrI,MAAMwK,QAAU,OACvBnC,EAAOrI,MAAM4K,MAAQ,OACrBvC,EAAOwD,qBAAsB,EAE7B5N,EAAU+E,YAAYqF,GAEf7gC,KAAKskC,kBAAkBzD,EAAQ9gC,GACjCT,OAAM,SAAAC,GAGH,MAFAk3B,EAAU0E,YAAY0F,GAEhBthC,MAIV,YAAA+kC,kBAAR,SAA0BzD,EAA2B0D,GAGjD,OAAO,IAAIn1B,SAAQ,SAACY,EAAS4L,GACzB,IAAM7b,EAAUuY,OAAOksB,YAAW,WAC9B5oB,EAAO,IAAI,EAAmB,0EAC/B2oB,GAEGE,EAAgB,SAAClR,GACnB,GAAIA,EAAM5tB,SAAW,YAASk7B,EAAOvE,KAAK32B,SAItC,YAAc4tB,EAAM5Y,KAAM,IAA0BsmB,cACpDlxB,IACA6L,EAAO,IAAI,EAAmB2X,EAAM5Y,KAAKxI,QAAQxX,QAASykC,EAAuB2C,kBAGjF,YAAcxO,EAAM5Y,KAAM,IAA0BylB,cAAc,CAClES,EAAOrI,MAAMwK,QAAU,GAEvB,IAAM0B,EAAYnR,EAAM5Y,KAAKxI,SAAWohB,EAAM5Y,KAAKxI,QAAQuyB,UACrDC,EAAU,YAAc,CAC1BC,WAAW,EACXC,WAAW,EACXC,wBAAyBJ,EAAY,gBAAkB,iBACxD7D,GAEH9wB,IACAC,EAAQ20B,EAAQA,EAAQrnC,OAAS,MAInCyS,EAAW,WACbuI,OAAO+b,oBAAoB,UAAWoQ,GACtCnsB,OAAOysB,aAAahlC,IAGxBuY,OAAO4b,iBAAiB,UAAWuQ,OAG/C,EA3EA,GCNA,kCAaA,IAAMO,EAAiB,+BAoBR,SAASC,EAAcrmC,GAClC,IAAM+G,EAAS,YAAS/G,EAAQuB,KAAKwF,OAYrC,OAXyB,IAAI,EACzB,IAAI,EACJ,IAAI,IAA8CA,GAClD,IAAI,IAAwCA,GAC5C,IAAI,EAAiB,CAAE27B,OAAQ1iC,EAAQ0iC,QAAU1iC,EAAQ0iC,OAAO4D,mBAChE,gCACA,IAAI,IAAeF,GACnB1sB,OAAOC,SACP3Z,GAGoB4hC,W,gEC7BrB,SAAS2E,EAAsBrkC,GAClC,OAAOA,EAAIlI,eAAe,YCD9B,iBAMI,WAAYgG,GALJ,KAAAwmC,QAAU,EACV,KAAAC,KAAwB,CAAEC,KAAM,IAChC,KAAAC,UAAmC,GAIvCvlC,KAAK4/B,SAAW,oBACZ4F,QAAS,EACTrjC,QAAS,IACTsjC,SAAU,QACP7mC,GA4If,OAxII,YAAAs2B,OAAA,W,IAAO,sDACH,IAAMr0B,EAASb,KAAK0lC,YAAW,MAAhB1lC,KAAoBkG,GAC3B1D,EAAA,EAAAA,MAAOmjC,EAAA,EAAAA,UACT7kC,EAAA,EAAAA,IAYN,OAVIA,GAAOA,EAAI6O,SACX7O,EAAI8kC,YAEJ9kC,EAAMd,KAAK6lC,aAAaF,EAAWz/B,EAAK0K,MAAMpO,IAKlDxC,KAAK8lC,oBAAoBhlC,GAElBA,EAAI6O,UAGf,YAAAqlB,aAAA,W,IAAa,sDACD,IAAAl0B,EAAA,+BAAAA,IAER,OAAOA,EAAMA,EAAI8kC,UAAY,GAGzB,YAAAF,YAAR,W,UAAoB,kDAUhB,IATA,IAAIljC,EAAQ,EACRmjC,EAAY3lC,KAAKqlC,KAQdM,EAAUL,KAAKhoC,QAAQ,CAG1B,IAFA,IAAIyoC,GAAY,EAEPC,EAAW,EAAGA,EAAWL,EAAUL,KAAKhoC,OAAQ0oC,IAAY,CACjE,IAAMllC,EAAM6kC,EAAUL,KAAKU,GAE3B,GAAKhmC,KAAK4/B,SAASz9B,QAAQrB,EAAI9I,MAAOkO,EAAK1D,IAA3C,CAQA,IAFA,EAAAmjC,EAAUL,MAAKW,QAAO,QAAIN,EAAUL,KAAK5Q,OAAOsR,EAAU,KAErC,IAAhB9/B,EAAK5I,QAAgBkF,IAAU0D,EAAK5I,OAAS,IAAM6nC,EAAsBrkC,GAC1E,MAAO,CAAE0B,MAAK,EAAE1B,IAAG,EAAE6kC,UAAS,GAGlCI,GAAY,EACZJ,EAAY7kC,EACZ0B,IAEA,OAGJ,IAAKujC,EACD,MAIR,MAAO,CAAEvjC,MAAK,EAAEmjC,UAAS,IAGrB,YAAAE,aAAR,SAAqBK,EAAmDhgC,GACpE,IAEIpF,EAFA0B,EAAQ,EACRmjC,EAAYO,EAGhB,GACIplC,EAAM,CACFwkC,KAAM,GACNK,UAAS,EACTC,UAAW,EACX5tC,MAAOkO,EAAK1D,IAMhBmjC,EAAUL,KAAKW,QAAQnlC,GAEvB6kC,EAAY7kC,EACZ0B,UACKA,EAAQ0D,EAAK5I,QAEtB,IAAM6oC,EAAcrlC,EAIpB,OAFAqlC,EAAYx2B,SAAW,MAAK3P,KAAKolC,QAE1Be,GAGH,YAAAL,oBAAR,SAA4BM,GACxB,GAAKpmC,KAAK4/B,SAAS4F,QAAnB,CAIA,IAAMhjC,EAAQxC,KAAKulC,UAAU//B,QAAQ4gC,GAQrC,GANApmC,KAAKulC,UAAU7Q,QACA,IAAXlyB,EAAe,EAAIA,GACR,IAAXA,EAAe,EAAI,EACnB4jC,KAGApmC,KAAKulC,UAAUjoC,QAAU0C,KAAK4/B,SAAS4F,SAA3C,CAIA,IAAM1kC,EAAMd,KAAKulC,UAAUp/B,MAEtBrF,IAILd,KAAKqmC,WAAWvlC,GAChBd,KAAK4/B,SAAS6F,SAAS3kC,EAAI6O,cAGvB,YAAA02B,WAAR,SAAmBvlC,GACVA,EAAI6kC,YAIT7kC,EAAI6kC,UAAUL,KAAK5Q,OAAO5zB,EAAI6kC,UAAUL,KAAK9/B,QAAQ1E,GAAM,GD3I5D,SAA2BA,GAC9B,OAAOA,EAAIlI,eAAe,aC4IlB0tC,CAAkBxlC,EAAI6kC,YAI1B3lC,KAAKqmC,WAAWvlC,EAAI6kC,aAE5B,EAvJA,G,qBCjBA7uC,EAAOD,QAAUkC,QAAQ,kB,8FCMV,SAASwtC,EACpB/qC,EACAb,GAEQ,IACA,EADA,EAAAU,KACAI,cAAA,IAAS,EAAT,KAER,OAAO,IAAI,IAAaD,EAAU,CAC9Bb,QAASuhB,EAAWzgB,IAAWd,EAC/Bc,OAAM,IAId,SAASygB,EAAWzgB,GAChB,GAAK6G,MAAMC,QAAQ9G,GAInB,OAAOA,EAAOmF,QAAO,SAACC,EAAkBtB,GACpC,OAAIA,GAASA,EAAM5E,QACR,yBAAIkG,EAAQ,CAAAtB,EAAM5E,UAGtBkG,IACR,IAAIP,KAAK,O,wCCtBhB,cACI,WAAY9E,GAAZ,MACI,YAAMA,EAAU,CACZb,QAAS,2CACX,K,OAEF,EAAKrD,KAAO,eACZ,EAAK+B,KAAO,U,EAEpB,OAT0C,yBAS1C,EATA,C,MAA0C,G,+CCC1C,cACI,WAAYmC,GAAZ,MACI,YAAMA,EAAU,CAAEb,QAAS,yEAAwE,K,OAEnG,EAAKrD,KAAO,4BACZ,EAAK+B,KAAO,yB,EAEpB,OAPuD,yBAOvD,EAPA,C,MAAuD,G,oCCTvD,oBASe,gBAAqB,mB,sECApC,aACI,WACYmtC,GAAA,KAAAA,uBAkBhB,OAdI,YAAAzyB,WAAA,SAAWnV,GADX,WAEI,OAAO,aAAWvG,QAAO,SAACwG,GACtBA,EAASC,KAAK,uBAAa,IAAiByhB,sBAE5C,EAAKimB,qBAAqBzyB,WAAWnV,GAChCI,MAAK,SAAAxD,GACFqD,EAASC,KAAK,uBAAa,IAAiBuhB,oBAAqB7kB,EAASH,OAC1EwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAiB+gB,iBAAkB9kB,WAVpF,sBADC,K,+BAeL,EApBA,GAAqB,O,6BCPrB,oBAIA,aACI,WACYkD,GAAA,KAAAA,iBAchB,OAXI,YAAAqV,WAAA,SAAW,G,IAAEhU,QAAA,YAAAA,QAGT,OAAOC,KAAKtB,eAAe9G,IAFf,oCAEwB,CAChCmI,QAAO,EACPzE,QAAS,CACL2E,OAAQ,IAAYC,OACpB,iBAAkB,QAIlC,EAhBA,G,uDCEMumC,EAAiB,CACnBlwB,QAAS,CACL,uCACA,sCACA,WACA,sBACFjW,KAAK,MAGX,aACI,WACY5B,GAAA,KAAAA,iBAiBhB,OAdI,YAAAgoC,cAAA,SAAclyB,EAAoBvX,EAAsC,G,IAAE8C,QAAA,YAAAA,QAChEI,EAAM,6BAA6BqU,EAAU,mBAC7ClZ,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAewZ,KAAK/X,EAAK,CAAE9E,KAAM4B,EAASqZ,OAAQmwB,EAAgBnrC,QAAO,EAAEyE,QAAO,KAGlG,YAAA4W,cAAA,SAAcnC,EAAoBvX,EAAmD,G,IAAE8C,QAAA,YAAAA,QAC3E3C,EAAA,EAAAA,GAAI,6BACN+C,EAAM,6BAA6BqU,EAAU,oBAAoBpX,EACjE9B,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAeyZ,IAAIhY,EAAK,CAAEmW,OAAQmwB,EAAgBprC,KAAI,EAAEC,QAAO,EAAEyE,QAAO,KAE5F,EAnBA,G,uDCfA,aAKI,WAAYnB,GACRoB,KAAK2mC,WAAa,GAClB3mC,KAAK4mC,WAAa,GAClB5mC,KAAK4/B,SAAW,oBAAEiH,aAAc,WAAcjoC,GA8CtD,OA3CI,YAAAhH,IAAA,SAAIwE,EAAW0qC,GACX,IACI,OAAO9mC,KAAK+mC,aACR3qC,GAAS4D,KAAK4/B,SAASiH,aACvBC,GAAc1qC,GAAS4D,KAAK4/B,SAASiH,cAE3C,MAAOtnC,GACL,OAAOS,KAAK+mC,aACR/mC,KAAK4/B,SAASiH,aACdC,GAAc9mC,KAAK4/B,SAASiH,gBAKxC,YAAAzqB,SAAA,SAAShgB,EAAUw2B,GACf,GAAI5yB,KAAKgnC,YAAY5qC,GACjB,MAAM,IAAI,IAAqB,IAAIA,EAAK,4BAG5C4D,KAAK2mC,WAAWvqC,GAASw2B,GAGnB,YAAAoU,YAAV,SAAsB5qC,GAClB,QAAS4D,KAAK2mC,WAAWvqC,IAGrB,YAAA6qC,aAAR,SAAqB7qC,GACjB,QAAS4D,KAAK4mC,WAAWxqC,IAGrB,YAAA2qC,aAAR,SAAqB3qC,EAAe0qC,GAChC,IAAK9mC,KAAKinC,aAAaH,GAAa,CAChC,IAAMlU,EAAU5yB,KAAK2mC,WAAWvqC,GAEhC,IAAKw2B,EACD,MAAM,IAAI,IAAqB,IAAIx2B,EAAK,wBAG5C4D,KAAK4mC,WAAWE,GAAclU,IAGlC,OAAO5yB,KAAK4mC,WAAWE,IAE/B,EAtDA,G,oCCAA,YAIA,aACI,WACYv5B,EACDC,QAAA,IAAAA,MAAA,QADC,KAAAD,gBACD,KAAAC,UAcf,OAXI,YAAAwuB,KAAA,SAAK9D,GAAL,WACI,OAAOl4B,KAAKuN,cACPG,WAAW,MAAKwqB,EAAW,WAAa,IAAE,0CAC1Cl5B,MAAK,WACF,IAAK,EAAKwO,QAAQyuB,WACd,MAAM,IAAI,IAGd,OAAO,EAAKzuB,QAAQyuB,eAGpC,EAjBA,G,+CCAA,cACI,WACW18B,GADX,MAGI,YAAM,qGAAmG,K,OAFlG,EAAAA,QAIP,EAAKjI,KAAO,qCACZ,EAAK+B,KAAO,kC,EAEpB,OATgE,yBAShE,EATA,C,MAAgE,G,oCCNhE,mBAUA,aAGI,WACY89B,GAAA,KAAAA,uBAuHhB,OApHI,YAAAxoB,WAAA,SACIzC,EACA6M,EACAmuB,GAHJ,WAKI,IAAKnuB,EAAcnK,YACf,MAAM,IAAI,IAAiB,IAAqB5U,sBAKpD,OAFAgG,KAAKm3B,qBAAqBxoB,WAAWoK,EAAcnK,aAE5C5O,KAAKm3B,qBAAqBhnB,4BAC5BnR,MAAK,SAAAmoC,GAGF,OAFA,EAAKC,uBAAyBD,EAEvB,EAAKE,wBACRn7B,EACA6M,EAAciC,mBACdksB,OAKhB,YAAAn3B,SAAA,WACI,OAAO/P,KAAKm3B,qBAAqBpnB,YAGrC,YAAAu3B,cAAA,SAAcrtB,GACV,IAAM9H,EAAU0nB,KAAK0N,MAAMttB,EAAYutB,kBAAkBC,iBAAiBrrC,OAAOsrC,gBAAgB,GAEjG,MAAO,CACH9V,MAAOzf,EAAQyf,MACfv4B,KAAM8Y,EAAQ9Y,KACdgL,YAAa8N,EAAQ9N,YACrB61B,QAAS,CACLyN,SAAUx1B,EAAQ+nB,QAAQyN,SAC1BC,SAAUz1B,EAAQ+nB,QAAQ0N,SAC1BC,QAAS11B,EAAQ+nB,QAAQ2N,SAE7BC,QAAS31B,EAAQ21B,UAIjB,YAAAT,wBAAR,SACIn7B,EACA8O,EACAksB,GAEA,IAAKlsB,EAAmB+sB,cACpB,MAAM,IAAI,IAAiB,IAAqB/tC,sBAGpD,IAAMguC,EAAsE,CACxEC,aAAc,CACVC,QAASltB,EAAmB+sB,cAC5BI,aAAcntB,EAAmBotB,mBACjCvL,WAAY7hB,EAAmBqtB,kBAEnCC,gBAAiB,CACbC,aAAcr8B,EAASG,KAAKlE,SAASG,KACrCkgC,iBAAkB,QAClBC,WAAY,gBAAMv8B,EAASilB,mBAAoB,GAAGuX,QAAQ,IAE9DC,iBAAkB,CACdC,wBAAwB,EACxBC,qBAAsB,QAE1BC,yBAA0B5B,EAC1B6B,eAAe,EACfC,qBAAqB,GAGzB,OAAOhpC,KAAKipC,0DACRjpC,KAAKonC,uBAAuB8B,yBAAyBlB,KAIrD,YAAAiB,0DAAR,SAAkEE,GAC9D,MAAO,CACHC,WAAY,EACZC,gBAAiB,EACjBpB,aAAc,CACVC,QAASiB,EAAgClB,aAAaC,QACtDrL,WAAYsM,EAAgClB,aAAapL,WACzDsL,aAAcgB,EAAgClB,aAAaE,cAE/DmB,sBAAuB,CAAC,CACpBjwC,KAAM,OACNkwC,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqBN,EAAgCR,iBAAiBc,oBACtEb,wBAAwB,EACxBc,yBAA0B,CACtBl5B,OAAQ,OACRw4B,qBAAqB,IAG7BW,0BAA2B,CACvBtwC,KAAM,kBACNkwC,WAAY,CACRxuB,QAAS,YACT,uBAAwB,KACxB,qCAAsCouB,EAAgCS,oCAAoCL,WAAW,sCACrH,uBAAwBJ,EAAgCS,oCAAoCL,WAAW,wBACvG,uBAAwBJ,EAAgCS,oCAAoCL,WAAW,4BAInHjB,gBAAiBa,EAAgCb,gBACjDS,eAAe,EACfD,wBAAyBK,EAAgCL,wBACzDe,0BAA2B,CACvBb,oBAAqBG,EAAgCH,uBAIrE,EA3HA,G,oCCVA,mBAQA,2BA+EA,OA9EI,YAAAr6B,WAAA,SACIzC,EACA6M,EACAmuB,GAEA,OAAO93B,QAAQY,QAAQhQ,KAAK8pC,uDACxB59B,EACA6M,EAAciC,mBACdksB,KAIR,YAAAn3B,SAAA,WACI,OAAOX,QAAQY,WAGnB,YAAAs3B,cAAA,SAAcrtB,GACV,IACI,IAAM9H,EAAU0nB,KAAK0N,MAAMttB,EAAYutB,kBAAkBC,iBAAiBrrC,OAE1E,MAAO,CACHw1B,MAAOzf,EAAQ/U,GACf/D,KAAM8Y,EAAQ9Y,KACd6gC,QAAS,CACLyN,SAAUx1B,EAAQpB,KAAKlN,MACvB+jC,SAAUz1B,EAAQpB,KAAKg5B,QAGjC,MAAOC,GACL,MAAM,IAAI,IAAqB,+CAI/B,YAAAF,uDAAR,SACI59B,EACA8O,EACAksB,GAEA,MAAO,CACHkC,WAAY,EACZC,gBAAiB,EACjBpB,aAAc,CACVC,QAASltB,EAAmB+sB,cAC5BlL,WAAY7hB,EAAmBqtB,iBAC/BF,aAAcntB,EAAmBotB,oBAErCkB,sBAAuB,CAAC,CACpBjwC,KAAM,OACNkwC,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqB,CAAC,OAAQ,WAAY,MAAO,aAAc,QAC/Db,wBAAwB,EACxBc,yBAA0B,CACtBl5B,OAAQ,OACRw4B,qBAAqB,IAG7BW,0BAA2B,CACvBtwC,KAAM,kBACNkwC,WAAY,CACRxuB,QAAS,SACT,iBAAkBC,EAAmBivB,cACrC,wBAAyBjvB,EAAmBkvB,yBAIxD5B,gBAAiB,CACbC,aAAcr8B,EAASG,KAAKlE,SAASG,KACrCkgC,iBAAkB,QAClBC,WAAY,gBAAMv8B,EAASilB,mBAAoB,GAAGuX,QAAQ,IAE9DK,eAAe,EACfD,yBAA0B5B,EAC1B2C,0BAA2B,CACvBb,qBAAqB,KAIrC,EA/EA,G,+CCNA,cACI,WAAYruC,GAAZ,MACI,YAAMA,GAAW,yFAAuF,K,OAExG,EAAKrD,KAAO,+BACZ,EAAK+B,KAAO,6B,EAEpB,OAP0D,yBAO1D,EAPA,C,MAA0D,G,sDCG1D,cACI,WACWoC,GADX,MAGI,YAAM,0BACF,sDACG,kBAAQ,iBAAOA,IAAS,SAAA0uC,GAAe,qBAAIA,GAAa,SAAC,GAAgB,OAAd,EAAAxvC,eAChE2F,KAAK,QAAM,K,OALN,EAAA7E,SAOP,EAAKnE,KAAO,8BACZ,EAAK+B,KAAO,4B,EAEpB,OAZyD,yBAYzD,EAZA,C,MAAyD,G,oCCLzD,qBAEA,aACI,WACY+wC,GAAA,KAAAA,aAuChB,OApCI,YAAA5I,QAAA,SAAsBlpC,GAClB,IAAM+xC,EAAW,IAAQ7I,QAAQxhC,KAAKsqC,cAAchyC,IAEpD,GAAiB,OAAb+xC,EACA,OAAO,KAGX,IACI,OAAOxQ,KAAK0N,MAAM8C,GACpB,MAAO9qC,GAIL,OAFAS,KAAKgiC,WAAWhiC,KAAKsqC,cAAchyC,IAE5B,OAIf,YAAAiyC,YAAA,SAA0BjyC,GACtB,IAAMN,EAAQgI,KAAKwhC,QAAQlpC,GAI3B,OAFA0H,KAAKgiC,WAAW1pC,GAETN,GAGX,YAAAypC,QAAA,SAAsBnpC,EAAaN,GAC/B,OAAO,IAAQypC,QAAQzhC,KAAKsqC,cAAchyC,GAAMuhC,KAAKC,UAAU9hC,KAGnE,YAAAgqC,WAAA,SAAW1pC,GACP,OAAO,IAAQ0pC,WAAWhiC,KAAKsqC,cAAchyC,KAGzC,YAAAgyC,cAAR,SAAsBhyC,GAClB,OAAU0H,KAAKoqC,WAAU,IAAI9xC,GAErC,EAzCA,G,uDCIA,aAGI,WACYiV,GAAA,KAAAA,gBAERvN,KAAKwN,QAAU8K,OAiBvB,OAdU,YAAArK,WAAN,SAAiB4uB,G,YAAA,IAAAA,MAAA,I,wIACP2N,EAAY,8CACZ5rC,EAA6B,CAAE6rC,OAAO,EAAM3oC,WAAY,CAAE,mBAAoB+6B,IAEpFA,EACM,GAAM78B,KAAKuN,cAAcG,WAAW88B,EAAW5rC,IADrD,M,cACM,S,aACA,SAAMoB,KAAKuN,cAAcG,WAAW88B,I,OAApC,S,iBAEN,IAAKxqC,KAAKwN,QAAQU,OACd,MAAM,IAAI,IAGd,MAAO,CAAP,EAAOlO,KAAKwN,QAAQU,gBAE5B,EAvBA,G,oCCmBO,SAASw8B,EAAc9rC,EAAwBiI,GAGlD,OAAO8jC,EAFC,OAAAD,eAEqB9rC,EAASiI,GASnC,SAAS+jC,IAEZ,EAAQ,KAvBZ,qE,sFCdA,yBAOA,OANI,YAAAC,WAAA,SAAWtrC,GACP,MAAO,CACHlG,KAAM,IAAgB8jB,WACtBhL,QAAS5S,IAGrB,EAPA,GCFe,SAASurC,IACpB,IACI,OAAOC,QAAQ9S,IAAI+S,WAAY,EACjC,MAAOC,GACL,MAAO,e,aCFf,WACI,WACYC,GAAA,KAAAA,WA8BhB,OA3BI,YAAAC,IAAA,W,IAAI,sDACAnrC,KAAKorC,cAAa,MAAlBprC,KAAI,0BAAe,OAAUqrC,KAGjC,YAAAp6B,KAAA,W,IAAK,sDACDjR,KAAKorC,cAAa,MAAlBprC,KAAI,0BAAe,QAAWqrC,KAGlC,YAAAC,KAAA,W,IAAK,sDACDtrC,KAAKorC,cAAa,MAAlBprC,KAAI,0BAAe,QAAWqrC,KAGlC,YAAA9rC,MAAA,W,IAAM,sDACFS,KAAKorC,cAAa,MAAlBprC,KAAI,0BAAe,SAAYqrC,KAGnC,YAAAE,MAAA,W,IAAM,sDACFvrC,KAAKorC,cAAa,MAAlBprC,KAAI,0BAAe,SAAYqrC,KAG3B,YAAAD,cAAR,SAAsB/xC,G,UAAqB,oDAClC2G,KAAKkrC,UAAalrC,KAAKkrC,SAAS7xC,KAIrC,EAAA2G,KAAKkrC,SAAS7xC,IAAMnC,KAAI,kCAAC8I,KAAKkrC,UAAaG,KAEnD,EAhCA,G,ECAA,yBAUA,OATI,YAAAF,IAAA,aAEA,YAAAl6B,KAAA,aAEA,YAAAq6B,KAAA,aAEA,YAAA/rC,MAAA,aAEA,YAAAgsC,MAAA,aACJ,EAVA,GCGA,ICDqCC,EDC/BC,QCD+B,KAAAD,EDCY,SAArBV,OCDSU,GAAA,GAC5BA,EAIE,IAAI,EAAcE,SAHd,IAAI,GDCJ,SAASC,IACpB,OAAOF,E,sDEEX,WACI,WACYG,GAAA,KAAAA,uBA8ChB,OA3CI,YAAAC,YAAA,SAAYvjC,EAAc1J,GAA1B,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IACMqN,EADQqG,EAAM6B,WACGlI,SAASwI,cAEhC,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpDoF,EAASC,KAAK,uBAAa,IAAiB2hB,uBAE5C,EAAKmrB,qBAAqBC,YAAY3/B,EAAS9O,GAAIkL,EAAM1J,GACpDI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAiBsgB,qBAAsB/jB,IAClEwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAiBmhB,kBAAmBllB,YAKrF,YAAAswC,aAAA,SAAaxjC,EAAc1J,GAA3B,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IACMqN,EADQqG,EAAM6B,WACGlI,SAASwI,cAEhC,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpDoF,EAASC,KAAK,uBAAa,IAAiB6hB,wBAE5C,EAAKirB,qBAAqBE,aAAa5/B,EAAS9O,GAAIkL,EAAM1J,GACrDI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAiBugB,sBAAuBhkB,IACnEwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAiBqhB,mBAAoBplB,YAI1F,EAhDA,G,mCCLA,WACI,WACYkD,GAAA,KAAAA,iBAmChB,OAhCI,YAAAmtC,YAAA,SAAYr3B,EAAoBu3B,EAAoB,G,IAAEhsC,QAAA,YAAAA,QAC5CI,EAAM,6BAA6BqU,EAAU,WAC7ClZ,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAewZ,KAAK/X,EAAK,CACjC7E,QAAO,EACPyE,QAAO,EACPuW,OAAQ,CACJC,QAAS,YAAa,yBACf,IAAyB,CAC5B,IAAiBC,6BAGzBnb,KAAM,CAAE0wC,WAAU,MAI1B,YAAAD,aAAA,SAAat3B,EAAoBu3B,EAAoB,G,IAAEhsC,QAAA,YAAAA,QAC7CI,EAAM,6BAA6BqU,EAAU,YAAYu3B,EACzDzwC,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe0Z,OAAOjY,EAAK,CACnC7E,QAAO,EACPyE,QAAO,EACPuW,OAAQ,CACJC,QAAS,YAAa,yBACf,IAAyB,CAC5B,IAAiBC,gCAKrC,EArCA,G,UCKA,WACI,WACYw1B,GAAA,KAAAA,gCA8ChB,OA3CI,YAAAC,qBAAA,SAAqB9iC,EAAyBvK,GAA9C,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IACMqN,EADQqG,EAAM6B,WACGlI,SAASwI,cAEhC,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpDoF,EAASC,KAAK,uBAAa,IAA0BgiB,gCAErD,EAAKkrB,8BAA8BC,qBAAqB//B,EAAS9O,GAAI+L,EAAiBvK,GACjFI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAA0BwgB,8BAA+BjkB,IACpFwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAA0BwhB,2BAA4BvlB,YAKvG,YAAA0wC,sBAAA,SAAsB/iC,EAAyBvK,GAA/C,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IACMqN,EADQqG,EAAM6B,WACGlI,SAASwI,cAEhC,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpDoF,EAASC,KAAK,uBAAa,IAA0BkiB,iCAErD,EAAKgrB,8BAA8BE,sBAAsBhgC,EAAS9O,GAAI+L,EAAiBvK,GAClFI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAA0BygB,+BAAgClkB,IACrFwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAA0B0hB,4BAA6BzlB,YAI5G,EAhDA,G,ECLA,WACI,WACYkD,GAAA,KAAAA,iBA6BhB,OA1BI,YAAAutC,qBAAA,SAAqBz3B,EAAoB23B,EAA6B,G,IAAEpsC,QAAA,YAAAA,QAC9DI,EAAM,6BAA6BqU,EAAU,qBAC7ClZ,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAewZ,KAAK/X,EAAK,CACjC7E,QAAO,EACPyE,QAAO,EACPuW,OAAQ,CACJC,QAAS,YAAa,MAE1Blb,KAAM,CAAE8wC,oBAAmB,MAInC,YAAAD,sBAAA,SAAsB13B,EAAoB23B,EAA6B,G,IAAEpsC,QAAA,YAAAA,QAC/DI,EAAM,6BAA6BqU,EAAU,sBAAsB23B,EACnE7wC,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe0Z,OAAOjY,EAAK,CACnC7E,QAAO,EACPyE,QAAO,EACPuW,OAAQ,CACJC,QAAS,YAAa,SAItC,EA/BA,G,SCMA,WACI,WACY61B,GAAA,KAAAA,oBAyGhB,OAtGI,YAAAC,OAAA,SAAOC,EAAkC1tC,GAAzC,WACI,OAAO,aAAWvG,QAAO,SAACwG,GACtB,IAAMa,EAAWd,GAAWA,EAAQc,SAC9BT,EAAO,CAAES,SAAQ,GAEvBb,EAASC,KAAK,uBAAa,IAA2BijB,qBAAiBniB,EAAWX,IAElF,EAAKmtC,kBAAkBx0C,IAAI8H,GACtB2sC,OAAOC,EAAa1tC,GACpBI,MAAK,WACFH,EAASC,KAAK,uBAAa,IAA2BkjB,qBAAiBpiB,EAAWX,IAClFJ,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,IAA2B4iB,aAAc5iB,EAAON,WAKjG,YAAAstC,QAAA,SAAQ3tC,GAAR,WACI,OAAO,aAAWvG,QAAO,SAACwG,GACtB,IAAMa,EAAWd,GAAWA,EAAQc,SAC9BT,EAAO,CAAES,SAAQ,GAEvBb,EAASC,KAAK,uBAAa,IAA2BsjB,sBAAkBxiB,EAAWX,IAEnF,EAAKmtC,kBAAkBx0C,IAAI8H,GACtB6sC,QAAQ3tC,GACRI,MAAK,WACFH,EAASC,KAAK,uBAAa,IAA2BujB,sBAAkBziB,EAAWX,IACnFJ,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,IAA2BijB,cAAejjB,EAAON,WAKlG,YAAA0P,WAAA,SAAW/P,GAAX,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMsV,EAAQ5B,EAAM6B,WACd1U,EAAWd,GAAWA,EAAQc,SAC9BT,EAAO,CAAES,SAAQ,GAEvB,GAAIA,GAAYyU,EAAM8d,mBAAmB5Q,cAAc3hB,GACnD,OAAOb,EAASQ,WAGpBR,EAASC,KAAK,uBAAa,IAA2ByiB,yBAAqB3hB,EAAWX,IAEtF,EAAKmtC,kBAAkBx0C,IAAI8H,GACtBiP,WAAW/P,GACXI,MAAK,WACFH,EAASC,KAAK,uBAAa,IAA2BsiB,yBAAqBxhB,EAAWX,IACtFJ,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,IAA2BmiB,iBAAkBniB,EAAON,YAKrG,YAAA63B,aAAA,SAAal4B,GAAb,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMsV,EAAQ5B,EAAM6B,WACd1U,EAAWd,GAAWA,EAAQc,SAC9BT,EAAO,CAAES,SAAQ,GAEvB,GAAIA,IAAayU,EAAM8d,mBAAmB5Q,cAAc3hB,GACpD,OAAOb,EAASQ,WAGpBR,EAASC,KAAK,uBAAa,IAA2B6iB,2BAAuB/hB,EAAWX,IAExF,EAAKmtC,kBAAkBx0C,IAAI8H,GACtBo3B,aAAal4B,GACbI,MAAK,WACFH,EAASC,KAAK,uBAAa,IAA2BwiB,2BAAuB1hB,EAAWX,IACxFJ,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,IAA2BuiB,mBAAoBviB,EAAON,YAKvG,YAAAutC,kBAAA,SAAkB9lC,EAA4B9H,GAC1C,OAAO,aAAWvG,QAAO,SAACwG,GACtB,IACMI,EAAO,CAAES,SADEd,GAAWA,EAAQc,UAGpCb,EAASC,KAAK,uBAAa,IAA2B2jB,8BAA0B7iB,EAAWX,IAE3FyH,IAAS1H,MAAK,WACVH,EAASC,KAAK,uBAAa,IAA2B4jB,+BAA2B9iB,EAAWX,IAC5FJ,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,IAA2BsjB,wBAAyBtjB,EAAON,WAI5G,EA3GA,G,8DCLA,WAGI,WACYsO,GAAA,KAAAA,gBAERvN,KAAKwN,QAAU8K,OA4CvB,OAzCI,YAAAm0B,WAAA,SAAW/lC,EAAuBgmC,GAE1B,QAAAp4B,OAAUuoB,EAAA,EAAAA,WAAY3E,EAAA,EAAAA,SACtB,IAAAld,mBAAsB,oBAAA4iB,cAAA,IAAS,EAAT,OAGpBz9B,EAAM,YACkB,OAAzBy9B,EAAO+O,cAAyB,aAAe,cAChD,yCACG/O,EAAO+O,cAAa,KACtBzU,EAAW,WAAa,KACC,OAAzB0F,EAAO+O,cAAyB,OAAS,IAC1C,0BAA0B9P,EAI9B,OAFA78B,KAAK4sC,iBAAiBlmC,EAAQgmC,GAEvB1sC,KAAKuN,cAAcG,WAAWvN,IAGjC,YAAAysC,iBAAR,SAAyBlmC,EAAuBgmC,GAAhD,WACUG,EAAe,WACZ,EAAKr/B,QAAQs/B,SAIlB,EAAKt/B,QAAQs/B,OAAOC,MAAMC,YAAYtmC,EAAOsU,mBAAmB8hB,UAChE,EAAKtvB,QAAQs/B,OAAOC,MAAME,cAAa,KAGvCjtC,KAAKwN,QAAQs/B,QAAU9sC,KAAKwN,QAAQs/B,OAAOC,MAC3CF,IAEA7sC,KAAKwN,QAAQ0/B,mBAAqBL,EAGlC7sC,KAAKwN,QAAQ2/B,mBAAqBT,EAClCA,IAEA1sC,KAAKwN,QAAQ4/B,sBAAwBV,GAGjD,EAlDA,G,kBCEA,WACI,WACYvV,EACAz4B,GADA,KAAAy4B,uBACA,KAAAz4B,iBAgHhB,OA7GI,YAAAiQ,WAAA,SAAWC,EAAqBhQ,GAG5B,OAFAoB,KAAKm3B,qBAAqBxoB,WAAWC,GAE9B5O,KAAKm3B,qBAAqBlnB,kBAC5BjR,MAAK,SAAAsP,GAAgB,OAAAA,EAAa++B,kBAAkB,CACjDC,SAAU,CACNC,OAAQ3uC,EAAQ2uC,OAChBtjC,SAAU,CACNujC,gBAAiB5uC,EAAQ4uC,kBAGjCC,eAAgB,CACZlF,aAAc3pC,EAAQ2pC,aACtB7/B,SAAUglC,OAAO9uC,EAAQ8J,iBAKzC,YAAAouB,aAAA,WACI,OAAO92B,KAAKm3B,qBAAqBpnB,YAGrC,YAAA4rB,cAAA,SAAcnzB,EAA4CyB,EAAoBqc,GAA9E,WACI,OAAOtmB,KAAKm3B,qBAAqBlnB,kBAC5BjR,MAAK,SAAA2uC,GAAyB,OAAAv+B,QAAQC,IAAI,CACvCs+B,EAAsBC,SAASplC,GAC/B,EAAK2uB,qBAAqBznB,qBAE7B1Q,MAAK,SAAC,G,IAAC6uC,EAAA,KAAkB7/B,EAAA,KAElB,IAAAoH,uBAAA,IAAkB,EAAlB,yBAAAnL,GAAA,EACA,IAAA5C,sBAAA,IAAiB,EAAjB,yBAAAif,GAAA,EAGJ,OAAO,EAAKwnB,UAAU,yCACfD,GAAgB,CACnBz4B,gBAAe,EACf/N,eAAc,IACf2G,UAIP,YAAA8/B,UAAR,SAAkB7zB,EAA2CjM,GAErD,IAAA+/B,EAAA,EAAAA,SACA1mC,EAAA,EAAAA,eACA+N,EAAA,EAAAA,gBACA,IAAA8kB,QAEI8T,EAAA,EAAAA,UACAl+B,EAAA,EAAAA,WAER,OAAO9P,KAAKtB,eAAewZ,KAAK,gBAAiB,CAC7C5c,QAAS,CACL2E,OAAQ,YACR,eAAgB,qCAEpB5E,KAAM,CACFq+B,aAAczf,EAAY5gB,KAC1Bu4B,MAAO3X,EAAY2X,MACnB3H,SAAU,wBACV/X,OAAQ,wBACRynB,YAAa7pB,EACbm+B,iBAAkBjuC,KAAKkuC,oBAAoBC,GAC3CnU,gBAAiBh6B,KAAKouC,YAAYJ,EAAW3mC,GAC7CuyB,iBAAkB55B,KAAKouC,YAAYJ,EAAW54B,OAKlD,YAAAi5B,uBAAR,SAA+BpxC,GAC3B,OAAKA,EAIE,CACHM,UAAWN,EAAQM,UACnBC,SAAUP,EAAQO,SAClB8wC,YAAarxC,EAAQsB,MACrBgwC,cAAetxC,EAAQU,SACvB6wC,gBAAiBvxC,EAAQY,SACzB4wC,SAAUxxC,EAAQa,KAClB8/B,OAAQ3gC,EAAQiB,oBAChBI,YAAarB,EAAQqB,YACrBF,WAAYnB,EAAQmB,YAZb,IAgBP,YAAAgwC,YAAR,SAAoB1mC,EAAezK,GAC/B,YAD+B,IAAAA,MAAA,IACxB,CACHyK,MAAK,EACL0yB,WAAYn9B,EAAQM,UACpB88B,UAAWp9B,EAAQO,SACnB88B,aAAcr9B,EAAQqxC,YACtB/T,eAAgBt9B,EAAQsxC,cACxB9T,eAAgBx9B,EAAQuxC,gBACxB1wC,KAAMb,EAAQwxC,SACdt6B,MAAOlX,EAAQ2gC,OACfjD,aAAc19B,EAAQqB,YACtBs8B,YAAa39B,EAAQmB,aAIrB,YAAA8vC,oBAAR,SAA4BC,GACxB,MAAO,CACH90C,KAAM80C,EAAgBxG,SACtB+G,OAAQP,EAAgBtG,UAGpC,EAnHA,GCDe,SAAS8G,EACpBjQ,EACAH,GAEA,IAAMqQ,EAAwB,IAAI,IAAsBlQ,GAClDmQ,EAAsB,IAAI,IAAoBD,GAEpD,OAAO,IAAI,EAAsCC,EAAqBtQ,G,cCR1E,WACI,WACYhxB,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAchB,OAXI,YAAAwuB,KAAA,SAAK9D,GAAL,WACI,OAAOl4B,KAAKuN,cACPG,WAAW,MAAKwqB,EAAW,WAAa,IAAE,sFAC1Cl5B,MAAK,WACF,IAAK,EAAKwO,QAAQshC,EACd,MAAM,IAAI,IAGd,OAAO,EAAKthC,QAAQshC,MAGpC,EAjBA,G,ECAA,WACI,WACYvhC,EACDC,QAAA,IAAAA,MAAA,QADC,KAAAD,gBACD,KAAAC,UAcf,OAXI,YAAAwuB,KAAA,SAAK9D,GAAL,WACI,OAAOl4B,KAAKuN,cACPG,WAAW,SAAQwqB,EAAW,MAAQ,IAAE,gGACxCl5B,MAAK,WACF,IAAK,EAAKwO,QAAQuhC,KACd,MAAM,IAAI,IAGd,OAAO,EAAKvhC,QAAQuhC,SAGpC,EAjBA,G,sCCCA,WACI,WACYrwC,GAAA,KAAAA,iBA4ChB,OAzCI,YAAAswC,kBAAA,SAAkBC,EAAoB34B,EAAkC,G,IAAEvW,QAAA,YAAAA,QAChEI,EAAM,oBAAoB8uC,EAAU,WAE1C,OAAOjvC,KAAKtB,eAAe9G,IAAIuI,EAAK,CAAEmW,OAAM,EAAEvW,QAAO,KAGzD,YAAAmvC,mBAAA,SAAmBD,EAAoB34B,EAAkC,G,IAAEvW,QAAA,YAAAA,QACjEI,EAAM,oBAAoB8uC,EAAU,YAE1C,OAAOjvC,KAAKtB,eAAe9G,IAAIuI,EAAK,CAAEmW,OAAM,EAAEvW,QAAO,KAGzD,YAAAovC,kBAAA,SAAkBF,EAAoB34B,EAAmC,G,IAAEvW,QAAA,YAAAA,QACjEI,EAAM,oBAAoB8uC,EAAU,WAE1C,OAAOjvC,KAAKtB,eAAe9G,IAAIuI,EAAK,CAAEmW,OAAM,EAAEvW,QAAO,KAGzD,YAAAqvC,aAAA,SAAaH,EAAoB,G,IAAElvC,QAAA,YAAAA,QACzBI,EAAM,oBAAoB8uC,EAAU,YAE1C,OAAOjvC,KAAKtB,eAAe9G,IAAIuI,EAAK,CAAEJ,QAAO,KAGjD,YAAAwsC,QAAA,SAAQ0C,EAAoB,G,IAAElvC,QAAA,YAAAA,QACpBI,EAAM,oBAAoB8uC,EAAU,WAE1C,OAAOjvC,KAAKtB,eAAe9G,IAAIuI,EAAK,CAAEJ,QAAO,KAGjD,YAAAsvC,cAAA,SAAc,G,IAAEtvC,QAAA,YAAAA,QAGZ,OAAOC,KAAKtB,eAAe9G,IAFf,yBAEwB,CAAEmI,QAAO,KAGjD,YAAAuvC,wBAAA,SAAwB,G,IAAEvvC,QAAA,YAAAA,QAGtB,OAAOC,KAAKtB,eAAewZ,KAFf,oFAEyB,CAAEnY,QAAO,KAEtD,EA9CA,G,WCMA,WACI,WACYwvC,GAAA,KAAAA,+BAiFhB,OA9EI,YAAAP,kBAAA,SAAkBtvC,EAAkB4W,EAAkC1X,GAAtE,WACI,OAAO,aAAWvG,QAAO,SAACwG,GACtBA,EAASC,KAAK,uBAAa,IAAyB0wC,sCAAkC5vC,EAAW,CAAEF,SAAQ,KAE3G,EAAK6vC,6BAA6BP,kBAAkBtvC,EAAU4W,EAAQ1X,GACjEI,MAAK,SAAC,G,IAAE,IAAA3D,YAAA,IAAO,EAAP,KACLwD,EAASC,KAAK,uBAAa,IAAyBunB,iCAAkChrB,EAAM,CAAEqE,SAAQ,KACtGb,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAyBkwC,8BAA+Bj0C,EAAU,CAAEkE,SAAQ,YAK7H,YAAAwvC,mBAAA,SAAmBxvC,EAAkB4W,EAAkC1X,GAAvE,WACI,OAAO,aAAWvG,QAAO,SAACwG,GACtBA,EAASC,KAAK,uBAAa,IAAyB4wC,uCAAmC9vC,EAAW,CAAEF,SAAQ,KAE5G,EAAK6vC,6BAA6BL,mBAAmBxvC,EAAU4W,EAAQ1X,GAClEI,MAAK,SAAC,G,IAAE,IAAA3D,YAAA,IAAO,EAAP,KACLwD,EAASC,KAAK,uBAAa,IAAyBynB,kCAAmClrB,EAAM,CAAEqE,SAAQ,KACvGb,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAyBowC,+BAAgCn0C,EAAU,CAAEkE,SAAQ,YAK9H,YAAAyvC,kBAAA,SAAkBzvC,EAAkB4W,EAAmC1X,GAAvE,WACI,OAAO,aAAWvG,QAAO,SAACwG,GACtBA,EAASC,KAAK,uBAAa,IAAyB8wC,sCAAkChwC,EAAW,CAAEF,SAAQ,KAE3G,EAAK6vC,6BAA6BJ,kBAAkBzvC,EAAU4W,EAAQ1X,GACjEI,MAAK,SAAC,G,IAAE,IAAA3D,YAAA,IAAO,EAAP,KACLwD,EAASC,KAAK,uBAAa,IAAyB+wC,iCAAkCx0C,EAAM,CAAEqE,SAAQ,KACtGb,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAyBuwC,8BAA+Bt0C,EAAU,CAAEkE,SAAQ,YAK7H,YAAA0vC,aAAA,SAAa1vC,EAAkBd,GAA/B,WACI,OAAO,aAAWvG,QAAO,SAACwG,GACtBA,EAASC,KAAK,uBAAa,IAAyBixC,iCAA6BnwC,EAAW,CAAEF,SAAQ,KAEtG,EAAK6vC,6BAA6BH,aAAa1vC,EAAUd,GACpDI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAyB0nB,4BAA6BnrB,EAAM,CAAEqE,SAAQ,KACjGb,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAyBywC,yBAA0Bx0C,EAAU,CAAEkE,SAAQ,YAKxH,YAAA6sC,QAAA,SAAQ7sC,EAAkBd,GAA1B,WACI,OAAO,aAAWvG,QAAO,SAACwG,GACtBA,EAASC,KAAK,uBAAa,IAAyBmxC,oCAAgCrwC,EAAW,CAAEF,SAAQ,KAEzG,EAAK6vC,6BAA6BhD,QAAQ7sC,EAAUd,GAC/CI,MAAK,WACFH,EAASC,KAAK,uBAAa,IAAyBoxC,oCAAgCtwC,EAAW,CAAEF,SAAQ,KACzGb,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAyB4wC,4BAA6B30C,EAAU,CAAEkE,SAAQ,YAK3H,YAAA+U,eAAA,SAAwD/U,EAAaib,GACjE,OAAO,uBAAa,IAAyB8L,qBAAsB9L,EAAM,CAAEjb,SAAQ,KAE3F,EAnFA,G,8BCDA,WACI,WACY0wC,EACAlZ,GADA,KAAAkZ,yBACA,KAAAlZ,yBAqChB,OAlCI,YAAAmZ,eAAA,SACI/D,EACA1tC,GAFJ,WAII,OAAO,SAAA2T,GAAS,wBACZ,aAAG,uBAAa,KAAmB+9B,0BACnC,eAAK,EAAKF,uBAAuBC,eAAe/D,EAAa1tC,IACxD0T,KACG,sBAAU,SAAC,G,IAAEjX,EAAA,EAAAA,KAAW,wBACpB,EAAK67B,uBAAuBpiB,oBAAoBlW,EAAhD,CAAyD2T,GACzD,aAAG,uBAAa,KAAmBg+B,wBAAyBl1C,EAAKsf,aAG/ErI,KACE,uBAAW,SAAA/S,GAAS,oBAAiB,KAAmBixC,qBAAsBjxC,SAItF,YAAAkxC,gBAAA,SACI7xC,GADJ,WAGI,OAAO,SAAA2T,GAAS,wBACZ,aAAG,uBAAa,KAAmBm+B,2BACnC,eAAK,EAAKN,uBAAuBK,gBAAgB7xC,IAC5C0T,KACG,sBAAU,SAAC,G,IAAEjX,EAAA,EAAAA,KAAW,wBACpB,EAAK67B,uBAAuBpiB,oBAAoBlW,EAAhD,CAAyD2T,GACzD,aAAG,uBAAa,KAAmBwU,yBAA0B1rB,EAAKsf,aAGhFrI,KACE,uBAAW,SAAA/S,GAAS,oBAAiB,KAAmBoxC,sBAAuBpxC,SAG3F,EAxCA,G,GCLA,WACI,WACYb,GAAA,KAAAA,iBAchB,OAXI,YAAA2xC,eAAA,SAAe/D,EAAkC,G,IAAEvsC,QAAA,YAAAA,QAG/C,OAAOC,KAAKtB,eAAewZ,KAFf,oCAEyB,CAAEnY,QAAO,EAAE1E,KAAMixC,KAG1D,YAAAmE,gBAAA,SAAgB,G,IAAE1wC,QAAA,YAAAA,QAGd,OAAOC,KAAKtB,eAAe0Z,OAFf,oCAE2B,CAAErY,QAAO,KAExD,EAhBA,G,qBCDA,YACI,WAAYpF,GAAZ,MACI,YAAMA,GAAW,qBAAmB,K,OAEpC,EAAKrD,KAAO,sBACZ,EAAK+B,KAAO,kB,EAEpB,OAPiD,yBAOjD,EAPA,CAAiD,M,YCIjD,WAII,WACYw8B,EACAoB,EACA2Z,EACArB,EACAhiC,GAJA,KAAAsoB,SACA,KAAAoB,8BACA,KAAA2Z,+BACA,KAAArB,+BACA,KAAAhiC,gBAERvN,KAAKwN,QAAU8K,OAqGvB,OAlGI,YAAA3J,WAAA,SAAW/P,GAAX,WACY,IAAAkuC,OAAuBptC,EAAA,EAAAA,SAE/B,IAAKmxC,IAAkBnxC,EACnB,MAAM,IAAI,KAAqB,wEAGnC,OAAOM,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GAAS,WAAI/E,SAAQ,SAACY,EAAS4L,GAGjC,GAFA,EAAK6b,eAAiBtjB,EAAM6E,eAAeC,iBAAiBvZ,IAEvD,EAAK+3B,eACN,MAAM,IAAI,IAAiB,IAAqBz9B,sBAG5C,QAAA++B,eAAA,IAAU,EAAV,eAaR,EAAKxrB,cAAck/B,WAAW,EAAKhV,gBAZnB,WACZ,EAAKwD,oBAAoB,yCAClB4V,GAAa,CAChB9X,QAAS,SAAAx5B,GACLqc,EAAOrc,GACPw5B,EAAQx5B,OAIhByQ,OAIC1Q,MAAMsc,SAEd5c,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAA0iB,aAAA,WAGI,OAFA92B,KAAKy3B,oBAAiB73B,EAEfwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAi4B,OAAA,WACI,MAAM,IAAI,GACN,6FAIR,YAAAE,QAAA,SAAQ3tC,GACJ,IACM4J,EADQxI,KAAK61B,OAAOzhB,WACJ5L,QAAQokB,eAE9B,OAAKpkB,EAIExI,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6BrE,QAAQ/jC,EAAQY,WAAYxK,IAJvDwQ,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAQnC,YAAA6mB,oBAAR,SAA4Br8B,GAA5B,WACI,IAAKoB,KAAKy3B,iBAAmBz3B,KAAKwN,QAAQ2/B,kBACtC,MAAM,IAAI,KAAoB,KAAwBr7B,wBAG1D,IAAK9R,KAAKy3B,eAAenjB,OAAOuoB,WAC5B,MAAM,IAAI,IAAiB,IAAqB7iC,sBAG5C,IAAAghB,EAAA,oBAAAA,mBAER,OAAO,IAAIhb,KAAKwN,QAAQ2/B,kBAAkBpV,OAAOn5B,EAAQ63B,UAAWz2B,KAAKy3B,eAAenjB,OAAOuoB,WAAY,CACvGuF,MAAOxjC,EAAQwjC,OAAS,OACxBD,KAAMvjC,EAAQujC,MAAQ,QACtB9oC,KAAM,MACNy3C,sBAAsB,EACtB/X,QAASn6B,EAAQm6B,QACjB9pB,cAAe,WACX,EAAK8hC,qBAAqB/1B,OAK9B,YAAA+1B,qBAAR,SAA6BnyC,GAA7B,WACIoB,KAAKuvC,6BAA6BF,gBAC7BrwC,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACL,IAAK,EAAKmS,QAAQs/B,OACd,MAAM,IAAI,KAAoB,KAAwB/6B,wBAG1D,EAAKvE,QAAQs/B,OAAOC,MAAMiE,UAAU,CAChCC,OAAO,EACPC,MAAO,6EACP/8B,MAAO,GAAGvV,EAAQuyC,YAAc91C,EAAKe,OACtCwC,EAAQ+yB,aAEX,EAAK4d,6BAA6BD,8BAGlD,EAhHA,G,YCHA,WAII,WACYzZ,EACA+a,EACApT,GAFA,KAAA3H,SACA,KAAA+a,+BACA,KAAApT,8BAqHhB,OAlHI,YAAA7uB,WAAA,SAAW/P,GAAX,WACYc,EAAA,EAAAA,SAAU0xC,EAAA,EAAAA,WAElB,IAAKA,EACD,MAAM,IAAI,KAAqB,4EAGnC,IAAK1xC,EACD,MAAM,IAAI,IAAiB,IAAqB1F,sBAKpD,OAFAgG,KAAK86B,UAAYp7B,EAEVM,KAAKw9B,4BAA4B7uB,WAAWjP,GAC9CV,MAAK,WAAQ,EAAKg8B,cAAgB,EAAKC,oBAAoBmW,EAAW3a,cAEtEz3B,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAA0iB,aAAA,sBAMI,OALI92B,KAAKg7B,eAAiBh7B,KAAKg7B,cAAcE,aACzCl7B,KAAKg7B,cAAcE,WAAWC,YAAYn7B,KAAKg7B,eAC/Ch7B,KAAKg7B,mBAAgBp7B,GAGlBI,KAAKw9B,4BAA4B1G,eACnC93B,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAAi4B,OAAA,WACI,MAAM,IAAI,GACN,oFAIR,YAAAE,QAAA,SAAQ3tC,GACJ,IACM4J,EADQxI,KAAK61B,OAAOzhB,WACJ5L,QAAQokB,eAE9B,OAAKpkB,EAIExI,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6BrE,QAAQ/jC,EAAQY,WAAYxK,IAJvDwQ,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAQnC,YAAA6mB,oBAAR,SAA4Bnb,GAGxB,IAFkB1a,SAASq4B,cAAc,IAAI3d,GAGzC,MAAM,IAAI,KAAqB,+DAGnC,IAAM3L,EAAQnU,KAAK61B,OAAOzhB,WACpB2E,EAAiB5E,EAAM6E,eAAeC,iBAAiBjZ,KAAK+6B,gBAE5DzmB,EAASH,EAAMG,OAAOiF,iBAE5B,IAAKjF,EACD,MAAM,IAAI,IAAiB,IAAqB5a,uBAGpD,IAAKqf,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAG7C,QAAAsa,OAASuoB,EAAA,EAAAA,WAAY3E,EAAA,EAAAA,SAAW,IAAAld,mBAAqB0iB,EAAA,EAAAA,iBAAkBC,EAAA,EAAAA,eAAgBC,EAAA,EAAAA,OAE9F,IAAKf,IAAe3E,EAChB,MAAM,IAAI,KAGd,IAAM2F,EAAsB,CACxBhB,WAAU,EACViB,QAAS5F,EACTwF,iBAAgB,EAChBC,eAAc,EACdC,OAAM,EACNG,YAAa,aACbC,sBAAuB,CACnB79B,IAAQmU,EAAO2pB,MAAMC,SAAQ,0BAA0Bl+B,KAAK+6B,gBAEhEoD,UAAW,KAAoBkT,UAGnC,OAAOrxC,KAAKw9B,4BAA4BlC,aAAa,IAAIxb,EAAe+d,IAGpE,YAAA9C,aAAR,WACI,IAAK/6B,KAAK86B,UACN,MAAM,IAAI,IAAiB,IAAqB9gC,sBAGpD,OAAOgG,KAAK86B,WAmBpB,EA5HA,G,GCEA,WAII,WACYjF,EACAqB,EACAD,EACAqa,EACAV,EACAW,EACAC,GANA,KAAA3b,SACA,KAAAqB,yBACA,KAAAD,8BACA,KAAAqa,iCACA,KAAAV,+BACA,KAAAW,yCACA,KAAAC,4BATJ,KAAAC,iBAA2B,wBA6IvC,OAjII,YAAA9iC,WAAA,SAAW/P,GAAX,WACY,IAAA8yC,sBAA4ChyC,EAAA,EAAAA,SAEpD,IAAKiyC,IAAwBjyC,EACzB,MAAM,IAAI,KAAqB,uFAGnC,OAAOM,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GACF,EAAKsjB,eAAiBtjB,EAAM6E,eAAeC,iBAAiBvZ,GAE5D,IAAMwM,EAAWiI,EAAMjI,SAASwI,cAC1B4E,EAAcnF,EAAMG,OAAOiF,iBAEjC,IAAKrN,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,IAAK6f,EACD,MAAM,IAAI,IAAiB,IAAqB5f,uBAGpD,IAAK,EAAK+9B,iBAAmB,EAAKA,eAAe7oB,YAC7C,MAAM,IAAI,IAAiB,IAAqB5U,sBAIhD,IAAAy8B,EAAA,EAAAA,UACA,IAAAsC,eAAA,IAAU,EAAV,eAGE6Y,EAAc,CAChBrE,OAAQj0B,EAAYkB,aAAaq3B,cACjCrE,iBAAiB,EACjB9kC,SAAUwD,EAASxD,SACnB6/B,aAAcjvB,EAAYnR,SAASG,MAGvC,OAAO8G,QAAQC,IAAI,CACf,EAAKmiC,0BAA0BxV,KAAK,EAAKvE,eAAenjB,OAAO4jB,UAC/D,EAAKqZ,uCAAuC5iC,WAAW,EAAK8oB,eAAe7oB,YAAagjC,KAE3F5yC,MAAK,SAAC,G,IAACsP,EAAA,KAAcsjC,EAAA,KACZE,EAAe,EAAK7W,oBAAoBxE,EAAW,EAAKgb,kBAS9D,OAPAnjC,EAAayjC,KAAKH,GAClBtjC,EAAagF,GAAG,mBAAmB,SAAC0+B,GAChC,SAAKC,2BAA2BD,GAC3B1yC,OAAM,SAAAC,GAAS,OAAAw5B,EAAQx5B,SAEhC+O,EAAagF,GAAG,iBAAiB,SAAC9M,EAAGjH,GAAU,OAAAw5B,EAAQx5B,MAEhDuyC,KAEV9yC,MAAK,SAAA8yC,GAAkBA,EAAatZ,MAAMoJ,WAAa,gBAE3D5iC,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAAi4B,OAAA,WACI,MAAM,IAAI,GACN,4FAIR,YAAAE,QAAA,SAAQ3tC,GACJ,OAAOoB,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6BrE,QAAQ,wBAAyB3tC,KAI3E,YAAAk4B,aAAA,sBAGI,OAFA92B,KAAKy3B,oBAAiB73B,EAEfI,KAAKuxC,uCAAuCza,eAC9C93B,MAAK,WAAM,SAAK62B,OAAOzhB,eAGxB,YAAA69B,2BAAR,SAAmCD,GAAnC,WACU79B,EAAQnU,KAAK61B,OAAOzhB,WAE1B,IAAKpU,KAAKy3B,eACN,MAAM,IAAI38B,MAAM,kCAGZ,0BAAAsC,GAER,OAAO4C,KAAK61B,OAAOe,SACf52B,KAAKsxC,+BAA+B9E,mBAAkB,WAClD,OAAO,EAAK+E,uCAAuC5V,cAC/CqW,EACA79B,EAAMiB,gBAAgB+D,qBACtBhF,EAAM9M,eAAeuR,qBAExB5Z,MAAK,WAAM,SAAK62B,OAAOe,SAAS,EAAKM,uBAAuBpiB,4BAClE,CAAEpV,SAAQ,IAAK,CAAEi3B,QAAS,uBAGzB,YAAAsE,oBAAR,SAA4Bnb,EAAqBoyB,GAC7C,IAAMzb,EAAYrxB,SAASq4B,cAAc,IAAI3d,GAE7C,IAAK2W,EACD,MAAM,IAAI37B,MAAM,wCAGpB,OAAQ27B,EAAUgH,cAAc,IAAMyU,IAClClyC,KAAKmyC,0BAA0B1b,EAAWyb,IAG1C,YAAAC,0BAAR,SAAkC1b,EAAoByb,GAClD,IAUME,EAAqBhtC,SAASC,cAAc,OAOlD,OANA+sC,EAAmB5Z,MAAMoJ,WAAa,SACtCwQ,EAAmBC,UAAYH,EAC/BE,EAAmBE,UAZI,ucAcvB7b,EAAU+E,YAAY4W,GAEfA,GAEf,EA/IA,G,GCEA,WAGI,WACYvc,EACAoB,EACA2Z,EACA2B,EACA7zC,EACA24B,GALA,KAAAxB,SACA,KAAAoB,8BACA,KAAA2Z,+BACA,KAAA2B,wBACA,KAAA7zC,iBACA,KAAA24B,cA8HhB,OA3HI,YAAA1oB,WAAA,SAAW/P,GAAX,WACY,IAAA4zC,SAA2B9yC,EAAA,EAAAA,SAEnC,IAAK+yC,IAAoB/yC,EACrB,MAAM,IAAI,KAAqB,0EAGnC,OAAOM,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GACF,EAAKsjB,eAAiBtjB,EAAM6E,eAAeC,iBAAiBvZ,GAE5D,IAAM2M,EAAO8H,EAAM9H,KAAKiJ,UAClBgE,EAAcnF,EAAMG,OAAOiF,iBAEjC,IAAKlN,EACD,MAAM,IAAI,IAAiB,IAAqB9S,aAGpD,IAAK+f,EACD,MAAM,IAAI,IAAiB,IAAqB5f,uBAGpD,IAAK,EAAK+9B,iBAAmB,EAAKA,eAAezc,mBAAmB03B,iBAChE,MAAM,IAAI,KAAoB,KAAwB3jC,uBAGlD,IAAA0nB,EAAA,EAAAA,UAER,OAAO,EAAK8b,sBAAsBvW,KAAK,EAAKvE,eAAenjB,OAAO4jB,UAC7Dl5B,MAAK,SAAA+vC,GACF,IAAM4D,EAAW5D,EAAK4D,SAEtBA,EAASC,UAAU,CACfC,SAAUv5B,EAAYkB,aAAaq3B,gBAGnCc,EAASG,cACTH,EAASI,cAAc,CACnBxc,WAAY,CAACE,KAIrBkc,EAASr/B,GAAGq/B,EAASK,UAAUC,gBAAgB,WAC3C,EAAKpd,OAAOe,SAAS,EAAKK,4BAA4Bx3B,kBAAkBC,IACnEV,MAAK,WACF,IACM0H,EADQ,EAAKmvB,OAAOzhB,WACL4E,eAAeC,iBAAiBvZ,GAC/CwzC,EAAYxsC,GAAUA,EAAOsU,oBAAsBtU,EAAOsU,mBAAmB03B,iBAE/EQ,GACAP,EAASQ,cAAcD,SAKvCP,EAASr/B,GAAGq/B,EAASK,UAAUI,mBAAmB,SAACjhC,GAC/C,IACMzL,EADQ,EAAKmvB,OAAOzhB,WACL4E,eAAeC,iBAAiBvZ,GAC/C2zC,EAAY3sC,GAAUA,EAAOsU,oBAAsBtU,EAAOsU,mBAAmBs4B,kBAE/ED,GACA,EAAKE,yBAAyBphC,EAASkhC,GAClCr0C,MAAK,WACF,EAAKw0C,0BAMhCx0C,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAA0iB,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAi4B,OAAA,WACI,MAAM,IAAI,GACN,uFAIR,YAAAE,QAAA,SAAQ3tC,GACJ,IACM4J,EADQxI,KAAK61B,OAAOzhB,WACJ5L,QAAQokB,eAE9B,OAAKpkB,EAIExI,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6BrE,QAAQ/jC,EAAQY,WAAYxK,IAJvDwQ,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAQnC,YAAAm/B,yBAAR,SAAiCphC,EAAiCkhC,GAC9D,IACMz0C,EAAU,CACZtD,QAAS,CACL2E,OAAQ,YACR,eAAgB,oDAEpB5E,KAAM,CACFo4C,aAActhC,EAAQshC,aACtBH,kBAAmBD,GAEvB3sC,OAAQ,QAGZ,OAAO1G,KAAKtB,eAAeg1C,YAbf,8DAagC90C,IAGxC,YAAA40C,YAAR,WACIxzC,KAAKq3B,YAAYoC,SAAS,gBAAiB,CACvCn+B,QAAS,CACL2E,OAAQ,YACR,eAAgB,qCAEpBqW,OAAQ,CACJq9B,cAAc,MAI9B,EAvIA,G,GCLA,WACI,WACY9d,EACA+d,GADA,KAAA/d,SACA,KAAA+d,yBAsBhB,OAnBI,YAAAvH,OAAA,SAAOC,EAAkC1tC,GACrC,OAAOoB,KAAK61B,OAAOe,SACf52B,KAAK4zC,uBAAuBvD,eAAe/D,EAAa1tC,KAIhE,YAAA2tC,QAAA,SAAQ3tC,GACJ,OAAOoB,KAAK61B,OAAOe,SACf52B,KAAK4zC,uBAAuBnD,gBAAgB7xC,KAIpD,YAAA+P,WAAA,WACI,OAAOS,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAA0iB,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAE3C,EAzBA,G,SCMqB,GAArB,WAGI,WACYyhB,EACA+a,EACA/V,EACAxD,GAHA,KAAAxB,SACA,KAAA+a,+BACA,KAAA/V,6BACA,KAAAxD,cAuGhB,OApGI,YAAA1oB,WAAA,SAAW/P,GAAX,WACYc,EAAA,EAAAA,SAEFm0C,EAAmB7zC,KAAK8zC,qBAAqBl1C,GAEnD,IAAKc,EACD,MAAM,IAAI,IAAiB,IAAqB1F,sBAGpD,OAAOgG,KAAK66B,2BAA2BlsB,WAAWjP,GAC7CV,MAAK,WACF,EAAKg8B,cAAgB,EAAKC,oBAAoB4Y,EAAiBpd,cAElEz3B,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAA0iB,aAAA,sBAMI,OALI92B,KAAKg7B,eAAiBh7B,KAAKg7B,cAAcE,aACzCl7B,KAAKg7B,cAAcE,WAAWC,YAAYn7B,KAAKg7B,eAC/Ch7B,KAAKg7B,mBAAgBp7B,GAGlBI,KAAK66B,2BAA2B/D,eAClC93B,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAAi4B,OAAA,WACI,MAAM,IAAI,GACN,uFAIR,YAAAE,QAAA,SAAQ3tC,GACJ,IACM4J,EADQxI,KAAK61B,OAAOzhB,WACJ5L,QAAQokB,eAE9B,OAAKpkB,EAIExI,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6BrE,QAAQ/jC,EAAQY,WAAYxK,IAJvDwQ,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAQnC,YAAA6mB,oBAAR,SAA4Bnb,GACxB,IAAM2W,EAAYrxB,SAASq4B,cAAc,IAAI3d,GAE7C,IAAK2W,EACD,MAAM,IAAI,KAAqB,+DAGnC,IAAM4F,EAASr8B,KAAK66B,2BAA2BS,aAAat7B,KAAKu7B,0BAIjE,OAFA9E,EAAU+E,YAAYa,GAEfA,GAGH,YAAAyX,qBAAR,SAA6Bl1C,GACzB,GAAyB,uBAArBA,EAAQc,UAAqCd,EAAQm1C,mBACrD,OAAOn1C,EAAQm1C,mBAGnB,GAAyB,oBAArBn1C,EAAQc,UAAkCd,EAAQo1C,gBAClD,OAAOp1C,EAAQo1C,gBAGnB,MAAM,IAAI,MAGN,YAAAnY,yBAAR,WACI77B,KAAKq3B,YAAYoC,SAAS,gBAAiB,CACvCn+B,QAAS,CACL2E,OAAQ,YACR,eAAgB,wCAKpB,YAAA67B,SAAR,SAAiBv8B,GACb,GAAIA,GAA2B,aAAlBA,EAAM5E,QACf,MAAM4E,GAKN,YAAAg8B,yBAAR,SAAiChI,GADjC,WAII,OAFAA,EAAMkI,iBAECz7B,KAAK66B,2BAA2Ba,gBAClC18B,MAAK,SAAAib,GAAe,SAAK4gB,2BAA2Bc,cAAc1hB,GAClEjb,MAAK,WACEib,EAAY7E,iBACZ,EAAKylB,2BAA2Be,sBAAsB3hB,EAAY7E,uBAGzEpW,MAAK,WAAM,SAAK68B,8BAChBv8B,OAAM,SAAAC,GAAS,SAAKu8B,SAASv8B,OAXtC,sBADC,M,6CAcL,EA9GA,G,aCJA,WAII,WACYs2B,EACAoB,EACA2Z,EACA7U,GAHA,KAAAlG,SACA,KAAAoB,8BACA,KAAA2Z,+BACA,KAAA7U,0BA4FhB,OAzFI,YAAAptB,WAAA,SAAW/P,GAAX,WACY,IAAAq9B,WAA+Bv8B,EAAA,EAAAA,SAEvC,IAAKu0C,IAAsBv0C,EACvB,MAAM,IAAI,KAAqB,4EAGnC,OAAOM,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GAGF,GADA,EAAKsjB,eAAiBtjB,EAAM6E,eAAeC,iBAAiBvZ,IACvD,EAAK+3B,iBAAmB,EAAKA,eAAezc,mBAAmBxG,WAChE,MAAM,IAAI,IAAiB,IAAqBxa,sBAGpD,IAAMqS,EAAO8H,EAAM9H,KAAKiJ,UACxB,IAAKjJ,EACD,MAAM,IAAI,IAAiB,IAAqB9S,aAG5C,IAAAk9B,EAAA,EAAAA,UAEFtkB,EAAU,CACZqC,WAAY,EAAKijB,eAAezc,mBAAmBxG,WACnDgoB,iBAAkB,EAAK/E,eAAezc,mBAAmBwhB,iBACzDt7B,OAAQmL,EAAKowB,WAAW35B,WACxBqF,SAAUkE,EAAKlE,SAASG,KACxBo0B,OAAQrwB,EAAKjP,GACbu/B,yBAAyB,EACzB1zB,YAAa,aAAe,aAGhC,OAAO,EAAK8yB,wBAAwBC,KAAK,EAAKvE,eAAenjB,OAAO4jB,UAC/Dl5B,MAAK,SAAAk1C,GACF,EAAK/X,cAAgB,EAAKlB,oBAAoBxE,GAE9C,EAAK0F,cAAcjI,iBAAiB,SAAS,WACzCggB,EAAWhoC,SAASiG,YAInCnT,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAA0iB,aAAA,WAQI,OAPA92B,KAAKy3B,oBAAiB73B,EAElBI,KAAKm8B,eAAiBn8B,KAAKm8B,cAAcjB,aACzCl7B,KAAKm8B,cAAcjB,WAAWC,YAAYn7B,KAAKm8B,eAC/Cn8B,KAAKm8B,mBAAgBv8B,GAGlBwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAi4B,OAAA,WACI,MAAM,IAAI,GACN,uFAIR,YAAAE,QAAA,SAAQ3tC,GACJ,IACM4J,EADQxI,KAAK61B,OAAOzhB,WACJ5L,QAAQokB,eAE9B,OAAKpkB,EAIExI,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6BrE,QAAQ/jC,EAAQY,WAAYxK,IAJvDwQ,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAQnC,YAAA6mB,oBAAR,SAA4Bnb,GACxB,IAAM2W,EAAYrxB,SAASq4B,cAAc,IAAI3d,GAE7C,IAAK2W,EACD,MAAM,IAAI,KAAqB,+DAGnC,IAAM4F,EAASj3B,SAASC,cAAc,SAMtC,OAJAg3B,EAAOhjC,KAAO,QACdgjC,EAAOC,IAAM,4EACb7F,EAAU+E,YAAYa,GAEfA,GAEf,EApGA,G,GCFA,WAEI,WACYxG,EACA+a,GADA,KAAA/a,SACA,KAAA+a,+BA6BhB,OA1BI,YAAAvE,OAAA,WACI,MAAM,IAAI,GACN,uFAIR,YAAAE,QAAA,SAAQ3tC,GACJ,IACM4J,EADQxI,KAAK61B,OAAOzhB,WACJ5L,QAAQokB,eAE9B,OAAKpkB,EAIExI,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6BrE,QAAQ/jC,EAAQY,WAAYxK,IAJvDwQ,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAQ3C,YAAAzF,WAAA,WACI,OAAOS,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAA0iB,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAE3C,EAjCA,G,gBCGA,WACI,WACY+/B,GAAA,KAAAA,wBAiBhB,OAdI,YAAAC,cAAA,SAAcx1C,GAAd,WACI,OAAO,aAAWvG,QAAO,SAACwG,GACtBA,EAASC,KAAK,uBAAa,KAAkBukB,yBAE7C,EAAK8wB,sBAAsBC,cAAcx1C,GACpCI,MAAK,SAAAxD,GACFqD,EAASC,KAAK,uBAAa,KAAkBskB,uBAAwB5nB,EAASH,KAAKsf,OACnF9b,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,KAAkB+jB,oBAAqB9nB,WAI5F,EAnBA,G,GCHA,WACI,WACYkD,EACA21C,GADA,KAAA31C,iBACA,KAAA21C,UAWhB,OARI,YAAAD,cAAA,SAAc,G,IAAEr0C,QAAA,YAAAA,QAENzE,EAAU,CACZ,kBAAmB0E,KAAKq0C,QAAQ9G,QAGpC,OAAOvtC,KAAKtB,eAAe9G,IALf,kCAKwB,CAAE0D,QAAO,EAAEyE,QAAO,KAE9D,EAdA,G,GCGA,WACI,WACYrB,GAAA,KAAAA,iBAqChB,OAlCI,YAAA41C,UAAA,SAAUlsC,EAAiB,G,IAAA,kBAAErI,EAAA,EAAAA,QAASuW,EAAA,EAAAA,OAC5BnW,EAAM,0BAA0BiI,EAChC9M,EAAU,CAAE2E,OAAQ,IAAYC,QAStC,OAAOF,KAAKtB,eAAe9G,IAAIuI,EAAK,CAChCmW,OAAQ,CACJC,QAAS,YAAa,yBAVd,CACZ,WACA,sCACA,kCACA,qCACA,kCAOYD,GAAUA,EAAOC,SAAW,MAGxCjb,QAAO,EACPyE,QAAO,KAIf,YAAAw0C,YAAA,SAAYl5C,EAAgC,G,IAAE0E,QAAA,YAAAA,QAG1C,OAAOC,KAAKtB,eAAewZ,KAFf,iCAEyB,CAAE7c,KAAI,EAAE0E,QAAO,KAGxD,YAAAy0C,cAAA,SAAcpsC,EAAiB,G,IAAErI,QAAA,YAAAA,QACvBI,EAAM,kCAAkCiI,EAE9C,OAAOpI,KAAKtB,eAAewZ,KAAK/X,EAAK,CAAEJ,QAAO,KAEtD,EAvCA,G,GCJA,YACI,mBACI,YAAM,2DAA0D,K,OAEhE,EAAKzI,KAAO,kCACZ,EAAK+B,KAAO,gC,EAEpB,OAP6D,yBAO7D,EAPA,CAA6D,M,YCU7D,WACI,WACYo7C,EACAC,GADA,KAAAD,sBACA,KAAAC,qBAkIhB,OA/HI,YAAAJ,UAAA,SAAUlsC,EAAiBxJ,GAA3B,WACI,OAAO,IAAI,cAAW,SAACC,GACnBA,EAASC,KAAK,uBAAa,KAAgB8kB,qBAE3C,EAAK6wB,oBAAoBH,UAAUlsC,EAASxJ,GACvCI,MAAK,SAAAxD,GACFqD,EAASC,KAAK,uBAAa,KAAgBmf,mBAAoBziB,EAASH,OACxEwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,KAAgBukB,gBAAiBtoB,WAMlF,YAAAm5C,kBAAA,SAAkBvsC,EAAiBxJ,GAAnC,WACI,OAAO,IAAI,cAAW,SAACC,GACnBA,EAASC,KAAK,uBAAa,KAAgB+kB,6BAE3C,EAAK4wB,oBAAoBH,UAAUlsC,EAASxJ,GACvCI,MAAK,SAAAxD,GACFqD,EAASC,KAAK,uBAAa,KAAgB2kB,2BAA4BjoB,EAASH,OAChFwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,KAAgBwkB,wBAAyBvoB,WAK1F,YAAAo5C,iBAAA,SAAiBh2C,GAAjB,WACI,OAAO,SAAA2T,GAAS,wBAAM,WAClB,IAAMnK,EAAU,EAAKysC,mBAAmBtiC,EAAM6B,YAE9C,IAAKhM,EACD,MAAM,IAAI,IAAiB,IAAqBvO,gBAGpD,OAAO,EAAKy6C,UAAUlsC,EAASxJ,QAIvC,YAAA21C,YAAA,SAAYpiC,EAA2BvT,GAAvC,WACI,OAAO,SAAA2T,GAAS,wBACZ,aAAG,uBAAa,KAAgBuiC,uBAChC,iBAAM,WACF,IAAM3gC,EAAQ5B,EAAM6B,WACdqZ,EAAiBtZ,EAAMG,OAAOkZ,oBAC9BthB,EAAWiI,EAAMjI,SAASwI,cAEhC,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,GAAIyS,EAAS6oC,uBACT,MAAM,IAAI,GAGd,OAAO,eACH,EAAKL,mBAAmBM,SAAS9oC,EAAUtN,GACtCI,MAAK,WAAM,SAAKy1C,oBAAoBF,YAAY,EAAKU,uBAClD9iC,EACAjG,EAASgpC,gBACTznB,GACD7uB,OACT0T,KACE,sBAAU,SAAA9W,GAAY,wBAElB,EAAK84C,UAAU94C,EAASH,KAAKsf,KAAK5S,MAAMK,QAASxJ,GACjD,aAAG,uBAAa,KAAgB+kB,qBAAsBnoB,EAASH,KAAKsf,KAAM,yCAAKnf,EAASH,KAAK4D,MAAI,CAAE7C,MAAOZ,EAASF,QAAQc,kBAGpIkW,KACC,uBAAW,SAAA/S,GAAS,oBAAiB,KAAgB41C,kBAAmB51C,UAKpF,YAAAi1C,cAAA,SAAcpsC,EAAiBxJ,GAA/B,WACI,OAAO,iBACH,aAAG,uBAAa,KAAgBw2C,yBAChC,eAAKp1C,KAAKy0C,oBAAoBD,cAAcpsC,EAASxJ,IAChD0T,KACG,sBAAU,SAAA9W,GAAY,wBAClB,EAAK84C,UAAUlsC,EAASxJ,GACxB,aAAG,uBAAa,KAAgB8kB,uBAAwBloB,EAASH,KAAKsf,aAGpFrI,KACE,uBAAW,SAAA/S,GAAS,oBAAiB,KAAgB81C,oBAAqB91C,QAI1E,YAAAs1C,mBAAR,SAA2B1gC,GACvB,IAAMpM,EAAQoM,EAAMpM,MAAM+Q,WACpB5M,EAAWiI,EAAMjI,SAASwI,cAEhC,OAAQ3M,GAASA,EAAMK,SAAa8D,GAAYA,EAAS9D,SAGrD,YAAA6sC,uBAAR,SACI9iC,EACA+iC,EACAznB,GAEQ,IAAAjlB,EAAA,EAAAA,QAAS,kCAEjB,OAAKA,EAQE,yCACAT,GAAK,CACRmtC,gBAAe,EACfznB,eAAc,EACdjlB,QAAS,CACLyR,YAAazR,EAAQyR,YACrB3iB,KAAMkR,EAAQ9I,SACdqb,QAASvS,EAAQ0Q,aAdd,yCACAnR,GAAK,CACRmtC,gBAAe,EACfznB,eAAc,KAe9B,EArIA,G,SCTA,ICNK6nB,G,GDML,YACI,mBACI,YAAM,mEAAiE,K,OAEvE,EAAKh+C,KAAO,oCACZ,EAAK+B,KAAO,kC,EAEpB,OAP+D,yBAO/D,EAPA,CAA+D,M,SCN/D,SAAKi8C,GACD,oBACA,kBACA,sBACA,kBACA,2BACA,4BACA,kBACA,kBACA,oBACA,oBACA,kBACA,iCACA,8CACA,qBACA,oBACA,sBACA,mDACA,wBACA,qCACA,kDACA,kDACA,4CACA,uBACA,iBACA,0BACA,sCACA,YACA,sBA5BJ,CAAKA,QAAmB,KA+BT,U,GCbf,WACI,WACYlJ,EACAmJ,EACAC,GAFA,KAAApJ,oBACA,KAAAmJ,sBACA,KAAAC,+BA2IhB,OAxII,YAAAC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACY,IAAA4J,eAAA,IAAU,EAAV,KAAyCyoB,EAAA,EAAAA,eAC3ChyB,EAAO,CAAES,SAAU8I,EAAQ9I,UAEjC,OAAO,SAAA6S,GAAS,wBACZ,EAAKijC,6BAA6BC,SAAlC,CAA4CljC,GAC5C,aAAG,uBAAa,KAA0BqS,sBAAkBhlB,EAAWX,IACvE,iBAAM,WACF,IAEIy2C,EAFEvhC,EAAQ5B,EAAM6B,WAIpB,GAAID,EAAM3L,QAAQukB,sBAAsBkE,GAAiB,CACrD,IAAMvqB,EAASyN,EAAM6E,eAAeC,iBAAiBzQ,EAAQ9I,SAAU8I,EAAQ0Q,WAE/E,IAAKxS,EACD,MAAM,IAAI,IAAiB,IAAqB1M,sBAGpD07C,EAAW,EAAKtJ,kBAAkBuJ,YAAYjvC,QAE9CgvC,EAAW,EAAKtJ,kBAAkBx0C,IAAI,GAAoBg+C,0BAG9D,OAAOF,EACFD,QAAQtjC,EAAS,yCAAKvT,GAAO,CAAEc,SAAU8I,EAAQ9I,SAAUwZ,UAAW1Q,EAAQ0Q,aAC9Ela,MAAK,WAAM,8BAAa,KAA0B6lB,sBAAkBjlB,EAAWX,UAE1FqT,KACE,uBAAW,SAAA/S,GAAS,oBAAiB,KAA0BylB,cAAezlB,EAAON,SAI7F,YAAA42C,SAAA,SAASj3C,GAAT,WACI,OAAO,SAAA2T,GAAS,wBACZ,aAAG,uBAAa,KAA0B0S,oBAC1C,EAAK6wB,2BAA2BvjC,EAAO3T,GACvC,iBAAM,WACF,IAAMuV,EAAQ5B,EAAM6B,WACd,+BAAE,IAAAhL,kBAAA,IAAa,EAAb,KAAiB,IAAA8P,iBAAA,IAAY,EAAZ,KACnBxS,EAASyN,EAAM6E,eAAeC,iBAAiB7P,EAAY8P,GAEjE,IAAKxS,EACD,MAAM,IAAI,GAGd,OAAO,EAAK0lC,kBAAkBuJ,YAAYjvC,GACrCmvC,SAAS,yCAAKj3C,GAAO,CAAEc,SAAUgH,EAAOtJ,GAAI8b,UAAWxS,EAAOqU,WAC9D/b,MAAK,WAAM,8BAAa,KAA0BkmB,uBAAmBtlB,EAAW,CAAEF,SAAUgH,EAAOtJ,YAE9GkV,KACE,uBAAW,SAAA/S,GACP,IACMiJ,EADQ+J,EAAM6B,WACE5L,QAAQokB,eAE9B,OAAO,aAAiB,KAA0BvH,eAAgB9lB,EAAO,CAAEG,SAAU8I,GAAWA,EAAQY,mBAKpH,YAAAuF,WAAA,SAAW/P,GAAX,WACYc,EAAA,EAAAA,SAAUwZ,EAAA,EAAAA,UAElB,OAAO,SAAA3G,GAAS,wBAAM,WAClB,IAAM4B,EAAQ5B,EAAM6B,WACd1N,EAASyN,EAAM6E,eAAeC,iBAAiBvZ,EAAUwZ,GAE/D,IAAKxS,EACD,MAAM,IAAI,IAAiB,IAAqB1M,sBAGpD,OAAI0F,GAAYyU,EAAMge,kBAAkB9Q,cAAc3hB,GAC3C,kBAGJ,iBACH,aAAG,uBAAa,KAA0B6hB,yBAAqB3hB,EAAW,CAAEF,SAAQ,KACpF,EAAK0sC,kBAAkBuJ,YAAYjvC,GAC9BiI,WAAW,yCAAK/P,GAAO,CAAEc,SAAQ,EAAEwZ,UAAS,KAC5Cla,MAAK,WAAM,8BAAa,KAA0BoiB,yBAAqBxhB,EAAW,CAAEF,SAAQ,WAEtG4S,KACC,uBAAW,SAAA/S,GAAS,oBAAiB,KAA0BmiB,iBAAkBniB,EAAO,CAAEG,SAAQ,UAI1G,YAAAo3B,aAAA,SAAal4B,GAAb,WACYc,EAAA,EAAAA,SAAUwZ,EAAA,EAAAA,UAElB,OAAO,SAAA3G,GAAS,wBAAM,WAClB,IAAM4B,EAAQ5B,EAAM6B,WACd1N,EAASyN,EAAM6E,eAAeC,iBAAiBvZ,EAAUwZ,GAE/D,IAAKxS,EACD,MAAM,IAAI,IAAiB,IAAqB1M,sBAGpD,OAAI0F,IAAayU,EAAMge,kBAAkB9Q,cAAc3hB,GAC5C,kBAGJ,iBACH,aAAG,uBAAa,KAA0BiiB,2BAAuB/hB,EAAW,CAAEF,SAAQ,KACtF,EAAK0sC,kBAAkBuJ,YAAYjvC,GAC9BowB,aAAa,yCAAKl4B,GAAO,CAAEc,SAAQ,EAAEwZ,UAAS,KAC9Cla,MAAK,WAAM,8BAAa,KAA0BsiB,2BAAuB1hB,EAAW,CAAEF,SAAQ,WAExG4S,KACC,uBAAW,SAAA/S,GAAS,oBAAiB,KAA0BuiB,mBAAoBviB,EAAO,CAAEG,SAAQ,UAI5G,YAAA8sC,kBAAA,SAAkB9lC,EAA4B9H,GAC1C,IACMK,EAAO,CAAES,SADEd,GAAWA,EAAQc,UAGpC,OAAO,iBACH,aAAG,uBAAa,KAA0B+iB,8BAA0B7iB,EAAWX,IAC/E,iBAAM,WACF,OAAAyH,IAAS1H,MAAK,WAAM,8BAAa,KAA0B0jB,+BAA2B9iB,EAAWX,UAEvGqT,KACE,uBAAW,SAAA/S,GAAS,oBAAiB,KAA0BsjB,wBAAyBtjB,EAAON,QAI/F,YAAA62C,2BAAR,SAAmCvjC,EAA8B3T,GAC7D,IACMsN,EADQqG,EAAM6B,WACGlI,SAASwI,cAEhC,OAAIxI,GAAYA,EAAS9D,QACdpI,KAAKu1C,oBAAoBZ,kBAAkBzoC,EAAS9D,QAASxJ,GAGjE,mBAEf,EA/IA,G,WCZA,yBA+CA,OA9CI,YAAAuD,QAAA,SAAQ4zC,EAAaC,GACjB,OAAO,mBACHh2C,KAAKi2C,WAAWF,GAChB/1C,KAAKi2C,WAAWD,KAIhB,YAAAC,WAAR,SAAmB5pC,GACf,MAAO,CACHowB,WAAYpwB,EAAKowB,WACjBt0B,SAAUkE,EAAKlE,SACf/K,GAAIiP,EAAKjP,GACTiL,UAAW,CACPiD,aAAce,EAAKhE,UAAUiD,aACxBsF,QACAslC,MAAK,SAACC,EAAOC,GACV,UAAGD,EAAMnyC,UAAYmyC,EAAMp0C,WAAYs0C,cAAc,GAAGD,EAAMpyC,UAAYoyC,EAAMr0C,cAEnFjB,KAAI,SAAAC,GAAQ,OACTwC,kBAAmBxC,EAAKwC,kBACxBS,UAAWjD,EAAKiD,UAChBrC,SAAUZ,EAAKY,SACfI,UAAWhB,EAAKgB,cAExB8K,iBAAkBR,EAAKhE,UAAUwE,iBAC5B+D,QACAslC,MAAK,SAACC,EAAOC,GAAU,UAAGD,EAAM/4C,IAAKi5C,cAAc,GAAGD,EAAMh5C,OAC5D0D,KAAI,SAAAC,GAAQ,OACTG,OAAQH,EAAKG,OACbW,UAAWd,EAAKc,cAExBwJ,cAAegB,EAAKhE,UAAUgD,cACzBuF,QACAslC,MAAK,SAACC,EAAOC,GACV,UAAGD,EAAMnyC,UAAYmyC,EAAMp0C,WAAYs0C,cAAc,GAAGD,EAAMpyC,UAAYoyC,EAAMr0C,cAEnFjB,KAAI,SAAAC,GAAQ,OACTwC,kBAAmBxC,EAAKwC,kBACxBS,UAAWjD,EAAKiD,UAChBrC,SAAUZ,EAAKY,SACfI,UAAWhB,EAAKgB,UAChBu0C,aAAcv1C,EAAKu1C,oBAK3C,EA/CA,G,GCJA,YACI,mBACI,YAAM,2GAAyG,K,OAE/G,EAAKh/C,KAAO,mBACZ,EAAK+B,KAAO,e,EAEpB,OAP8C,yBAO9C,EAPA,CAA8C,M,GCS9C,WACI,WACYsa,GAAA,KAAAA,yBA+BhB,OA5BI,YAAAqhC,SAAA,SAAS9oC,EAAqBtN,GAA9B,WACI,IAAKsN,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,OAAOuG,KAAK2T,uBAAuBE,aAAa3H,EAAS9O,GAAIwB,GACxDI,MAAK,SAAAxD,GACF,IAAM+6C,EAAa,IAAI,GAEvB,KAAIrqC,EAASilB,qBAAuB31B,EAASH,KAAK81B,oBAC3C,EAAKqlB,gBAAgBtqC,EAASpD,QAAStN,EAASH,KAAKyN,UACrD,EAAK2tC,yBAAyBvqC,EAASW,iBAAkBrR,EAASH,KAAKwR,mBACvE0pC,EAAWp0C,QAAQ+J,EAASG,KAAM7Q,EAASH,KAAKgR,OAKvD,MAAM,IAAI,OAId,YAAAmqC,gBAAR,SAAwBE,EAAoBC,GACxC,OAAO,mBAAQ,eAAID,EAAU,QAAS,eAAIC,EAAU,UAGhD,YAAAF,yBAAR,SAAiCG,EAAsCC,GACnE,OAAO,mBAAQ,eAAID,EAAmB,QAAS,eAAIC,EAAmB,UAE9E,EAjCA,G,8DCTA,YACI,WAAYl8C,GAAZ,MACI,YAAMA,GAAW,4EAA0E,K,OAE3F,EAAKrD,KAAO,yBACZ,EAAK+B,KAAO,sB,EAEpB,OAPoD,yBAOpD,EAPA,CAAoD,M,+BCkBpD,WAGI,WACIilC,EACAwY,EACQC,EACAC,EACAC,EACAC,EACA3U,EACA4U,EACAC,EACA1X,EACAC,EACA0X,GATA,KAAAN,QACA,KAAAC,eACA,KAAAC,eACA,KAAAC,sBACA,KAAA3U,UACA,KAAA4U,eACA,KAAAC,iBACA,KAAA1X,WACA,KAAAC,YACA,KAAA0X,kBAERr3C,KAAK8gC,QAAU17B,SAASC,cAAc,UAEtCrF,KAAK8gC,QAAQxE,IAASgC,EAAI,qBAAqBwY,EAAM,SACrD92C,KAAK8gC,QAAQtI,MAAMmL,OAAS,OAC5B3jC,KAAK8gC,QAAQtI,MAAM2K,OAAS,OAC5BnjC,KAAK8gC,QAAQtI,MAAM8e,SAAW,SAC9Bt3C,KAAK8gC,QAAQtI,MAAM4K,MAAQ,OA6InC,OA1II,YAAAmU,QAAA,WACI,OAAOv3C,KAAK+2C,OAGhB,YAAAvW,OAAA,sBACU/J,EAAYrxB,SAASg2B,eAAep7B,KAAKg3C,cAE/C,IAAKvgB,EACD,MAAM,IAAI,KAA6B,qEAM3C,OAHAA,EAAU+E,YAAYx7B,KAAK8gC,SAC3B9gC,KAAKo3C,eAAenjB,SAEb,oBAAUj0B,KAAK8gC,QAAS,QAC1BxuB,KACG,sBAAU,SAAO,G,IAAEzL,EAAA,EAAAA,O,mIAGf,KAFMw6B,EAAgBx6B,GAAWA,EAA6Bw6B,eAG1D,MAAM,IAAIvmC,MAAM,wDAKpB,OAFAkF,KAAKm3C,aAAavjB,UAAUyN,GAE5B,GAAMrhC,KAAKm3C,aAAaj/B,KAAK,CACzB7e,KAAM,KAAqBm+C,gBAC3BrlC,QAAS,CACLslC,mBAAoBz3C,KAAKk3C,oBACzBQ,eAAgB13C,KAAKq3C,gBACrBM,SAAU33C,KAAK43C,eACfC,YAAa73C,KAAKi3C,aAClB3V,OAAQthC,KAAKuiC,QACblpC,KAAM2G,KAAK+2C,QAEhB,CACCvjB,YAAa,KAAqBskB,gBAClCrkB,UAAW,KAAqBskB,gB,cAZpC,S,cAeJ,uBAAW,SAAAx4C,GACP,GAAI,EAAKy4C,oBAAoBz4C,GACzB,OAAO,EAAK04C,wBAAwB14C,GAGxC,MAAMA,KAEV,gBAAK,IACPm0B,aAGV,YAAAwN,OAAA,WACSlhC,KAAK8gC,QAAQoX,gBAIlBl4C,KAAK8gC,QAAQoX,cAAc/c,YAAYn7B,KAAK8gC,SAC5C9gC,KAAKo3C,eAAehjB,eAGlB,YAAA+jB,WAAN,SACIC,EACAz9B,G,sIAGI,O,sBAAA,GAAM3a,KAAKm3C,aAAaj/B,KAAK,CACzB7e,KAAM,KAAqBg/C,gBAC3BlmC,QAAS,CAAEimC,OAAM,EAAEz9B,KAAI,IACxB,CACC6Y,YAAa,KAAqB8kB,gBAClC7kB,UAAW,KAAqB8kB,gB,cALpC,S,aAQA,G,WAAIv4C,KAAKw4C,oBAAoB,GAAQ,CACjC,GAAiC,sBAA7B,EAAMrmC,QAAQ5S,MAAM+I,KACpB,MAAM,IAAI,GAAuB,EAAM6J,QAAQ5S,MAAM5E,SAGzD,GAAI,EAAMwX,QAAQ3W,SACd,MAAM,aAA4B,EAAM2W,QAAQ3W,UAGpD,MAAM,IAAIV,MAAM,EAAMqX,QAAQ5S,MAAM5E,SAGxC,MAAM,E,yBAIR,YAAA89C,aAAN,W,sIACwB,SAAMz4C,KAAKm3C,aAAaj/B,KAA+B,CACvE7e,KAAM,KAAqBq/C,mBAC5B,CACCllB,YAAa,KAAqBmlB,a,OAGtC,KANQxmC,EAAY,SAIlB,SAEWymC,QACT,MAAM,IAAI,KAA4BzmC,EAAQ1W,Q,kBAIxC,YAAAw8C,wBAAd,SAAsC1kB,G,+GAMlC,KALMslB,EAAY/W,OAAO9hC,KAAK0/B,SAAS8B,QAlIjB,gBAuIJ9+B,KAAKg/B,MAAQmX,EAxIT,IA4IlB,OAHA74C,KAAK0/B,SAAS+B,QAxII,YAwIoB/+B,KAAKg/B,OAC3C1hC,KAAK2/B,UAAUnuB,QAAQ+hB,EAAMphB,QAAQ5S,MAAMoyB,aAEpC,CAAP,EAAO,IAAIviB,SAAQ,gBAGvB,MAAM,IAAI,GAAuBmkB,EAAMphB,QAAQ5S,MAAM5E,gBAGjD,YAAAi9C,aAAR,sBAEU3Z,EAAQ74B,SAASoxB,iBAAiB,wDAExC,OAAOl0B,MAAM3J,UAAUiY,MAAM1Z,KAAK+mC,GAC7Bj7B,QAAO,SAAA0I,GAAQ,MAJH,yBAIG,aAASA,EAAKpG,MAAMG,YACnCzC,QAAO,SAAA0I,GAAQ,yBAAO,EAAK62B,SACvBzhC,KAAI,SAAA03B,GAAS,OAAAA,GAASA,EAAMsgB,cAC5B91C,QAAO,SAAC+1C,GAA6B,MAAkB,iBAAXA,KAC5CvpB,MAAK,SAAAupB,GAAU,OAAAA,EAAOj8B,MAAM,OAAO0S,MAAK,SAAAl4B,GAAQ,OAA+C,IAA/CoU,EAAKpG,KAAKE,QAAQlO,EAAKka,QAAQ,IAAK,eAExF1Q,KAAI,SAAA4K,GAAQ,OAAAA,EAAKpG,SAGlB,YAAAkzC,oBAAR,SAA4BjlB,GACxB,OAAOA,EAAMl6B,OAAS,KAAqBk/C,cAGvC,YAAAP,oBAAR,SAA4BzkB,GACxB,OAAOA,EAAMl6B,OAAS,KAAqB0+C,cAEnD,EApKA,G,GCPA,WACI,WACYiB,EACA5B,EACA6B,EACRC,GAHQ,KAAAF,UACA,KAAA5B,iBACA,KAAA6B,sBAGA,QAAAE,cAAA,IAAS,EAAT,UAAe,IAAAC,wBAAA,IAAmB,EAAnB,UAAyB,IAAAC,eAAA,IAAU,EAAV,UAAgB,IAAAC,kBAAA,IAAa,EAAb,UAEhEt5C,KAAKo3C,eAAe9iB,YAAY,KAAqBilB,SAAS,SAAC,G,IAAEpnC,EAAA,EAAAA,QAAc,OAAAgnC,EAAOhnC,MACtFnS,KAAKo3C,eAAe9iB,YAAY,KAAqBklB,iBAAiB,SAAC,G,IAAErnC,EAAA,EAAAA,QAAc,OAAAinC,EAAiBjnC,MACxGnS,KAAKo3C,eAAe9iB,YAAY,KAAqBmlB,SAAS,SAAC,G,IAAEtnC,EAAA,EAAAA,QAAc,OAAAknC,EAAQlnC,MACvFnS,KAAKo3C,eAAe9iB,YAAY,KAAqBqkB,WAAW,SAAC,G,IAAExmC,EAAA,EAAAA,QAAc,OAAAmnC,EAAWnnC,MAyCpG,OAtCU,YAAAquB,OAAN,W,wIAMI,OALAxgC,KAAKo3C,eAAenjB,SAEd7K,EAAQppB,KAAK05C,iBACbC,EAAc,mBAAQ35C,KAAKg5C,QAAS5vB,GAE1C,GAAMA,EAAMoX,U,OACZ,OADA,SACA,GAAMpxB,QAAQC,IAAIsqC,EAAY74C,KAAI,SAAA84C,GAAc,OAAAA,EAAWpZ,c,cAA3D,S,YAGJ,YAAAU,OAAA,WACIlhC,KAAKo3C,eAAehjB,aAEpBp0B,KAAKg5C,QAAQhyC,SAAQ,SAAAoiB,GACjBA,EAAM8X,aAIR,YAAA2Y,OAAN,SAAa1nC,G,gIACF,SAAMnS,KAAK05C,iBAAiBvB,WAC/Bn4C,KAAKg5C,QAAQl4C,KAAI,SAAAsoB,GAAS,OAAAA,EAAMmuB,aAChCv3C,KAAKi5C,oBAAoBvgC,UAAUvG,K,OAFvC,MAAO,CAAP,EAAO,kBAML,YAAA6iC,SAAN,W,gIACW,SAAMh1C,KAAK05C,iBAAiBjB,gB,OAAnC,MAAO,CAAP,EAAO,kBAGH,YAAAiB,eAAR,WACI,IAAMtwB,EAAQppB,KAAKg5C,QAAQ,GAE3B,IAAK5vB,EACD,MAAM,IAAI,KAA6B,oEAG3C,OAAOA,GAEf,EArDA,G,YCJA,WACI,WACYyM,GAAA,KAAAA,SAiChB,OA9BI,YAAAnd,UAAA,SAAUvG,GACN,IAAMgC,EAAQnU,KAAK61B,OAAOzhB,WACpBlI,EAAWiI,EAAMjI,SAASwI,cAC1BJ,EAASH,EAAMG,OAAOiZ,YACtB9T,EAAiBtF,EAAMuF,YAAYC,qBACnC5R,EAAQoM,EAAMpM,MAAM+Q,WACpB9Q,EAAYmM,EAAMpM,MAAM+R,eACxBtR,EAAU,gBAAK2J,EAAQ8H,YAAa,WAAY,SAAU,WAAY,SACtElB,EAAgB5E,EAAM6E,eAAeC,iBAAiB9G,EAAQzS,SAAUyS,EAAQ+G,WAChF0B,EAAoBzG,EAAM6E,eAAea,wBAEzCG,EAAYP,GAAkBjR,GAAW,aAAoBA,GAC5D2L,EAAM3L,QAAQ0R,kBAAiB,KAAKT,EAAeU,iBACtDhG,EAAM3L,QAAQ0R,kBAElB,IAAKF,EACD,MAAM,IAAI,IAAiB,IAAqBjgB,qBAGpD,MAAO,CACHigB,UAAS,EACT9N,SAAQ,EACRoI,OAAM,EACNvM,MAAK,EACLC,UAAS,EACTQ,QAAO,EACPuQ,cAAa,EACb6B,kBAAiB,IAG7B,EAnCA,G,GCOA,WACI,WACYib,GAAA,KAAAA,SAoDhB,OAjDI,YAAAx9B,OAAA,SAAOimC,EAAcwY,EAAgBl4C,GAArC,WAEUw5C,EADa3gD,OAAOkJ,KAAK/B,EAAQw5C,QACbx3C,QAAsB,SAACC,EAAQxH,GACrD,IACMygD,EADSl7C,EAAQw5C,OACK/+C,GAE5B,OAAKygD,EAIE,yBACAj5C,EAAM,CACT,IAAI,GACAy9B,EACAwY,EACAz9C,EACAygD,EAAah6B,YACbg6B,EAAajC,aAAe,GAC5BiC,EAAarC,oBAAsB,GACnC74C,EAAQ0iC,QAAU,GAClB,IAAI,KAAkBhD,GACtB,IAAI,KAAoBA,GACxB,IAAI,KA7BE,2BA8BNhmB,OAAOC,SACP,iBAAkBuhC,EACd,EAAKC,mBAAmBD,EAAah+C,mBACrC8D,KAnBDiB,IAsBZ,IAEH,OAAO,IAAI,GACPu3C,EACA,IAAI,KAAoB9Z,GACxB,IAAI,GAA+Bt+B,KAAK61B,QACxC,gBAAKj3B,EAAS,SAAU,UAAW,mBAAoB,gBAIvD,YAAAm7C,mBAAR,SAA2Bj+C,GACA,IACjBF,GAAawzB,EADI,mCAAAA,mBACctzB,GAErC,IAAKF,EACD,MAAM,IAAI,IAAiB,IAAqBo+C,0BAGpD,OAAOp+C,GAEf,EAtDA,G,GCVA,YACI,mBACI,YAAM,sFAAoF,K,OAE1F,EAAKtE,KAAO,4BACZ,EAAK+B,KAAO,yB,EAEpB,OAPuD,yBAOvD,EAPA,CAAuD,M,YCQvD,WACI,WACY4gD,EACAv7C,GADA,KAAAu7C,mBACA,KAAAv7C,iBAiEhB,OA9DI,YAAAiQ,WAAA,SAAW/P,GAAX,WACI,OAAO,SAAA2T,GAAS,wBACZ,aAAG,uBAAa,KAAyBgP,yBAAqB3hB,IAC9D,iBAAM,kE,oFAYF,GAXMs6C,EAA0Bt7C,EAAUA,EAAQkhB,YAAc,0BAE3DlhB,GAAYwG,SAASg2B,eAAe8e,MAC/BC,EAAwB/0C,SAASC,cAAc,QAC/B+0C,aAAa,KAAMF,GACzC90C,SAAS/J,KAAKmgC,YAAY2e,IAGxBhmC,EAAQ5B,EAAM6B,aACdkF,EAAcnF,EAAMG,OAAOiF,kBAG7B,MAAM,IAAI,IAAiB,IAAqB7f,uBAKpD,OAFM2gD,EAAmB/gC,EAAYghC,iBAAiBC,uBAEtD,GAAMv6C,KAAKi6C,iBAAiBje,KAAKke,EAAyBG,I,OAE1D,OAFA,SAEO,CAAP,EAAO,uBAAa,KAAyBj5B,iCAEnD9O,KACE,uBAAW,SAAA/S,GAAS,oBAAiB,KAAyBmiB,iBAAkBniB,SAIxF,YAAAk2C,QAAA,sBACI,OAAO,SAAAljC,GACH,IACMrG,EADQqG,EAAM6B,WACGlI,SAASwI,cAEhC,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAKpD,OAFQ,EAAAs7C,uBAMD,iBACH,aAAG,uBAAa,KAAyBnwB,sBAAkBhlB,IAC3D,EAAKq6C,iBAAiBxE,UACjBnjC,KAAK,gBAAK,IACVA,KAAK,sBAAU,SAAC,G,IAAE/S,EAAA,EAAAA,MAAOnD,EAAA,EAAAA,MACtB,GAAImD,IAAUnD,EACV,MAAM,IAAI,GAGd,OAAO,EAAKsC,eAAes2C,SAAS9oC,EAAS9O,GAAIhB,GAC5C4C,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KAAW,8BAAa,KAAyBwpB,iBAAkBxpB,WAE1FiX,KACE,uBAAW,SAAA/S,GAAS,oBAAiB,KAAyBylB,cAAezlB,OAhBtE,oBAoBvB,EApEA,G,GCTA,WACI,WACYb,GAAA,KAAAA,iBAShB,OANI,YAAAs2C,SAAA,SAASxgC,EAAoBpY,EAAe,G,IAAE2D,QAAA,YAAAA,QACpCI,EAAM,6BAA6BqU,EAAU,mBAC7ClZ,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAewZ,KAAK/X,EAAK,CAAE9E,KAAM,CAAEe,MAAK,GAAId,QAAO,EAAEyE,QAAO,KAEhF,EAXA,G,YCOA,WACI,WACYy6C,GAAA,KAAAA,4BAwBhB,OArBI,YAAAC,iBAAA,SAAiBxpB,EAAyBryB,GAA1C,WACI,OAAO,SAAA2T,GAAS,wBACZ,aAAG,uBAAa,KAAsB2V,4BACtC,iBAAM,kE,gFAIF,GAHM/T,EAAQ5B,EAAM6B,aACdlI,EAAWiI,EAAMjI,SAASwI,eAG5B,MAAM,IAAI,IAAiB,IAAqBjb,iBAGnC,SAAOw3B,EACpBjxB,KAAKw6C,0BAA0BC,iBAAiBvuC,EAAS9O,GAAIwB,GAC7DoB,KAAKw6C,0BAA0BE,kBAAkBxuC,EAAS9O,GAAIwB,I,OAElE,OAJQvD,EAAS,SAE0D,KAEpE,CAAP,EAAO,uBAAa,KAAsB8sB,0BAA2B9sB,eAE3EiX,KACE,uBAAW,SAAA/S,GAAS,oBAAiB,KAAsB6oB,uBAAwB7oB,SAG/F,EA1BA,G,GCPA,WACI,WACYb,GAAA,KAAAA,iBA4BhB,OAzBI,YAAA+7C,iBAAA,SAAiBjmC,EAAoB,G,IAAEzU,QAAA,YAAAA,QAC7BI,EAAM,6BAA6BqU,EAAU,gBAC7ClZ,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAewZ,KAAK/X,EAAK,CACjC7E,QAAO,EACPyE,QAAO,EACPuW,OAAQ,CACJC,QAAS,YAAa,SAKlC,YAAAmkC,kBAAA,SAAkBlmC,EAAoB,G,IAAEzU,QAAA,YAAAA,QAC9BI,EAAM,6BAA6BqU,EAAU,gBAC7ClZ,EAAU,CAAE2E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe0Z,OAAOjY,EAAK,CACnC7E,QAAO,EACPyE,QAAO,EACPuW,OAAQ,CACJC,QAAS,YAAa,SAItC,EA9BA,G,YCQA,WACI,WACYokC,EACApF,EACAqF,GAFA,KAAAD,wBACA,KAAApF,sBACA,KAAAqF,6BA8ChB,OA3CI,YAAAj/B,cAAA,SAAcnT,GAAd,WACI,OAAO,SAAA+J,GAAS,wBACZ,aAAG,uBAAa,KAAkBsoC,yBAClC,eAAK,EAAKF,sBAAsBh/B,cAC5B,EAAKi/B,2BAA2BliC,UAAUlQ,EAAS+J,EAAM6B,cAExD9B,KACG,sBAAU,SAAC,G,IAAEjX,EAAA,EAAAA,KAAW,wBACpB,EAAKk6C,oBAAoBX,kBAAzB,CAA4CriC,GAC5C,aAAG,uBAAa,KAAkB0R,uBAAwB5oB,UAGxEiX,KACE,uBAAW,SAAA/S,GAAS,oBAAiB,KAAkBu7C,oBAAqBv7C,SAIpF,YAAAuc,yBAAA,SACIpc,EACAwZ,EACApd,EACAi/C,GAJJ,WAMI,OAAO,SAAAxoC,GACH,IAAI0H,EAEAne,EACAme,EAAc,CAAE/d,iBAAkB,CAAEC,aAAcL,IAC3Ci/C,IACP9gC,EAAc,CAAE/d,iBAAkB,CAAE8+C,yBAA0BD,KAGlE,IAAM5oC,EAAU,EAAKyoC,2BAA2BliC,UAAU,CAAEQ,UAAS,EAAExZ,SAAQ,EAAEua,YAAW,GAAI1H,EAAM6B,YAEtG,OAAO,iBACH,aAAG,uBAAa,KAAkB6mC,oCAClC,EAAKN,sBAAsB7+B,yBAAyB3J,GAC/CnT,MAAK,WAAM,8BAAa,KAAkBk8C,uCACjD5oC,KACE,uBAAW,SAAA/S,GAAS,oBAAiB,KAAkB47C,+BAAgC57C,SAIvG,EAlDA,G,gCCDA,YACI,WACYs2B,EACRj3B,GAFJ,MAII,YAAMA,IAAQ,K,OAHN,EAAAi3B,S,EAiEhB,OAnEqD,yBAQjD,YAAA8f,YAAA,SAAY58B,GACR,IAAKA,EACD,OAAO/Y,KAAKpI,MAGhB,IAAMwE,EAAQ4D,KAAKo7C,UAAUriC,GAEvB+tB,EAAa,CAAC/tB,EAAcgC,QAAShC,EAAc3b,IACpD4F,QAAO,SAAAhL,GAAS,OAAAA,WAChBsI,KAAK,KAEV,OAAON,KAAKpI,IAAIwE,EAAO0qC,IAGnB,YAAAsU,UAAR,SAAkBriC,GACd,IAAMrZ,EAAWqZ,EAAcgC,SAAWhC,EAAc3b,GAExD,OAAI4C,KAAKq7C,qBAAqB37C,GACnBA,EAGPqZ,EAAc1f,OAAS,KAChB,GAAoB0D,QAG3BiD,KAAKs7C,gBAAgBviC,GACd,GAAoBwiC,OAG3BxiC,EAAc1f,OAAS,KAChB,GAAoBmiD,QAGxB,GAAoBC,aAGvB,YAAAJ,qBAAR,SACI37C,GAEA,OAAOM,KAAKgnC,YAAYtnC,IAGpB,YAAA47C,gBAAR,SAAwBviC,GACpB,IAAMzE,EAAStU,KAAK61B,OAAOzhB,WAAWE,OAAOiF,iBAE7C,IAAKjF,EACD,MAAM,IAAI,IAAiB,IAAqB5a,uBAG5C,IAAAgiD,EAAA,kBAAAA,2BAER,SAAKA,GAAwD,UAA1B3iC,EAAcgC,SAAiD,gBAA1BhC,EAAcgC,WAI9E,gBAAK2gC,GAA4B,SAAAt+C,GACrC,OAAA2b,EAAc3b,KAAOA,GAAM2b,EAAcgC,UAAY3d,MAGjE,EAnEA,CAAqD,KCVtC,SAASu+C,KACpB,MAAO,CACHC,YAAaC,OAAOC,YAAc,GAClCC,aAA+C,mBAA1BC,UAAUC,aAA6BD,UAAUC,cACtEpJ,SAAUmJ,UAAUnJ,UAAamJ,UAAkBE,aACnDC,cAAeN,OAAO1Y,OACtBiZ,aAAcP,OAAOzY,MACrBiZ,kBAAkB,IAAI35C,MAAO45C,oBAAoBx5C,Y,ICyK7Cy5C,GAmZAC,G,YC9jBZ,YACI,WAAYC,GAAZ,WACQ9hD,EAAU,yE,OAEV8hD,IACA9hD,EAAaA,EAAO,2DAA2D8hD,EAAcn8C,KAAK,MAAK,MAG3G,cAAM3F,IAAQ,MAETrD,KAAO,8B,EAEpB,OAZyD,yBAYzD,EAZA,CAAyD,OD2KzD,SAAYilD,GACR,wDACA,wCAFJ,CAAYA,QAAqB,KAmZjC,SAAYC,GACR,kDACA,0BACA,wBACA,sCACA,gBACA,oCACA,oBACA,sBACA,oCACA,oBAVJ,CAAYA,QAAU,KEljBtB,ICnBYE,G,GDmBZ,WAOI,WACY7mB,EACA8mB,EACApH,EACAqH,EACAvlB,EACAwlB,GALA,KAAAhnB,SACA,KAAA8mB,wBACA,KAAApH,sBACA,KAAAqH,uBACA,KAAAvlB,cACA,KAAAwlB,UAwShB,OArSI,YAAAluC,WAAA,SAAW/P,GAAX,WACYk+C,EAAA,EAAAA,QAER,IAAKA,EACD,MAAM,IAAI,KAAqB,oFAGnC,IAAM/jC,EAAgB/Y,KAAK61B,OAAOzhB,WAAW4E,eAAeC,iBAAiBra,EAAQc,UAErF,IAAKqZ,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpDgG,KAAK+8C,SAAWD,EAEhB,IAAME,EAAoC,CACtCC,YAAclkC,EAAciC,mBAAmBiiC,YAC/C1P,OAAQvtC,KAAK68C,QACbK,UAAWnkC,EAAciC,mBAAmBkiC,UAC5CC,uBAAwBpkC,EAAciC,mBAAmBmiC,wBAG7D,OAAOn9C,KAAK48C,qBAAqB5gB,KAAKghB,GACjCh+C,MAAK,SAAAo+C,GACF,EAAKC,eAAiBD,EAEtB,IAAME,EAAwB,EAAKD,eAAehlD,OAC9C0gB,EAAc3b,GAAE,yCAET0/C,EAAQl+C,SAAO,CAClB2+C,SAAU,SAACppC,GACP,EAAKqpC,2BAA2BrpC,OAS5C,GAJAmpC,EAAsBG,MAAM,IAAIX,EAAQh9B,aAExC,EAAK49B,uBAAyBJ,EAE1BR,EAAQa,4BAA6B,CACrC,IAAMC,EAAiC,EAAKP,eAAehlD,OAAO,gBAAiB,CAC/EklD,SAAU,SAACppC,GACP,EAAKqpC,2BAA2BrpC,MAIxCypC,EAA+BH,MAAM,IAAIX,EAAQa,6BAEjD,EAAKE,gCAAkCD,EAG3C,OAAOxuC,QAAQY,QAAQ,EAAK6lB,OAAOzhB,gBAI/C,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACY4J,EAAA,EAAAA,QAAS,kCACXyR,EAAczR,GAAWA,EAAQyR,YACjC8gC,EAAuB9gC,GAAgBA,EAAiC8gC,qBAE9E,IAAKvyC,EACD,MAAM,IAAI,GAA4B,CAAC,YAG3C,OAAOxI,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYxsC,EAAOnJ,IACnEI,MAAK,WACF,IAAM8+C,EAAsB,EAAKC,qBAEjC,IAAKD,EACD,MAAM,IAAI,KAAoB,KAAwB/uC,uBAE1D,GAAIkL,GAAe,aAAoBA,GAAc,CAE3C,2BAAE+jC,EAAA,EAAAA,oBAAqBC,EAAA,EAAAA,sBAE7B,OAAO,EAAKpoB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCAC9DnT,GAAO,CACVyR,YAAa,CACT/d,iBAAkB,CACdC,aAAc,CACV+hD,gCAAiCF,EACjC5hD,MAAO6d,EAAYne,aACnBqiD,mBAAoBF,GAExBG,aAAczC,WAM9B,IAAM0C,EAAiB,CACnB3+C,SAAU8I,EAAQ9I,SAClBua,YAAa,CACT/d,iBAAkB,CACdoiD,kBAAmB,CACfliD,MAAOy9B,KAAKC,UAAU,yCACfgkB,EAAoBnjC,KAAK5B,eAAa,CACzCpT,OAAQ2S,OAAOC,SAAS5S,WAGhCy4C,aAAczC,KACdX,yBAA0BD,KAKtC,OAAO,EAAKllB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc0iC,OAExE/+C,OAAM,SAAAC,GACH,OAAMA,aAAiB,MAAkB,gBAAKA,EAAMlE,KAAKI,OAAQ,CAAE6M,KAAM,4BAIrE/I,EAAMlE,KAAKkjD,gBAAgBj2C,OAASk0C,GAAWgC,gBACxC,EAAKC,uBAAuBl/C,EAAMlE,KAAKkjD,gBAAiB/1C,EAAQ9I,UAClEV,MAAK,SAACwJ,GACH,SAAKqtB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCACvDnT,GAAO,CACVyR,YAAa,yCACNzR,EAAQyR,aAAW,CACtB8gC,qBAAoB,WAG/Bz7C,OAAM,SAAAC,GACH,OAAMA,aAAiB,MAAkB,gBAAKA,EAAMlE,KAAKI,OAAQ,CAAE6M,KAAM,6BAIrE/I,EAAMlE,KAAKkjD,gBAAgBj2C,OAASk0C,GAAWkC,iBACxC,EAAKC,qBAAqBp/C,EAAMlE,KAAKkjD,gBAAiB/1C,EAAQ9I,UAChEV,MAAK,SAACwJ,GACH,SAAKqtB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCACvDnT,GAAO,CACVyR,YAAa,yCACNzR,EAAQyR,aAAW,CACtB8gC,qBAAoB,WAV7B3rC,QAAQwM,OAAOrc,MAoBlCA,EAAMlE,KAAKkjD,gBAAgBj2C,OAASk0C,GAAWkC,iBACxC,EAAKC,qBAAqBp/C,EAAMlE,KAAKkjD,gBAAiB/1C,EAAQ9I,UAChEV,MAAK,SAACwJ,GACH,SAAKqtB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCACvDnT,GAAO,CACVyR,YAAa,yCACNzR,EAAQyR,aAAW,CACtB8gC,qBAAoB,WAMjC,IAAI3rC,SAAQ,WACf,EAAKioB,YAAYoC,SAASl6B,EAAMlE,KAAKkjD,gBAAgBK,QAAS,CAC1DC,MAAOt/C,EAAMlE,KAAKkjD,gBAAgBO,mBAClCC,QAASx/C,EAAMlE,KAAKkjD,gBAAgBS,aACpCC,GAAI1/C,EAAMlE,KAAKkjD,gBAAgBW,mBApD5B9vC,QAAQwM,OAAOrc,OA0DtC,YAAAs2C,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAkb,aAAA,WAWI,OAVI92B,KAAK09C,yBACL19C,KAAK09C,uBAAuByB,UAC5Bn/C,KAAK09C,4BAAyB99C,GAG9BI,KAAK69C,kCACL79C,KAAK69C,gCAAgCsB,UACrCn/C,KAAK69C,qCAAkCj+C,GAGpCwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAG/B,YAAAgrC,oCAAR,WACI,IAAKp/C,KAAK+8C,SACN,MAAM,IAAI,KAAqB,sEAGnC,OAAO/8C,KAAK+8C,UAGR,YAAAsC,gCAAR,WACY,IAAAC,EAAA,2DAAAA,WAER,OAAKA,GACM,MAMP,YAAAX,qBAAR,SAA6BY,EAA8BC,GAA3D,WACI,OAAO,IAAIpwC,SAAQ,SAACY,EAAS4L,GACzB,IAAK,EAAKyhC,eACN,MAAM,IAAI,KAAoB,KAAwBtuC,uBAGpD,8DAAE+wB,EAAA,EAAAA,WAAYG,EAAA,EAAAA,OAEdwf,EAAqB,EAAKpC,eAC3BhlD,OAAOkkD,GAAsBmD,kBAAmB,CAC7CC,eAAgBJ,EAAanjD,MAC7B0jC,WAAY,SAAC8f,GACT,IAAMC,EAA0B,yCACzBD,EAAcjlC,MAAI,CACrBV,YAAaslC,EAAaO,eAGxBzB,EAAiB,CACnB3+C,SAAU8/C,EACVvlC,YAAa,CACT2X,MAAOiI,KAAKC,UAAU+lB,KAI9B/f,IAEA9vB,EAAQquC,IAEZtlB,QAAS,SAACx5B,GAAsB,OAAAqc,EAAOrc,IACvC4iC,KAAM,EAAKkd,oCAGbU,EAAoB,EAAKX,sCAAsCY,oBAErE/f,GAAO,WACHwf,EAAmBN,UACnBvjC,OAGJ6jC,EAAmBhC,MAAM,IAAIsC,OAI7B,YAAAtB,uBAAR,SAA+Bc,EAA8BC,GAA7D,WACI,OAAO,IAAIpwC,SAAQ,SAACY,EAAS4L,GACzB,IAAK,EAAKyhC,eACN,MAAM,IAAI,KAAoB,KAAwBtuC,uBAGpD,8DAAE+wB,EAAA,EAAAA,WAAYG,EAAA,EAAAA,OAEdggB,EAAuB,EAAK5C,eAC7BhlD,OAAOkkD,GAAsB2D,0BAA2B,CACrDC,iBAAkBZ,EAAanjD,MAC/B0jC,WAAY,SAACsgB,GACT,IAAMC,EAA4B,yCAC3BD,EAAgBzlC,MAAI,CACvBV,YAAaslC,EAAaO,eAGxBzB,EAAiB,CACnB3+C,SAAU8/C,EACVvlC,YAAa,CACT2X,MAAOiI,KAAKC,UAAUumB,KAI9BvgB,IAEA9vB,EAAQquC,IAEZtlB,QAAS,SAACx5B,GAAsB,OAAAqc,EAAOrc,MAGzCwgD,EAAoB,EAAKX,sCAAsCY,oBAErE/f,GAAO,WACHggB,EAAqBd,UACrBvjC,OAGJqkC,EAAqBxC,MAAM,IAAIsC,OAI/B,YAAAvC,2BAAR,SAAmC8C,GAC/BtgD,KAAK+9C,qBAAuBuC,GAEpC,EArTA,G,GEbA,WACI,WACY/yC,EACAgzC,EACA/yC,QAAA,IAAAA,MAAA,QAFA,KAAAD,gBACA,KAAAgzC,oBACA,KAAA/yC,UAmBhB,OAhBI,YAAAwuB,KAAA,SAAKghB,GAAL,WACI,OAAO5tC,QAAQC,IAAI,CACfrP,KAAKugD,kBAAkBC,eAAe,2BAA2BxD,EAAcC,YAAW,kDAC1Fj9C,KAAKuN,cAAcG,WAAW,2BAA2BsvC,EAAcC,YAAW,mDAErFj+C,MAAK,WACF,IAAK,EAAKwO,QAAQizC,cACd,MAAM,IAAI,IAGd,OAAO,IAAI,EAAKjzC,QAAQizC,cAAczD,MAEzC19C,OAAM,WACH,MAAM,IAAI,QAGtB,EAvBA,G,UDNA,SAAYo9C,GACR,6DACA,+DAFJ,CAAYA,QAAa,KEOzB,I,GAAA,YACI,WAAY/hD,GAAZ,MACI,YAAMA,GAAW,mCAAiC,K,OAElD,EAAKrD,KAAO,8BACZ,EAAK+B,KAAO,oB,EAEpB,OAPyD,yBAOzD,EAPA,CAAyD,M,aCSzD,WAGI,WACYw8B,EACA0f,EACAoH,EACA1lB,EACAypB,GAJA,KAAA7qB,SACA,KAAA0f,sBACA,KAAAoH,wBACA,KAAA1lB,8BACA,KAAAypB,sBAoRhB,OAjRI,YAAA/xC,WAAA,SAAW/P,GAAX,WACI,OAAOoB,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBb,EAAQc,WAClFV,MAAK,SAAAmV,GACF,IAAM4E,EAAgB5E,EAAM6E,eAAeC,iBAAiBra,EAAQc,UAEpE,IAAKqZ,IAAkBA,EAAcnK,YACjC,MAAM,IAAI,IAAiB,IAAqB5U,sBAGlC,IAAAk+B,EAAA,SAAAA,SAAY,IAAAtpB,YAE9B,OAAO,EAAK8xC,oBAAoB1kB,KAAK2kB,EAAWzoB,MAEnDl5B,MAAK,SAAA4hD,GAGF,OAFA,EAAKC,QAAUD,EAER,EAAK/qB,OAAOzhB,eAI/B,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACUc,EAAWyS,EAAQ3J,SAAW2J,EAAQ3J,QAAQ9I,SAC5CuxB,EAAA,EAAAA,eACA4vB,EAAA,KAAAA,QAER,IAAKA,EACD,MAAM,IAAI,KAAoB,KAAwB9xC,uBAG1D,IAAKrP,EACD,MAAM,IAAI,GAA4B,CAAC,qBAG3C,IAAMohD,EAAiB,yCAChBliD,GAAO,CACV0X,OAAQ,CACJC,QAAS,CACLmmC,GAAcqE,wBACdrE,GAAcsE,2BAK1B,OAAOhhD,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAY,CAAEtjB,eAAc,GAAI6vB,IAChF9hD,MAA4B,WAGzB,OAFA6hD,EAAQ30C,SAAS,EAAK+0C,2BAEf,IAAI7xC,SAAQ,SAACY,EAAS4L,GACzBilC,EAAQ30C,SAASg1C,KAAK,CAClBC,OAAQ,SAACC,GACiB,aAAtBA,EAAWC,OAAwBzlC,EAAO,IAAI,IAAiCA,EAAO,IAAI,OAE9F0lC,UAAW,SAAAC,GAAmBvxC,EAAQuxC,MAE1CV,EAAQW,GAAGjiD,MAAM+T,GAAG,SAAS,WACzBsI,EAAO,IAAI,aAItB5c,MAAK,SAAA6B,GACF,IAAMw9C,EAAiB,CACnB3+C,SAAQ,EACRua,YAAa,CAAE2X,MAAO/wB,EAAO4gD,iBAGjC,OAAO,EAAK5rB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc0iC,QAIjF,YAAAvnB,aAAA,WAKI,OAJI92B,KAAK6gD,UACL7gD,KAAK6gD,aAAUjhD,GAGZwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAyhC,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAGtB,YAAAqlC,wBAAR,WACI,IAAM9sC,EAAQnU,KAAK61B,OAAOzhB,WACpBE,EAASH,EAAMG,OAAOiF,iBACtBrc,EAAeiX,EAAMjX,aAAa2Y,kBAClC9N,EAAQoM,EAAMpM,MAAM+Q,WAE1B,IAAKxE,EACD,MAAM,IAAI,IAAiB,IAAqB5a,uBAGpD,IAAKqO,EACD,MAAM,IAAI,IAAiB,IAAqBtO,iBAGpD,IAAMuH,EAAoB,IAAI,KAAkB+G,EAAMI,SAAS1H,eACzD4G,EAAiBrH,KAAK0hD,qBAE5B,MAAO,CACHC,SAAU,CACNC,sBAAuBttC,EAAO2pB,MAAM4jB,aACpCC,gBAAiBxtC,EAAO2pB,MAAM4jB,aAC9BE,6BAA8B,QAElC93C,SAAUjK,KAAKgiD,uBAAyB36C,EACxCif,QAASjf,EACTa,MAAOlI,KAAKiiD,UAAUjhD,EAAmB+G,GACzCm6C,SAAU,CACNC,cAAeniD,KAAKoiD,iBAAiBllD,GACrChF,KAAM,QACNmqD,cAAe,cACfC,iBAAkB,GAClBC,gBAAiB,IAErBC,UAAWxiD,KAAKyiD,cAAczhD,EAAmB+G,GACjD26C,SAAU36C,EAAMK,QAAUL,EAAMK,QAAQtF,WAAa,GACrD6/C,gBAAiB3hD,EAAkBM,UAAUyG,EAAMmC,mBACnD04C,WAAY5hD,EAAkBM,UAAUyG,EAAMyC,UAC9Cq4C,MAAO7hD,EAAkBM,UAAUyG,EAAM6C,eAIzC,YAAAw3C,iBAAR,SAAyBllD,GACrB,IAAKA,EACD,MAAO,GAGX,IAAM+X,EAAc/X,EAAa,GAEjC,OAAO+X,GAAeA,EAAY4F,uBAC9B5F,EAAY4F,uBAAuBxhB,KAAO,IAG1C,YAAAqoD,mBAAR,WACI,IACMr6C,EADQrH,KAAK61B,OAAOzhB,WACG/M,eAAeuR,oBAE5C,IAAKvR,EACD,MAAM,IAAI,IAAiB,IAAqB/N,uBAqBpD,MAlB2B,CACvBhC,KAAM,CACFwrD,MAAOz7C,EAAe9J,UACtBwlD,KAAM17C,EAAe7J,SACrBwlD,KAAS37C,EAAe9J,UAAS,IAAI8J,EAAe7J,UAExDP,QAAS,CACLu9B,MAAOnzB,EAAe1J,SACtB+8B,MAAOrzB,EAAexJ,SACtBC,KAAMuJ,EAAevJ,KACrBqW,MAAO9M,EAAenJ,oBACtB+kD,QAAS57C,EAAejJ,WACxBC,QAASgJ,EAAe/I,aAE5Bg8B,aAAcjzB,EAAe9I,MAC7BmJ,MAAOL,EAAeK,QAMtB,YAAAs6C,oBAAR,WACI,IACM5sC,EADQpV,KAAK61B,OAAOzhB,WACIgB,gBAAgB+D,qBAE9C,GAAK/D,EAqBL,MAjB4B,CACxB9d,KAAM,CACFwrD,MAAO1tC,EAAgB7X,UACvBwlD,KAAM3tC,EAAgB5X,SACtBwlD,KAAS5tC,EAAgB7X,UAAS,IAAI6X,EAAgB5X,UAE1DP,QAAS,CACLu9B,MAAOplB,EAAgBzX,SACvB+8B,MAAOtlB,EAAgBvX,SACvBC,KAAMsX,EAAgBtX,KACtBqW,MAAOiB,EAAgBlX,oBACvB+kD,QAAS7tC,EAAgBhX,WACzBC,QAAS+W,EAAgB9W,aAE7Bg8B,aAAcllB,EAAgB7W,QAM9B,YAAA0jD,UAAR,SAAkBjhD,EAAsC+G,GAGpD,IAFA,IAAMG,EAAsB,GAET,MAAAH,EAAMM,UAAUgD,cAAhB,eAA+B,CAA7C,IAAMtK,EAAI,KACXmH,EAAMuE,KAAK,CACPy2C,aAAcniD,EAAKzJ,KACnBwM,IAAK/C,EAAK+C,IACVq/C,WAAYniD,EAAkBM,UAAUP,EAAK2C,WAC7C0/C,IAAKriD,EAAKY,SACV0hD,eAAgBtiD,EAAKE,SACrBqiD,SAAUviD,EAAKZ,IACfojD,WAAYvjD,KAAKwjD,eAAeziD,EAAKwiD,cAI7C,IAAmB,UAAAx7C,EAAMM,UAAUiD,aAAhB,eAA8B,CAAtCvK,EAAI,KACXmH,EAAMuE,KAAK,CACPy2C,aAAcniD,EAAKzJ,KACnBwM,IAAK/C,EAAK+C,IACVq/C,WAAYniD,EAAkBM,UAAUP,EAAK2C,WAC7C0/C,IAAKriD,EAAKY,SACV0hD,eAAgBtiD,EAAKE,SACrBqiD,SAAUviD,EAAKZ,IACfojD,WAAYvjD,KAAKwjD,eAAeziD,EAAKwiD,cAI7C,IAAmB,UAAAx7C,EAAMM,UAAUwE,iBAAhB,eAAkC,CAA1C9L,EAAI,KACXmH,EAAMuE,KAAK,CACPy2C,aAAcniD,EAAKzJ,KACnBwM,IAAK,GACLq/C,WAAYniD,EAAkBM,UAAUP,EAAKG,QAC7CkiD,IAAK,EACLC,eAAgB,GAChBC,SAAU,KAIlB,GAAIv7C,EAAMM,UAAUo7C,YAChB,IAAmB,UAAA17C,EAAMM,UAAUo7C,YAAhB,eAA6B,CAArC1iD,EAAI,KACXmH,EAAMuE,KAAK,CACPy2C,aAAcniD,EAAKzJ,KACnBwM,IAAK/C,EAAK+C,IACVq/C,WAAYniD,EAAkBM,UAAUP,EAAK0C,WAC7C2/C,IAAKriD,EAAKY,SACV0hD,eAAgB,GAChBC,SAAU,KAKtB,OAAOp7C,GAGH,YAAAu6C,cAAR,SAAsBzhD,EAAsC+G,GAGxD,IAFA,IAAMy6C,EAA4B,GAEf,MAAAz6C,EAAMe,QAAN,eAAe,CAA7B,IAAM46C,EAAI,KACPA,EAAK76C,iBAAmB,IACxB25C,EAAUkB,EAAKp7C,MAAQ,CACnBq7C,gBAAiB3iD,EAAkBM,UAAUoiD,EAAK76C,kBAClD+6C,sBAAuBF,EAAK/xC,cAYxC,OAPI5J,EAAMvE,eAAiB,IACvBg/C,EAAUqB,kBAAoB,CAC1BF,gBAAiB3iD,EAAkBM,UAAUyG,EAAMvE,gBACnDogD,sBAAuB,aAIxBpB,GAGH,YAAAgB,eAAR,SAAuBD,GACnB,OAAKA,EAIEA,EAAWziD,KAAI,SAAAgjD,GAAgB,OAAAA,EAAahjD,KAAI,SAAAijD,GAAY,OAAAA,EAASzsD,WAHlE,CAAC,KAKnB,EA5RA,GCbe,GAAA0sD,SAAS,mwBAAT,G,GCEf,WACI,WACWx2C,QAAA,IAAAA,MAAA,aAAAA,UAuBf,OApBI,YAAAwuB,KAAA,SAAKioB,EAAiB/rB,GAClB,IAAMgsB,EAAYlkD,KAAKmkD,cAAcjsB,GAIrC,GAFA,GAAa+rB,EAAQC,IAEhBlkD,KAAKwN,QAAQozC,OACd,MAAM,IAAI,IAGd,OAAOxxC,QAAQY,QAAQhQ,KAAKwN,QAAQozC,SAGhC,YAAAuD,cAAR,SAAsBjsB,GAMlB,YANkB,IAAAA,OAAA,GAMXA,EAHM,4CADH,qCAMlB,EAzBA,G,GCSA,WAGI,WACYrC,EACA6e,EACAa,EACAoH,EACA1lB,EACAmtB,EACAC,GANA,KAAAxuB,SACA,KAAA6e,qBACA,KAAAa,sBACA,KAAAoH,wBACA,KAAA1lB,8BACA,KAAAmtB,4BACA,KAAAC,wBAuGhB,OApGU,YAAA11C,WAAN,SAAiB/P,G,8IAMb,GALMuV,EAAQnU,KAAK61B,OAAOzhB,WACpB2E,EAAgB5E,EAAM6E,eAAeC,iBAAiBra,EAAQc,SAAUd,EAAQsa,WAChF5E,EAASH,EAAMG,OAAOiF,iBACtB+qC,EAAmBhwC,EAASA,EAAOkG,aAAa+pC,aAAe,IAEhExrC,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGhC,OAApB,EAAAgG,KAAoB,GAAMA,KAAKqkD,sBAAsBroB,KAAKjjB,EAAe/Y,KAAKwkD,kBAAkBF,K,OAEhG,OAFA,EAAKG,aAAe,SAEb,CAAP,EAAOzkD,KAAK61B,OAAOzhB,oBAGvB,YAAA0iB,aAAA,WAKI,OAJI92B,KAAKykD,eACLzkD,KAAKykD,kBAAe7kD,GAGjBwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGjC,YAAAqhC,QAAN,SAActjC,EAA2BvT,G,8IAGrC,KAFMu+B,EAAYhrB,EAAQ3J,SAAW2J,EAAQ3J,QAAQ0Q,WAGjD,MAAM,IAAI,GAA4B,CAAC,sB,OAGvC/E,EAAQnU,KAAK61B,OAAOzhB,WAClBE,EAASH,EAAMG,OAAOiF,iBACtB+qC,EAAmBhwC,EAASA,EAAOkG,aAAa+pC,aAAe,QAG9C3kD,KAFfqxB,EAAmB9e,EAAO,gBAE9B,MACQ,GAAMnS,KAAK61B,OAAOe,SACtB52B,KAAKokD,0BAA0B3J,iBAAiBxpB,K,OADpD9c,EAAQ,S,iBAKZ,SAAMnU,KAAK00C,mBAAmBM,SAAS7gC,EAAMjI,SAASwI,cAAe9V,I,OAE7D,OAFR,SAEQ,GAAMoB,KAAK61B,OAAOe,SACtB52B,KAAKi3B,4BAA4Bx3B,kBAAkB09B,EAAWv+B,K,OAGlE,OAJAuV,EAAQ,SAIR,GAAMnU,KAAK0kD,oBAAoBJ,EAAkBnwC,EAAM6E,eAAeC,iBAAiBkkB,K,OAGvF,OAHA,SAGO,CAAP,EAAO,IAAI/tB,SAAe,wBAGxB,YAAAymC,SAAN,SAAej3C,G,4IAKX,GAJMuV,EAAQnU,KAAK61B,OAAOzhB,WACpB5L,EAAU2L,EAAM3L,QAAQokB,eACxBtY,EAASH,EAAMG,OAAOC,oBAEvB/L,EACD,MAAM,IAAI,IAAiB,IAAqB/O,iBAGpD,IAAK6a,IAAWA,EAAO9L,QAAQpM,MAC3B,MAAM,IAAI,IAAiB,IAAqB1C,uBAQpD,OALM2kD,EAAiB,CACnB3+C,SAAU8I,EAAQY,WAClB6Q,YAAa,CAAE2X,MAAOtd,EAAO9L,QAAQpM,QAGzC,GAAM4D,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAY,GAAI31C,K,OAEpE,OAFA,SAEO,CAAP,EAAOoB,KAAK61B,OAAOe,SAAS52B,KAAK28C,sBAAsBhhC,cAAc0iC,aAGjE,YAAAqG,oBAAR,SAA4BC,EAAqB5rC,GAC7C,IAAK/Y,KAAKykD,eAAiB1rC,IAAkBA,EAAcnK,YACvD,MAAM,IAAI,KAAoB,KAAwBG,uBAG1D/O,KAAKykD,aAAa91C,WAAW,CAAErQ,YAAa0B,KAAKwkD,kBAAkBG,KACnE3kD,KAAKykD,aAAaG,SAAS,CAAExoD,MAAO2c,EAAcnK,eAG9C,YAAA41C,kBAAR,SAA0BG,GACtB,OAAQA,GACR,IAAK,YACD,MAAO,KAEX,IAAK,cACD,MAAO,KAEX,IAAK,gBACD,MAAO,KAEX,QACI,MAAO,OAGnB,EAjHA,GCFME,GACI,0CADJA,GAEO,kDAGPC,GACI,0CADJA,GAEO,qD,GAIb,WACI,WACYv3C,GAAA,KAAAA,gBAuBhB,OAhBI,YAAAyuB,KAAA,SAAKt1B,EAAuBpI,GACxB,IAAM45B,EAAWxxB,EAAO4N,OAAO4jB,WAAY,EACrCgsB,EAAYlkD,KAAKmkD,cAAc7lD,EAAa45B,GAElD,OAAOl4B,KAAKuN,cAAcG,WAAWw2C,GAChCllD,MAAK,WAAM,OAACsZ,OAAqCysC,aAGlD,YAAAZ,cAAR,SAAsB7lD,EAAqB45B,GACvC,MAAoB,OAAhB55B,EACO45B,EAAW4sB,GAAqBA,GAGpC5sB,EAAW2sB,GAA0BA,IAGpD,EAzBA,G,6BCjBe,SAASG,GAAuBn6B,EAAoCC,GAC/E,OAAO,mBAAQJ,GAAUG,GAAWH,GAAUI,IAGlD,SAASJ,GAAUztB,GACf,ICRgCxE,EDQ1BwsD,EAAc,CAAC,KAAM,gBAE3B,OAAQxtD,OAAOkJ,MCViBlI,EDUAwE,ECTzB,aAASxE,GAAQ,SAAC+N,EAAQlO,GAAgB,oBAAUA,ODSf,KACvCsI,QACG,SAACC,EAAQvI,G,MAAQ,OAA8B,IAA9B2sD,EAAYz/C,QAAQlN,IAAe2E,EAAQ3E,GAAM,yCACzDuI,KAAM,MAAGvI,GAAM2E,EAAQ3E,GAAI,IAChCuI,IACJ,IEbG,SAASqkD,GAAuBjoD,GAC3C,MAAO,CACHG,GAAIH,EAAQG,GACZG,UAAWN,EAAQM,UACnBC,SAAUP,EAAQO,SAClBC,QAASR,EAAQQ,QACjBE,SAAUV,EAAQS,aAClBG,SAAUZ,EAAQW,aAClBE,KAAMb,EAAQa,KACdE,gBAAiBf,EAAQc,SACzBG,oBAAqBjB,EAAQgB,aAC7BG,WAAYnB,EAAQkB,SACpBE,QAASpB,EAAQoB,QACjBC,YAAarB,EAAQqB,YACrBC,MAAOtB,EAAQsB,MACfC,aAAcvB,EAAQuB,c,iBCC9B,WAMI,WACYq3B,EACA0f,EACA4P,EACAvU,EACArjC,GAJA,KAAAsoB,SACA,KAAA0f,sBACA,KAAA4P,+BACA,KAAAvU,+BACA,KAAArjC,gBAERvN,KAAKwN,QAAU8K,OACftY,KAAKolD,0BAA2B,EA4OxC,OAzOI,YAAAz2C,WAAA,SAAW/P,GAAX,WACY,IAAAkuC,OAAuBptC,EAAA,EAAAA,SAEzBqZ,EADQ/Y,KAAK61B,OAAOzhB,WACE4E,eAAeC,iBAAiBvZ,GAE5D,IAAKmxC,EACD,MAAM,IAAI,KAAqB,mFAGnC,IAAK93B,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAMpD,OAHAgG,KAAKqlD,eAAiBxU,EACtB7wC,KAAKy3B,eAAiB1e,EAEf,IAAI3J,SAAQ,SAACY,EAAS4L,GAOzB,EAAKrO,cAAck/B,WAAW1zB,GANd,WACZ,EAAKusC,cAAczU,GACd7xC,KAAKgR,GACL1Q,MAAMsc,MAIVtc,MAAMsc,MAEV5c,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAA0iB,aAAA,WAGI,OAFA92B,KAAKqlD,oBAAiBzlD,EAEfwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACU2mD,EAAcvlD,KAAKwlD,uBACnBC,EAAWzlD,KAAK0lD,iBAEtB,IAAKH,IAAgBE,EACjB,MAAM,IAAI,KAAoB,KAAwB12C,uBAG1D,IAAKoD,EAAQ3J,QACT,MAAM,IAAI,KAAqB,kFAGnC,IAAKxI,KAAKolD,yBACN,MAAM,IAAI,IAAiB,IAAqBprD,sBAG5C,QAAAwO,QAAwB,GAAb,EAAAyR,YAAa,qCAAqB,IAAAgX,sBAAA,IAAiB,GAAjB,EAErD,OAAIryB,GAAWoB,KAAKy3B,gBAAkBz3B,KAAKy3B,eAAenjB,OAAOqxC,aACtD3lD,KAAK4lD,uBACRH,EACAF,EACAlH,EAAe3+C,SACfuxB,EACAryB,GAIDoB,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6BzB,kBAAkBkP,EAAe3+C,SAAU,CAAE6lD,YAAW,EAAEt0B,eAAc,KAEzGjyB,MAAK,WAAM,SAAK62B,OAAOe,SACpB,EAAK2e,oBAAoBhB,YAAY,yCAC9BpiC,GAAO,CACV3J,QAAS61C,IACVz/C,OAENU,OAAM,SAAAC,GACH,OAAIA,aAAiB,MAAoC,0BAApBA,EAAMlE,KAAKhC,MAAoC,EAAKgsD,eAC9E,EAAKC,cAAc,EAAKD,gBAC1BrmD,MAAK,WAAM,OAAAoQ,QAAQwM,OAAOrc,MAG5B6P,QAAQwM,OAAOrc,OAIlC,YAAAs2C,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAGtB,YAAA8pC,eAAR,WACI,OAAO1lD,KAAKy3B,gBAAkBz3B,KAAKy3B,eAAenjB,OAAOuoB,YAGrD,YAAA2oB,qBAAR,WACI,IACM1Y,EADQ9sC,KAAK61B,OAAOzhB,WACLge,eAAe1d,YAAY,UAEhD,OAAOo4B,EAASA,EAAOyY,iBAAc3lD,GAGjC,YAAAimD,2CAAR,WACI,OAAO7lD,KAAKy3B,eAAiBz3B,KAAKy3B,eAAezc,mBAAmB8qC,sBAAmBlmD,GAGnF,YAAA0lD,cAAR,SAAsB1mD,GAAtB,WACI,OAAO,IAAIwQ,SAAQ,SAACY,EAAS4L,GACjB,IAAA6a,EAAA,EAAAA,UAAW,IAAAsC,eAAA,IAAU,EAAV,UAAgB,IAAAgtB,uBAAA,IAAkB,EAAlB,UAAwB,IAAAC,eAAA,IAAU,EAAV,UACrDT,EAAc,EAAKC,wBAA0B,EAAKK,6CAClDhpB,EAAa,EAAK6oB,iBAExB,IAAKtgD,SAASg2B,eAAe3E,GACzB,OAAO7a,EAAO,IAAI,KAAqB,yEAG3C,IAAK,EAAKpO,QAAQ2/B,kBACd,OAAOvxB,EAAO,IAAI,KAAoB,KAAwB7M,wBAGlE,IAAK8tB,EACD,OAAOjhB,EAAO,IAAI,IAAiB,IAAqB5hB,uBAG5D,IAAMisD,EAAwC,CAC1CC,uBAAwBX,EACxBY,OAAQ,CAAEC,WAAY,cACtBlV,MAAO,6EACPuU,SAAU5oB,EACV9D,QAAS,SAAAx5B,GACLqc,EAAOrc,GACPw5B,EAAQx5B,IAEZwmD,gBAAiB,SAAAM,GACb,EAAKC,6BACAtnD,MAAK,WACF,EAAKomD,0BAA2B,EAChCW,EAAgBM,MAEnB/mD,MAAMy5B,IAEfitB,QAAS,SAAAK,GACLr2C,IACAg2C,EAAQK,KAIX,EAAKb,yBACNS,EAAcD,QAAU,SAAAK,GACpB,EAAKE,sBAAsBF,GACtBrnD,MAAK,WACFgR,IACAg2C,EAAQK,MAEX/mD,MAAMy5B,KAInB,IAAMytB,EAAS,IAAI,EAAKh5C,QAAQ2/B,kBAAkBsZ,QAAQC,OAAOT,GAIjE,OAFAO,EAAOjuD,KAAKk+B,GAEL+vB,MAIP,YAAAF,2BAAR,sBACUf,EAAcvlD,KAAKwlD,uBACnB9lD,EAAWM,KAAKy3B,gBAAkBz3B,KAAKy3B,eAAer6B,GAE5D,IAAKsC,IAAa6lD,EACd,MAAM,IAAI,KAGd,OAAOvlD,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6B5B,kBAAkBtvC,EAAU,CAAE6lD,YAAW,KAE1EvmD,MAAK,SAAAmV,GACF,IAAM24B,EAAS34B,EAAMie,eAAe1d,YAAY,UAC1CiyC,EAAgB7Z,GAAUA,EAAOxmB,SAAWwmB,EAAOxmB,QAAQrpB,QAC3DoK,EAAiB8M,EAAM9M,eAAeuR,oBACtCguC,EAAyBv/C,GAAkB,aAAqBA,GAEtE,IAAsB,IAAlBs/C,EACA,MAAM,IAAI,KAGd,OAAKA,GAAiB3B,GAAuB2B,EAAeC,GAA0B,IAC3E,EAAK/wB,OAAOzhB,WAGhB,EAAKyhB,OAAOe,SACf,EAAKuuB,6BAA6BxuC,cAAcuuC,GAAuByB,SAK/E,YAAAJ,sBAAR,SAA8BF,GAC1B,OAAOrmD,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6Bn8B,eAAe,SAAU,CACvD8wC,YAAac,EAAeQ,gCAKhC,YAAAjB,uBAAR,SAA+BH,EAAkBF,EAAqB7lD,EAAkBuxB,EAAyBryB,GAAjH,WACI,OAAO,IAAIwQ,SAAQ,SAAC5I,EAAGoV,GACnB,OAAK,EAAKpO,QAAQ2/B,kBAIX,EAAK3/B,QAAQ2/B,kBAAkB2Z,qBAClCrB,EACAF,GACA,SAACwB,GACG,OAAO,EAAKlxB,OAAOe,SACf,EAAK2e,oBAAoBhB,YAAY,CAACtjB,eAAc,GAAGryB,IAEtDI,MAAK,WAAM,SAAK62B,OAAOe,SACpB,EAAKga,6BAA6BzB,kBAAkBzvC,EAAU,CAC1D6lD,YAAW,EACXt0B,eAAc,QAGrBjyB,MAAK,WAGF,OAFA+nD,EAAiBC,UAEV,IAAI53C,SAAe,kBAE7B9P,OAAM,SAAAC,GAGH,OAFAwnD,EAAiBxnD,QAEVqc,EAAOrc,SAxBnBqc,EAAO,IAAI,KAAoB,KAAwB7M,4BA8B9E,EA1PA,G,GCXA,WAII,WAAYnQ,GACRoB,KAAKinD,SAAWjnD,KAAKknD,eAAetoD,GAyF5C,OAtFI,YAAA6hC,KAAA,SAAK7hC,GAAL,WACQoB,KAAKinD,SAAS/O,gBAIlBl4C,KAAKmnD,eAAevoD,GAEpBwG,SAAS/J,KAAKmgC,YAAYx7B,KAAKinD,UAG/BziB,YAAW,WAAM,SAAKyiB,SAASzuB,MAAMsK,QAAU,SAGnD,YAAAskB,OAAA,sBACSpnD,KAAKinD,SAAS/O,gBAIfl4C,KAAKqnD,kBACLrnD,KAAKqnD,mBAGTrnD,KAAKsnD,yBAEL9iB,YAAW,WAAM,SAAKyiB,SAASzuB,MAAMsK,QAAU,SAG3C,YAAAokB,eAAR,SAAuBtoD,GACnB,IAAM2oD,EAAUniD,SAASC,cAAc,OACjC,QACF,IAAAmiD,kBAAA,IAAa,EAAb,uBACA,IAAApqD,UAAA,IAAK,EAAL,OACA,IAAAqqD,0BAAA,IAAqB,EAArB,MAkBJ,OAfAF,EAAQ/uB,MAAMgvB,WAAaA,EAC3BD,EAAQ/uB,MAAMwK,QAAU,QACxBukB,EAAQ/uB,MAAM2K,OAAS,OACvBokB,EAAQ/uB,MAAM0K,KAAO,MACrBqkB,EAAQ/uB,MAAMsK,QAAU,IACxBykB,EAAQ/uB,MAAM6K,SAAW,QACzBkkB,EAAQ/uB,MAAM+K,IAAM,MACpBgkB,EAAQ/uB,MAAMgL,WAAa,WAAWikB,EAAkB,cACxDF,EAAQ/uB,MAAM4K,MAAQ,OACtBmkB,EAAQ/uB,MAAMkvB,OAAS,aAEnBtqD,IACAmqD,EAAQnqD,GAAKA,GAGVmqD,GAGH,YAAAJ,eAAR,SAAuBvoD,GAAvB,WAKI,GAJIoB,KAAKqnD,kBACLrnD,KAAKqnD,mBAGLzoD,GAAWA,EAAQ+oD,QAAS,CACpB,QAAAA,QAER3nD,KAAKinD,SAAS/yB,iBAAiB,QAAS,GAExCl0B,KAAKqnD,iBAAmB,WACpB,EAAKJ,SAAS5yB,oBAAoB,QAAS,GAC3C,EAAKgzB,sBAAmBznD,KAK5B,YAAA0nD,uBAAR,sBACUM,EAA0C,SAAAr0B,GAEI,YAA3CA,EAA0Bs0B,eAI3B,EAAKZ,SAAS/O,eACd,EAAK+O,SAAS/O,cAAc/c,YAAY,EAAK8rB,UAGjD,EAAKA,SAAS5yB,oBAAoB,gBAAiBuzB,KAGvD5nD,KAAKinD,SAAS/yB,iBAAiB,gBAAiB0zB,IAExD,EA9FA,G,GCNI,SAAYE,GAAZ,WACUC,EAAc,IAAI34C,SAAW,SAAC5I,EAAGoV,GACnC,EAAKosC,OAASpsC,KAGlB5b,KAAK8nD,QAAU14C,QAAQ64C,KAAK,CAACH,EAASC,K,GCY9C,WAGI,WACY5wB,EACA+wB,GADA,KAAA/wB,uBACA,KAAA+wB,WAiIhB,OA9HI,YAAAv5C,WAAA,SAAWC,EAAqBhQ,GAC5BoB,KAAKm3B,qBAAqBxoB,WAAWC,GACrC5O,KAAKmoD,qBAAuBvpD,GAAWA,EAAQkP,cAGnD,YAAAs6C,cAAA,WACI,OAAOpoD,KAAKm3B,qBAAqBjoB,aAGrC,YAAAm5C,aAAA,SAAa7/C,EAAkCnB,GACnC,IAAA4S,EAAAzR,EAAAyR,YACFquC,EAActoD,KAAKuoD,iBAAiBtuC,EAAqC5S,GAE/E,OAAOrH,KAAKm3B,qBAAqBroB,YAC5B9P,MAAK,SAAA4O,GAAU,OAAAA,EAAOoK,QAAQswC,MAC9BtpD,MAAK,SAAC,GAAoB,OACvB4yB,MADK,EAAA42B,YACc,GAAG52B,WAIlC,YAAA1jB,OAAA,SAAO,GAAP,WAAS6sC,EAAA,EAAAA,qBAAsB,+CAC3B,OAAO/6C,KAAKm3B,qBAAqBjoB,YAC5BlQ,MAAK,SAAAkP,GAKF,OAJA,EAAKg6C,SAASznB,KAAK,CACfknB,QAAS,WAAM,OAAAz5C,EAAOu6C,iBAGnBv6C,EAAO0/B,SAAS,oBACnBzU,uBAAuB,EACvBD,KAAM6hB,EAAuB,QAAU,WACvC2N,WAAY,UACTp0C,OAGVtV,MAAK,SAAAxD,GAGF,OAFA,EAAK0sD,SAASd,SAEP5rD,KAEV8D,OAAM,SAAAC,GAGH,MAFA,EAAK2oD,SAASd,SAER7nD,MAIlB,YAAAopD,WAAA,SAAWngD,EAAkCnB,EAAyBnG,GAClE,IAAKlB,KAAKmoD,qBACN,MAAM,IAAI,KAAoB,KAAwBp5C,uBAGpD,gCAAE65C,EAAA,EAAAA,SAAUC,EAAA,EAAAA,YAElB,OAAOz5C,QAAQC,IAAI,CACfrP,KAAKqoD,aAAa7/C,EAASnB,GAC3BrH,KAAKm3B,qBAAqB3nB,WAC3BxQ,MAAK,SAAC,G,IAACib,EAAA,KAAanM,EAAA,KACX8jB,EAAA,EAAAA,MACFk3B,EAAmB,WAAM,OAAAh7C,EAAag7C,mBACvC9pD,MAAK,SAAAxD,GAGF,OAFAutD,EAAaf,OAAO,IAAI,IAEjBxsD,MAGTutD,EAAe,IAAI,GACrBj7C,EAAa66C,WAAW,CACpBC,SAAU,SAACrpD,EAAOshC,GACd+nB,EAASrpD,EAAOshC,EAAQioB,IAE5B5nD,OAAM,EACN0wB,MAAK,EACLi3B,YAAW,KAInB,OAAOE,EAAajB,YAI5B,YAAAkB,aAAA,WACI,OAAOhpD,KAAKm3B,qBAAqBznB,mBAC5B1Q,MAAK,SAAC,GAAmB,OAAjB,EAAA8Q,eAMjB,YAAAm5C,gBAAA,SAAgBC,GAAhB,WACI,OAAOA,EACFlqD,MAAK,SAAAib,GAAe,OAAA7K,QAAQC,IAAI,CAAC4K,EAAa,EAAKkd,qBAAqBznB,wBACxE1Q,MAAK,SAAC,G,IAACib,EAAA,KAAenK,EAAA,KAAAA,WAAkB,OAAC,kBAAD,CAAC,sBAAKmK,GAAW,CAAE/a,gBAAiB4Q,QAGrF,YAAAgnB,aAAA,WACI,OAAO92B,KAAKm3B,qBAAqBpnB,YAG7B,YAAAw4C,iBAAR,SAAyBY,EAAkC9hD,GACvD,IAAIknC,EAAgBlnC,EAAe1J,SAMnC,OAJI0J,EAAexJ,WACf0wC,EAAgB,IAAIlnC,EAAexJ,UAGhC,CACH8c,KAAM,CACFwuC,WAAY,CACRC,eAAgBD,EAAW3tC,OAC3BkzB,OAAQya,EAAWhuC,SACnBkuC,IAAKF,EAAWluC,MAChBquC,eAAmBH,EAAW7tC,SAAS7K,MAAK,IAAI04C,EAAW7tC,SAAS5K,KACpE9R,QAAS,CACLo2C,UAAU,GAEd3tC,eAAgB,CACZs9C,YAAat9C,EAAehJ,QAC5BD,WAAYiJ,EAAejJ,WAC3BmwC,cAAa,KAIzBgb,SAAU,+BACV7iD,OAAQ,SAGpB,EAtIA,GCdA,I,GAAA,YACI,WAAY/L,GAAZ,MACI,YAAMA,GAAW,qGAAmG,K,OAEpH,EAAKrD,KAAO,2BACZ,EAAK+B,KAAO,gC,EAEpB,OAPsD,yBAOtD,EAPA,CAAsD,MCJvC,SAASmwD,GAAiB5tD,GACrC,IAAMmV,EAAOnV,EAEb,OAAQ,aAAoBmV,IACD,iBAAhBA,EAAKyK,QACa,iBAAlBzK,EAAKoK,UACa,iBAAlBpK,EAAKuK,UACmB,iBAAxBvK,EAAKuK,SAAS7K,OACS,iBAAvBM,EAAKuK,SAAS5K,KCI7B,I,GAAA,WAGI,WACYmlB,EACA0f,EACAoH,EACA1lB,EACAwyB,GAJA,KAAA5zB,SACA,KAAA0f,sBACA,KAAAoH,wBACA,KAAA1lB,8BACA,KAAAwyB,6BA4FhB,OAzFI,YAAA96C,WAAA,SAAW/P,GAAX,WACI,OAAOoB,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBb,EAAQc,WAClFV,MAAK,SAAAmV,GACF,IAAM4E,EAAgB5E,EAAM6E,eAAeC,iBAAiBra,EAAQc,UAEpE,IAAKqZ,IAAkBA,EAAcnK,YACjC,MAAM,IAAI,IAAiB,IAAqB5U,sBAMpD,OAHA,EAAKyvD,2BAA2B96C,WAAWoK,EAAcnK,YAAahQ,EAAQ+O,WAC9E,EAAK+7C,cAAgB3wC,EAAczE,OAAOqxC,aAEnC,EAAK9vB,OAAOzhB,cAEtB9U,OAAM,SAACC,GAAiB,SAAKoqD,aAAapqD,OAGnD,YAAAk2C,QAAA,SAAQmU,EAAgChrD,GAAxC,WACY4J,EAAA,EAAAA,QAAS,kCAEjB,IAAKA,EACD,MAAM,IAAI,GAA4B,CAAC,YAG3C,OAAOxI,KAAK61B,OAAOe,SACf52B,KAAKu1C,oBAAoBhB,YAAYxsC,EAAOnJ,IAE3CI,MAAK,SAAAmV,GACF,OAAAA,EAAM3L,QAAQukB,sBAAsBhlB,EAAMkpB,iBAAmBzoB,EACzD,EAAKqhD,oBAAoBrhD,GACzB4G,QAAQY,QAAQxH,MAEvBxJ,MAAK,SAAAwJ,GACF,SAAKqtB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAcnT,OAEjElJ,OAAM,SAACC,GAAiB,SAAKoqD,aAAapqD,OAGnD,YAAAs2C,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAkb,aAAA,sBACI,OAAO92B,KAAKypD,2BAA2B3yB,eAClC93B,MAAK,WAAM,SAAK62B,OAAOzhB,eAGxB,YAAAu1C,aAAR,SAAqBpqD,GACjB,GAAmB,mBAAfA,EAAMjI,KACN,MAAM,IAAI,GAAyBiI,EAAM5E,SAG7C,MAAM4E,GAGF,YAAAuqD,iBAAR,SAAyB7vC,GACrB,OAAIuvC,GAAiBvvC,GACVpe,QAAQoe,EAAY8gC,sBAGxB,aAAoB9gC,IAGvB,YAAA4vC,oBAAR,SAA4BrhD,GAChB,IAAAyR,EAAAzR,EAAAyR,YACF9F,EAAQnU,KAAK61B,OAAOzhB,WAE1B,GAAI6F,GAAeja,KAAK8pD,iBAAiB7vC,GACrC,OAAO7K,QAAQY,QAAQxH,GAG3B,IAAMT,EAAQoM,EAAMpM,MAAM+Q,WACpBzR,EAAiB8M,EAAM9M,eAAeuR,oBAE5C,IAAK7Q,EACD,MAAM,IAAI,IAAiB,IAAqBnO,cAGpD,IAAKyN,EACD,MAAM,IAAI,IAAiB,IAAqB/N,uBAGpD,IAAMywD,EAAgB/pD,KAAK0pD,cACvB1pD,KAAKypD,2BAA2Bd,WAAWngD,EAASnB,EAAgBU,EAAM6C,aAC1E5K,KAAKypD,2BAA2BpB,aAAa7/C,EAASnB,GAE1D,OAAOrH,KAAKypD,2BAA2BR,gBAAgBc,GAClD/qD,MAAK,SAAAib,GAAe,OAAC,kBAAD,CAAC,sBAAKzR,GAAO,CAAEyR,YAAW,QAE3D,EApGA,GCGA,ICwBY+vC,GAuGAC,GAKAC,GAOAC,GASAC,GAIAC,GAIAC,G,GD5JZ,WAGI,WACYz0B,EACA0f,EACAoH,EACA1lB,EACAwyB,EACAc,QAAA,IAAAA,OAAA,GALA,KAAA10B,SACA,KAAA0f,sBACA,KAAAoH,wBACA,KAAA1lB,8BACA,KAAAwyB,6BACA,KAAAc,UAsIhB,OAnII,YAAA57C,WAAA,SAAW/P,GAAX,WACY,IAAA+O,UAA6BjO,EAAA,EAAAA,SAIrC,OAFAM,KAAKy3B,eAAiBz3B,KAAK61B,OAAOzhB,WAAW4E,eAAeC,iBAAiBvZ,GAEzEM,KAAKy3B,gBAAkBz3B,KAAKy3B,eAAe7F,MACpCxiB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,YAGhCpU,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GAGF,GAFA,EAAKsjB,eAAiBtjB,EAAM6E,eAAeC,iBAAiBvZ,IAEvD,EAAK+3B,iBAAmB,EAAKA,eAAe7oB,YAC7C,MAAM,IAAI,IAAiB,IAAqB5U,sBAKpD,OAFA,EAAKyvD,2BAA2B96C,WAAW,EAAK8oB,eAAe7oB,YAAa47C,GAErE,EAAKf,2BAA2BrB,mBAE1CppD,MAAK,WAAM,SAAK62B,OAAOzhB,cACvB9U,OAAM,SAACC,GAAiB,SAAKoqD,aAAapqD,OAGnD,YAAAk2C,QAAA,SAAQmU,EAAgChrD,GAAxC,WACY4J,EAAA,EAAAA,QAAS,kCAEjB,IAAKA,EACD,MAAM,IAAI,GAA4B,CAAC,YAG3C,OAAQA,EAAUxI,KAAK6pD,oBAAoBrhD,EAAST,EAAMkpB,gBAAkB7hB,QAAQY,QAAQxH,IACvFxJ,MAAK,SAAAwJ,GAAW,OAAA4G,QAAQC,IAAI,CAAC7G,EAAS,EAAKqtB,OAAOe,SAAS,EAAK2e,oBAAoBhB,YAAYxsC,EAAOnJ,SACvGI,MAAK,SAAC,G,IAACwJ,EAAA,KAAa,SAAKqtB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAcnT,OAClFlJ,OAAM,SAACC,GAAiB,SAAKoqD,aAAapqD,OAGnD,YAAAs2C,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAkb,aAAA,sBACI,OAAO92B,KAAKypD,2BAA2B3yB,eAClC93B,MAAK,WAAM,SAAK62B,OAAOzhB,eAGxB,YAAAu1C,aAAR,SAAqBpqD,GACjB,IE5EO,SAA0BA,GACrC,MAAsB,mBAAfA,EAAMjI,KF2EJmzD,CAAiBlrD,GAClB,MAAMA,EAGV,GAAmB,wBAAfA,EAAM+I,KACN,MAAM,IAAI,GAA4B/I,EAAM5E,SAGhD,MAAM,IAAI,GAAyB4E,EAAM5E,UAGrC,YAAAkvD,oBAAR,SAA4BrhD,EAAkCyoB,GAA9D,WACU9c,EAAQnU,KAAK61B,OAAOzhB,WACpBzJ,EAAawJ,EAAMjI,SAAS8kB,sBAAsBC,GAClD3c,EAASH,EAAMG,OAAOiF,iBAE5B,IAAK5O,EACD,MAAM,IAAI,IAAiB,IAAqBlR,iBAGpD,IAAK6a,EACD,MAAM,IAAI,IAAiB,IAAqB5a,uBAGpD,IAAKsG,KAAKy3B,eACN,MAAM,IAAI,KAAoB,KAAwB1oB,uBAGlD,IAAA5G,EAAA,EAAAA,SAA0B0pC,EAAA,eAAAA,cAC5B,sBAAEjgB,EAAA,EAAAA,MAAiB84B,EAAA,SAAAA,kBACjB,EAAAliD,EAAAyR,mBAAA,IAAc,EAAd,KAER,GAAI2X,EACA,OAAOxiB,QAAQY,QAAQ,yCAAKxH,GAAO,CAAEyR,YAAaja,KAAK2qD,kBAAkB/4B,MAG7E,GAAI,aAAoB3X,IAAgB,aAA0BA,GAAc,CAC5E,IAAKywC,EACD,MAAM,IAAI,KAAqB,qFAGnC,OAAOt7C,QAAQY,QAAQxH,GAG3B,GAAIyR,EAAY8gC,uBAAyB2P,EACrC,MAAM,IAAI,KAAqB,gEAGnC,IG1HsDztD,EH0HhDmY,EAAkBjB,EAAMiB,gBAAgB+D,qBAExCkgB,EAA0BjkB,EG3H7B,CACH+kB,eAFsDl9B,EH4HkCmY,GG1H9D7X,UAAS,IAAIN,EAAQO,SAC/Cg9B,MAAOv9B,EAAQU,SACf+8B,MAAOz9B,EAAQY,SACfC,KAAMb,EAAQa,KACdqW,MAAOlX,EAAQiB,oBACfE,WAAYnB,EAAQmB,WACpBE,YAAarB,EAAQqB,YACrBC,MAAOtB,EAAQsB,YHmH4FqB,EAE3G,OAAOwP,QAAQC,IAAI,CACfrP,KAAKypD,2BAA2Bv7C,OAAO,CACnChN,OAAQyJ,EACR4iC,OAAQsE,EACR1pC,SAAUA,EAASG,KACnBixB,YAAav5B,KAAKuqD,QAClBlxB,wBAAuB,EACvB0hB,qBAAsB9gC,EAAY8gC,uBAAwB,IAE9D/6C,KAAKypD,2BAA2BT,iBACjChqD,MAAK,SAAC,G,IACL,OAAE4yB,EAAA,EAAAA,MAAOsI,EAAA,EAAAA,QACTgZ,EAAA,KACE,OAAC,kBAAD,CAAC,sBACA1qC,GAAO,CACVyR,YAAa,EAAK0wC,kBAAkB/4B,EAAOsI,EAAQxyB,MAAOwrC,EAAWj5B,EAAY8gC,4BAIjF,YAAA4P,kBAAR,SAA0BvuD,EAAesL,EAAgBwrC,EAAoB0X,GACzE,MAAO,CACH1uD,iBAAkB,CACd8+C,yBAA0B4P,GAA0B,KACpDC,YAAa3X,GAAa,KAC1B4X,eAAgB,CACZ1uD,MAAK,EACLsL,MAAOA,GAAS,SAKpC,EA/IA,G,GIFA,WAGI,WACYmuB,EACAqB,EACAD,EACA8zB,EACApO,EACApH,EACAhE,EACAC,GAPA,KAAA3b,SACA,KAAAqB,yBACA,KAAAD,8BACA,KAAA8zB,gCACA,KAAApO,wBACA,KAAApH,sBACA,KAAAhE,yCACA,KAAAC,4BAoHhB,OAjHI,YAAA7iC,WAAA,SAAW/P,GAAX,WACY,IAAA8yC,sBAA4ChyC,EAAA,EAAAA,SAEpD,IAAKiyC,EACD,MAAM,IAAI,KAAqB,kGAGnC,OAAO3xC,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GACF,EAAKsjB,eAAiBtjB,EAAM6E,eAAeC,iBAAiBvZ,GAE5D,IAAMwM,EAAWiI,EAAMjI,SAASwI,cAC1B4E,EAAcnF,EAAMG,OAAOiF,iBAEjC,IAAKrN,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,IAAK6f,EACD,MAAM,IAAI,IAAiB,IAAqB5f,uBAGpD,IAAK,EAAK+9B,iBAAmB,EAAKA,eAAe7oB,YAC7C,MAAM,IAAI,IAAiB,IAAqB5U,sBAIhD,QAAA++B,eAAA,IAAU,EAAV,eACA,IAAAgtB,uBAAA,IAAkB,EAAlB,eAGEnU,EAAc,CAChBrE,OAAQj0B,EAAYkB,aAAaq3B,cACjCrE,iBAAiB,EACjB9kC,SAAUwD,EAASxD,SACnB6/B,aAAcjvB,EAAYnR,SAASG,MAGvC,OAAO8G,QAAQC,IAAI,CACf,EAAKmiC,0BAA0BxV,KAAK,EAAKvE,eAAenjB,OAAO4jB,UAC/D,EAAKqZ,uCAAuC5iC,WAAW,EAAK8oB,eAAe7oB,YAAagjC,KAE3F5yC,MAAK,SAAC,G,IAACsP,EAAA,KAAc08C,EAAA,KAClB18C,EAAayjC,KAAKiZ,GAClB18C,EAAagF,GAAG,mBAAmB,SAAC0+B,GAChC,SAAKC,2BAA2BD,GAC3BhzC,MAAK,WAAM,OAAA+mD,OACXzmD,OAAM,SAAAC,GAAS,OAAAw5B,EAAQx5B,SAEhC+O,EAAagF,GAAG,iBAAiB,SAAC9M,EAAGjH,GAAU,OAAAw5B,EAAQx5B,YAG9DP,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAAqhC,QAAA,SAAQmU,EAAgChrD,GAAxC,WACY4J,EAAA,EAAAA,QAAS,kCAEjB,IAAKA,EACD,MAAM,IAAI,KAAqB,gFAGnC,IAAKxI,KAAKy3B,iBAAmBz3B,KAAKy3B,eAAezc,qBAAuBhb,KAAKy3B,eAAezc,mBAAmB4W,MAC3G,MAAM,IAAI,IAAiB,IAAqB53B,sBAG5C,IAAA43B,EAAA,uCAAAA,MAER,OAAO5xB,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYxsC,EAAOnJ,IACnEI,MAAK,WACF,SAAK62B,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCAAKnT,GAAO,CAAEyR,YAAa,CAAE2X,MAAK,UAEnGtyB,OAAM,SAACC,GAAiB,SAAKoqD,aAAapqD,OAGnD,YAAAs2C,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAkb,aAAA,sBACI,OAAO92B,KAAKuxC,uCAAuCza,eAC9C93B,MAAK,WAAM,SAAK62B,OAAOzhB,eAGxB,YAAA69B,2BAAR,SAAmCD,GAAnC,WACU79B,EAAQnU,KAAK61B,OAAOzhB,WAE1B,IAAKpU,KAAKy3B,eACN,MAAM,IAAI38B,MAAM,kCAGZ,0BAAAsC,GAER,OAAO4C,KAAK61B,OAAOe,SAAS52B,KAAK+qD,8BAA8Bve,mBAAkB,WAC7E,OAAO,EAAK+E,uCAAuC5V,cAC/CqW,EACA79B,EAAMiB,gBAAgB+D,qBACtBhF,EAAM9M,eAAeuR,qBAExB5Z,MAAK,WAAM,OAAAoQ,QAAQC,IAAI,CACpB,EAAKwmB,OAAOe,SAAS,EAAKM,uBAAuBpiB,uBACjD,EAAK+gB,OAAOe,SAAS,EAAKK,4BAA4Bx3B,kBAAkBC,WAE7E,CAAEA,SAAQ,IAAK,CAAEi3B,QAAS,uBAGzB,YAAAgzB,aAAR,SAAqBpqD,GACjB,GAAmB,mBAAfA,EAAMjI,KACN,MAAM,IAAI,GAAyBiI,EAAM5E,SAG7C,MAAM4E,GAEd,EA/HA,G,GCVA,YACI,WAAY5E,GAAZ,MACI,YAAMA,GAAW,mEAAiE,K,OAElF,EAAKrD,KAAO,iC,EAEpB,OAN4D,yBAM5D,EANA,CAA4D,M,GCQ5D,WAII,WACYu+B,EACA8mB,EACA1lB,EACAg0B,GAHA,KAAAp1B,SACA,KAAA8mB,wBACA,KAAA1lB,8BACA,KAAAg0B,kBA+HhB,OA5HI,YAAAC,QAAA,SAAQxrD,GAAR,WACI,OAAIM,KAAK6O,aACEO,QAAQY,UAGZhQ,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GAGF,GAFA,EAAKsjB,eAAiBtjB,EAAM6E,eAAeC,iBAAiBvZ,IAEvD,EAAK+3B,iBAAmB,EAAKA,eAAenjB,OAC7C,MAAM,IAAI,IAAiB,IAAqBta,sBAGpD,OAAO,EAAKixD,gBAAgBt8C,WAAWjP,EAAU,EAAK+3B,eAAenjB,OAAO4jB,aAE/El5B,MAAK,WACF,IAAK,EAAKy4B,iBAAmB,EAAKA,eAAe7oB,YAC7C,MAAM,IAAI,IAAiB,IAAqB5U,sBAKpD,OAFA,EAAK6U,aAAe,EAAK4oB,eAAe7oB,YAEjC,EAAKq8C,gBAAgBrY,UAAU,EAAK/jC,kBAIvD,YAAAs8C,MAAA,SAAM3iD,GAAN,WACI,IAAKA,EAAQyR,YACT,MAAM,IAAI,IAAiB,IAAqBngB,gBAGpD,IAAK0vD,GAAiBhhD,EAAQyR,eAAiB,aAAoBzR,EAAQyR,aACvE,MAAM,IAAI,KAGd,IAAMA,EAAczR,EAAQyR,YAE5B,OAAOja,KAAKirD,gBAAgBG,cAAcprD,KAAKqrD,cAAcpxC,IACxDjb,MAAK,WACF,IAAK,EAAK6P,aACN,MAAM,IAAI,IAAiB,IAAqB7U,sBAWpD,OARAwO,EAAU,yCACHA,GAAO,CACVyR,YAAa,yCACNA,GAAW,CACdnM,aAAc,CAAE1R,MAAO,EAAKyS,kBAI7B,EAAKgnB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAcnT,OAExElJ,OAAM,SAAAC,GACH,OAAMA,aAAiB,MAAkB,gBAAKA,EAAMlE,KAAKI,OAAQ,CAAC6M,KAAM,4BAIjE,EAAK2iD,gBAAgBK,oBACxB/rD,EAAMlE,KAAKkjD,gBACX,EAAKgN,cAActxC,IAEtBjb,MAAK,SAAA8O,GACF,SAAK+nB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCACvDnT,GAAO,CACVyR,YAAa,yCACNA,GAAW,CACdnM,aAAY,WAZbsB,QAAQwM,OAAOrc,OAmB9B,YAAA8rD,cAAR,SAAsB7iD,GAClB,IAAK,aAAoBA,GACrB,OAAOA,EAAQ2S,SAGnB,IAAMzB,EAAc1Z,KAAK61B,OAAOzhB,WAAWsF,YAAY+V,iBAC/C,IAAA3zB,aAEF0vD,EAAQ,gBAAK9xC,EAAa,CAAE6V,YAAW,IAE7C,IAAKi8B,EACD,MAAM,IAAI,GAGd,OAAOA,EAAMC,KAGT,YAAAF,cAAR,SAAsBtxC,GAClB,IAAM9F,EAAQnU,KAAK61B,OAAOzhB,WACpB/M,EAAiB8M,EAAM9M,eAAeuR,oBACtCxD,EAAkBjB,EAAMiB,gBAAgB+D,qBACxCjN,EAAWiI,EAAMjI,SAASwI,cAC1B3M,EAAQoM,EAAMpM,MAAM+Q,WAE1B,IAAKzR,IAAmBA,EAAeK,MACnC,MAAM,IAAI,IAAiB,IAAqBpO,uBAGpD,IAAK4S,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,IAAKsO,EACD,MAAM,IAAI,IAAiB,IAAqBnO,cAGpD,IAAM4O,EAA6B,CAC/BnB,eAAc,EACd+N,gBAAe,EACfmzB,aAAcr8B,EAASG,KAAKlE,SAASG,KACrClL,GAAI2K,EAAMK,QAAQtF,WAClB5B,OAAQgL,EAASG,KAAKowB,YAO1B,OAJI+sB,GAAiBvvC,KACjBzR,EAAQyR,YAAcA,GAGnBzR,GAEf,EAvIA,GLdakjD,GAAoC,CAAC,OAAQ,KAAM,KAAM,OA0CtE,SAAY1B,GACR,cACA,sBACA,oBAHJ,CAAYA,QAA0B,KAuGtC,SAAYC,GACR,0CACA,iCAFJ,CAAYA,QAAiB,KAK7B,SAAYC,GACR,oBACA,sBACA,oBACA,gBAJJ,CAAYA,QAAuB,KAOnC,SAAYC,GACR,YACA,kBACA,kBACA,8BACA,sBACA,kCANJ,CAAYA,QAAmB,KAS/B,SAAYC,GACR,2BADJ,CAAYA,QAAqB,KAIjC,SAAYC,GACR,YADJ,CAAYA,QAAoB,KAIhC,SAAYC,GACR,UACA,SAFJ,CAAYA,QAA6B,KMvJzC,ICvBYqB,G,GDuBZ,WAGI,WACYp+C,GAAA,KAAAA,gBAmKhB,OAhKI,YAAAoB,WAAA,SAAWsb,EAAkBiO,GAKzB,OAJKl4B,KAAK4rD,OACN5rD,KAAK4rD,KAAO5rD,KAAKuN,cAAcyuB,KAAK/R,EAAUiO,IAG3Cl4B,KAAK4rD,KAAK5sD,MAAK,gBAG1B,YAAA4zC,UAAA,SAAUhkC,GACN,OAAO5O,KAAK6rD,gBACP7sD,MAAK,SAAA4O,GAAU,WAAIwB,SAAc,SAACY,EAAS4L,GACxChO,EAAO0F,GAAG22C,GAAkB6B,gBAAgB,WACxCl+C,EAAOm+C,IAAI9B,GAAkB6B,gBAC7Bl+C,EAAOm+C,IAAI9B,GAAkBtR,WAE7B3oC,OAGJpC,EAAO0F,GAAG22C,GAAkBtR,WAAW,SAACh+B,GAIpC,OAHA/M,EAAOm+C,IAAI9B,GAAkB6B,gBAC7Bl+C,EAAOm+C,IAAI9B,GAAkBtR,WAErBh+B,EAAKqxC,YACT,KAAK9B,GAAwBpvD,MACrB,oBAAS4wD,GAAmC/wC,EAAKsxC,cACjDrwC,EAAO,IAAI,IAAiB,IAAqB5hB,uBAErD4hB,EAAO,IAAI,GAAyBjB,EAAKuxC,uBAKrDt+C,EAAOu+C,MAAMnC,GAA2BoC,KAAM,CAC1CC,IAAKz9C,WAKrB,YAAAw8C,cAAA,SAAckB,GACV,OAAOtsD,KAAK6rD,gBACP7sD,MAAK,SAAA4O,GAAU,OAAAA,EAAO+mB,QAAQy1B,GAAsBmC,WAAYD,GAAWhtD,OAAM,kBACjFN,MAAK,SAAA6B,GACF,IAAKA,IAAWA,EAAO2rD,OACnB,MAAM,IAAI,KAAoB,KAAwBz9C,2BAKtE,YAAAu8C,oBAAA,SAAoBmB,EAAiCC,GAArD,WACI,OAAO1sD,KAAK6rD,gBACP7sD,MAAK,SAAA4O,GACF,OAAO,IAAIwB,SAA2B,SAACY,EAAS4L,GAC5ChO,EAAO0F,GAAG22C,GAAkBtR,WAAW,SAACh+B,EAA6B0xC,GAEjE,GADAz+C,EAAOm+C,IAAI9B,GAAkBtR,YACxB0T,EACD,OAAOzwC,EAAO,IAAI,GAAyBjB,EAAKuxC,iBAAmBvxC,EAAKuxC,iBAAmB,+DAG/F,IAAKvxC,EAAKqxC,WACN,OAAOh8C,EAAQ,CAAE5T,MAAOiwD,IAG5B,OAAQ1xC,EAAKqxC,YACT,KAAK9B,GAAwByC,QACzB,OAAO38C,EAAQ,CAAE5T,MAAOiwD,IAC5B,KAAKnC,GAAwB0C,SACzB,OAAIjyC,EAAKsxC,YAAc,EACZrwC,EAAO,IAAI,GAAyBjB,EAAKuxC,mBACxCvxC,EAAKkyC,SAAYlyC,EAAKkyC,QAAQC,cAAgBnyC,EAAKkyC,QAAQC,aAAaC,wBAA0BzC,GAA8B0C,IAIrIh9C,EAAQ,CAAE5T,MAAOiwD,IAHbzwC,EAAO,IAAI,GAAyB,kDAInD,KAAKsuC,GAAwB+C,QACzB,OAAOrxC,EAAO,IAAI,GAAyB,6FAC/C,KAAKsuC,GAAwBpvD,MACzB,OAAO8gB,EAAO,IAAI,GAAyBjB,EAAKuxC,uBAI5D,IAAMgB,EAAiB,CACnBC,OAAQV,EAAiB7N,QACzBwO,QAASX,EAAiBvN,eAGxBmO,EAAe,EAAKC,mBAAmBZ,EAAWD,EAAiB3N,oBAEzElxC,EAAO2/C,SAASlD,GAAqBmD,IAAKN,EAAgBG,UAKlE,YAAAC,mBAAR,SAA2BZ,EAA8Be,GACrD,IAAMC,EAA6B,CAC/BC,eAAgB3tD,KAAK4tD,sBAAsBlB,EAAUrlD,iBAezD,OAZIqlD,EAAUzyC,cACVyzC,EAASG,QAAU7tD,KAAK8tD,sBAAsBpB,EAAUzyC,cAGxDyyC,EAAUrlD,eAAeK,QACzBgmD,EAASK,OAASrB,EAAUrlD,eAAeK,OAG3CglD,EAAUt3C,kBACVs4C,EAASM,gBAAkBhuD,KAAK4tD,sBAAsBlB,EAAUt3C,kBAG5D,CACJ64C,SAAUP,EACVQ,aAAc,CACVC,YAAazB,EAAUtvD,GACvBgxD,OAAQ1B,EAAUxrD,OAClBmtD,aAAc3B,EAAUnkB,aACxB+lB,aAAc,IACdC,cAAed,KAKnB,YAAAK,sBAAR,SAA8B7zC,GAC1B,MAAO,CACHu0C,cAAe1sB,OAAO7nB,EAAYkB,UAClCszC,gBAAiB3sB,OAAO7nB,EAAYqB,SAAS7K,OAC7Ci+C,eAAgB5sB,OAAO7nB,EAAYqB,SAAS5K,MAC5Ci+C,cAAe10C,EAAYuB,OAC3BozC,SAAU9sB,OAAO7nB,EAAYgB,SAI7B,YAAA2yC,sBAAR,SAA8B3wD,GAC1B,IAAM4xD,EAAmC,CACrCC,UAAW7xD,EAAQM,UACnBwxD,SAAU9xD,EAAQO,SAClBwxD,SAAU/xD,EAAQU,SAClBsxD,KAAMhyD,EAAQa,KACdoxD,MAAOjyD,EAAQe,gBACfmxD,WAAYlyD,EAAQmB,WACpBgxD,YAAanyD,EAAQqB,aAWzB,OARIrB,EAAQY,WACRgxD,EAAgBQ,SAAWpyD,EAAQY,UAGnCZ,EAAQsB,QACRswD,EAAgBS,OAASryD,EAAQsB,OAG9BswD,GAGH,YAAAhD,cAAR,WACI,IAAK7rD,KAAK4rD,KACN,MAAM,IAAI,KAAoB,KAAwB78C,uBAG1D,OAAO/O,KAAK4rD,MAEpB,EAvKA,G,GEdA,WACI,WACYr+C,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAgBhB,OAbI,YAAAwuB,KAAA,SAAK/R,EAAkBiO,GAAvB,WACU/3B,EAAM+3B,EAVC,gEACA,4DAWb,OAAOl4B,KAAKuN,cACPG,WAAWvN,EAAM,MAAQ8pB,GACzBjrB,MAAK,WACF,IAAK,EAAKwO,QAAQ+hD,SACd,MAAM,IAAI,IAGd,OAAO,EAAK/hD,QAAQ+hD,aAGpC,EAnBA,IDTA,SAAY5D,GACR,gCACA,sCACA,kCAHJ,CAAYA,QAAiB,KEsB7B,IC2CY6D,GAYAC,GDvDS,GAArB,WAMI,WACY55B,EACAqB,EACAqe,EACAoH,EACA1lB,EACA8zB,EACArsD,EACA6zC,EACAmd,GARA,KAAA75B,SACA,KAAAqB,yBACA,KAAAqe,sBACA,KAAAoH,wBACA,KAAA1lB,8BACA,KAAA8zB,gCACA,KAAArsD,iBACA,KAAA6zC,wBACA,KAAAmd,mBAER1vD,KAAK2vD,cAAgB,IAAI,UAoNjC,OAjNI,YAAAhhD,WAAA,SAAW/P,GAAX,WAGI,GAFAoB,KAAK86B,UAAYl8B,EAAQc,UAEpBd,EAAQ4zC,SACT,MAAM,IAAI,KAAqB,qFAGnC,IAAMod,EAAehxD,EAAQ4zC,SAASod,cAAgBxqD,SAASg2B,eAAex8B,EAAQ4zC,SAASod,cAO/F,OALIA,IACA5vD,KAAKg7B,cAAgB40B,EACrB5vD,KAAKg7B,cAAc9G,iBAAiB,QAASl0B,KAAKu7B,2BAG/Cv7B,KAAK6vD,iBAAiBjxD,EAAQ4zC,UAChCxzC,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAA0iB,aAAA,WAQI,OAPI92B,KAAKg7B,eACLh7B,KAAKg7B,cAAc3G,oBAAoB,QAASr0B,KAAKu7B,0BAGzDv7B,KAAKg7B,mBAAgBp7B,EACrBI,KAAK8vD,qBAAkBlwD,EAEhBwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACI,OAAOoB,KAAK+vD,cACPzwD,OAAM,SAAAC,GACH,GAAIA,EAAMnG,UAAY,IAAqBU,eACvC,OAAO,EAAKk2D,iBACPhxD,MAAK,WAAM,SAAK+wD,iBAGzB,MAAMxwD,KAETP,MAAK,SAAAwJ,GACF,SAAKynD,aAAaznD,EAAS2J,EAAQ8e,eAAgBryB,OAI/D,YAAAi3C,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAGtB,YAAAi0C,iBAAR,SAAyBjxD,GAAzB,WACUuV,EAAQnU,KAAK61B,OAAOzhB,WACpB2E,EAAgB5E,EAAM6E,eAAeC,iBAAiBjZ,KAAK86B,WAC3DxhB,EAAcnF,EAAMG,OAAOiF,iBAEjC,IAAKR,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpD,IAAKsf,EACD,MAAM,IAAI,IAAiB,IAAqB5f,uBAGpD,OAAOsG,KAAKuyC,sBAAsBvW,KAAKjjB,EAAczE,OAAO4jB,UACvDl5B,MAAK,SAAC,G,IAAE2zC,EAAA,EAAAA,SACL,EAAKmd,gBAAkBnd,EAEnB/zC,EAAQsxD,eAAiB9qD,SAASg2B,eAAex8B,EAAQsxD,gBACzD,EAAKJ,gBAAgBK,gBAAgB,CACjC/tB,MAAO,QACP7L,WAAY,CAAC33B,EAAQsxD,iBAI7B,EAAKJ,gBAAgBld,UAAU,CAC3BC,SAAUv5B,EAAYkB,aAAaq3B,gBAGvC,EAAKie,gBAAgBx8C,GAAGq4C,GAAkByE,gBAAgB,WACtD,EAAKT,cAAc7wD,KAAK,CAAEzF,KAAMsyD,GAAkByE,iBAE9CxxD,EAAQyxD,UACRzxD,EAAQyxD,cAIhB,EAAKP,gBAAgBx8C,GAAGq4C,GAAkB2E,kBAAkB,SAACn+C,GACzD,EAAKo+C,iBAAiBp+C,EAAQshC,cACzBz0C,MAAK,WACF,EAAK2wD,cAAc7wD,KAAK,CAAEzF,KAAMsyD,GAAkB2E,mBAE9C1xD,EAAQmnD,iBACRnnD,EAAQmnD,4BAO5B,YAAAiK,eAAR,sBACI,OAAOhwD,KAAK61B,OAAOe,SAAS52B,KAAK+qD,8BAA8Bve,mBAAkB,WAkB7E,OAjBA,EAAK3W,OAAOe,SAAS,EAAKK,4BAA4Bx3B,kBAAkB,EAAKq7B,YACxE97B,MAAK,SAAAmV,GACF,IAAM4E,EAAgB5E,EAAM6E,eAAeC,iBAAiB,EAAK6hB,WAEjE,IAAK,EAAKg1B,gBACN,MAAM,IAAI,KAAoB,KAAwB/gD,uBAG1D,IAAKgK,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpD,EAAK81D,gBAAgBU,uBACrB,EAAKV,gBAAgB3c,cAAcp6B,EAAciC,mBAAmB03B,qBAIrE,IAAItjC,SAAQ,SAACY,EAAS4L,GACzB,EAAK+zC,cACAr9C,KAAK,gBAAK,IACV0jB,WAAU,SAACzC,GACJA,EAAMl6B,OAASsyD,GAAkByE,eACjCx0C,EAAO,IAAI,IACJ2X,EAAMl6B,OAASsyD,GAAkB2E,kBACxCtgD,YAIjB,CAAEtQ,SAAUM,KAAK86B,YAAc,CAAEnE,QAAS,uBAGzC,YAAA45B,iBAAR,SAAyB9c,GAAzB,WAEU16B,EADQ/Y,KAAK61B,OAAOzhB,WACE4E,eAAeC,iBAAiBjZ,KAAK86B,WAC3DwY,EAAoBv6B,GAAiBA,EAAciC,mBAAmBs4B,kBAE5E,OAAOtzC,KAAKtB,eAAewZ,KAAK,eAAgB,CAC5C5c,QAAS,CACL2E,OAAQ,YACR,eAAgB,oDAEpB5E,KAAM,CACF6W,OAAQ,wBACR+X,SAAUjqB,KAAK86B,UACf2Y,aAAY,EACZH,kBAAiB,KAIpBt0C,MAAK,WAAM,OAAAoQ,QAAQC,IAAI,CACpB,EAAKwmB,OAAOe,SAAS,EAAKM,uBAAuBpiB,uBACjD,EAAK+gB,OAAOe,SAAS,EAAKK,4BAA4Bx3B,kBAAkB,EAAKq7B,iBAEhF97B,MAAK,WAAM,SAAK62B,OAAOzhB,eAGxB,YAAA27C,YAAR,sBACI,OAAO/vD,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBO,KAAK86B,YAC/E97B,MAAK,WACF,MAAuB,UAAnB,EAAK87B,UACE,EAAK40B,iBAAiB/gD,aACxB3P,MAAK,SAAA4O,GAAU,OAAAA,EAAO6iD,kBAGxB,MAEVzxD,MAAK,SAAA0xD,GACF,IACM33C,EADQ,EAAK8c,OAAOzhB,WACE4E,eAAeC,iBAAiB,EAAK6hB,WAEjE,IAAK/hB,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpD,IAAK+e,EAAciC,mBAAmB21C,kBAClC,MAAM,IAAI,IAAiB,IAAqB72D,gBAGpD,IAAMmgB,EAAc,CAChBvT,OAAQ,EAAKo0B,UACb81B,aAAc73C,EAAciC,mBAAmB21C,kBAC/CE,IAAK93C,EAAciC,mBAAmB61C,IACtCpD,cAAeqD,KAAK/3C,EAAciC,mBAAmB+1C,YACrDz1C,SAAU,CACN7K,MAAOsI,EAAciC,mBAAmBg2C,QAAQluD,WAAWmuD,OAAO,EAAG,GACrEvgD,KAAMqI,EAAciC,mBAAmBg2C,QAAQluD,WAAWmuD,OAAO,EAAG,IAExE91C,SAAUpC,EAAciC,mBAAmBk2C,WAC3CC,YAAap4C,EAAciC,mBAAmBm2C,YAC9CC,UAAWV,EAAY,CAAEA,UAAS,QAAK9wD,GAG3C,MAAO,CACHF,SAAU,EAAKo7B,UACf7gB,YAAW,OAKnB,YAAAg2C,aAAR,SAAqBznD,EAAkByoB,EAA0BryB,GAAjE,WACI,OAAOoB,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAY,CAAEtjB,eAAc,GAAIryB,IAChFI,MAAK,WAAM,SAAK62B,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAcnT,QAI1E,YAAA+yB,yBAAR,SAAiChI,GAC7BA,EAAMkI,iBAENz7B,KAAKgwD,kBAHT,sBADC,M,6CAML,EArOA,G,YETA,WACI,WACYn6B,EACA0f,EACAoH,EACAtlB,GAHA,KAAAxB,SACA,KAAA0f,sBACA,KAAAoH,wBACA,KAAAtlB,cAgDhB,OA7CI,YAAAoe,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACY4J,EAAA,EAAAA,QAAS,kCACXyR,EAAczR,GAAWA,EAAQyR,YAEvC,IAAKzR,IAAYyR,EACb,MAAM,IAAI,GAA4B,CAAC,wBAG3C,OAAOja,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYxsC,EAAOnJ,IACnEI,MAAK,WACF,SAAK62B,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCAAKnT,GAAO,CAAEyR,YAAW,SAE1F3a,OAAM,SAAAC,GACH,OAAMA,aAAiB,MAAkB,gBAAKA,EAAMlE,KAAKI,OAAQ,CAAE6M,KAAM,4BAIlE,IAAI8G,SAAQ,WACf,EAAKioB,YAAYoC,SAASl6B,EAAMlE,KAAKkjD,gBAAgBK,QAAS,CAC1DC,MAAOt/C,EAAMlE,KAAKkjD,gBAAgBO,mBAClCC,QAASx/C,EAAMlE,KAAKkjD,gBAAgBS,aACpCC,GAAI1/C,EAAMlE,KAAKkjD,gBAAgBW,mBAP5B9vC,QAAQwM,OAAOrc,OAatC,YAAAs2C,SAAA,SAASj3C,GACL,IAAMuV,EAAQnU,KAAK61B,OAAOzhB,WACpBrM,EAAQoM,EAAMpM,MAAM+Q,WAE1B,OAAI/Q,GAASoM,EAAM3L,QAAQqkB,qBAAuB,KACvC7sB,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBf,cAAczsC,EAAMK,QAASxJ,IAG/EwQ,QAAQwM,OAAO,IAAI,KAG9B,YAAAjN,WAAA,WACI,OAAOS,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAA0iB,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAE3C,EArDA,G,GCHA,WAGI,WACcyhB,EACA0f,EACAoH,EACA0U,GAHA,KAAAx7B,SACA,KAAA0f,sBACA,KAAAoH,wBACA,KAAA0U,qBAmFlB,OAhFI,YAAA5b,QAAA,SAAQtjC,EAA2BvT,GAC/B,OAAOoB,KAAKsxD,8BACRtxD,KAAKuxD,uBAAuBp/C,EAASvT,GACrCoB,KAAKwxD,0BAA0Br/C,EAASvT,IAGhD,YAAAi3C,SAAA,SAASjW,GACL,OAAOxwB,QAAQwM,OAAO,IAAI,KAG9B,YAAAjN,WAAA,SAAW/P,GAAX,WACI,IAAKoB,KAAKsxD,8BACN,OAAOliD,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,YAGvC,IAAMq9C,EAAc7yD,GAAWA,EAAQuqD,YAAcvqD,EAAQuqD,WAAWj3B,KAChE5d,EAAA,uBAAAA,OACA,2BAAAo9C,gBAAmB,oBAAAC,cAAA,kBACnB,6BAAAnpD,QAAW,oBAAAsuC,cAAA,IAAS,EAAT,KAEnB,IAAK2a,IAAgB3a,EACjB,MAAM,IAAI,KAGd,IAAM5kB,EAAOlyB,KAAKqxD,mBAAmBh5D,OAAOimC,EAAMwY,EAAQ2a,GAE1D,OAAOv/B,EAAKsO,SACPxhC,MAAK,WAGF,OAFA,EAAK4yD,YAAc1/B,EAEZ,EAAK2D,OAAOzhB,eAI/B,YAAA0iB,aAAA,SAAa8I,GAKT,OAJI5/B,KAAK4xD,aACL5xD,KAAK4xD,YAAY1wB,SAGd9xB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAG/B,YAAAo9C,0BAAR,SAAkCr/C,EAA2BvT,GAA7D,WACY4J,EAAA,EAAAA,QAAS,kCACXyR,EAAczR,GAAWA,EAAQyR,YAEvC,IAAKzR,IAAYyR,EACb,MAAM,IAAI,GAA4B,CAAC,wBAG3C,OAAOja,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYxsC,EAAOnJ,IACnEI,MAAK,WACF,SAAK62B,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCAAKnT,GAAO,CAAEyR,YAAW,UAI3F,YAAAs3C,uBAAR,SAA+Bp/C,EAA2BvT,GAA1D,WACY4J,EAAA,EAAAA,QAAS,kCACX0pB,EAAOlyB,KAAK4xD,YAElB,IAAK1/B,EACD,MAAM,IAAI,KAAoB,KAAwBnjB,uBAG1D,IAAKvG,IAAYA,EAAQ9I,SACrB,MAAM,IAAI,GAA4B,CAAC,qBAG3C,OAAOwyB,EAAK8iB,WACPh2C,MAAK,WAAM,SAAK62B,OAAOe,SAAS,EAAK2e,oBAAoBhB,YAAYxsC,EAAOnJ,OAC5EI,MAAK,WAAM,OAAAkzB,EAAK2nB,OAAOrxC,MACvBxJ,MAAK,WAAM,SAAK62B,OAAOe,SAAS,EAAK2e,oBAAoBX,wBAG1D,YAAA0c,4BAAR,WACY,IACA,GADA,uBAAAh9C,OACA,sBAAAgmC,iBAAoB,oBAAAuX,2BAE5B,YAF4B,IAA6B,GAA7B,GAIpC,EA1FA,G,GCAA,WAGI,WACYh8B,EACA0f,EACAoH,EACAmV,GAHA,KAAAj8B,SACA,KAAA0f,sBACA,KAAAoH,wBACA,KAAAmV,oBA6ChB,OA1CI,YAAAnjD,WAAA,SAAW/P,GAAX,WACYc,EAAA,EAAAA,SAGR,GAFAM,KAAKy3B,eAAiBz3B,KAAK61B,OAAOzhB,WAAW4E,eAAeC,iBAAiBvZ,IAExEM,KAAKy3B,eACN,MAAM,IAAI,IAAiB,IAAqBz9B,sBAGpD,OAAKgG,KAAKy3B,eAAenjB,OAAOqxC,aAIzB3lD,KAAK8xD,kBAAkB5G,QAAQxrD,GACjCV,MAAK,WAAM,SAAK62B,OAAOzhB,cAJjBhF,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAO3C,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACY4J,EAAA,EAAAA,QAAS,kCAEjB,IAAKA,EACD,MAAM,IAAI,IAAiB,IAAqB1O,gBAGpD,OAAOkG,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYxsC,EAAOnJ,IACnEI,MAAK,WACF,IAAK,EAAKy4B,eACN,MAAM,IAAI,IAAiB,IAAqBz9B,sBAGpD,OAAO,EAAKy9B,eAAenjB,OAAOqxC,aAC9B,EAAKmM,kBAAkB3G,MAAM3iD,GAC7B,EAAKqtB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAcnT,QAI9E,YAAAqtC,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAkb,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAE3C,EApDA,GCKqB,GAArB,WAKI,WACYyhB,EACAqB,EACAD,EACA8zB,EACApO,EACApH,EACA1a,GANA,KAAAhF,SACA,KAAAqB,yBACA,KAAAD,8BACA,KAAA8zB,gCACA,KAAApO,wBACA,KAAApH,sBACA,KAAA1a,6BA0JhB,OAvJI,YAAAlsB,WAAA,SAAW/P,GAAX,WAGI,OAFAoB,KAAK86B,UAAYl8B,EAAQc,SAElBM,KAAK66B,2BAA2BlsB,WAAW3O,KAAK86B,WAClD97B,MAAK,WAGF,GAFA,EAAK+yD,kBAAoB,EAAKje,qBAAqBl1C,IAE9C,EAAKmzD,kBACN,MAAM,IAAI,KAAqB,sFAGnC,IAAMnC,EAAe,EAAKmC,kBAAkBnC,cAAgBxqD,SAASg2B,eAAe,EAAK22B,kBAAkBnC,cAO3G,OALIA,IACA,EAAK50B,cAAgB40B,EACrB,EAAK50B,cAAc9G,iBAAiB,QAAS,EAAKqH,2BAG/C,EAAK1F,OAAOzhB,eAI/B,YAAA0iB,aAAA,sBAOI,OANI92B,KAAKg7B,eACLh7B,KAAKg7B,cAAc3G,oBAAoB,QAASr0B,KAAKu7B,0BAGzDv7B,KAAKg7B,mBAAgBp7B,EAEdI,KAAK66B,2BAA2B/D,eAClC93B,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACI,IAAKoB,KAAK+xD,kBACN,MAAM,IAAI,KAAqB,sFAG7B,6BACF,IAAAh5B,eAAA,IAAU,EAAV,eACA,IAAAgtB,uBAAA,IAAkB,EAAlB,eAGJ,OAAO32C,QAAQY,QAAQhQ,KAAK+vD,eACvB/wD,MAAK,SAAAwJ,GACF,OAAKA,EAAQyR,YAAY2X,OAAUppB,EAAQyR,YAAYk0B,gBAahD3lC,EAXI,EAAKqyB,2BAA2Ba,gBAClC18B,MAAK,SAAAib,GAAe,SAAKg4B,2BAA2Bh4B,MACpDjb,MAAK,WAAM,OAAA+mD,OACX/mD,MAAK,WAAM,SAAK+wD,iBAChBzwD,OAAM,SAAAC,GACsB,aAArBA,EAAMyyD,YACNj5B,EAAQx5B,SAO3BP,MAAK,WACF,SAAK62B,OAAOe,SAAS,EAAK2e,oBAAoBhB,YAAY,CAAEtjB,eAAgB9e,EAAQ8e,gBAAkBryB,IACjGI,MAAK,WAAM,SAAK62B,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,EAAKo0C,uBAI/F,YAAAla,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAGtB,YAAAq2B,2BAAR,SAAmCh4B,GAAnC,WACI,IAAKja,KAAK86B,UACN,MAAM,IAAI,KAAoB,KAAwB/rB,uBAG1D,IAAMrP,EAAWM,KAAK86B,UAGtB,OAAO96B,KAAK66B,2BAA2Bc,cAAc1hB,GAChDjb,MAAK,WAAM,OAAAoQ,QAAQC,IAAI,CACpB,EAAKwmB,OAAOe,SAAS,EAAKM,uBAAuBpiB,uBACjD,EAAK+gB,OAAOe,SAAS,EAAKK,4BAA4Bx3B,kBAAkBC,UAI5E,YAAAo0C,qBAAR,SAA6Bl1C,GACzB,GAAyB,uBAArBA,EAAQc,UAAqCd,EAAQm1C,mBACrD,OAAOn1C,EAAQm1C,mBAGnB,GAAyB,oBAArBn1C,EAAQc,UAAkCd,EAAQo1C,gBAClD,OAAOp1C,EAAQo1C,gBAGnB,MAAM,IAAI,MAGN,YAAA+b,YAAR,WACI,IAAK/vD,KAAK86B,UACN,MAAM,IAAI,KAAoB,KAAwB/rB,uBAG1D,IACMgK,EADQ/Y,KAAK61B,OAAOzhB,WACE4E,eAAeC,iBAAiBjZ,KAAK86B,WAEjE,IAAK/hB,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpD,IAAK+e,EAAciC,mBAAmB4W,MAClC,MAAM,IAAI,IAAiB,IAAqB93B,gBAGpD,IAAMmgB,EAAc,CAChBvT,OAAQ1G,KAAK86B,UACblJ,MAAO7Y,EAAciC,mBAAmB4W,MACxCuc,gBAAiBp1B,EAAciC,mBAAmBizB,kBAGtD,MAAO,CACHvuC,SAAUM,KAAK86B,UACf7gB,YAAW,IAKX,YAAAshB,yBAAR,SAAiChI,GADjC,WAII,GAFAA,EAAMkI,kBAEDz7B,KAAK86B,YAAc96B,KAAK+xD,kBACzB,MAAM,IAAI,KAAoB,KAAwBhjD,uBAG1D,IAAMrP,EAAWM,KAAK86B,UAEhB,yBACF,IAAA/B,eAAA,IAAU,EAAV,eACA,IAAAgtB,uBAAA,IAAkB,EAAlB,eAGJ,OAAO/lD,KAAK61B,OAAOe,SAAS52B,KAAK+qD,8BAA8Bve,mBAAkB,WAC7E,OAAO,EAAK3R,2BAA2Ba,gBAClC18B,MAAK,SAAAib,GAAe,SAAKg4B,2BAA2Bh4B,MACpDjb,MAAK,WAAM,OAAA+mD,OACXzmD,OAAM,SAAAC,GACsB,aAArBA,EAAMyyD,YACNj5B,EAAQx5B,QAGrB,CAAEG,SAAQ,IAAK,CAAEi3B,QAAS,uBAvBjC,sBADC,M,6CA0BL,EAtKA,G,GCEA,WAKI,WACYd,EACA0f,EACAte,EACA2Z,EACAqhB,GAJA,KAAAp8B,SACA,KAAA0f,sBACA,KAAAte,8BACA,KAAA2Z,+BACA,KAAAqhB,sBAPJ,KAAAC,sBAAwB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAmKrF,OAzJI,YAAAvjD,WAAA,SAAW/P,GAAX,WACI,OAAOoB,KAAKiyD,oBAAoBj2B,OAC3Bh9B,MAAK,SAAAmzD,GAAkB,EAAKC,cAAgBD,KAC5CnzD,MAAK,WAcF,OAbA,EAAKqzD,aAAe,EAAKx8B,OAAOG,WAC5B,SAAA7hB,GACQA,EAAMge,kBAAkB9Q,cAAcziB,EAAQc,WAC9C,EAAK4yD,YAAY1zD,MAGzB,SAAAuV,GACI,IAAMjI,EAAWiI,EAAMjI,SAASwI,cAEhC,OAAOxI,GAAYA,EAASilB,sBAI7B,EAAKmhC,YAAY1zD,MAE3BI,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAA0iB,aAAA,WAKI,OAJI92B,KAAKqyD,cACLryD,KAAKqyD,eAGFjjD,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACI,IAAKuT,EAAQ3J,QACT,MAAM,IAAI,KAAqB,yEAGnC,IAAQ,IAAAA,QAAwB,GAAb,EAAAyR,YAAa,qCAEhC,OAAOja,KAAKuyD,aACPvzD,MAAK,SAAC,G,IAAE,IAAAwzD,oBAA8C,SAAK38B,OAAOe,SAC/D,EAAKga,6BAA6BzB,kBAAkBkP,EAAe3+C,SAAU,CAAE+yD,mBAAkB,QAEpGzzD,MAAK,WAAM,SAAK62B,OAAOe,SACpB,EAAK2e,oBAAoBhB,YAAY,yCAC9BpiC,GAAO,CACV3J,QAAS61C,EAGTptB,gBAAgB,IACjBryB,QAIf,YAAAi3C,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAGtB,YAAA02C,YAAR,SAAoB1zD,GAApB,WACI,IAAKA,EAAQ8zD,OACT,MAAM,IAAI,KAAqB,4EAG3B,IAAAhzD,EAAA,EAAAA,SAAU,IAAAgzD,OAAUj8B,EAAA,EAAAA,UAAWwJ,EAAA,EAAAA,OAEvC,OAAOjgC,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GAAS,WAAI/E,SAA4B,SAAAY,GAC3C,IAAM+I,EAAgB5E,EAAM6E,eAAeC,iBAAiBvZ,GAE5D,IAAKqZ,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpD,IAAK,EAAKo4D,gBAAkBr5C,EAAcnK,YACtC,MAAM,IAAI,KAAoB,KAAwBG,uBAG1D,EAAKqjD,cAAcrgB,KAAK,CAAE4gB,aAAc55C,EAAcnK,cAEtD,EAAKwjD,cAAcp2B,KAAK,CAAEvF,UAAS,IAAI,SAAAj7B,GAC/BykC,GACAA,EAAOzkC,GAEXwU,EAAQxU,aAKhB,YAAAo3D,sBAAR,SAA8BvrD,EAAgC+N,GAC1D,IAAK,oBAASpV,KAAKkyD,sBAAuB7qD,EAAe/I,aACrD,MAAO,GAGX,IAAMqc,EAAkC,CACpCqf,gBAAiBh6B,KAAK6yD,oBAAoBxrD,EAAgBA,EAAeK,QAO7E,OAJI0N,IACAuF,EAAKif,iBAAmB55B,KAAK6yD,oBAAoBz9C,EAAiB/N,EAAeK,QAG9EiT,GAGH,YAAAk4C,oBAAR,SAA4B51D,EAAkByK,GAC1C,IAAMorD,EAA+B,CACjCC,eAAgB91D,EAAQU,SACxBG,KAAMb,EAAQa,KACdO,QAASpB,EAAQqB,YACjB00D,WAAY/1D,EAAQM,UACpB01D,YAAah2D,EAAQO,SACrBo9B,YAAa39B,EAAQmB,WACrBw/B,OAAQ3gC,EAAQe,gBAChB0J,MAAK,GAWT,OARIzK,EAAQY,WACRi1D,EAAcI,gBAAkBj2D,EAAQY,UAGxCZ,EAAQsB,QACRu0D,EAAcv0D,MAAQtB,EAAQsB,OAG3Bu0D,GAGH,YAAAP,WAAR,sBACI,OAAO,IAAInjD,SAAQ,SAACY,EAAS4L,GACzB,IAAMvU,EAAiB,EAAKwuB,OAAOzhB,WAAW/M,eAAeuR,oBACvDxD,EAAkB,EAAKygB,OAAOzhB,WAAWgB,gBAAgB+D,qBAE/D,IAAK9R,EACD,MAAM,IAAI,IAAiB,IAAqB/N,uBAGpD,IAAK,EAAK84D,cACN,MAAM,IAAI,KAAoB,KAAwBrjD,uBAG1D,IAAMokD,EAAoB,EAAKP,sBAAsBvrD,EAAgB+N,GAErE,EAAKg9C,cAAcphB,UAAUmiB,GAAmB,SAAAn2B,GAC5C,OAAIA,EAAIo2B,SACGpjD,EAAQgtB,GAGfA,EAAIq2B,UACGz3C,EAAO,IAAI,SAGtBA,EAAO,IAAI,aAI3B,EAtKA,G,GCVA,WACI,WACYrO,GAAA,KAAAA,gBAOhB,OAJI,YAAAyuB,KAAA,WACI,OAAOh8B,KAAKuN,cAAcG,WARlB,wCASH1O,MAAK,WAAM,OAACsZ,OAAmCg7C,OAAOC,WAEnE,EATA,G,GCDA,WACI,WACY19B,EACA0f,GADA,KAAA1f,SACA,KAAA0f,sBAkBhB,OAfI,YAAAE,QAAA,SAAQtjC,EAA2BvT,GAC/B,OAAOoB,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYpiC,EAASvT,KAG9E,YAAAi3C,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAjN,WAAA,WACI,OAAOS,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAA0iB,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAE3C,EArBA,GCQqB,GAArB,WAKI,WACYyhB,EACA0f,EACAoH,EACA5gB,GAHA,KAAAlG,SACA,KAAA0f,sBACA,KAAAoH,wBACA,KAAA5gB,0BA+GhB,OA5GI,YAAAptB,WAAA,SAAW/P,GAAX,WACYc,EAAA,EAAAA,SAIR,GAFAM,KAAKy3B,eAAiBz3B,KAAK61B,OAAOzhB,WAAW4E,eAAeC,iBAAiBvZ,IAExEM,KAAKy3B,eACN,MAAM,IAAI,IAAiB,IAAqBz9B,sBAGpD,OAAOgG,KAAK+7B,wBAAwBC,KAAKh8B,KAAKy3B,eAAenjB,OAAO4jB,UAC/Dl5B,MAAK,SAAAi9B,GAGF,GAFA,EAAKC,kBAAoBD,GAEpBr9B,EAAQq9B,WACT,MAAM,IAAI,KAAqB,uFAGnC,IAAM2zB,EAAgBhxD,EAAQq9B,WAAW2zB,cAAgBxqD,SAASg2B,eAAex8B,EAAQq9B,WAAW2zB,cAOpG,OALIA,IACA,EAAK50B,cAAgB40B,EACrB,EAAK50B,cAAc9G,iBAAiB,QAAS,EAAKqH,2BAG/C,EAAK1F,OAAOzhB,eAI/B,YAAA0iB,aAAA,WAUI,OATA92B,KAAKy3B,oBAAiB73B,EAElBI,KAAKg7B,eACLh7B,KAAKg7B,cAAc3G,oBAAoB,QAASr0B,KAAKu7B,0BAGzDv7B,KAAKg7B,mBAAgBp7B,EACrBI,KAAKk8B,uBAAoBt8B,EAElBwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACY4J,EAAA,EAAAA,QACFT,EAAQ,CAAEkpB,eAAgB9e,EAAQ8e,gBAExC,IAAKzoB,EACD,MAAM,IAAI,KAAqB,gFAGnC,IAAKxI,KAAKy3B,iBAAmBz3B,KAAKy3B,eAAezc,qBAAuBhb,KAAKy3B,eAAezc,mBAAmBD,QAC3G,MAAM,IAAI,IAAiB,IAAqB/gB,sBAIpD,IAAMigB,EAAcja,KAAKy3B,eAAezc,mBAAmBf,YAG3D,IAAKA,EACD,MAAM,IAAI,KAAqB,sGAGnC,OAAOja,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYxsC,EAAOnJ,IACnEI,MAAK,WAAM,SAAK62B,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCAAKnT,GAAO,CAAEyR,YAAW,UAG3G,YAAA47B,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAGtB,YAAA2gB,yBAAR,WACI,IAAMpoB,EAAQnU,KAAK61B,OAAOzhB,WACpBlI,EAAWiI,EAAMjI,SAASwI,cAC1B4E,EAAcnF,EAAMG,OAAOiF,iBAEjC,IAAKrN,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,IAAK6f,EACD,MAAM,IAAI,IAAiB,IAAqB5f,uBAGpD,IAAKsG,KAAKy3B,iBAAmBz3B,KAAKy3B,eAAezc,mBAC7C,MAAM,IAAI,IAAiB,IAAqBhhB,sBAGpD,MAAO,CACHwa,WAAYxU,KAAKy3B,eAAezc,mBAAmBxG,WACnDgoB,iBAAkBx8B,KAAKy3B,eAAezc,mBAAmBwhB,iBACzDt7B,OAAQgL,EAASxD,SAASggC,QAAQ,GAClCvgC,SAAUmR,EAAYnR,SAASG,KAC/Bo0B,OAAQxwB,EAASG,KAAKjP,GACtBu/B,yBAAyB,EACzB1zB,YAAa,aAAe,cAK5B,YAAAsyB,yBAAR,SAAiChI,GAG7B,GAFAA,EAAMkI,iBAEDz7B,KAAKk8B,kBAAV,CAIA,IAAM/pB,EAAUnS,KAAKu8B,2BACrBv8B,KAAKk8B,kBAAkBhwB,SAASiG,KARpC,sBADC,M,6CAWL,EAxHA,G,GCNA,WACI,WACY0jB,EACA0f,GADA,KAAA1f,SACA,KAAA0f,sBAoBhB,OAjBI,YAAAE,QAAA,SAAQmU,EAAgChrD,GACpC,OAAOoB,KAAK61B,OAAOe,SACf52B,KAAKu1C,oBAAoBhB,YAAY,gBAAKqV,EAAc,WAAYhrD,KAI5E,YAAAi3C,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAjN,WAAA,WACI,OAAOS,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAA0iB,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAE3C,EAvBA,G,GCFA,WACI,WACYyhB,EACA0f,GADA,KAAA1f,SACA,KAAA0f,sBAuBhB,OApBI,YAAAE,QAAA,SAAQtjC,EAA2BvT,GAC/B,IAAMsT,EAASlS,KAAKu1C,oBAAoBhB,YAAY,yCAC7CpiC,GAAO,CACV3J,QAAS2J,EAAQ3J,QAAU,CAAE9I,SAAUyS,EAAQ3J,QAAQ9I,eAAaE,IACrEhB,GAEH,OAAOoB,KAAK61B,OAAOe,SAAS1kB,IAGhC,YAAA2jC,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAjN,WAAA,WACI,OAAOS,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAA0iB,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAE3C,EA1BA,G,GCIA,WACI,WACYyhB,EACA0f,EACAoH,GAFA,KAAA9mB,SACA,KAAA0f,sBACA,KAAAoH,wBAqDhB,OAlDI,YAAAlH,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACY4J,EAAA,EAAAA,QAAS,kCACXgrD,EAAexzD,KAAKyzD,yBAAyBjrD,GAAW2J,EAAUpK,EAClEkS,EAAczR,GAAWA,EAAQyR,YACjCne,EAAeme,GAAgBA,EAAkCne,aACjEi/C,EAAuB9gC,GAAgBA,EAAiC8gC,qBAE9E,IAAKvyC,EACD,MAAM,IAAI,GAA4B,CAAC,YAG3C,OAAOxI,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYif,EAAc50D,IAC1EI,MAAK,WACF,SAAK62B,OAAOe,SAAS,EAAK+lB,sBAAsB7gC,yBAC5CtT,EAAQ9I,SACR8I,EAAQ0Q,UACRpd,EACAi/C,QAIhB,YAAAlF,SAAA,SAASj3C,GACL,IAAMuV,EAAQnU,KAAK61B,OAAOzhB,WACpBrM,EAAQoM,EAAMpM,MAAM+Q,WACpBvd,EAAS4Y,EAAM3L,QAAQqkB,mBAE7B,OAAI9kB,GAAUxM,IAAW,MAAkCA,IAAW,KAI/D6T,QAAQwM,OAAO,IAAI,IAHf5b,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBf,cAAczsC,EAAMK,QAASxJ,KAM1F,YAAA+P,WAAA,WACI,OAAOS,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAA0iB,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAG/B,YAAAq/C,yBAAR,SAAiCjrD,GAG7B,QAAKA,IAIwB,UAAtBA,EAAQ0Q,WAA+C,gBAAtB1Q,EAAQ0Q,WAAoD,iBAArB1Q,EAAQ9I,WAE/F,EAzDA,G,GCCA,WAGI,WACYm2B,EACA0f,EACAoH,EACAmV,GAHA,KAAAj8B,SACA,KAAA0f,sBACA,KAAAoH,wBACA,KAAAmV,oBA4DhB,OAzDI,YAAAnjD,WAAA,SAAW/P,GAAX,WACYc,EAAA,EAAAA,SAGR,GAFAM,KAAKy3B,eAAiBz3B,KAAK61B,OAAOzhB,WAAW4E,eAAeC,iBAAiBvZ,IAExEM,KAAKy3B,eACN,MAAM,IAAI,IAAiB,IAAqBz9B,sBAGpD,OAAKgG,KAAKy3B,eAAenjB,OAAOqxC,aAIzB3lD,KAAK8xD,kBAAkB5G,QAAQxrD,GACjCV,MAAK,WAAM,SAAK62B,OAAOzhB,cAJjBhF,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAO3C,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACI,GAAIoB,KAAK0zD,yBACL,OAAO1zD,KAAK61B,OAAOe,SACf52B,KAAKu1C,oBAAoBhB,YAAY,yCAC9BpiC,GAAO,CACV3J,QAAS2J,EAAQ3J,QAAU,CAAE9I,SAAUyS,EAAQ3J,QAAQ9I,eAAaE,IACrEhB,IAIH,IAAA4J,EAAA,EAAAA,QAAS,kCAEjB,IAAKA,EACD,MAAM,IAAI,IAAiB,IAAqB1O,gBAGpD,OAAOkG,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYxsC,EAAOnJ,IACnEI,MAAK,WACF,IAAK,EAAKy4B,eACN,MAAM,IAAI,IAAiB,IAAqBz9B,sBAGpD,OAAO,EAAKy9B,eAAenjB,OAAOqxC,aAC9B,EAAKmM,kBAAkB3G,MAAM3iD,GAC7B,EAAKqtB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAcnT,QAI9E,YAAAqtC,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAkb,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAG/B,YAAAs/C,uBAAR,WAGI,OAFc1zD,KAAK61B,OAAOzhB,WAEb5L,QAAQqkB,qBAAuB,MAEpD,EAnEA,G,GCCA,WAKI,WACYgJ,EACA0f,EACAhoC,EACAC,QAAA,IAAAA,MAAA,QAHA,KAAAqoB,SACA,KAAA0f,sBACA,KAAAhoC,gBACA,KAAAC,UANJ,KAAAmmD,kBAA4B,EA8GxC,OArGI,YAAAhlD,WAAA,SAAW/P,GAAX,WACUuV,EAAQnU,KAAK61B,OAAOzhB,WAK1B,OAHApU,KAAKy3B,eAAiBtjB,EAAM6E,eAAeC,iBAAiBra,EAAQc,UACpEM,KAAK2zD,kBAAwF,KAApE/0D,EAAQg1D,eAAiBh1D,EAAQg1D,cAAcC,iBAEnE7zD,KAAK8zD,sBAIH9zD,KAAKuN,cAAcU,aACrBjP,MAAK,SAAAkP,GAGF,GAFA,EAAK6lD,WAAa7lD,GAEb,EAAKupB,iBAAmB,EAAKA,eAAenjB,OAAOuoB,WACpD,MAAM,IAAI,IAAiB,IAAqB7iC,sBAGpD,EAAK+5D,WAAW7nD,SAASigD,MAAM,EAAK10B,eAAenjB,OAAOuoB,WAAY,CAClER,OAAQ,gBACR4gB,YAAa,EAAKxlB,eAAenjB,OAAO4jB,SAAW,UAAY,kBAGtEl5B,MAAK,WAAM,SAAK62B,OAAOzhB,cAhBjBhF,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAmB3C,YAAA0iB,aAAA,WAMI,OALI92B,KAAK8zD,uBAAyB9zD,KAAK+zD,aACnC/zD,KAAK+zD,WAAW7nD,SAAS8nD,YACzBh0D,KAAK+zD,gBAAan0D,GAGfwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACUsP,EAASlO,KAAK+zD,WAEpB,GAAI/zD,KAAKi0D,6BACL,OAAOj0D,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYpiC,EAASvT,IAG9E,IAAKoB,KAAK8zD,uBAAyB9zD,KAAK2zD,iBACpC,OAAO3zD,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYpiC,EAASvT,IACrEI,MAAK,SAAAmV,GACF,IAAMwd,EAAcxd,EAAM3L,QAAQskB,wBAOlC,OALI6E,IACA,EAAKnkB,QAAQ+1B,IAAIhrB,SAASjT,KAAOqsB,GAI9B,IAAIviB,SAAe,kBAItC,IAAKlB,EACD,MAAM,IAAI,KAAoB,KAAwBa,uBAK1D,OAFAb,EAAOhC,SAASgoD,SAETl0D,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYpiC,EAASvT,IACrEI,MAAK,SAAAmV,GACF,IAAMwd,EAAcxd,EAAM3L,QAAQskB,wBAOlC,OALI6E,GACAzjB,EAAOhC,SAASioD,UAAUxiC,GAIvB,IAAIviB,SAAe,kBAE7B9P,OAAM,SAAAC,GAGH,OAFA2O,EAAOhC,SAAS8nD,YAET5kD,QAAQwM,OAAOrc,OAIlC,YAAAs2C,SAAA,SAASj3C,GACL,IACMmJ,EADQ/H,KAAK61B,OAAOzhB,WACNrM,MAAM+Q,WAE1B,OAAI/Q,GAAS/H,KAAKi0D,6BACPj0D,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBf,cAAczsC,EAAMK,QAASxJ,IAG/EwQ,QAAQwM,OAAO,IAAI,KAGtB,YAAAq4C,2BAAR,WACI,IAAM9/C,EAAQnU,KAAK61B,OAAOzhB,WAE1B,OAAOD,EAAM3L,QAAQqkB,qBAAuB,MACrC1Y,EAAM3L,QAAQqkB,qBAAuB,MAGxC,YAAAinC,oBAAR,WACI,SAAU9zD,KAAKy3B,iBAAkBz3B,KAAKy3B,eAAenjB,OAAOuoB,aAEpE,EAjHA,G,aCAA,YACI,WACItqB,EACA6hD,EACAC,EACAC,EACQj9B,GALZ,MAOI,YAAM9kB,EAAO6hD,EAAoBC,EAAsBC,IAAkB,K,OAFjE,EAAAj9B,c,EAgChB,OAtCoD,yBAWhD,YAAAoe,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACI,OAAO,YAAM62C,QAAO,UAACtjC,EAASvT,GACzBU,OAAM,SAACC,GACJ,OAAMA,aAAiB,MAAkB,gBAAKA,EAAMlE,KAAKI,OAAQ,CAAE6M,KAAM,4BAIlE,IAAI8G,SAAQ,WACf,EAAKioB,YAAYoC,SAASl6B,EAAMlE,KAAKkjD,gBAAgBK,QAAS,CAC1DC,MAAOt/C,EAAMlE,KAAKkjD,gBAAgBO,mBAClCC,QAASx/C,EAAMlE,KAAKkjD,gBAAgBS,aACpCC,GAAI1/C,EAAMlE,KAAKkjD,gBAAgBW,oBAChCt/C,EAAW,WARPwP,QAAQwM,OAAOrc,OAatC,YAAAs2C,SAAA,SAASj3C,GACL,IAAMuV,EAAQnU,KAAK61B,OAAOzhB,WACpBrM,EAAQoM,EAAMpM,MAAM+Q,WAE1B,OAAI/Q,GAASoM,EAAM3L,QAAQqkB,qBAAuB,KACvC7sB,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBf,cAAczsC,EAAMK,QAASxJ,IAG/E,YAAMi3C,SAAQ,UAACj3C,IAE9B,EAtCA,CAAoD,I,aCNpD,YACI,WAAYjE,GAAZ,MACI,YAAMA,GAAW,8BAA4B,K,OAE7C,EAAKrD,KAAO,0BACZ,EAAK+B,KAAO,sB,EAEpB,OAPqD,yBAOrD,EAPA,CAAqD,Of2DrD,SAAYm2D,GACR,qCACA,sBACA,mCACA,YACA,0BACA,4BACA,wBACA,cACA,gCATJ,CAAYA,QAAS,KAYrB,SAAYC,GACR,sBACA,0BACA,cAHJ,CAAYA,QAAiB,KgBzD7B,I,GAAA,WAMI,WACY55B,EACAqB,EACAqe,EACAoH,EACA1lB,EACA8zB,EACArsD,EACA6O,GAPA,KAAAsoB,SACA,KAAAqB,yBACA,KAAAqe,sBACA,KAAAoH,wBACA,KAAA1lB,8BACA,KAAA8zB,gCACA,KAAArsD,iBACA,KAAA6O,gBAyPhB,OAtPI,YAAAoB,WAAA,SAAW/P,GAAX,WACYc,EAAA,EAAAA,SAIR,OAFAM,KAAKu0D,mBAAmB70D,GAEjBM,KAAKuN,cAAcyuB,OACrBh9B,MAAK,SAAAw1D,GACF,WAAIplD,SAAQ,SAACY,EAAS4L,GAClB,EAAK64C,aAAeD,EAChB,EAAKE,gBAAgB91D,EAAS,CAAEoR,QAAO,EAAE4L,OAAM,KAEnD,EAAK64C,aAAaE,cAEzB31D,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAAqhC,QAAA,SAAQmU,EAAgChrD,GAAxC,WACY4J,EAAA,EAAAA,QAER,IAAKA,IAAYA,EAAQ9I,SACrB,MAAM,IAAI,KAAqB,yFAKnC,OAFAM,KAAKu0D,mBAAmB/rD,EAAQ9I,UAEzBM,KAAK40D,oBAAoBpsD,EAAQ9I,UACnCV,MAAK,SAAAib,GACF,SAAK4b,OAAOe,SAAS,EAAK2e,oBAAoBhB,YAAY,gBAAKqV,EAAc,WAAYhrD,IACxFI,MAAK,WACF,SAAK62B,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCAAKnT,GAAO,CAAEyR,YAAW,aAIvG,YAAA47B,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAkb,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAG/B,YAAAmgD,mBAAR,SAA2B70D,GACvB,IAAMyU,EAAQnU,KAAK61B,OAAOzhB,WAG1B,GAFApU,KAAKy3B,eAAiBtjB,EAAM6E,eAAeC,iBAAiBvZ,IAEvDM,KAAKy3B,iBAAmBz3B,KAAKy3B,eAAezc,mBAC7C,MAAM,IAAI,IAAiB,IAAqBhhB,uBAIhD,YAAA66D,gBAAR,SAAwBlQ,GACpB,OAAQA,EAAYmQ,eAChB,IAAK,aACD,MAAO,KACX,IAAK,YACD,MAAO,KACX,QACI,MAAO,OAIX,YAAAF,oBAAR,SAA4Bl1D,GAA5B,WAEUqZ,EADQ/Y,KAAK61B,OAAOzhB,WACE4E,eAAeC,iBAAiBvZ,GAE5D,GAAIqZ,EAAe,CACP,IAAAiC,EAAA,EAAAA,mBACR,GAAIA,GAAsBA,EAAmBf,YAAY2X,MACrD,OAAOxiB,QAAQY,QAAQ,CAAE4hB,MAAO7Y,EAAciC,mBAAmBf,YAAY2X,QAIrF,OAAO,IAAIxiB,SAAyB,SAACY,EAAS4L,GAC1C,IAAK,EAAK64C,aACN,MAAM,IAAI,KAAoB,KAAwB1lD,uBAGtD,EAAKgmD,uBACL,EAAKA,sBAAsBn5C,OAAO,IAAI,MAG1C,EAAKm5C,sBAAwB,CAAE/kD,QAAO,EAAE4L,OAAM,GAC9C,EAAK64C,aAAaO,uBAIlB,YAAAN,gBAAR,SAAwB91D,EAAmCq2D,GAA3D,WACY,IAAAC,OAER,IAAKC,IAAkBn1D,KAAKy3B,eACxB,MAAM,IAAI,KAAqB,wEAKnC,OAFAz3B,KAAKo1D,eAAiBD,EAEf,4DACAn1D,KAAKo1D,gBACLp1D,KAAKy3B,eAAezc,oBAAkB,CACzCq6C,UAAW,CACPC,0BAA2B,SAAC75D,EAAQm2B,EAAO2jC,EAAUC,EAAgBC,GAC7DF,GAAYA,EAASG,sBAAwBjG,GAAkBkG,KAC/D,EAAKC,2BAA2Bn6D,EAAQm2B,EAAO2jC,EAAUC,EAAgBC,GAEzE,EAAKI,yBAAyBp6D,EAAQm2B,IAG9CkkC,qBAAsB,WAAM,SAAKC,0BACjCC,iBAAkB,SAAAC,GACN,IAAAh6B,EAAA,EAAAA,WAEJA,GACA,EAAKi6B,oBAAoBD,EAASh6B,IAG1Ck6B,kBAAmB,WACflB,EAASjlD,UACT,EAAKomD,kBAETC,2BAA4B,WAAM,OAAApB,EAASr5C,OAAO,IAAI,SAK1D,YAAAg6C,2BAAR,SACIn6D,EACAm2B,EACA2jC,EACAC,EACAC,GAEA,IAAM18B,EAAU/4B,KAAKo1D,gBAAkBp1D,KAAKo1D,eAAer8B,SAAW,OAChEgtB,EAAkB/lD,KAAKo1D,gBAAkBp1D,KAAKo1D,eAAerP,iBAAmB,OAElFtqD,EACAs9B,EAAQt9B,GACDm2B,GAAS5xB,KAAKy3B,gBACrBz3B,KAAKiyC,2BACDjyC,KAAKy3B,eAAer6B,GACpBw0B,EACA2jC,EACAC,EACAC,GAECz2D,KAAK+mD,GACLzmD,MAAMy5B,IAIX,YAAA88B,yBAAR,SAAiCp6D,EAAiCm2B,GAC9D,IAAK5xB,KAAK+0D,sBACN,MAAM,IAAI,KAAoB,KAAwBhmD,wBAGtD6iB,GAAUn2B,IAMEuE,KAAKo1D,gBAAkBp1D,KAAKo1D,eAAer8B,SAAW,QAE9Dt9B,GAERuE,KAAK+0D,sBAAsBn5C,OAAOngB,IAT9BuE,KAAK+0D,sBAAsB/kD,QAAQ,CAAE4hB,MAAK,KAY1C,YAAAqgB,2BAAR,SACIvyC,EACAkyB,EACA2jC,EACAC,EACAC,GALJ,WAOI,OAAOz1D,KAAK61B,OAAOe,SAAS52B,KAAK+qD,8BAA8Bve,mBAAkB,WAC7E,OAAO,EAAK+G,yBAAyB3hB,EAAO2jC,EAAUC,EAAgBC,GACrEz2D,MAAK,WACF,OAAAoQ,QAAQC,IAAI,CACZ,EAAKwmB,OAAOe,SAAS,EAAKM,uBAAuBpiB,uBACjD,EAAK+gB,OAAOe,SAAS,EAAKK,4BAA4Bx3B,kBAAkBC,WAE7E,CAAEA,SAAQ,IAAK,CAAEi3B,QAAS,uBAGzB,YAAAo/B,uBAAR,WACI,IAAM5hD,EAAQnU,KAAK61B,OAAOzhB,WACpBlI,EAAWiI,EAAMjI,SAASwI,cAC1B4E,EAAcnF,EAAMG,OAAOiF,iBAEjC,IAAKrN,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,IAAK6f,EACD,MAAM,IAAI,IAAiB,IAAqB5f,uBAGpD,MAAO,CACH48D,wBAAwB,EACxBC,oBAAoB,EACpBhuB,aAAcjvB,EAAYnR,SAASG,KACnChK,YAAa0B,KAAK60D,gBAAgBv7C,EAAYkB,aAAa+pC,cAC3D1B,MAAO,CACHr5B,MAAOlQ,EAAYkB,aAAag8C,UAChCt1D,OAAQwsC,OAAOxhC,EAASxD,UACxB+tD,SAAS,KAKb,YAAAljB,yBAAR,SAAiC3hB,EAAgB2jC,EAAqBC,EAA0BC,GAC5F,OAAOz1D,KAAKtB,eAAewZ,KAAK,gBAAiB,CAC7C5c,QAAS,CACL2E,OAAQ,YACR,eAAgB,qCAEpB5E,KAAM,CACFu2B,MAAK,EACL3H,SAAU,WACV/X,OAAQ,wBACRqjD,SAAU17B,KAAKC,UAAUy7B,GACzBC,eAAgB37B,KAAKC,UAAU07B,GAC/BC,gBAAiB57B,KAAKC,UAAU27B,OAKpC,YAAAW,eAAR,WACI,IACM/uD,EADQrH,KAAK61B,OAAOzhB,WACG/M,eAAeuR,oBAE5C,IAAK5Y,KAAKy0D,aACN,MAAM,IAAI,KAAoB,KAAwB1lD,uBAGtD1H,GAAkBA,EAAejJ,YACjC4B,KAAKy0D,aAAaiC,cAAcrvD,EAAejJ,aAI/C,YAAA83D,oBAAR,SAA4BD,EAAqC1O,GAC7D,IAAMoP,EAAgBvxD,SAASg2B,eAAemsB,EAAQqP,WAElDD,GAAiBV,EAAQh6B,aACzB06B,EAAcn+B,MAAMwK,QAAU,iBAG1C,EAvQA,G,GCfA,WACI,WACYz1B,GAAA,KAAAA,gBAWhB,OARI,YAAAyuB,KAAA,WAGI,OAAOh8B,KAAKuN,cAAcG,WAFR,oCAGb1O,MAAK,WAAM,gBAACJ,GACT,WAAK0Z,OAAmCu+C,cAAcj4D,QAGtE,EAbA,G,GCeA,WAII,WACYi3B,EACAoB,EACA0lB,EACApH,EACAuhB,GAJA,KAAAjhC,SACA,KAAAoB,8BACA,KAAA0lB,wBACA,KAAApH,sBACA,KAAAuhB,sBA+PhB,OA5PI,YAAAnoD,WAAA,SAAW/P,GAAX,WACUm4D,EAAgBn4D,EAAQyrB,SAE9B,IAAK0sC,EACD,MAAM,IAAI,KAAqB,qFAGnC,IAAMh+C,EAAgB/Y,KAAK61B,OAAOzhB,WAAW4E,eAAeC,iBAAiBra,EAAQc,UAErF,IAAKqZ,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpD,OAAOgG,KAAK82D,oBAAoB96B,KAAKjjB,EAAciC,mBAAmBkvB,sBACjElrC,MAAK,SAAAg4D,GACF,EAAKC,gBAAkBD,EACvB,IACME,EADW,EAAKD,gBAAgBE,WACT9+D,OAAO,OAAQ,CACxCmgC,MAAOu+B,EAAcv+B,QAOzB,OAJA0+B,EAAYzZ,MAAM,IAAIsZ,EAAcj3C,aAEpC,EAAKs3C,aAAeF,EAEb9nD,QAAQY,QAAQ,EAAK6lB,OAAOzhB,gBAI/C,YAAAqhC,QAAA,SAAQtjC,EAA2BvT,GAAnC,WACY4J,EAAA,EAAAA,QAAS,kCACXyR,EAAczR,GAAWA,EAAQyR,YACjC8gC,EAAuBl/C,QAAQoe,GAAgBA,EAAiC8gC,sBAEtF,IAAKvyC,EACD,MAAM,IAAI,GAA4B,CAAC,YAG3C,OAAOxI,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYxsC,EAAOnJ,IACnEI,MAAK,WACF,OAAIib,GAAe,aAAoBA,GAC5B,EAAK4b,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc,yCAAInT,GAAO,CAAEyR,YAAW,MACxF3a,OAAM,SAAAC,GACH,OAAMA,aAAiB,MAAkB,gBAAKA,EAAMlE,KAAKI,OAAQ,CAAE6M,KAAM,4BAIlE,EAAK+uD,eAAeC,kBAAkB/3D,EAAMlE,KAAKkjD,gBAAgBniD,OACnE4C,MAAK,SAAAu4D,GACF,GAAIA,EAAeh4D,QAAUg4D,EAAeC,cAAcp6D,GACtD,MAAM,IAAI,GAAyBm6D,EAAeh4D,OAASg4D,EAAeh4D,MAAM5E,SAGpF,IAAM0jD,EAAiB,CACnB3+C,SAAU8I,EAAQ9I,SAClBua,YAAa,CACT2X,MAAO2lC,EAAeC,cAAcp6D,KAI5C,OAAO,EAAKy4B,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc0iC,OAhBlEjvC,QAAQwM,OAAOrc,MAqB/B,EAAKs2B,OAAOe,SAAS,EAAKK,4BAA4Bx3B,kBAAkB+I,EAAQ9I,WAClFV,MAAK,SAAAmV,GACF,IAAM4E,EAAgB5E,EAAM6E,eAAeC,iBAAiBzQ,EAAQ9I,UAC9D83D,EAAgBz+C,GAAiBA,EAAcnK,YAErD,IAAK,EAAKwoD,aACN,MAAM,IAAI,KAAoB,KAAwBroD,uBAG1D,OAAO,EAAKsoD,eAAeI,oBAAoB,OAAQ,EAAKL,aAAc,EAAKM,kCAC1E14D,MAAK,SAAA24D,GACF,GAAIA,EAAoBp4D,QAAUo4D,EAAoB5+C,cAAc3b,GAChE,MAAM,IAAI,GAAyBu6D,EAAoBp4D,OAASo4D,EAAoBp4D,MAAM5E,SAG9F,IAAK68D,EACD,MAAM,IAAI,IAAiB,IAAqBx9D,sBAGpD,IAAM49D,EAA2B,yCAC1B,EAAKC,6BAA6B9c,IAAqB,CAC1D+c,eAAgBH,EAAoB5+C,cAAc3b,KAGtD,OAAO,EAAKi6D,eAAeC,kBAAkBE,EAAeI,MAE/D54D,MAAK,SAAAu4D,GACF,GAAIA,EAAeh4D,QAAUg4D,EAAeC,cAAcp6D,GACtD,MAAM,IAAI,GAAyBm6D,EAAeh4D,OAASg4D,EAAeh4D,MAAM5E,SAGpF,IAAM0jD,EAAiB,CACnB3+C,SAAU8I,EAAQ9I,SAClBua,YAAa,CACT2X,MAAO2lC,EAAeC,cAAcp6D,GACpC29C,qBAAoB,IAI5B,OAAO,EAAKllB,OAAOe,SAAS,EAAK+lB,sBAAsBhhC,cAAc0iC,cAMjG,YAAAxI,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAG9B,YAAAkb,aAAA,WAKI,OAJI92B,KAAKo3D,cACLp3D,KAAKo3D,aAAajY,UAGf/vC,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAG/B,YAAAijD,aAAR,WACI,IAAKr3D,KAAKi3D,gBACN,MAAM,IAAI,KAAoB,KAAwBloD,uBAG1D,OAAO/O,KAAKi3D,iBAGR,YAAAc,yBAAR,SAAiC1wD,GAC7B,GAAKA,EAIL,MAAO,CACHvJ,KAAMuJ,EAAevJ,KACrBO,QAASgJ,EAAe/I,YACxBk8B,MAAOnzB,EAAe1J,SACtB+8B,MAAOrzB,EAAexJ,SACtB+8B,YAAavzB,EAAejJ,WAC5B+V,MAAO9M,EAAenJ,sBAItB,YAAA85D,0BAAR,SAAkC5iD,GAC9B,OAAKA,EAIE,CACHtX,KAAMsX,EAAgBtX,KACtBO,QAAS+W,EAAgB9W,YACzBk8B,MAAOplB,EAAgBzX,SACvB+8B,MAAOtlB,EAAgBvX,SACvB+8B,YAAaxlB,EAAgBhX,WAC7B+V,MAAOiB,EAAgBlX,qBAThB,IAaP,YAAA+5D,yBAAR,SAAiC,G,IAAA,kBAAE5wD,EAAA,EAAAA,eAAgBD,EAAA,EAAAA,SACzC8wD,EAAuB,CACzBj7D,QAAS+C,KAAK+3D,yBAAyB1wD,IAG3C,OAAID,EACO,yCACA8wD,GAAoB,CACvBxwD,MAAON,EAASM,MAChBpQ,KAAS8P,EAAS7J,UAAS,IAAI6J,EAAS5J,WAI5C6J,EACO,yCACA6wD,GAAoB,CACvBxwD,MAAOL,EAAeK,MACtBpQ,KAAS+P,EAAe9J,UAAS,IAAI8J,EAAe7J,WAIrD,CACHlG,KAAM,UAIN,YAAA6gE,0BAAR,SAAkC,G,IAAA,kBAAE/iD,EAAA,EAAAA,gBAAiBhO,EAAA,EAAAA,SAC3CgxD,EAAwB,CAC1Bn7D,QAAS+C,KAAKg4D,0BAA0B5iD,IAG5C,OAAIhO,EACO,yCACAgxD,GAAqB,CACxB9gE,KAAS8P,EAAS7J,UAAS,IAAI6J,EAAS5J,WAI5C4X,EACO,yCACAgjD,GAAqB,CACxB9gE,KAAS8d,EAAgB7X,UAAS,IAAI6X,EAAgB5X,WAIvD,yCACA46D,GAAqB,CACxB9gE,KAAM,WAIN,YAAA+gE,aAAR,WACI,IAAMjxD,EAAWpH,KAAK61B,OAAOzhB,WAAWhN,SAASyR,cAEjD,IAAIzR,GAC2B,KAAvBA,EAAS7J,WAA0C,KAAtB6J,EAAS5J,UAAsC,KAAnB4J,EAASM,MAK1E,OAAON,GAGH,YAAAywD,6BAAR,SAAqC9c,GACjC,IAAM3zC,EAAWpH,KAAKq4D,eAChBjjD,EAAkBpV,KAAK61B,OAAOzhB,WAAWgB,gBAAgB+D,qBAEzDm/C,EAAkB,CACpBruD,SAAUjK,KAAKm4D,0BAA0B,CAAE/iD,gBAAe,EAAEhO,SAAQ,KAGxE,OAAIA,EACO,yCACAkxD,GAAe,CAClBC,cAAenxD,EAASM,MACxB8wD,oBAAqBzd,IAGlB,sBACAud,IAKP,YAAAZ,+BAAR,WACI,IAAMtwD,EAAWpH,KAAKq4D,eAChBhxD,EAAiBrH,KAAK61B,OAAOzhB,WAAW/M,eAAeuR,oBAE7D,MAAO,CACH6/C,gBAAiBz4D,KAAKi4D,yBAAyB,CAAE5wD,eAAc,EAAED,SAAQ,MAGrF,EAxQA,G,GCdA,WACI,WACYmG,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAgBhB,OAbI,YAAAwuB,KAAA,SAAK08B,GAAL,WACI,OAAO14D,KAAKuN,cACPG,WAAW,6BACX1O,MAAK,WACF,IAAK,EAAKwO,QAAQmrD,OACd,MAAM,IAAI,IAGd,OAAO,EAAKnrD,QAAQmrD,OAAOD,EAAgB,CACvCE,MAAO,CAAC,+BAI5B,EAnBA,G,GCGA,WAGI,WACYrrD,GAAA,KAAAA,gBAmBhB,OAhBI,YAAAoB,WAAA,sBACI,OAAO3O,KAAKuN,cACPG,WAXM,8CAYN1O,MAAK,WAAM,SAAK65D,YAAevgD,OAAkCwgD,MAAMC,QACvE/5D,MAAK,WAAM,aAGpB,YAAAyxD,aAAA,WACI,IAAKzwD,KAAK64D,YACN,MAAM,IAAI,KAAoB,KAAwB9pD,uBAK1D,OAFA/O,KAAK64D,YAAYG,sBAEVh5D,KAAK64D,YAAYI,kBAEhC,EAvBA,G,GCEA,YACI,WACI1mD,EACA6hD,EACAC,EACAC,EACQ5E,GALZ,MAOI,YAAMn9C,EAAO6hD,EAAoBC,EAAsBC,IAAkB,K,OAFjE,EAAA5E,mB,EAuBhB,OA7BkD,yBAW9C,YAAA/gD,WAAA,SAAW/P,GAGP,OAFAoB,KAAK0vD,iBAAiB/gD,aAEf,YAAMA,WAAU,UAAC/P,IAG5B,YAAA62C,QAAA,SAAQtjC,EAA2BvT,GAC/B,IAAMxC,EAAQ4D,KAAK0vD,iBAAiBe,eAC9ByI,EAAmB,iBAAM,GAAI/mD,EAAS,CACxC3J,QAAS,CACLyR,YAAa,CACT/a,gBAAiB9C,MAK7B,OAAO,YAAMq5C,QAAO,UAACyjB,EAAkBt6D,IAE/C,EA7BA,CAAkD,I,YCJlD,YACI,WAAYjE,GAAZ,MACI,YAAMA,GAAW,oFAAkF,K,OAEnG,EAAKrD,KAAO,6BACZ,EAAK+B,KAAO,mB,EAEpB,OAPwD,yBAOxD,EAPA,CAAwD,M,GCWxD,WAII,WACYw8B,EACA0f,EACAoH,EACA1lB,EACAmtB,EACA+U,EACAz6D,GANA,KAAAm3B,SACA,KAAA0f,sBACA,KAAAoH,wBACA,KAAA1lB,8BACA,KAAAmtB,4BACA,KAAA+U,mBACA,KAAAz6D,iBA2GhB,OAxGU,YAAAiQ,WAAN,W,sIACgB,SAAM3O,KAAKm5D,iBAAiBn9B,Q,OAGxC,OAHMo9B,EAAM,SACZp5D,KAAKq5D,WAAaD,EAEX,CAAP,EAAOp5D,KAAK61B,OAAOzhB,oBAGvB,YAAA0iB,aAAA,WAII,OAHA92B,KAAKy3B,oBAAiB73B,EACtBI,KAAKq5D,gBAAaz5D,EAEXwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGjC,YAAAqhC,QAAN,SAActjC,EAA2BvT,G,uJAIrC,GAHQ4J,EAAsB2J,EAAO,QAAjBpK,EAAK,iBAAKoK,EAAxB,aACcmnD,EAAct5D,KAAI,YAEjCwI,EACD,MAAM,IAAI,KAAqB,gFAGnC,IAAK8wD,EACD,MAAM,IAAI,KAAoB,KAAwBvqD,uBAG1D,SAAM/O,KAAK61B,OAAOe,SAAS52B,KAAKu1C,oBAAoBhB,YAAYxsC,EAAOnJ,K,cAAvE,cAIuBgB,KAFfqxB,EAAmB9e,EAAO,gBAE9B,MACA,GAAMnS,KAAK61B,OAAOe,SAAS52B,KAAKokD,0BAA0B3J,iBAAiBxpB,K,OAA3E,S,iBAGU,SAAMjxB,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkB+I,EAAQ9I,SAAUd,K,OAI9G,GAJMuV,EAAQ,SAEdnU,KAAKy3B,eAAiBtjB,EAAM6E,eAAeC,iBAAiBzQ,EAAQ9I,WAE/DM,KAAKy3B,iBAAmBz3B,KAAKy3B,eAAe7oB,YAC7C,MAAM,IAAI,IAAiB,IAAqB5U,sBAGtC,SAAM,IAAIoV,SAA4B,SAACY,EAAS4L,GAC1D09C,EAAUjoB,SAASU,KAAK,CACpBjS,WAAY,SAAO,G,IAAEtrB,EAAA,EAAAA,WAAYL,EAAA,EAAAA,M,6HAC7B,MAAc,cAAVA,EACO,CAAP,EAAOyH,EAAO,IAAI,KAGR,aAAVzH,GAA4CK,EAC5C,GAAMxU,KAAKu5D,gCAAgC/wD,EAAQ9I,SAAU8U,IAD7D,M,OAGA,OAFA,SAEO,CAAP,EAAOxE,K,OAGX,MAAc,aAAVmE,GAA4CK,EACrC,CAAP,EAAOxE,EAAQwE,IAGL,aAAVL,EACO,CAAP,EAAOyH,EAAO,IAAI,GAA2B,yFAGjDA,EAAO,IAAI,M,aAEf49C,WAAY,SAAAC,GACR,IAAK,EAAKhiC,iBAAmB,EAAKA,eAAe7oB,YAC7C,MAAM,IAAI,IAAiB,IAAqB5U,sBAGpDy/D,EAAU5/B,KAAK0N,MAAM,EAAK9P,eAAe7oB,qB,OAKrD,YAAchP,KAjCRgyB,EAAQ,UAkCH,CAAP,EAAO5xB,KAAK61B,OAAOe,SAAS52B,KAAK28C,sBAAsBhhC,cAAc,CACjEjc,SAAU8I,EAAQ9I,SAClBua,YAAa,CAAE2X,MAAK,OAIrB,CAAP,EAAO5xB,KAAK61B,OAAOzhB,oBAGvB,YAAAyhC,SAAA,WACI,OAAOzmC,QAAQwM,OAAO,IAAI,KAGtB,YAAA29C,gCAAR,SAAwCtvC,EAAkByvC,GACtD,IAAMv5D,EAAM,2BAA2B8pB,EAAQ,oBACzCrrB,EAAU,CACZtD,QAAS,CACL2E,OAAQ,IAAYC,OACpB,iBAAkB,MAEtB7E,KAAM,CACFq+D,WAAU,EACVzvC,SAAQ,IAIhB,OAAOjqB,KAAKtB,eAAewZ,KAAK/X,EAAKvB,IAE7C,EAtHA,G,GCbA,WACI,WACY2O,EACDC,QAAA,IAAAA,MAAA,QADC,KAAAD,gBACD,KAAAC,UAcf,OAXI,YAAAwuB,KAAA,sBACI,OAAOh8B,KAAKuN,cACPG,WAAW,wDACX1O,MAAK,WACF,IAAK,EAAKwO,QAAQmsD,IACd,MAAM,IAAI,IAGd,OAAO,EAAKnsD,QAAQmsD,QAGpC,EAjBA,GCwCe,SAASC,GACpBrnD,EACAsnD,EACAt7B,EACAu7B,EACAvsB,GAEA,IAAM9O,EAAW,IAAI,GAAwBlsB,EAAO,CAAEs0B,aAAc,GAAoB4U,cAClF/c,EAAe,4BACfq7B,EAA4B,IAAI,KAChCC,EAAuB,IAAI,KAAqBH,GAChDI,EAA8B,IAAI,IAA4B,IAAI,IAA4B17B,IAC9F27B,ECjDK,SAAyCx7B,GACpD,IAAMkQ,EAAwB,IAAI,IAAsBlQ,GAClDmQ,EAAsB,IAAI,IAAoBD,GAC9CurB,EAAU,IAAI,GAEpB,OAAO,IAAI,GAA0BtrB,EAAqBsrB,GD4CxBC,CAAgC17B,GAC5D27B,EAAwB,IAAI,IAAsB97B,GAClD+7B,EAAoB,IAAI,GAAkBD,GAC1CE,EAA8B,IAAI,GAA4BT,EAAgB,IAAI,GAA4Bv7B,IAC9G61B,EAAqB,IAAI,GAAmB,IAAI,GAAmB71B,GAAgB+7B,GACnFE,EAA2B,IAAI,GAAyB,IAAI,GAAyBj8B,IACrF81B,EAAuB,IAAI,GAAqB2F,EAAsB5F,EAAoB2F,GAC1FU,EAA6B,IAAI,IAA2B,IAAI,IAA2Bl8B,IAC3Fm8B,EAA8B,IAAI,GAA4B,IAAI,EAA4Bn8B,IAC9Fo8B,EAAsB,IAAI,IAAoB,IAAI,IAAoBp8B,IACtEI,EAAwB,IAAI,IAAsB07B,EAAuBM,GACzEC,EAA+B,IAAI,GAA6Bn8B,EAAU21B,EAAoBmG,GAC9F/7B,EAAa,6BACb81B,EAAoB,IAAI,GAAkB/hD,GA8ShD,OA5SAksB,EAASriB,SAAS,GAAoBy+C,SAAS,WAC3C,WAAI,GACAtoD,EACA8hD,EACAD,EACA,IAAI,GAAoB11B,EAAc,iCACtCF,EACA+O,MAIR9O,EAASriB,SAAS,GAAoB0+C,QAAQ,WAC1C,WAAI,GACAvoD,EACA6hD,EACAC,EACAoG,EACA,IAAI,OAIZh8B,EAASriB,SAAS,GAAoB2+C,UAAU,WAC5C,WAAI,GACAxoD,EACA+nD,EACAlG,EACAC,EACAoG,EACAD,EACA,IAAI,GAAqB97B,OAIjCD,EAASriB,SAAS,GAAoB4+C,QAAQ,WAC1C,WAAI,GACAzoD,EACA6hD,EACA6F,EACAS,EACA,IAAI,EAAsBh8B,OAIlCD,EAASriB,SAAS,GAAoBq/B,aAAa,WAC/C,WAAI,GACAlpC,EACA6hD,EACAC,EACAC,MAIR71B,EAASriB,SAAS,GAAoB6+C,aAAa,WAC/C,WAAI,GACA1oD,EACA6hD,EACAC,EACA,IAAI,GACA9hD,EACA8hD,EACAoG,EACA,IAAI,GAAe,IAAI,GAAqB/7B,SAKxDD,EAASriB,SAAS,GAAoB8+C,QAAQ,WAC1C,WAAI,GACA3oD,EACA6hD,EACAqG,EACAC,EACA,IAAI,GAAmBh8B,OAI/BD,EAASriB,SAAS,GAAoBm/B,QAAQ,WAC1C,WAAI,GACAhpC,EACA6hD,MAIR31B,EAASriB,SAAS,GAAoBrf,SAAS,WAC3C,WAAI,GACAwV,EACA6hD,MAIR31B,EAASriB,SAAS,GAAoBo/B,SAAS,WAC3C,WAAI,GACAjpC,EACA6hD,EACAC,MAIR51B,EAASriB,SAAS,GAAoB++C,QAAQ,WAC1C,WAAI,GACA5oD,EACA6hD,EACAC,EACA,IAAI,GACA9hD,EACA8hD,EACAoG,EACA,IAAI,GAAe,IAAI,GAAqB/7B,SAKxDD,EAASriB,SAAS,GAAoBg/C,gBAAgB,WAClD,WAAI,GACA7oD,EACA6hD,EACA,IAAI,KAAmB11B,OAI/BD,EAASriB,SAAS,GAAoBi/C,uBAAuB,WACzD,WAAI,GACA9oD,EACA6hD,EACA,IAAI,KAAmB11B,OAI/BD,EAASriB,SAAS,GAAoBk/C,UAAU,WAC5C,WAAI,GACA/oD,EACA6hD,EACAC,EACAC,EACA91B,MAIRC,EAASriB,SAAS,GAAoBm/C,QAAQ,WAC1C,WAAI,GACAhpD,EACAosB,EACAy1B,EACAC,EACAoG,EACAG,EACAr8B,EACA,IAAI,GAAmBG,OAI/BD,EAASriB,SAAS,GAAoBw5B,0BAA0B,WAC5D,WAAI,GACArjC,EACA6hD,MAIR31B,EAASriB,SAAS,GAAoBo/C,WAAW,WAC7C,WAAI,GACAjpD,EACA6hD,EACAC,EACAoG,EACAP,MAIRz7B,EAASriB,SAAS,GAAoBwiB,kBAAkB,WACpD,WAAI,GACArsB,EACA6hD,EACAC,EACAoG,EACAP,MAIRz7B,EAASriB,SAAS,GAAoByiB,yBAAyB,WAC3D,WAAI,GACAtsB,EACA6hD,EACAC,EACAoG,EACAP,GACA,MAIRz7B,EAASriB,SAAS,GAAoBq/C,yBAAyB,WAC3D,WAAI,GACAlpD,EACAosB,EACA87B,EACAG,EACAvG,EACAD,EACAzlB,EAA4CjQ,EAAcH,GAC1D,IAAI,EAAyBG,OAIrCD,EAASriB,SAAS,GAAoBs/C,WAAW,WAC7C,WAAI,GACAnpD,EACAosB,EACAy1B,EACAC,EACAoG,EACAG,EACAr8B,EACA,IAAI,EAAqBG,GACzB,IAAI,GAAgBA,OAI5BD,EAASriB,SAAS,GAAoBu/C,sBAAsB,WACxD,WAAI,GACAppD,EACAosB,EACA87B,EACAG,EACAvG,EACAD,EACA,YACI7hD,EACA,IAAI,IACA,IAAI,IACA,IAAI,IAAsBmsB,UAO9CD,EAASriB,SAAS,GAAoBw/C,QAAQ,WAC1C,WAAI,GACArpD,EACA6hD,EACAC,EACAC,EACA,IAAI,GAAgB51B,OAI5BD,EAASriB,SAAS,GAAoB0iB,YAAY,WAC9C,WAAI,GACAvsB,EACA6hD,EACAC,EACA,IAAI,IAAuB31B,OAInCD,EAASriB,SAAS,GAAoBy/C,mBAAmB,WACrD,WAAI,GACAtpD,EACAosB,EACA87B,EACAG,EACAvG,EACAD,EACA,YACI7hD,EACA,IAAI,SAKhBksB,EAASriB,SAAS,GAAoB0/C,KAAK,WACvC,WAAI,GACAvpD,EACA6hD,EACAC,EACAoG,EACAD,EACA,IAAI,GAAgB97B,GACpBH,MAIRE,EAASriB,SAAS,GAAoB2/C,UAAU,WAC5C,WAAI,GACAxpD,EACA6hD,EACAC,EACA71B,MAIRC,EAASriB,SAAS,GAAoB4/C,UAAU,WAC5C,WAAI,GACAzpD,EACAkoD,EACApG,EACAD,EACA,IAAI,GAAmB11B,OAIxBD,E,gBExWX,WACI,WACYw9B,GAAA,KAAAA,2BAyHhB,OAtHI,YAAAC,gBAAA,sBACI,OAAO,SAAA3pD,GAAS,oBAAWla,QAAO,SAACwG,GAC/BA,EAASC,KAAK,uBAAa,KAAqB8mB,2BAEhD,IAAMu2C,EAAU,EAAKC,mBAAmB7pD,GAClCnW,EAAQ,EAAKigE,uBAAuB9pD,GACpC6C,EAAkB,EAAK4sC,oBAAoBzvC,GAEjD,OAAO,EAAK+pD,qBAAqBlgE,GAC5B4C,MAAK,SAAAu9D,GACF,SAAKN,yBAAyBC,gBAAgB,yCACnCC,GAAO,CACVniD,UAAWuiD,EAAapiD,mBAE5B/E,GAECpW,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBACV,KAAqB2mB,yBACrBpqB,EACAkhE,IAEJ19D,EAASQ,iBAGpBC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,KAAqBymB,sBAAuBxqB,YAK7F,YAAAghE,iBAAA,SAAiB1gE,GAAjB,WACI,OAAO,SAAAyW,GAAS,oBAAWla,QAAO,SAACwG,GAC/BA,EAASC,KAAK,uBAAa,KAAqB+mB,+BAA2BjmB,EAAW,CAAE9D,aAAY,KAEpG,IAAMqgE,EAAU,EAAKC,mBAAmB7pD,GAClCnW,EAAQ,EAAKigE,uBAAuB9pD,GAE1C,OAAO,EAAK+pD,qBAAqBlgE,GAC5B4C,MAAK,SAAAu9D,GACF,SAAKN,yBAAyBO,iBAAiB,yCACxCL,GAAO,CACVniD,UAAWuiD,EAAapiD,mBACzBre,GACEkD,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,KAAqB6mB,0BAA2BtqB,EAAM,oBAC7ES,aAAY,GACTygE,KAEP19D,EAASQ,iBAGpBC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,KAAqB0mB,uBAAwBzqB,EAAU,CAAEM,aAAY,aAK9G,YAAA2gE,yBAAR,SAAiCrgE,GAC7B,IAAKA,IAAUA,EAAM+d,iBACjB,OAAO,EAGX,IChF2BuiD,EAAYx7D,EACrCy7D,EDkFF,OEnFO,SAAkBD,GAC7B,OAAOA,EAAKE,UAAYl6D,KAAKg/B,MFkFlBm7B,ECnFoBH,EDiFD,IAAIh6D,KAAKtG,EAAM0gE,mBCjFF57D,EDgFlB,GC/EnBy7D,EAAU,IAAIj6D,KAAKg6D,EAAK/5D,YAEtBo6D,WAAWL,EAAKM,aAAe97D,GAEhCy7D,KDiFC,YAAAN,uBAAR,SAA+B9pD,GACnB,IACFtT,EADE,aAAAya,YACiBC,qBAEzB,GAAK1a,EAIL,MAAO,CACHkb,iBAAkBlb,EAAKkb,iBACvB2iD,kBAAmB79D,EAAK69D,oBAIxB,YAAAR,qBAAR,SAA6BlgE,GACzB,OAAOA,GAAS4D,KAAKy8D,yBAAyBrgE,GAC1CgT,QAAQY,QAAQ5T,GAChB4D,KAAKi8D,yBAAyBgB,sBAAsBj+D,MAAK,SAAC,GAAa,OAAX,EAAA3D,SAG5D,YAAA2mD,oBAAR,SAA4BzvC,GAGxB,OAFcA,EAAM6B,WAEPgB,gBAAgB+D,sBAGzB,YAAAijD,mBAAR,SAA2B7pD,GACvB,IAAM4B,EAAQ5B,EAAM6B,WACdE,EAASH,EAAMG,OAAOiF,iBACtBlN,EAAO8H,EAAM9H,KAAKiJ,UAExB,IAAKhB,EACD,MAAM,IAAI,IAAiB,IAAqB5a,uBAGpD,IAAK2S,EACD,MAAM,IAAI,IAAiB,IAAqB9S,aAOpD,MAAO,CACHgO,WALI,EAAAA,WAMJ21D,QALI,eAAAA,QAMJ30B,cALI,gEAAAjgC,OAQhB,EA3HA,GGHA,I,GAAA,yBAoDA,OAnDI,YAAA60D,kBAAA,SACI3hE,GAEA,IAAM,6BAAEH,EAAA,EAAAA,KAAM,+BAEd,OAAO,yCACA8W,GAAO,CACV9W,KAAM,CACFqqB,mBAAoB1lB,KAAKo9D,6BAA6B/hE,EAAKgiE,yBAKvE,YAAAC,uBAAA,SACI9hE,GAEA,OAAOwE,KAAK6b,mBAAmBrgB,IAGnC,YAAA+hE,6BAAA,SACI/hE,GAEA,OAAO,yCACAA,GAAQ,CACXH,KAAM,CACF8e,iBAAkB3e,EAASH,KAAKsf,KAAKve,MACrC0gE,kBAAmBthE,EAASH,KAAKsf,KAAK6iD,eAK1C,YAAAJ,6BAAR,SAAqC13C,GACjC,YADiC,IAAAA,MAAA,IAC1BA,EACF5kB,KAAI,SAAAlF,GACD,OAAQA,EAAW6hE,aACf,IAAK,SACD,OC3CjB,SAAgC7hE,GACnC,MAAO,CACH2zB,YAAa3zB,EAAWO,aACxBuhE,kBAAmB9hE,EAAW+hE,mBAC9B1zC,SAAUruB,EAAWquB,SACrByvC,WAAY99D,EAAWgiE,YACvBC,uBAAwBjiE,EAAWkiE,yBACnCp3D,OAAQ9K,EAAW6hE,YACnBpkE,KAAM,WDmCiB0kE,CAAuBniE,GAClC,QACI,OE7CjB,SAA6BA,GAChC,MAAO,CACH2zB,YAAa3zB,EAAWO,aACxBuhE,kBAAmB9hE,EAAW+hE,mBAC9B1zC,SAAUruB,EAAWquB,SACrBwhC,IAAK7vD,EAAW6vD,IAChB1hB,MAAOnuC,EAAWoiE,OAClBC,YAAariE,EAAWsiE,aACxBC,WAAYviE,EAAWwiE,YACvBv6D,MAAOjI,EAAWiI,MAClBg6D,uBAAwBjiE,EAAWkiE,yBACnCp3D,OAAS9K,EAAW8K,OACpBrN,KAAM,QFiCiBglE,CAAoBziE,QAKvC,YAAAigB,mBAAR,SAA8BrgB,GAClB,QAAAmf,KAAY,+BAEpB,OAAO,yCACAxI,GAAO,CACV9W,KAAI,KAGhB,EApDA,G,GGCA,WAGI,WACY2T,EACAtQ,GADA,KAAAsQ,UACA,KAAAtQ,iBAERsB,KAAKs+D,aAAe,IAAI,GAkFhC,OA/EI,YAAArB,oBAAA,SACI,G,IAAEl9D,QAAA,YAAAA,QAIF,OAAOC,KAAKtB,eAAe9G,IAFf,uDAEwB,CAAEmI,QAAO,IAAIf,MAAK,SAAAxD,GAAY,OAAC,kBAAD,CAAC,sBAC5DA,GAAQ,CACXH,KAAM,CACF8e,iBAAkB3e,EAASH,KAAKsf,KAAKve,MACrC0gE,kBAAmBthE,EAASH,KAAKsf,KAAK6iD,kBAKlD,YAAAtB,gBAAA,SACIqC,EACAnpD,GAEA,OAAO,EACHpV,KAAKw+D,4BAA4BD,EAAgBnpD,GACjDpV,KAAKy+D,iBAAiBF,IAG9B,YAAA/B,iBAAA,SACI+B,EACAziE,GAFJ,WAIUqW,EAAU,yCACTosD,GAAc,CACjBziE,aAAY,IAGhB,OAAO,IAAIsT,SAAQ,SAACY,EAAS4L,GACzB,EAAK5M,QAAQ0vD,wBACTvsD,GAAS,SACL4K,EACAvhB,GACE,OAAAuhB,EACFnB,EAAO,EAAK0iD,aAAahB,uBAAuBvgD,IAChD/M,EAAQ,EAAKsuD,aAAanB,kBAAkB3hE,WAKpD,YAAAijE,iBAAR,SACIF,GADJ,WAGI,OAAO,IAAInvD,SAAQ,SAACY,EAAS4L,GACzB,EAAK5M,QAAQktD,gBACTqC,GAAgB,SACZxhD,EACAvhB,GACC,OAAAuhB,EACDnB,EAAO,EAAK0iD,aAAahB,uBAAuBvgD,IAChD/M,EAAQ,EAAKsuD,aAAanB,kBAAkB3hE,WAKpD,YAAAgjE,4BAAR,SACID,EACAnpD,GAFJ,WAIUjD,EAAU,yCACTosD,GAAc,CACjBnpD,gBAAiB,aAAqBA,KAG1C,OAAO,IAAIhG,SAAQ,SAACY,EAAS4L,GACzB,EAAK5M,QAAQ2vD,2BACTxsD,GAAS,SACL4K,EACAvhB,GACC,OAAAuhB,EACDnB,EAAO,EAAK0iD,aAAahB,uBAAuBvgD,IAChD/M,EAAQ,EAAKsuD,aAAanB,kBAAkB3hE,WAIhE,EAzFA,G,gCCFA,WACI,WACYojE,GAAA,KAAAA,gCAiBhB,OAdI,YAAAxqB,cAAA,SAAcx1C,GAAd,WACI,OAAO,aAAWvG,QAAO,SAACwG,GACtBA,EAASC,KAAK,uBAAa,KAA0BooB,iCAErD,EAAK03C,8BAA8BxqB,cAAcx1C,GAC5CI,MAAK,SAAAxD,GACFqD,EAASC,KAAK,uBAAa,KAA0BmoB,+BAAgCzrB,EAASH,KAAKsf,OACnG9b,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,KAA0B4nB,4BAA6B3rB,WAI5G,EAnBA,G,GCHA,WACI,WACYkD,EACA21C,GADA,KAAA31C,iBACA,KAAA21C,UAWhB,OARI,YAAAD,cAAA,SAAc,G,IAAEr0C,QAAA,YAAAA,QAENzE,EAAU,CACZ,kBAAmB0E,KAAKq0C,QAAQ9G,QAGpC,OAAOvtC,KAAKtB,eAAe9G,IALf,qCAKwB,CAAE0D,QAAO,EAAEyE,QAAO,KAE9D,EAdA,G,YCMA,WACI,WACYqsC,GAAA,KAAAA,oBAyFhB,OAtFI,YAAAz1B,cAAA,SAAc1Z,EAAsC2B,GAApD,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAM2J,EAAU+J,EAAM6B,WAAW5L,QAAQokB,eACnCltB,EAAWd,GAAWA,EAAQc,UAAY8I,GAAWA,EAAQY,WAEnEvK,EAASC,KAAK,uBAAa,KAA2BuoB,4BAAwBznB,EAAW,CAAEF,SAAQ,KAEnG,EAAK0sC,kBAAkBx0C,IAAI8H,GACtBiX,cAAc1Z,EAAS,yCAAK2B,GAAO,CAAEc,SAAQ,KAC7CV,MAAK,WACFH,EAASC,KAAK,uBAAa,KAA2BwoB,4BAAwB1nB,EAAW,CAAEF,SAAQ,KACnGb,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,KAA2BkoB,oBAAqBloB,EAAO,CAAEG,SAAQ,aAKlH,YAAAm/D,aAAA,SAAa9oD,EAA0BnX,GAAvC,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAM2J,EAAU+J,EAAM6B,WAAW5L,QAAQokB,eACnCltB,EAAWd,GAAWA,EAAQc,UAAY8I,GAAWA,EAAQY,WAEnEvK,EAASC,KAAK,uBAAa,KAA2B4oB,2BAAuB9nB,EAAW,CAAEF,SAAQ,KAElG,EAAK0sC,kBAAkBx0C,IAAI8H,GACtBm/D,aAAa9oD,EAAkB,yCAAKnX,GAAO,CAAEc,SAAQ,KACrDV,MAAK,WACFH,EAASC,KAAK,uBAAa,KAA2B6oB,2BAAuB/nB,EAAW,CAAEF,SAAQ,KAClGb,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,KAA2BuoB,mBAAoBvoB,EAAO,CAAEG,SAAQ,aAKjH,YAAAiP,WAAA,SAAW/P,GAAX,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMsV,EAAQ5B,EAAM6B,WACd5L,EAAU2L,EAAM3L,QAAQokB,eACxBltB,EAAWd,GAAWA,EAAQc,UAAY8I,GAAWA,EAAQY,WAC7D01D,EAAgB,yCAAKlgE,GAAO,CAAEc,SAAQ,IAE5C,GAAIA,GAAYyU,EAAMme,mBAAmBjR,cAAc3hB,GACnD,OAAOb,EAASQ,WAGpBR,EAASC,KAAK,uBAAa,KAA2ByiB,yBAAqB3hB,EAAW,CAAEF,SAAQ,KAEhG,EAAK0sC,kBAAkBx0C,IAAI8H,GACtBiP,WAAWmwD,GACX9/D,MAAK,WACFH,EAASC,KAAK,uBAAa,KAA2BsiB,yBAAqBxhB,EAAW,CAAEF,SAAQ,KAChGb,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,KAA2BmiB,iBAAkBniB,EAAO,CAAEG,SAAQ,aAK/G,YAAAo3B,aAAA,SAAal4B,GAAb,WACI,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMsV,EAAQ5B,EAAM6B,WACd5L,EAAU2L,EAAM3L,QAAQokB,eACxBltB,EAAWd,GAAWA,EAAQc,UAAY8I,GAAWA,EAAQY,WAEnE,GAAI1J,IAAayU,EAAMme,mBAAmBjR,cAAc3hB,GACpD,OAAOb,EAASQ,WAGpBR,EAASC,KAAK,uBAAa,KAA2B6iB,2BAAuB/hB,EAAW,CAAEF,SAAQ,KAElG,EAAK0sC,kBAAkBx0C,IAAI8H,GACtBo3B,aAAa,yCAAKl4B,GAAO,CAAEc,SAAQ,KACnCV,MAAK,WACFH,EAASC,KAAK,uBAAa,KAA2BwiB,2BAAuB1hB,EAAW,CAAEF,SAAQ,KAClGb,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,KAA2BuiB,mBAAoBviB,EAAO,CAAEG,SAAQ,aAIrH,EA3FA,G,GCKA,WAII,WACYm2B,EACAkpC,EACA9nC,EACA2Z,EACArjC,GAJA,KAAAsoB,SACA,KAAAkpC,4BACA,KAAA9nC,8BACA,KAAA2Z,+BACA,KAAArjC,gBAERvN,KAAKwN,QAAU8K,OA6IvB,OA1II,YAAA3J,WAAA,SAAW/P,GAAX,WACY,IAAAkuC,OAAuBptC,EAAA,EAAAA,SAE/B,IAAKmxC,IAAkBnxC,EACnB,MAAM,IAAI,KAAqB,wEAGnC,OAAOM,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GAAS,WAAI/E,SAAQ,SAACY,EAAS4L,GAGjC,GAFA,EAAK6b,eAAiBtjB,EAAM6E,eAAeC,iBAAiBvZ,IAEvD,EAAK+3B,eACN,MAAM,IAAI,IAAiB,IAAqBz9B,sBASpD,EAAKuT,cAAck/B,WAAW,EAAKhV,gBANnB,WACZ,EAAKunC,mBAAmBnuB,GACnB7xC,KAAKgR,GACL1Q,MAAMsc,MAIVtc,MAAMsc,SAEd5c,MAAK,WAAM,SAAK62B,OAAOzhB,eAGhC,YAAA0iB,aAAA,WAGI,OAFA92B,KAAKy3B,oBAAiB73B,EAEfwP,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAuC,cAAA,WACI,OAAOvH,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAAyqD,aAAA,SAAaI,EAAkBrgE,GAC3B,OAAOoB,KAAK61B,OAAOe,SACf52B,KAAK++D,0BAA0BnpD,qBAAqBqpD,EAAUrgE,KAI9D,YAAAogE,mBAAR,SAA2BpgE,GAA3B,WACI,OAAO,IAAIwQ,SAAQ,SAACY,EAAS4L,GACjB,IAAA6a,EAAA,EAAAA,UAAW,IAAAyoC,uBAAA,IAAkB,EAAlB,eAA4B,IAAAnmC,eAAA,IAAU,EAAV,eAAoB,IAAAitB,eAAA,IAAU,EAAV,eAC7DnpB,EAAa,EAAKpF,gBAAkB,EAAKA,eAAenjB,OAAOuoB,WAErE,IAAKz3B,SAASg2B,eAAe3E,GACzB,OAAO7a,EAAO,IAAI,KAAqB,8EAG3C,IAAK,EAAKpO,QAAQ2/B,kBACd,OAAOvxB,EAAO,IAAI,KAAoB,KAAwB7J,yBAGlE,IAAK8qB,EACD,OAAOjhB,EAAO,IAAI,IAAiB,IAAqB5hB,uBAG5D,IAAMwsD,EAAS,IAAI,EAAKh5C,QAAQ2/B,kBAAkBsZ,QAAQ0Y,YAAY,CAClEhZ,OAAQ,CACJC,WAAY,cAEhBlV,MAAO,6EACPuU,SAAU5oB,EACVqiC,gBAAiB,SAAA7Y,GACb,EAAK+Y,8BACApgE,MAAK,WAAM,OAAAkgE,EAAgB7Y,MAC3B/mD,MAAMy5B,IAEfA,QAAS,SAAAx5B,GACLqc,EAAOrc,GACPw5B,EAAQx5B,IAEZymD,QAAS,SAAAK,GACL,EAAKE,sBAAsBF,GACtBrnD,MAAK,WACFgR,IACAg2C,EAAQK,MAEX/mD,MAAMy5B,MAMnB,OAFAytB,EAAOjuD,KAAKk+B,GAEL+vB,MAIP,YAAA4Y,4BAAR,sBACU1/D,EAAWM,KAAKy3B,gBAAkBz3B,KAAKy3B,eAAer6B,GACtD0vC,EAAS9sC,KAAK61B,OAAOzhB,WAAWge,eAAe1d,YAAY,UAC3D6wC,EAAczY,EAASA,EAAOyY,iBAAc3lD,EAElD,IAAKF,IAAa6lD,EACd,MAAM,IAAI,KAGd,OAAOvlD,KAAK61B,OAAOe,SACf,uBAAa,KAA2BvP,4BAAwBznB,EAAW,CAAEF,SAAQ,KAEpFV,MAAK,WAAM,SAAK62B,OAAOe,SACpB,EAAKga,6BAA6B1B,mBAAmBxvC,EAAU,CAAE6lD,YAAW,QAE/EvmD,MAAK,SAAAmV,GACF,IAAM24B,EAAS34B,EAAMie,eAAe1d,YAAY,UAC1CiyC,EAAgB7Z,GAAUA,EAAO7iC,UAAY6iC,EAAO7iC,SAAShN,QAC7DA,EAAUkX,EAAMiB,gBAAgB+D,qBAEtC,IAAsB,IAAlBwtC,EACA,MAAM,IAAI,KAGd,OAAKA,GAAiB3B,GAAuB2B,EAAe1pD,GAAW,IAC5D,EAAK44B,OAAOzhB,WAGhB,EAAKyhB,OAAOe,SACf,EAAKmoC,0BAA0BpoD,cAAcuuC,GAAuByB,QAG3E3nD,MAAK,WAAM,SAAK62B,OAAOe,SACpB,uBAAa,KAA2BtP,4BAAwB1nB,EAAW,CAAEF,SAAQ,QAExFJ,OAAM,SAAAC,GAAS,SAAKs2B,OAAOe,SACxB,4BAAkB,KAA2BnP,oBAAqBloB,EAAO,CAAEG,SAAQ,SAIvF,YAAA6mD,sBAAR,SAA8BF,GAC1B,OAAOrmD,KAAK61B,OAAOe,SACf52B,KAAK4wC,6BAA6Bn8B,eAAe,SAAU,CACvD8wC,YAAac,EAAeQ,gCAI5C,EAxJA,G,GCVA,WACI,WACYhxB,EACAkpC,GADA,KAAAlpC,SACA,KAAAkpC,4BAsBhB,OAnBI,YAAApoD,cAAA,SAAc1Z,EAA6B2B,GACvC,OAAOoB,KAAK61B,OAAOe,SACf52B,KAAK++D,0BAA0BpoD,cAAc1Z,EAAS2B,KAI9D,YAAAigE,aAAA,SAAaI,EAAkBrgE,GAC3B,OAAOoB,KAAK61B,OAAOe,SACf52B,KAAK++D,0BAA0BnpD,qBAAqBqpD,EAAUrgE,KAItE,YAAA+P,WAAA,WACI,OAAOS,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAGvC,YAAA0iB,aAAA,WACI,OAAO1nB,QAAQY,QAAQhQ,KAAK61B,OAAOzhB,aAE3C,EAzBA,GCGA,ICPKirD,GDOL,cACI,WACY7xD,QAAA,IAAAA,MAAkC8K,QAAlC,KAAA9K,UAMhB,OAHI,YAAAnV,OAAA,SAAOinE,GACH,OAAO,IAAIt/D,KAAKwN,QAAQ+xD,iBAAiBD,IAEjD,EARA,G,WEHA,YACI,mBACI,YAAM,qDAAmD,K,OAEzD,EAAKhoE,KAAO,+BACZ,EAAK+B,KAAO,yB,EAEpB,OAP0D,yBAO1D,EAPA,CAA0D,M,GCA1D,YACI,mBACI,YAAM,0EAAyE,K,OAE/E,EAAK/B,KAAO,2CACZ,EAAK+B,KAAO,0C,EAEpB,OAPsE,yBAOtE,EAPA,CAAsE,M,GCStE,WAKI,WACYmmE,EACAC,GADA,KAAAD,8BACA,KAAAC,0BAERz/D,KAAK0/D,UAAY,oBAAQ,SAACC,EAAkCC,EAAiBnpC,GACzE,IAAMopC,EAAS,IAAI,UAEnB,IAAKppC,EACD,MAAM,IAAI37B,MAmBd,OAhBA6kE,EAAU3nC,OAAOvB,EAAUr5B,GAAI,CAC3BwiE,QAAO,EACPz9B,KAAM,YACNm9B,SAAU,WACNO,EAAO/gE,KAAK,CACR1C,MAAOujE,EAAUG,gBAErBH,EAAUI,SAEd,iBAAkB,WACdF,EAAO/gE,KAAK,CACRS,MAAO,IAAI,QAKhBsgE,IACR,CAAE19D,QAAS,SAAC69D,EAAGC,GAAM,OAAAD,IAAMC,KAsEtC,OAnEI,YAAAjkC,KAAA,SAAKlc,EAAqB8/C,GAA1B,WACI,OAAO5/D,KAAKw/D,4BAA4BxjC,OACnCh9B,MAAK,SAAA2gE,GACF,EAAKO,QAAU,EAAKR,UAAUC,EAAWC,EAASx6D,SAASg2B,eAAetb,IAE1E,EAAKqgD,WAAaR,MAI9B,YAAAlqB,QAAA,sBACUoqB,EAAS7/D,KAAKkgE,QACdP,EAAY3/D,KAAKmgE,WAEvB,IAAKN,IAAWF,EACZ,MAAM,IAAI,KAAoB,KAAwB3tD,8BAO1D,OAAO,iBAAM,WACT,IAAMu1C,EAAUniD,SAASq4B,cAAc,yBAEvC,OAAO8pB,EACH,aAAGA,GACH,qBAAW,IAAI,OAElBj1C,KACG,sBAAU,SAAA7W,GAAU,OAAAA,EAAO6W,KACvB,iBAZU,KAaV,sBAAU,SAAC/S,EAAOiD,GACd,OAAAA,EAbGzC,GAakB,aAAGR,GAAS,qBAAWA,UAGpD,sBAAU,SAAAgoD,GAIN,OAHA,EAAK6Y,+BAA+BP,EAAQtY,GAC5CoY,EAAUlqB,UAEHoqB,KAEX,uBAAW,SAAAtgE,GAAS,oBAAG,CAAEA,MAAK,SAIlC,YAAA6gE,+BAAR,SAAuC7sC,EAAiCg0B,GACpE,IAAM8Y,EAAkB9Y,EAAQrP,cAEhC,IAAKmoB,EACD,MAAM,IAAI,GAGd,IAAM5pC,EAAY4pC,EAAgBnoB,cAElC,IAAKzhB,EACD,MAAM,IAAI,GAGdz2B,KAAKy/D,wBAAwBpnE,QAAO,WAEG,WAA/Bo+B,EAAU+B,MAAMoJ,YAChBrO,EAAMz0B,KAAK,CACPS,MAAO,IAAI,QAGpB+gE,QAAQ7pC,EAAW,CAAE30B,YAAY,EAAMy+D,gBAAiB,CAAC,YAEpE,EAvGA,G,GCbA,WAGI,WACYhzD,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UA4BhB,OAzBI,YAAAwuB,KAAA,WAKI,OAJKh8B,KAAKwgE,eACNxgE,KAAKwgE,aAAexgE,KAAKygE,eAGtBzgE,KAAKwgE,cAGR,YAAAC,YAAR,sBAEUnqD,EAAS,CACX,uBACA,mBACFhW,KAAK,KAEP,OAAO,IAAI8O,SAAQ,SAACY,EAAS4L,GACzB,EAAKpO,QAAoB,cAAI,WAAM,OAAAwC,EAAQ,EAAKxC,QAAQkzD,aAExD,EAAKnzD,cAAcG,WAAW,qCAAqC4I,GAC9DhX,OAAM,SAAAC,GACH,EAAKihE,kBAAe5gE,EACpBgc,EAAOrc,UAI3B,EAjCA,IJAA,SAAK8/D,GACD,4BADJ,CAAKA,QAAoB,K,uBKEnBsB,GAAY,oBAAQ,SAAIC,GAC1B,OAAIt+D,MAAMC,QAAQq+D,GACPA,EAAM9/D,KAAI,SAAC9I,GAAsB,OACpC6oE,GAAc7oE,MAIlB,aAAc4oE,GACNnpE,OAAOkJ,KAAKigE,GACfhgE,QAAO,SAACC,EAAQvI,G,MAAQ,OAAC,kBAAD,CAAC,sBACnBuI,KAAM,MACRvI,GAAMuoE,GAAcD,EAAMtoE,IAAK,MAChC,IAGLsoE,KAMXD,GAAU1rC,MAAQ,IAAIpiB,QAQtB,IAAMguD,GAAgB,SAAID,GACtB,MAAwB,iBAAVA,GAAgC,OAAVA,EAChCD,GAAUC,GACVA,GAOO,SAASE,GAA4BzuD,GAChD,OAAO,W,IAAE,sDAAmB,OAAAwuD,GAAcxuD,EAAE,aAAInM,K,0CCvC9C66D,GAA6B,iCAC/B,mBACA,SAACf,EAAQC,GAAW,YAAaD,EAAGC,MAGzB,gBAAqBc,ICN7B,SAASC,KACZ,ICsOMtsD,EAKAoE,EAKAyU,EAKApU,EAiCA8nD,EAWAprD,EAKAqrD,EAaA1wC,EAKA5X,EAqCAuoD,EAKAtxC,EAKA5W,EAKAmoD,EAUA9rD,EAKA8W,EAKAsC,EAKA7V,EAKAkU,EAKAC,EAQAyC,EAcAnG,EAQAP,EC/KAs4C,EAaAC,EC6CAC,EAQAC,EAWAC,EAeAC,EAeAC,EHzWAC,GCsOAltD,EAAc,cAChB,SAAC,GAA4C,OAA1C,EAAAxI,SAAmDwI,eACtD,SAAAA,GAAe,UAAMA,MAGnBoE,EAAW,cACb,SAAC,GAAyC,OAAvC,EAAA/Q,MAA6C+Q,YAChD,SAAAA,GAAY,UAAMA,MAGhByU,EAAY,cACd,SAAC,GAA0C,OAAxC,EAAAjZ,OAA+CiF,kBAClD,SAAAA,GAAkB,UAAMA,MAGtBJ,EAAqB,cACvB,SAAC,GAAmD,OAAjD,EAAA/D,gBAAiE+D,sBACpE,SAAC,GAA0C,OAAxC,EAAA7E,OAA+CC,oBAClD,SAAC4E,EAAoB5E,GAAqB,WAAM,WAC5C,IAAMa,EAAkB+D,IAClB9E,EAAUE,IAEhB,IAAKa,EAAiB,CAClB,IAAKf,IAAYA,EAAQiG,eACrB,OAGJ,MAAO,CACH/c,UAAW,GACXC,SAAU,GACVC,QAAS,GACTE,SAAU,GACVE,SAAU,GACVC,KAAM,GACNE,gBAAiB,GACjBE,oBAAqB,GACrBE,WAAY,GACZC,QAAS,GACTE,MAAO,GACPC,aAAc,GACdF,YAAa+V,EAAQiG,gBAI7B,OAAOlF,QAIT6rD,EAAqB,cACvB,SAAC,GAAgD,OAA9C,EAAA/jE,aAA2D2Y,mBAC9D,SAAAA,GAAmB,WAAM,WACrB,IAAM3Y,EAAe2Y,IAErB,GAAI3Y,GAAgBA,EAAaI,OAC7B,OAAOJ,EAAa,GAAG2kE,+BAK7BhsD,EAAkB,cACpB,SAAC,GAAgD,OAA9C,EAAA3Y,aAA2D2Y,mBAC9D,SAAAA,GAAmB,UAAMA,MAGvBqrD,EAA4B,cAC9B,SAAC,GAAgD,OAA9C,EAAAhkE,aAA2D2Y,mBAC9D,SAAAA,GAAmB,WAAM,WACrB,IAAM3Y,EAAe2Y,IAErB,GAAK3Y,GAAiBA,EAAaI,OAInC,OAAOJ,EAAa,GAAG2d,6BAIzB2V,EAAuB,cACzB,SAAC,GAAqD,OAAnD,EAAA6B,kBAAqE7B,wBACxE,SAAAA,GAAwB,UAAMA,MAG5B5X,EAAoB,cACtB,SAAC,GAAkD,OAAhD,EAAAvR,eAA+DuR,qBAClE,SAAC,GAA0C,OAAxC,EAAAtE,OAA+CC,oBAClD,SAACqE,EAAmBrE,GAAqB,WAAM,WAC3C,IAAMlN,EAAiBuR,IACjBvE,EAAUE,IAIhB,QAH+BlN,GAC3B,kBAAO,gBAAKA,EAAgB,QAAS,OAAO0rB,OAAM,SAAA+uC,GAAO,OAACA,IAAQA,EAAIxkE,YAGjE+W,GAAYA,EAAQiG,eAIlB,CACHld,GAAIiK,EAAiBA,EAAejK,GAAK,GACzCG,UAAW,GACXC,SAAU,GACVC,QAAS,GACTE,SAAU,GACVE,SAAU,GACVC,KAAM,GACN4J,MAAOL,EAAiBA,EAAeK,MAAQ,GAC/C1J,gBAAiB,GACjBE,oBAAqB,GACrBE,WAAY,GACZC,QAAS,GACTE,MAAO,GACPC,aAAc,GACdF,YAAa+V,EAAQiG,gBAItBjT,QAIT85D,EAAsB,cACxB,SAAC,GAA6C,OAA3C,EAAAn4C,UAAqD4E,gBACxD,SAAAA,GAAgB,UAAMA,MAGpBiC,EAAoB,cACtB,SAAC,GAAkD,OAAhD,EAAA7W,eAA+D6W,qBAClE,SAAAA,GAAqB,UAAMA,MAGzB5W,EAAmB,cACrB,SAAC,GAAkD,OAAhD,EAAAD,eAA+DC,oBAClE,SAAAA,GAAoB,UAAMA,MAGxBmoD,EAA2B,cAC7B,SAAC,GAA2C,OAAzC,EAAA54D,QAAiDokB,gBACpD,SAAC,GAAkD,OAAhD,EAAA5T,eAA+DC,oBAClE,SAAC2T,EAAc3T,GAAqB,WAAM,WACtC,IAAMzQ,EAAUokB,IAEhB,OAAOpkB,GAAWyQ,EAAiBzQ,EAAQY,WAAYZ,EAAQ0Q,iBAIjE5D,EAAU,cACZ,SAAC,GAAwC,OAAtC,EAAAjJ,KAA2CiJ,WAC9C,SAAAA,GAAW,UAAMA,MAGf8W,EAAa,cACf,SAAC,GAA2C,OAAzC,EAAAtjB,QAAiDsjB,cACpD,SAAAA,GAAc,UAAMA,MAGlBsC,EAAsB,cACxB,SAAC,GAAoD,OAAlD,EAAA7hB,iBAAmE6hB,uBACtE,SAAAA,GAAuB,UAAMA,MAG3B7V,EAAc,cAChB,SAAC,GAA4C,OAA1C,EAAAzR,SAAmDyR,eACtD,SAAAA,GAAe,UAAMA,MAGnBkU,EAAwB,cAC1B,SAAC,GAA2C,OAAzC,EAAAvkB,QAAiDukB,yBACpD,SAAAA,GAAyB,UAAMA,MAG7BC,EAAyB,cAC3B,SAAC,GAA2C,OAAzC,EAAAxkB,QAAiDwkB,0BACpD,SAAC,GAAkD,OAAhD,EAAAhU,eAA+DC,oBAClE,SAAC+T,EAAwB/T,GAAqB,WAAM,SAACvZ,EAAkBwZ,GACnE,OAAO8T,EAAuB/T,EAAiBvZ,EAAUwZ,UAI3DuW,EAAiB,cACnB,SAAC,GAA+C,OAA7C,EAAA/V,YAAyD+V,kBAC5D,SAAC,GAA+C,OAA7C,EAAA/V,YAAyDuV,iCAC5D,SAACQ,EAAgBR,GAOb,OAAO,IAJP,SAAgClW,GAC5B,OAAOA,EAAgBkW,EAA8BlW,GAAiB0W,UAO5EnG,EAA0B,cAC5B,SAAC,GAAwC,OAAtC,EAAA4I,KAA2C5I,2BAC9C,SAAC,GAA6C,OAA3C,EAAAN,UAAqD4E,gBACxD,SAACtE,EAAyBsE,GAAiB,WAAM,SAACtvB,GAC9C,OAAOgrB,EAAwBsE,IAAgBtvB,SAIjDyqB,EAA2B,cAC7B,SAAC,GAAwC,OAAtC,EAAAmJ,KAA2CnJ,4BAC9C,SAAC,GAAqD,OAAnD,EAAAsJ,kBAAqE7B,wBACxE,SAACzH,EAA0ByH,GAAyB,WAAM,SAAClyB,GACvD,OAAOyqB,EAAyByH,IAAwBlyB,SAIzD,uBAAW,SACd6V,GAEA,MAAO,CACHO,YAAaA,EAAYP,GACzB2E,SAAUA,EAAS3E,GACnBoZ,UAAWA,EAAUpZ,GACrBgF,mBAAoBA,EAAmBhF,GACvC8sD,mBAAoBA,EAAmB9sD,GACvC0B,gBAAiBA,EAAgB1B,GACjC+sD,0BAA2BA,EAA0B/sD,GACrDqc,qBAAsBA,EAAqBrc,GAC3CyE,kBAAmBA,EAAkBzE,GACrCgtD,oBAAqBA,EAAoBhtD,GACzC0b,kBAAmBA,EAAkB1b,GACrC8E,iBAAkBA,EAAiB9E,GACnCitD,yBAA0BA,EAAyBjtD,GACnDmB,QAASA,EAAQnB,GACjBiY,WAAYA,EAAWjY,GACvBua,oBAAqBA,EAAoBva,GACzC0E,YAAaA,EAAY1E,GACzB4Y,sBAAuBA,EAAsB5Y,GAC7C6Y,uBAAwBA,EAAuB7Y,GAC/Csb,eAAgBA,EAAetb,GAC/BmV,wBAAyBA,EAAwBnV,GACjD4U,yBAA0BA,EAAyB5U,QD7crD4tD,GE6PAV,EAAW,IACb,SAAChrC,GAA2D,OAAAA,KAC5D,SAAAA,GAAY,kBACR,IAAkB,UAAA5+B,OAAOkJ,KAAK01B,GAAZ,eAAoF,CAAjG,IAAM/9B,EAAG,KACJiH,EAAQ82B,EAAS/9B,KAEvB,GAAIiH,EACA,OAAOA,OAMjB+hE,EAA+B,cACjC,SAAC,GAAsD,OAApD,EAAAhvC,mBAAuE1B,wBAC1E,SAAC,GAAgD,OAA9C,EAAA1zB,aAA2DwuB,gCAC9D,SAACkF,EAAsBlF,GAAiC,gBAACtU,GACrD,OACIwZ,KACAlF,EAA6BtU,OAKlC,uBAAW,SACdjD,GAEA,IAAMkiB,EAAW,CACb2rC,qBAAsB7tD,EAAMjI,SAAS6e,aACrCk3C,uBAAwB9tD,EAAMjI,SAASqf,eACvC22C,oBAAqB/tD,EAAMge,kBAAkBlC,gBAC7CkyC,sBAAuBhuD,EAAMge,kBAAkBjC,iBAC/CkyC,kBAAmBjuD,EAAMpM,MAAMgjB,aAC/Bs3C,iBAAkBluD,EAAM9H,KAAK0e,aAC7Bu3C,6BAA8BnuD,EAAM6U,UAAU+B,aAC9Cw3C,8BAA+BpuD,EAAMke,kBAAkBtH,aACvDy3C,2BAA4BruD,EAAM6E,eAAe+R,aACjD03C,0BAA2BtuD,EAAM6E,eAAe8W,mBAChD4yC,0BAA2BvuD,EAAMge,kBAAkBjG,mBACnDmC,eAAgBla,EAAM8d,mBAAmB5D,eACzCC,gBAAiBna,EAAM8d,mBAAmB3D,gBAC1Cq0C,2BAA4BxuD,EAAM8d,mBAAmB/F,mBACrDhB,4BAA6B/W,EAAMjX,aAAaguB,4BAChDo2C,6BAA8BA,EAA6BntD,GAC3D6X,wBAAyB7X,EAAM9M,eAAe2kB,wBAC9C42C,6BAA8BzuD,EAAM9M,eAAekkB,eACnDs3C,8BAA+B1uD,EAAMme,mBAAmB3B,sBACxDmyC,0BAA2B3uD,EAAMjX,aAAasuB,eAC9Cu3C,0BAA2B5uD,EAAMjX,aAAaquB,eAC9Cy3C,2BAA4B7uD,EAAMjX,aAAa+tB,eAC/Cg4C,2BAA4B9uD,EAAMme,mBAAmBpG,mBACrDg3C,yBAA0B/uD,EAAM1M,YAAY6kB,cAC5C62C,oBAAqBhvD,EAAMrL,QAAQwjB,cACnC82C,qBAAsBjvD,EAAMrL,QAAQujB,eACpCg3C,6BAA8BlvD,EAAMtH,iBAAiByf,cACrDg3C,8BAA+BnvD,EAAMtH,iBAAiBwf,eACtDk3C,wBAAyBpvD,EAAMuF,YAAYqR,aAC3Cy4C,yBAA0BrvD,EAAMuF,YAAY8R,eAC5Ci4C,mBAAoBtvD,EAAMG,OAAOyW,cAGrC,OAAO,oBACHs2C,SAAUA,EAAShrC,IAChBA,OF3TLqtC,GGsTAnC,EAAY,IACd,SAAClrC,GAA6D,OAAAA,KAC9D,SAAAA,GAAY,kBACR,OAAQ5+B,OAAOkJ,KAAK01B,GACf7G,MAAK,SAAAl3B,GAAO,OAAA+9B,EAAS/9B,YAI5BkpE,EAA4B,cAC9B,SAAC,GAAsD,OAApD,EAAAlvC,mBAAuEtK,qBAC1E,SAAC,GAAgD,OAA9C,EAAA9qB,aAA2D2pB,4BAC9D,SAACmB,EAAmBnB,GAA6B,gBAACzP,GAC9C,OACI4Q,KACAnB,EAAyBzP,OAK/BqqD,EAAwB,cAC1B,SAAC,GAAsD,OAApD,EAAAxvC,mBAAuEnP,kBAC1E,SAAC,GAAsD,OAApD,EAAAmP,mBAAuEjP,eAC1E,SAAC,GAAsD,OAApD,EAAAiP,mBAAuEhP,gBAC1E,SAAC,GAAsD,OAApD,EAAAgP,mBAAuE/O,uBAC1E,SAACJ,EAAgBE,EAAaC,EAAcC,GAAwB,gBAACxjB,GACjE,OACIojB,EAAepjB,IACfsjB,EAAYtjB,IACZujB,EAAavjB,IACbwjB,EAAoBxjB,OAK1BgiE,EAAuB,cACzB,SAAC,GAAqD,OAAnD,EAAAvvC,kBAAqErP,kBACxE,SAAC,GAAqD,OAAnD,EAAAqP,kBAAqE7M,eACxE,SAAC,GAAqD,OAAnD,EAAA6M,kBAAqE5M,gBACxE,SAAC,GAAqD,OAAnD,EAAA4M,kBAAqEjP,uBACxE,SAACJ,EAAgBwC,EAAaC,EAAcrC,GAAwB,gBAACxjB,GACjE,OACIojB,EAAepjB,IACf4lB,EAAY5lB,IACZ6lB,EAAa7lB,IACbwjB,EAAoBxjB,OAK1BiiE,EAAoB,cACtB,SAAC,GAAqD,OAAnD,EAAAxvC,kBAAqE7M,eACxE,SAAC,GAA4C,OAA1C,EAAApZ,SAAmDklB,wBACtD,SAAC9L,EAAa8L,GAAyB,gBAAC1xB,GACpC,OACI4lB,EAAY5lB,IACZ0xB,QAKL,uBAAW,SACdjd,GAEA,IAAMkiB,EAAW,CACbstC,kBAAmBxvD,EAAMjI,SAASyf,UAClCi4C,mBAAoBzvD,EAAMjI,SAAS0a,WACnCwK,qBAAsBjd,EAAMjI,SAASklB,qBACrCuwC,kBAAmBA,EAAkBxtD,GACrC0vD,kBAAmB1vD,EAAMge,kBAAkB5M,aAC3Cu+C,eAAgB3vD,EAAMpM,MAAM4jB,UAC5Bo4C,cAAe5vD,EAAM9H,KAAKsf,UAC1Bq4C,0BAA2B7vD,EAAM6U,UAAU2C,UAC3Cs4C,2BAA4B9vD,EAAMke,kBAAkB1G,UACpDu4C,wBAAyB/vD,EAAM6E,eAAe2S,UAC9Cw4C,uBAAwBhwD,EAAM6E,eAAe0L,gBAC7C0/C,sBAAuBjwD,EAAMge,kBAAkBrP,eAC/CE,YAAa7O,EAAM8d,mBAAmBjP,YACtCC,aAAc9O,EAAM8d,mBAAmBhP,aACvCohD,uBAAwBlwD,EAAM8d,mBAAmBnP,eACjD8I,yBAA0BzX,EAAMjX,aAAa0uB,yBAC7C41C,0BAA2BA,EAA0BrtD,GACrDmwD,yBAA0BnwD,EAAM9M,eAAeuf,WAC/CqF,oBAAqB9X,EAAM9M,eAAe4kB,oBAC1Cs4C,0BAA2BpwD,EAAMme,mBAAmBvK,kBACpDy8C,sBAAuBrwD,EAAMjX,aAAa0pB,WAC1C69C,sBAAuBtwD,EAAMjX,aAAagpB,WAC1Cw+C,uBAAwBvwD,EAAMjX,aAAa2uB,WAC3C84C,uBAAwBxwD,EAAMme,mBAAmBxP,eACjD8hD,sBAAuBzwD,EAAM1M,YAAY8kB,WACzC0B,iBAAkB9Z,EAAMrL,QAAQyjB,WAChC2B,iBAAkB/Z,EAAMrL,QAAQ0jB,WAChCqC,0BAA2B1a,EAAMtH,iBAAiB0f,WAClDuC,0BAA2B3a,EAAMtH,iBAAiB2f,WAClDq4C,qBAAsB1wD,EAAMuF,YAAYiS,UACxCm5C,qBAAsB3wD,EAAMuF,YAAYwM,WACxC6+C,gBAAiB5wD,EAAMG,OAAOqX,UAC9B81C,sBAAuBA,EAAsBttD,GAC7CutD,qBAAsBA,EAAqBvtD,IAG/C,OAAO,oBACHotD,UAAWA,EAAUlrC,IAClBA,OH1ZX,OAAO,SAAC9D,GAKJ,MAAO,CACH5X,KALSinD,EAA4BrvC,GAMrC92B,OALWsmE,EAAiCxvC,GAM5C9U,SALaimD,EAAkCnxC,KIV3D,I,GAAA,WACI,WACYyyC,GAAA,KAAAA,qBAQhB,OALI,YAAAtsD,UAAA,SAAUnZ,GCPC,IAAsBqhE,EDU7B,OAFArhE,EAAM5E,SCRuBimE,EDQA5gE,KAAKglE,mBAAmBzlE,ICHlDqhE,EAAM9jD,MAAM,kBACdhc,KAAI,SAAA4iD,GAAQ,OAAAA,EAAKlyC,QAAQ,SAAU,OACnClR,KAAK,KACL2kE,OANM,GDQA1lE,GAEf,EAVA,GEkCA,IAAqB,GAArB,WAQI,WACYs2B,EACAsvB,EACAjuB,EACAtjB,EACAmrD,EACAmG,EACAC,EACA7zB,EACA8zB,EACAC,EACAC,EACA/vB,EACAte,EACA8zB,EACAwa,EACAC,EACAhwB,EACA4O,GCvDD,IACXqhB,EdQAlzD,EACA0gB,EAEMyyC,Ea0BM,KAAA7vC,SACA,KAAAsvB,+BACA,KAAAjuB,yBACA,KAAAtjB,uBACA,KAAAmrD,4BACA,KAAAmG,wBACA,KAAAC,uBACA,KAAA7zB,iCACA,KAAA8zB,sBACA,KAAAC,gCACA,KAAAC,2BACA,KAAA/vB,sBACA,KAAAte,8BACA,KAAA8zB,gCACA,KAAAwa,gCACA,KAAAC,iCACA,KAAAhwB,+BACA,KAAA4O,4BAERpkD,KAAK2lE,wBCxDT,IAAAF,MAA8C,gBAArB36B,KAElB,IAAI,IAAwB,SAAAvrC,GAC/B,IAAKkmE,IAmFb,SAAgClmE,GAC5B,SAAUA,EAAMnG,UAAWmG,EAAMlG,MApFNusE,CAAuBrmE,GAC1C,OAAOA,EAAM5E,QAGjB,OAAQ4E,EAAMnG,SAAWmG,EAAMlG,MAC/B,KAAK,IAAqBG,oBACtB,MAAO,qBACD+F,EAAM5E,QAAO,2PAMvB,KAAK,IAAqBpB,YAC1B,KAAK,IAAqBE,gBACtB,MAAO,qBACD8F,EAAM5E,QAAO,gQAMvB,KAAK,IAAqBjB,sBACtB,MAAO,qBACD6F,EAAM5E,QAAO,oUAOvB,KAAK,IAAqBf,aACtB,MAAO,qBACD2F,EAAM5E,QAAO,6PAMvB,KAAK,IAAqBd,eACtB,MAAO,qBACD0F,EAAM5E,QAAO,8LAKvB,KAAK,IAAqBX,qBACtB,MAAO,qBACDuF,EAAM5E,QAAO,2SAMvB,KAAK,KAAwBmX,uBACzB,MAAO,4OAMX,KAAK,KAAwB/C,sBACzB,MAAO,qBACDxP,EAAM5E,QAAO,yOAMvB,KAAK,KAAwBoX,uBACzB,MAAO,qBACDxS,EAAM5E,QAAO,4OAMvB,QACI,OAAO4E,EAAM5E,aDxBjBqF,KAAK6lE,kBAAoB7E,KACzBhhE,KAAK8lE,kBblDTvzD,EakDsDvS,KAAK61B,ObjD3D5C,EaiDmEjzB,KAAK6lE,kBb/ClEH,EAAa,2BACf,SAACvxD,EAAOjC,GAAW,OAAAA,EAAO7Y,OAASgmE,GAAqB0G,YACpD7zD,EAAOC,QACPgC,IACJ5B,EAAM6B,WACN,CAAE6e,iBAAgB,IAGtB1gB,EAAMyjB,WAAU,SAAA7hB,GACZuxD,EAAW9uC,SAAS,uBAAayoC,GAAqB0G,YAAa5xD,MACpE,CAAE6xD,SAAS,IAEPN,Ga0lCX,OAniCI,YAAAtxD,SAAA,WACI,OAAOpU,KAAK8lE,iBAAiB1xD,YASjC,YAAA6xD,YAAA,WACIjmE,KAAK8lE,iBAAiBG,eAiC1B,YAAAjwC,UAAA,SACIC,G,UACA,oDAEA,OAAO,EAAAj2B,KAAK8lE,kBAAiB9vC,UAAS,kCAACC,GAAeC,KAqB1D,YAAAriB,aAAA,SAAazW,EAAawB,GACtB,OAAOoB,KAAKkmE,UAAU9oE,EAClB4C,KAAKk3B,uBAAuBrjB,aAAazW,EAAIwB,GAC7CoB,KAAKk3B,uBAAuBhjB,oBAAoBtV,KAiBxD,YAAA6V,eAAA,SAAetC,EAA8BvT,GACzC,IAAMsT,EAASlS,KAAKk3B,uBAAuBziB,eAAetC,EAASvT,GAEnE,OAAOoB,KAAKkmE,UAAUh0D,IAoB1B,YAAAoiC,UAAA,SAAUlsC,EAAiBxJ,GAA3B,WACUunE,EAAqBnmE,KAAKu1C,oBAAoBjB,UAAUlsC,EAASxJ,GACjEwnE,EAAmBpmE,KAAK4T,qBAAqBG,WAAWnV,GAE9D,OAAOwQ,QAAQC,IAAI,CACfrP,KAAKkmE,UAAUC,GACfnmE,KAAKkmE,UAAUE,EAAkB,CAAEzvC,QAAS,aAE3C33B,MAAK,WAAM,SAAKoV,eA2CzB,YAAAmgC,YAAA,SAAYpiC,EAA2BvT,GACnC,IAAMsT,EAASlS,KAAK+qD,8BAA8BtV,QAAQtjC,EAASvT,GAEnE,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,qBAiC7C,YAAA0vC,sBAAA,SAAsBznE,GAClB,IAAMsT,EAASlS,KAAK+qD,8BAA8BlV,SAASj3C,GAE3D,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,qBA0B7C,YAAAh4B,mBAAA,SAAmBC,GACf,IAAMsT,EAASlS,KAAKi3B,4BAA4Bt4B,mBAAmBC,GAEnE,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,oBAe7C,YAAAl3B,kBAAA,SAAkBC,EAAkBd,GAChC,IAAMsT,EAASlS,KAAKi3B,4BAA4Bx3B,kBAAkBC,EAAUd,GAE5E,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,oBAuB7C,YAAAwY,kBAAA,SAAkBvwC,GACd,IAAMsT,EAASlS,KAAK+qD,8BAA8Bp8C,WAAW/P,GAE7D,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,qBAoB7C,YAAA2vC,oBAAA,SAAoB1nE,GAChB,IAAMsT,EAASlS,KAAK+qD,8BAA8Bj0B,aAAal4B,GAE/D,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,qBAkB7C,YAAA4vC,qBAAA,SAAqB3nE,GACjB,IAAMsT,EAASlS,KAAKklE,sBAAsB9wB,cAAcx1C,GAExD,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAoB7C,YAAA6vC,sBAAA,SAAsB5nE,GAClB,IAAMsT,EAASlS,KAAKulE,8BAA8BnxB,cAAcx1C,GAEhE,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,uBAoB7C,YAAA8vC,yBAAA,SAAyB7nE,GACrB,OAAOoB,KAAKumE,qBAAqB3nE,IAoBrC,YAAA8nE,0BAAA,SAA0B9nE,GACtB,OAAOoB,KAAKwmE,sBAAsB5nE,IAqBtC,YAAA+nE,mBAAA,SAAmB/nE,GACf,IAAMsT,EAASlS,KAAKsxC,+BAA+B3iC,WAAW/P,GAE9D,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAoB7C,YAAAiwC,qBAAA,SAAqBhoE,GACjB,IAAMsT,EAASlS,KAAKsxC,+BAA+Bxa,aAAal4B,GAEhE,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAc7C,YAAAkwC,gBAAA,SAAgBv6B,EAA+B1tC,GAC3C,IAAMsT,EAASlS,KAAKmlD,6BAA6B0hB,gBAAgBv6B,EAAa1tC,GAE9E,OAAOoB,KAAKkmE,UAAUh0D,IAwB1B,YAAAm+B,eAAA,SAAe/D,EAAkC1tC,GAC7C,IAAMsT,EAASlS,KAAKsxC,+BAA+BjF,OAAOC,EAAa1tC,GAEvE,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAmB7C,YAAA8Z,gBAAA,SAAgB7xC,GACZ,IAAMsT,EAASlS,KAAKsxC,+BAA+B/E,QAAQ3tC,GAE3D,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAoB7C,YAAAvgB,oBAAA,SAAoBxX,GAChB,IAAMsT,EAASlS,KAAK++D,0BAA0B3oD,oBAAoBxX,GAElE,OAAOoB,KAAKkmE,UAAUh0D,IAsB1B,YAAAg9B,mBAAA,SAAmBtwC,GACf,IAAMsT,EAASlS,KAAKwlE,+BAA+B72D,WAAW/P,GAE9D,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAoB7C,YAAAmwC,qBAAA,SAAqBloE,GACjB,IAAMsT,EAASlS,KAAKwlE,+BAA+B1uC,aAAal4B,GAEhE,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAoB7C,YAAA/gB,qBAAA,SAAqBG,EAA0BnX,GAC3C,IAAMsT,EAASlS,KAAKwlE,+BAA+B3G,aAAa9oD,EAAkBnX,GAElF,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBA4B7C,YAAAiF,sBAAA,SACI3+B,EACA2B,GAEA,IAAMsT,EAASlS,KAAKwlE,+BAA+B7uD,cAAc1Z,EAAS2B,GAE1E,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAgC7C,YAAA9f,mBAAA,SACI3Z,EACA0B,GAEA,IAAMsT,EAASlS,KAAK++D,0BAA0BloD,mBAAmB3Z,EAAc0B,GAE/E,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAgB7C,YAAAnhB,kBAAA,SACI4B,EACAxY,GAEA,IAAMsT,EAASlS,KAAK++D,0BAA0BvpD,kBAAkB4B,EAAexY,GAE/E,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAoC7C,YAAAphB,kBAAA,SACIN,EACArW,GAEA,IAAMsT,EAASlS,KAAK++D,0BAA0BxpD,kBAAkBN,EAAarW,GAE7E,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAc7C,YAAAowC,qBAAA,SACI9xD,EACArW,GAEA,IAAMsT,EAASlS,KAAK++D,0BAA0BtpD,qBAAqBR,EAAarW,GAEhF,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAc7C,YAAAqwC,uBAAA,SACI/xD,EACArW,GAEA,IAAMsT,EAASlS,KAAK++D,0BAA0B/pD,uBAAuBC,EAAarW,GAElF,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAwB7C,YAAAswC,gCAAA,SACI7vD,EACArB,EACAnX,GAEA,IAAMsT,EAASlS,KAAK++D,0BAA0BvnD,qBAAqB,CAC/Dpa,GAAIga,EACJrB,iBAAgB,GACjBnX,GAEH,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,sBAsB7C,YAAAuwC,qBAAA,SAAqBjqE,EAA6C2B,QAAA,IAAAA,MAAA,IAC9D,IAAMsT,EAASlS,KAAKmlD,6BAA6BxuC,cAAc1Z,EAAS2B,GAExE,OAAOoB,KAAKkmE,UAAUh0D,IAiB1B,YAAAuoC,iBAAA,SAAiBxpB,EAAyBryB,GACtC,IAAMsT,EAASlS,KAAKokD,0BAA0B3J,iBAAiBxpB,EAAgBryB,GAE/E,OAAOoB,KAAKkmE,UAAUh0D,IAkB1B,YAAA25B,YAAA,SAAYvjC,EAAc1J,GACtB,IAAMsT,EAASlS,KAAKmlE,qBAAqBt5B,YAAYvjC,EAAM1J,GAE3D,OAAOoB,KAAKkmE,UAAUh0D,IAiB1B,YAAA45B,aAAA,SAAaxjC,EAAc1J,GACvB,IAAMsT,EAASlS,KAAKmlE,qBAAqBr5B,aAAaxjC,EAAM1J,GAE5D,OAAOoB,KAAKkmE,UAAUh0D,IAiB1B,YAAA+5B,qBAAA,SAAqB3jC,EAAc1J,GAC/B,IAAMsT,EAASlS,KAAKqlE,8BAA8Bp5B,qBAAqB3jC,EAAM1J,GAE7E,OAAOoB,KAAKkmE,UAAUh0D,IAiB1B,YAAAg6B,sBAAA,SAAsB5jC,EAAc1J,GAChC,IAAMsT,EAASlS,KAAKqlE,8BAA8Bn5B,sBAAsB5jC,EAAM1J,GAE9E,OAAOoB,KAAKkmE,UAAUh0D,IAmB1B,YAAAgqD,gBAAA,WACI,IAAMhqD,EAASlS,KAAKslE,yBAAyBpJ,kBAE7C,OAAOl8D,KAAKkmE,UAAUh0D,IAkB1B,YAAAsqD,iBAAA,SAAiB1gE,GAAjB,WACUoW,EAASlS,KAAKslE,yBAAyB9I,iBAAiB1gE,GAE9D,OAAOkE,KAAKkmE,UAAUh0D,GACjBlT,MAAK,WAAM,SAAKk9D,sBAezB,YAAArxB,WAAA,SAAWtrC,GACP,IAAM2S,EAASlS,KAAKolE,oBAAoBv6B,WAAWtrC,GAEnD,OAAOS,KAAKkmE,UAAUh0D,IAsB1B,YAAAi1D,yBAAA,SAAyBvoE,GACrB,IAAMsT,EAASlS,KAAKw1C,6BAA6B7mC,WAAW/P,GAE5D,OAAOoB,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,oBAoB7C,YAAAywC,iBAAA,sBACUl1D,EAASlS,KAAKw1C,6BAA6B7mC,aAEjD,OAAO3O,KAAKkmE,UAAUh0D,EAAQ,CAAEykB,QAAS,mBACpC33B,MAAK,WACF,IAAMkT,EAAS,EAAKsjC,6BAA6BC,UAEjD,OAAO,EAAKywB,UAAUh0D,EAAQ,CAAEykB,QAAS,uBAW7C,YAAAuvC,UAAR,SAAkBh0D,EAA2DtT,GAA7E,WACI,OAAOoB,KAAK61B,OAAOe,SAAS1kB,EAAQtT,GAC/BI,MAAK,WAAM,SAAKoV,cAChB9U,OAAM,SAAAC,GACH,MAAM,EAAKomE,kBAAkBjtD,UAAUnZ,OAllClC8nE,EAAe,sBADnC,MACoBA,GAArB,G,UEKe,SAASC,GAAsB1oE,GACP,WAA/BwG,SAASmT,SAAS3S,UAClB+lC,IAAmBL,KAAK,uEAGH,eAArBR,KACAa,IAAmBL,KAAK,6HAG5B,IC3CyC5M,ED2CnCpqB,EAAsB,CACxBrV,KAAM,CACFwuB,eAAgB7uB,GAAWA,EAAQ6uB,gBAEvChyB,OAAQ,GACRgiB,SAAU,IAER,QAAE,IAAA8vB,cAAA,IAAS,EAAT,KAAa,IAAA/a,0BAAA,IAAqB,GAArB,EACf+L,EAAgB,8BAAoB,CAAED,KAAM1/B,GAAWA,EAAQ0/B,OAC/D/rB,EAAQ,aAAoB,CAAE+B,OAAM,GAAI,CAAEke,mBAAkB,IAC5DqnC,EEtDK,SAA6BtnD,GACxC,IAAMsnD,EAAgB,0BAatB,OAXAtnD,EAAMyjB,WACF,SAAA7hB,GACI,IAAMG,EAASH,EAAMG,OAAOiF,iBAExBjF,GACAulD,EAAc0N,QAAQjzD,EAAOo9C,gBAAgBC,kBAGrD,SAAAx9C,GAAS,OAAAA,EAAMG,OAAOiF,oBAGnBsgD,EFwCe2N,CAAoBj1D,GACpCk1D,EAAqB,IAAI,GAAmBlpC,GAC5C87B,EAAwB,IAAI,IAAsB97B,GAClDo8B,EAAsB,IAAI,IAAoB,IAAI,IAAoBp8B,IACtEu7B,GCzDmCp7B,EDyDG,+BCxDrC,IAAI,GACP,IAAI,GAA4BA,GAChC,IAAIgpC,KDuDFC,EAA8B,IAAI,GAA4BppC,GAC9Dg8B,EAA8B,IAAI,GAA4BT,EAAgB6N,GAC9EvT,EAAqB,IAAI,GAC3BqT,EACA,IAAI,GAAkBpN,IAG1B,OAAO,IAAI,GACP9nD,EACA,IAAI,IAA4B,IAAI,IAA4BgsB,IAChE,IAAI,IAAsB87B,EAAuBM,GACjDA,EACA,IAAI,KAAyB,IAAI,KAAyBp8B,GAAgB87B,GAC1E,IAAI,GAAqB,IAAI,GAAqB97B,EAAe,CAAEgP,OAAM,KACzE,IAAI,EAAoB,IAAI,EAAoBhP,IAChD,IAAI,EGnDG,SACXhsB,EACAgsB,GAEA,IAAME,EAAW,IAAI,IACfC,EAAe,4BACf27B,EAAwB,IAAI,IAAsB97B,GAClDI,EAAwB,IAAI,IAC9B07B,EACA,IAAI,IAAoB,IAAI,IAAoB97B,KAE9CC,EAAa,6BACbi8B,EAA6B,IAAI,IAA2B,IAAI,IAA2Bl8B,IAC3FqpC,EAA8B,IAAI,EAA4BrpC,GAC9Dm8B,EAA8B,IAAI,GAA4BkN,GAiGpE,OA/FAnpC,EAASriB,SAAS,UAAU,WACxB,WAAI,GACA7J,EACAkoD,EACAC,EACAkN,EACA,IAAI,EAAsBlpC,OAIlCD,EAASriB,SAAS,cAAc,WACxB,WAAI,GACA7J,EACAmoD,EACA,YAAiCnoD,OAI7CksB,EAASriB,SAAS,yBAAyB,WACvC,WAAI,GACA7J,EACAosB,EACA87B,EACA,IAAI,EAA8Bh8B,GAClCi8B,EACA/rB,EAA4CjQ,EAAcH,GAC1D,IAAI,EAAyBG,OAIrCD,EAASriB,SAAS,YAAY,WAC1B,WAAI,GACA7J,EACAkoD,EACAC,EACA,IAAI,EAAqBh8B,GACzBH,EACAC,MAIRC,EAASriB,SAAS,YAAY,WAC1B,WAAI,GACA7J,EACA,IAAI,GAA4Bq1D,OAIxCnpC,EAASriB,SAAS,cAAc,WAC5B,WAAI,GACA7J,EACAkoD,EACAC,EACA,IAAI,IAAuBh8B,OAInCD,EAASriB,SAAS,sBAAsB,WACpC,WAAI,GACA7J,EACAmoD,EACA,YACInoD,EACA,IAAI,IACA,IAAI,IACA,IAAI,IAAsBmsB,MAItCF,MAIRC,EAASriB,SAAS,mBAAmB,WACjC,WAAI,GACA7J,EACAmoD,EACA,YACInoD,EACA,IAAI,KAERisB,MAIRC,EAASriB,SAAS,WAAW,WACzB,WAAI,GACA7J,EACA,IAAI,GACA,IAAI,GAAsBgsB,GAC1BI,OAKLF,EH5D+BopC,CAA+Bt1D,EAAOgsB,IACxE,IAAI,EACJ,IAAI,EAA6B,IAAI,EAA6BA,IAClE,IAAI,GAAwB,IAAI,GAAwBs7B,EAAet7B,IACvE61B,EACA,IAAI,IAA2B,IAAI,IAA2B71B,IAC9D,IAAI,GACAq7B,GAA8BrnD,EAAOsnD,EAAet7B,EAAeu7B,EAAgBvsB,GACnF6mB,EACAmG,GAEJ,IAAI,GAA6B,IAAI,GAA6Bh8B,EAAe,CAAEgP,OAAM,KACzF,IAAI,GI7EG,SACXh7B,EACAgsB,GAEA,IAAME,EAAW,IAAI,IACf47B,EAAwB,IAAI,IAAsB97B,GAClDupC,EAA2B,IAAI,KAAyBvpC,GACxDwpC,EAA2B,IAAI,KAAyBD,EAA0BzN,GAmBxF,OAjBA57B,EAASriB,SAAS,UAAU,WACxB,WAAI,GACA7J,EACAw1D,EACA,IAAI,IAA2B,IAAI,IAA2BxpC,IAC9D,IAAI,GAA4B,IAAI,EAA4BA,IAChE,IAAI,EAAsB,iCAIlCE,EAASriB,SAAS,WAAW,WACzB,WAAI,GACA7J,EACAw1D,MAIDtpC,EJmD+BupC,CAA+Bz1D,EAAOgsB,IACxEg8B,EACA,IAAI,GAAyB,IAAI,GAAyBh8B,K,2CK5FnD,SAAS0pC,GAAuBttE,GAC3C,GAAKA,EAAQwX,SAAYxX,EAAQwX,QAAQuyB,UAAzC,CAIA,IAAMrpC,EAAO+J,SAASg2B,eAAezgC,EAAQwX,QAAQuyB,WAEhDrpC,IAAQA,EAAK6sE,aAAa,uBAI/B7sE,EAAK++C,aAAa,qBAAsB,KCPrC,SAAS+tB,GAAc5oE,GAC1B,MAC6B,iBAAlBA,EAAM5E,SACS,iBAAf4E,EAAMlG,OACa,iBAAlBkG,EAAMnG,UAAyBmG,EAAMnG,UAC7CmG,aAAiBzE,M,cCCJ,GAArB,WAII,WACYykC,EACAC,EACA4oC,EACAC,QAAA,IAAAA,MAAA,IAHA,KAAA9oC,mBACA,KAAAC,iBACA,KAAA4oC,2BACA,KAAAC,mBAERroE,KAAKu/B,iBAAiBtL,SAkG9B,OA/FI,YAAAq0C,aAAA,WACI,IAAM3tE,EAAyC,CAC3CtB,KAAM,KAA0B0mC,kBAGpC//B,KAAKuoE,aAAa5tE,IAGtB,YAAA6tE,UAAA,SAAUr2D,GACN,IAAMxX,EAAsC,CACxCtB,KAAM,KAA0B2mC,cAChC7tB,QAASnS,KAAKyoE,gBAAgBt2D,IAGlCnS,KAAKuoE,aAAa5tE,IAGtB,YAAA+tE,eAAA,SAAev2D,GACX,IAAMxX,EAA2C,CAC7CtB,KAAM,KAA0B4nC,WAChC9uB,QAASnS,KAAKyoE,gBAAgBt2D,IASlCnS,KAAKuoE,aAAa5tE,EAAS,CAAEguE,YAAY,KAG7C,YAAAC,gBAAA,SAAgBz2D,GACZ,IAAMxX,EAA4C,CAC9CtB,KAAM,KAA0B+mC,YAChCjuB,QAAO,GAGXnS,KAAKuoE,aAAa5tE,IAGtB,YAAAkuE,WAAA,WACI,IAAMluE,EAAuC,CACzCtB,KAAM,KAA0B6mC,gBAGpClgC,KAAKuoE,aAAa5tE,IAGtB,YAAAmuE,cAAA,WACI,IAAMnuE,EAA0C,CAC5CtB,KAAM,KAA0BinC,WAGpCtgC,KAAKuoE,aAAa5tE,IAGtB,YAAAouE,cAAA,SAAcC,GACVhpE,KAAKu/B,iBAAiBjL,YAAY,KAAyBiN,iBAAiB,SAAC,G,IAAEpvB,EAAA,EAAAA,QAC3E62D,EAAQ72D,OAIR,YAAAo2D,aAAR,SAAqB5tE,EAAgCiE,GAGjD,GAFAoB,KAAKipE,uBAAuBtuE,GAExBiE,GAAWA,EAAQ+pE,WACnB,OAAO3oE,KAAKooE,yBAAyBlwD,KAAKvd,GAG9CqF,KAAKw/B,eAAetnB,KAAKvd,IAGrB,YAAAsuE,uBAAR,SAA+BtuE,GAA/B,WACIlD,OAAOkJ,KAAKX,KAAKqoE,kBACZrhE,SAAQ,SAAA1O,GACL,GAAIqC,EAAQtB,OAASf,EAArB,CAIA,IAAM0wE,EAAU,EAAKX,iBAAiB/vE,GAElC0wE,GACCA,EAAmD9xE,KAAK,KAAMyD,QAKvE,YAAA8tE,gBAAR,SAAwBlpE,GACpB,MAAO,CACH5E,QAAS4E,EAAM5E,QACftB,KAAM8uE,GAAc5oE,GAASA,EAAMlG,UAAOuG,EAC1CxG,QAAS+uE,GAAc5oE,GAASA,EAAMnG,aAAUwG,IAzGvCspE,EAA+B,sBADnD,MACoBA,GAArB,GCPqB,GAArB,yBAcA,OAbI,YAAAZ,aAAA,aAEA,YAAAE,UAAA,aAEA,YAAAE,eAAA,aAEA,YAAAE,gBAAA,aAEA,YAAAC,WAAA,aAEA,YAAAC,cAAA,aAEA,YAAAC,cAAA,aAbiBI,EAA6B,sBADjD,MACoBA,GAArB,GC8Be,SAASC,GAAgCxqE,G,MACpD,eAEA,IAAMyqE,EAAezqE,EAAQyqE,cAAgB/wD,OAAO4tB,OAGpD,OAAI5tB,SAAW+wD,EACJ,IAAI,GAGR,IAAI,GACP,IAAI,KAA6CzqE,EAAQ0qE,cACzD,IAAI,KAAyC1qE,EAAQ0qE,aAAcD,GACnE,IAAI,KAAyC,IAAKA,KAAa,MAC5D,KAA0BjpC,aAAc6nC,GAAsB,I,yBC5BpD,GAArB,WASI,WACI3zD,EACQi1D,GAAA,KAAAA,UAEF,+BAAEh8B,EAAA,EAAAA,OAAQi8B,EAAA,EAAAA,QAASC,EAAA,EAAAA,aAEzBzpE,KAAK68C,QAAUtP,EACfvtC,KAAK0pE,SAAWF,EAChBxpE,KAAK2pE,cAAgBF,EACrBzpE,KAAK4pE,YAAc,GAiI3B,OAjHI,YAAAC,QAAA,SAAQvkC,GAAR,WACI7tC,OAAOkJ,KAAK2kC,GAAMt+B,SAAQ,SAAA1O,GACtB,IAAMwxE,EAAoBC,sBAAczkC,EAAKhtC,GAE7C,EAAKqxE,cAAiBI,sBAAczxE,GAAS,EAAKqxE,cAAcG,OASxE,YAAAE,UAAA,WACI,OAAOhqE,KAAKiqE,mBAAqBjqE,KAAK68C,QA7DvB,MAkFnB,YAAAqtB,UAAA,SAAU5xE,EAAaqiB,QAAA,IAAAA,MAAA,IACnB,IAAMwvD,EAAiBJ,sBAAczxE,EAErC,GAA+C,iBAApC0H,KAAK2pE,cAAcQ,GAG1B,OAFAnqE,KAAKupE,QAAQj+B,KAAK,oBAAoB6+B,EAAW,gBAE1CA,EAGX,IAAKnqE,KAAK4pE,YAAYO,GAAc,CAChC,IAAMC,EAAgB,IAAI,KAAcpqE,KAAK0pE,SAASS,IAEtDnqE,KAAK4pE,YAAYO,GAAeC,EAAcC,QAAQrqE,KAAK2pE,cAAcQ,IAAgB,IAG7F,OAAOnqE,KAAK4pE,YAAYO,GAAanqE,KAAKsqE,eAAe3vD,KAGrD,YAAA4vD,iBAAR,SAAyBj2D,QAAA,IAAAA,MAAA,IACrB,IAAM/C,EAAyB,CAC3Bi5D,oBAAqB,GACrBf,aAAc,GACdD,QAAS,GACTj8B,OAAQj5B,EAAOi5B,QAzGJ,MA4GTi8B,EAAUl1D,EAAOk1D,SAAW,GAC5BC,EAAezpE,KAAKyqE,eAAen2D,EAAOm1D,cAAgB,IAC1De,EAAsBxqE,KAAKyqE,eAAen2D,EAAOk2D,qBAAuB,IAa9E,OAZwB,iBAAM/yE,OAAOkJ,KAAK6pE,GAAsB/yE,OAAOkJ,KAAK8oE,IAE5DziE,SAAQ,SAAA1O,GAChBmxE,GAAgBA,EAAanxE,IAC7BiZ,EAAOk4D,aAAanxE,GAAOmxE,EAAanxE,GACxCiZ,EAAOi4D,QAAQlxE,GAAOkxE,EAAQlxE,IAAQiZ,EAAOg8B,SAE7Ch8B,EAAOk4D,aAAanxE,GAAOkyE,EAAoBlyE,GAC/CiZ,EAAOi4D,QAAQlxE,GAvHR,SA2HRiZ,GAGH,YAAAk5D,eAAR,SAAuBhyE,EAAsBoI,EAA2B6pE,GAAxE,gBAA6C,IAAA7pE,MAAA,SAA2B,IAAA6pE,MAAA,IACpE,IACIjzE,OAAOkJ,KAAKlI,GAAQuO,SAAQ,SAAA1O,GACxB,IAAMN,EAAQS,EAAOH,GACfqyE,EAAYD,EAAeA,EAAS,IAAIpyE,EAAQA,EAEtD,GAAI,oBAASN,GACT,OAAO,EAAKyyE,eAAezyE,EAAO6I,EAAQ8pE,GAG9C9pE,EAAO8pE,GAAa3yE,KAE1B,MAAOgyC,GACLhqC,KAAKupE,QAAQj+B,KAAK,2BAA2BtB,GAGjD,OAAOnpC,GAGH,YAAAypE,eAAR,SAAuB3vD,GACnB,OAAOljB,OAAOkJ,KAAKga,GAAM/Z,QAAO,SAACC,EAAQvI,GACrC,IAAMN,EAAQ2iB,EAAKriB,GAInB,OAFAuI,EAAOvI,GAAON,QAAwC,GAAKA,EAEpD6I,IACR,KAGC,YAAAopE,iBAAR,sBACI,OAAOxyE,OAAOkJ,KAAKX,KAAK0pE,UAAU5oE,KAAI,SAAAxI,GAAO,SAAKoxE,SAASpxE,MACtD0K,QAAO,SAAAsF,GAAQ,OAAAA,EAAKwU,MAAM,KAAK,KAAO,EAAK+/B,QAAQ//B,MAAM,KAAK,MAC9Dxf,OAAS,GAjJDstE,EAAe,sBADnC,MACoBA,GAArB,GCFe,SAASC,GAAsBv2D,GAC1C,YAD0C,IAAAA,MAAA,IACnC,IAAI,GACPA,EACAq3B,KClBR,I,GAAA,WAOI,WACIm/B,GAEA,IAAKA,EACD,MAAM,IAAIhwE,MAAM,6BAIhB,IAAA2F,EAAA,EAAAA,cACAsqE,EAAA,EAAAA,eACAC,EAAA,EAAAA,OACAC,EAAA,EAAAA,mBACAC,EAAA,EAAAA,iBAGJ,GAC8B,iBAAnBH,GACW,iBAAXC,GACuB,iBAAvBC,GACqB,iBAArBC,GACkB,iBAAlBzqE,EAEP,MAAM,IAAI,KAAqB,sCAGnCT,KAAK6E,eAAiBsmE,SAAS1qE,EAAe,IAC9CT,KAAKorE,gBAAkBL,EACvB/qE,KAAKqrE,QAAUL,EACfhrE,KAAKsrE,oBAAsBL,EAC3BjrE,KAAKurE,kBAAoBL,EAyCjC,OAtCI,YAAA16D,OAAA,SAAOtP,GACH,GAAsB,iBAAXA,EACP,MAAM,IAAI,KAAqB,2BAGnC,IAAMsqE,EAAkBxrE,KAAKyrE,cAAcvqE,GAErCwqE,EAAoB1rE,KAAK2rE,gBAAgBH,GAE/C,OAAOtqE,EAAS,EACZ,IAAIwqE,EACJA,GAGA,YAAAD,cAAR,SAAsBvqE,GAClB,IAAM0qE,EAAiB9mE,KAAK+mE,IAAI3qE,GAC1B,kDAAEG,EAAA,KAAe,OAAAyqE,OAAA,IAAgB,EAAhB,KACjBC,EAAsB1qE,EAAcmQ,QAAQ,wBAAyBxR,KAAKsrE,qBAEhF,OAAItrE,KAAK6E,eAAiB,EACfknE,EAGJ,CACHA,EACAD,GACFxrE,KAAKN,KAAKurE,oBAGR,YAAAI,gBAAR,SAAwBH,GACpB,MAA+C,SAAvCxrE,KAAKorE,gBAAgBz+B,cACzB,GAAG3sC,KAAKqrE,QAAUG,EAClB,GAAGA,EAAkBxrE,KAAKqrE,SAG1B,YAAAW,SAAR,SAAiBh0E,EAAei0E,GAC5B,SAAUnnE,KAAKC,QAAQ/M,EAAQ,IAAMi0E,IAAc,KAAOA,IAAYvjC,QAAQujC,IAEtF,EA7EA,GCKqB,GAArB,WAOI,WACYC,GAAA,KAAAA,eAERlsE,KAAKmsE,mBAAqB,IAAI,GAAkBnsE,KAAKksE,aAAaE,iBAClEpsE,KAAKqsE,gBAAkB,IAAI,GAAkBrsE,KAAKksE,aAAa/jE,UAYvE,OATI,YAAAmkE,mBAAA,SAAmBprE,GACf,IAAMqrE,EAAevsE,KAAKksE,aAAaE,gBAAgBG,aAEvD,OAAOvsE,KAAKmsE,mBAAmB37D,OAAOtP,EAASqrE,IAGnD,YAAAC,gBAAA,SAAgBtrE,GACZ,OAAOlB,KAAKqsE,gBAAgB77D,OAAOtP,IArBtBurE,EAAe,sBADnC,MACoBA,GAArB,GCiBe,SAASC,GACpBp4D,GAEA,OAAO,IAAI,GAAgBA,G,ICRnBq4D,G,qBAAZ,SAAYA,GACR,2BACA,2BACA,yBACA,yBAJJ,CAAYA,QAAc,KAO1B,IAAMC,GAAoD,CACtDxlE,SAAUulE,GAAeE,SACzB5iE,SAAU0iE,GAAeG,SACzBxmD,QAASqmD,GAAeI,QACxBvkE,QAASmkE,GAAeK,S,GAG5B,WAWI,WACYC,EACAC,EACAC,EACR,G,IAAEC,QAAA,YAAAA,cAEF,GALQ,KAAAH,kBACA,KAAAC,UACA,KAAAC,YAbJ,KAAAE,kBAA4B,EAC5B,KAAAC,gBAA8C,GAC9C,KAAAC,aAAuD,GACvD,KAAAC,mBAAyC,CAC7C,WACA,WACA,UACA,gBASsB5tE,IAAlBwtE,EAA6B,CAC7B,GAAIA,EAAc59C,MAAK,SAAAx3B,GAAS,QAAEA,KAAS40E,OACvC,MAAM,IAAI,KACN,sDAAsD,gBAAKA,IAAgBtsE,KAAK,MAAK,KAG7FN,KAAKwtE,mBAAqBJ,GA6XtC,OAxXI,YAAAK,qBAAA,WACI,IAAIztE,KAAKqtE,iBAAT,CAIA,IAAMnhE,EAAWlM,KAAK0U,cAEtB,GAAKxI,EAAL,CAKI,IAAApD,EAAA,EAAAA,QACA6B,EAAA,EAAAA,WACAT,EAAA,EAAAA,kBACAM,EAAA,EAAAA,SACA,IAAA6B,KACIhE,EAAA,EAAAA,UACA7E,EAAA,EAAAA,eACApG,EAAA,EAAAA,GAIFswE,EAAiB1tE,KAAK2tE,mBAAmBvwE,EAAIiL,GAEnDrI,KAAKmtE,UAAUS,MAAM,mBAAoB5tE,KAAK6tE,mBAAmB,CAC7DC,QAASnjE,EACTV,SAAUC,EACV6jE,IAAKvjE,EACLpJ,SAAUoC,EACVsF,QAAO,EACPT,UAAS,EACTqlE,eAAc,KAGlB1tE,KAAKqtE,kBAAmB,KAG5B,YAAAW,mBAAA,WACI,IAAMjmE,EAAQ/H,KAAK8Y,WAEnB,GAAK/Q,EAAL,CAKI,IAAAiC,EAAA,EAAAA,WACA5B,EAAAL,EAAAK,QACAwC,EAAA7C,EAAA6C,YACAV,EAAA,EAAAA,kBACAM,EAAA,EAAAA,SACAhH,EAAA,EAAAA,eACAsF,EAAA,EAAAA,QACAT,EAAA,EAAAA,UACAq0B,EAAA,EAAAA,OAGJ,GAAK1yB,EAAL,CAIA,IAAM0jE,EAAiB1tE,KAAKiuE,mBAAmBvxC,GAExB,OAAnBgxC,IAIJ1tE,KAAKmtE,UAAUS,MAAM,kBAAmB5tE,KAAK6tE,mBAAmB,CAC5DzlE,QAAO,EACP0lE,QAASljE,EACTX,SAAUC,EACV6jE,IAAKvjE,EACLpJ,SAAUoC,EACVsF,QAAO,EACP4kE,eAAc,EACdrlE,UAAS,KAGbrI,KAAKkuE,mBAAmBxxC,OAG5B,YAAAyxC,gBAAA,SAAgBnjE,GACZ,IAAMojE,EAASpuE,KAAKquE,cAAcrjE,GAE7BojE,IAAUpuE,KAAKsuE,cAAcF,KAIlCpuE,KAAKuuE,YAAYH,GACjBpuE,KAAKwuE,SAASJ,KAGlB,YAAAK,mBAAA,SAAmBzjE,GACf,IAAMojE,EAASpuE,KAAKquE,cAAcrjE,GAE7BojE,IAAUpuE,KAAK0uE,iBAAiBN,KAIrCpuE,KAAKwuE,SAASJ,GACdpuE,KAAK2uE,eAAeP,KAGhB,YAAAI,SAAR,SAAiBJ,GACb,IAAgB,UAAApuE,KAAKwtE,mBAAL,eAAyB,CAApC,IAAMz2E,EAAC,KACFqG,EAAK4C,KAAKquE,cAAct3E,GAE9B,IAAKqG,EACD,MAOJ,GAJK4C,KAAKsuE,cAAclxE,IACpB4C,KAAKuuE,YAAYnxE,GAGjBA,IAAOgxE,EACP,MAGCpuE,KAAK0uE,iBAAiBtxE,IACvB4C,KAAK2uE,eAAevxE,KAKxB,YAAAuxE,eAAR,SAAuBP,GACnB,IAAMQ,EAAiB5uE,KAAKkhE,4BACpB,kCAAA54D,KAAA,kBACFyQ,EAAgB/Y,KAAK6uE,uBAErB18D,EAKF,CACAnH,KAAMojE,EACNjmE,SAAQ,GAGRymE,IACAz8D,EAAQy8D,eAAiBA,EAAevqE,aAGxC0U,IACA5G,EAAQ4G,cAAgBA,GAQvB5G,EAAQy8D,gBAAmBz8D,EAAQ4G,gBACpC5G,EAAQy8D,eAAiB,KAG7B5uE,KAAKmtE,UAAUS,MAAM,0BAA2Bz7D,GAEhD,IAAM28D,EAAmBF,EAAiBA,EAAexxE,GAAK,GACxD2xE,EAAkBX,IAAWzB,GAAeG,SAC3CsB,EAAM,IAAIU,EACbV,EAEJpuE,KAAKstE,gBAAgByB,IAAmB,GAGpC,YAAAlB,mBAAR,SAA2B,G,IACvBzlE,EAAA,EAAAA,QACA0lE,EAAA,EAAAA,QACA7jE,EAAA,EAAAA,SACA8jE,EAAA,EAAAA,IACA3sE,EAAA,EAAAA,SACA0H,EAAA,EAAAA,QACA4kE,EAAA,EAAAA,eACArlE,EAAA,EAAAA,UAWQ,kCAAAC,YAAA,IAAO,EAAP,KACA,+BAAAkuD,UAER,MAAO,CACHpuD,QAAO,EACP4mE,iBAJI,IAAY,EAAZ,KAKJlB,QAAS9tE,KAAKivE,kBAAkBnB,GAChC7jE,SAAUjK,KAAKivE,kBAAkBhlE,GACjC8jE,IAAK/tE,KAAKivE,kBAAkBlB,GAC5B3sE,SAAUpB,KAAKivE,kBAAkB7tE,GACjCwH,QAASE,GAAW,IAAIhI,KAAI,SAAA8H,GAAU,OAAAA,EAAON,QAAMhI,KAAK,KACxD6H,SAAUG,EACV4mE,SAAUlvE,KAAKmvE,YAAYzB,EAAgBrlE,KAI3C,YAAAqmE,iBAAR,SAAyBN,GACrB,IAAMh1D,EAAiBpZ,KAAKkhE,4BACtB4N,EAAmB11D,EAAiBA,EAAehc,GAAK,GAE9D,OAAO4C,KAAKstE,gBAAgB10E,eAAew1E,IAEnCA,IAAWzB,GAAeG,UAC1B9sE,KAAKstE,gBAAgB10E,eAAkBw1E,EAAM,IAAIU,IAIrD,YAAAR,cAAR,SAAsBF,GAClB,QAASpuE,KAAKutE,aAAaa,IAGvB,YAAAC,cAAR,SAAsBrjE,GAClB,IAAM1T,EAAO0T,EAAK8R,MAAM,KAExB,OAAO8vD,GAAet1E,EAAK,KAAO,MAG9B,YAAAi3E,YAAR,SAAoBH,GAChB,IAAMjmE,EAAWnI,KAAKovE,qBAEtBpvE,KAAKmtE,UAAUS,MAAM,uBAAwB,CACzC5iE,KAAMojE,EACNjmE,SAAUA,EAAWA,EAASG,KAAO,KAGzCtI,KAAKutE,aAAaa,IAAU,GAGxB,YAAAt1D,SAAR,WAGI,OAAOA,EAFS,qCAAAA,aAKZ,YAAApE,YAAR,WAGI,OAAOA,EAFS,qCAAAA,gBAKZ,YAAA06D,mBAAR,WACoB,IACV96D,GAASiZ,EADC,qCAAAA,aAGhB,OAAOjZ,GAAUA,EAAO83D,iBAGpB,YAAAiD,gBAAR,WACoB,IACV/6D,GAASiZ,EADC,qCAAAA,aAGhB,OAAOjZ,GAAUA,EAAOkG,cAGpB,YAAAy0D,kBAAR,SAA0B/tE,GACd,sCAAAqrE,oBAAA,IAAe,EAAf,IAER,OAAOznE,KAAKC,MAAM7D,EAASqrE,EAAe,KAAO,KAG7C,YAAAoB,mBAAR,SAA2BvwE,EAAYiL,GACnC,IAAMsS,EAAO,yBACNtS,EAAUgD,cACVhD,EAAUiD,cACf1K,QAAO,SAACC,EAAQE,GAMd,OALAF,EAAOE,EAAKiD,WAAa,CACrBH,MAAO9C,EAAK8C,MAAQ9C,EAAK8C,MAAQ,GACjCkgD,SAAUhjD,EAAKgD,cAAgBhD,EAAKgD,cAAczD,KAAK,MAAQ,IAG5DO,IACR,IAEH,IAGI,OAFAb,KAAKktE,QAAQzrC,QAAQzhC,KAAKsvE,cAAclyE,GAAKy8B,KAAKC,UAAUnf,IAErDA,EACT,MAAOqvB,GACL,MAAO,KAIP,YAAAslC,cAAR,SAAsBlyE,GAClB,OAAOA,EAAQmyE,eAA2BnyE,EAAO,IAG7C,YAAA6wE,mBAAR,SAA2B7wE,GACvB,IACI,IAAM2D,EAAOf,KAAKktE,QAAQ1rC,QAAQxhC,KAAKsvE,cAAclyE,IAErD,OAAO2D,EAAO84B,KAAK0N,MAAMxmC,GAAQ,KACnC,MAAOipC,GACL,OAAO,OAIP,YAAAkkC,mBAAR,SAA2B9wE,GACvB,IACI4C,KAAKktE,QAAQlrC,WAAWhiC,KAAKsvE,cAAclyE,IAC7C,MAAO4sC,MAKL,YAAAk3B,0BAAR,WACY,IACF9nD,EADE,gCAAAuB,KACoBumD,4BAE5B,OAAQ9nD,GAAkBA,EAAehc,IAAMgc,EAAe/U,YAC1D+U,EACA,MAGA,YAAAy1D,qBAAR,WACY,IACF91D,EADE,gCAAA4B,KACmBymD,2BAE3B,OAAQroD,GAAiBA,EAAczE,QACnCyE,EAAczE,OAAO3C,aACrB,IAGA,YAAAw9D,YAAR,SAAoBK,EAA2BnnE,GAA/C,WACUo7C,GAAmCp7C,EAAUo7C,aAAe,IAAI3iD,KAAI,SAAAC,GAAQ,OAC9E0uE,WAAY1uE,EAAK3D,GACjB0G,IAAK/C,EAAK+C,IACVQ,MAAOvD,EAAK0C,UACZ9B,SAAUZ,EAAKY,SACfrK,KAAMyJ,EAAKzJ,SAGTo4E,EAA2CrnE,EAAUwE,iBAAiB/L,KAAI,SAAAC,GAC5E,MAAO,CACH0uE,WAAY1uE,EAAK3D,GACjBkH,MAAO,EAAK2qE,kBAAkBluE,EAAKG,QACnC5J,KAAMyJ,EAAKzJ,KACXqK,SAAU,MAIZguE,EAA8C,yBAC7CtnE,EAAUgD,cACVhD,EAAUiD,cACfxK,KAAI,SAAAC,GACF,IAAI6uE,EAOJ,OALI7uE,EAAKnC,SAAWmC,EAAKnC,QAAQtB,SAC7BsyE,EAAiB7uE,EAAKnC,QAAQkC,KAAI,SAAAmD,GAAU,OAAGA,EAAO3M,KAAI,IAAI2M,EAAOjM,UACtDk+C,OAGZ,CACHu5B,WAAY1uE,EAAKiD,UACjBF,IAAK/C,EAAK+C,IACVQ,MAAOvD,EAAK0C,UACZosE,UAAW9uE,EAAKE,SAChB3J,KAAMyJ,EAAKzJ,KACXqK,SAAUZ,EAAKY,SACfkC,MAAO2rE,EAAUzuE,EAAKiD,WAAawrE,EAAUzuE,EAAKiD,WAAWH,MAAQ,GACrEkgD,SAAUyrB,EAAUzuE,EAAKiD,WAAawrE,EAAUzuE,EAAKiD,WAAW+/C,SAAW,GAC3E+rB,SAAUF,GAAkB,IAAItvE,KAAK,UAI7C,OAAO,yBACAmjD,EACAksB,EACAD,IAGf,EApZA,GCjCA,I,GAAA,yBAgBA,OAfI,YAAAjC,qBAAA,aAIA,YAAAO,mBAAA,aAIA,YAAAG,gBAAA,aAIA,YAAAM,mBAAA,aAGJ,EAhBA,GC6Be,SAASsB,GACpB9C,EACA+C,GAEQ,IACF17D,EADE,aAAAqG,KACY4S,YAEpB,IAAKjZ,EACD,MAAM,IAAI,IAAiB,IAAqB5a,uBAKpD,OAFQ,mBAAAu2E,oBCxCL,SAAkC33D,GACrC,OAAOzc,QAASyc,EAAkC60D,WDyCxB+C,CAAyB53D,QACxC,IAAI,GACP20D,EACA,KACA30D,OAAO60D,UACP6C,GAID,IAAI,GErDf,0c,kCCmHYG,EAIAC,E,gHAJZ,SAAYD,GACR,cACA,gBAFJ,CAAYA,MAAU,KAItB,SAAYC,GACR,oBACA,gBACA,gBAHJ,CAAYA,MAAW,KCzGvB,I,EAAA,WAKI,WACYv6C,EACAoB,EACAo5C,EACAC,EACAnrB,EACAorB,EACA7xE,GANA,KAAAm3B,SACA,KAAAoB,8BACA,KAAAo5C,yBACA,KAAAC,wBACA,KAAAnrB,+BACA,KAAAorB,2BACA,KAAA7xE,iBAqMhB,OAlMI,YAAAiQ,WAAA,SAAWjP,GAGP,OAFAM,KAAK86B,UAAYp7B,EAEVM,KAAK6vD,oBAGhB,YAAA/4B,aAAA,WACI,OAAO92B,KAAKswE,sBAAsBvgE,YAGtC,YAAAurB,aAAA,SACIqsB,EACA6oB,EACAC,GAEA,QAHA,IAAAD,MAAyBL,EAAWO,YACpC,IAAAD,MAA2BL,EAAYO,UAElC3wE,KAAK4wE,iBACN,MAAM,IAAI,IAAoB,IAAwB7hE,uBAG1D,OAAO/O,KAAK4wE,iBAAiBt1C,aAAa,CACtCm1C,YAAW,EACXD,WAAU,EACV7oB,QAAO,KAIf,YAAAjsB,cAAA,WACI,IAAK17B,KAAK4wE,iBACN,MAAM,IAAI,IAAoB,IAAwB7hE,uBAG1D,OAAO/O,KAAK4wE,iBAAiBC,gBAAgB7wE,KAAK8wE,2BAGtD,YAAAn1C,cAAA,SAAc1hB,GAAd,WACI,OAAOja,KAAK8tC,UAAU9tC,KAAKswE,sBAAsBhpC,cAAcrtB,IAC1Djb,MAAK,WAAM,SAAK+xE,sBAAsB92D,OAG/C,YAAA2hB,sBAAA,SAAsBxmB,GAClB,OAAOpV,KAAK61B,OAAOe,SACf52B,KAAKuwE,yBAAyB55D,cAAc3W,KAAKgxE,sCAAsC57D,MAIvF,YAAAy6C,iBAAR,sBACUnwD,EAAWM,KAAK+6B,eAEtB,OAAO/6B,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GACF,IAAM4E,EAAgB5E,EAAM6E,eAAeC,iBAAiBvZ,GACtDwM,EAAWiI,EAAMjI,SAASwI,cAC1BwyB,IAAuB/yB,EAAMiB,gBAAgB+D,qBAEnD,IAAKJ,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpD,IAAKkS,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAG5C,IAAAy+B,EAAA,SAAAA,SAER,OAAO9oB,QAAQC,IAAI,CACf,EAAKghE,uBAAuBr0C,OAC5B,EAAKs0C,sBAAsB3hE,WAAWzC,EAAU6M,EAAemuB,KAChEloC,MAAK,SAAC,G,IAACiyE,EAAA,KAAWC,EAAA,KAIjB,OAHA,EAAKN,iBAAmB,EAAKO,oBAAoBF,EAAW/4C,GAC5D,EAAKk5C,oBAAsBF,EAEpB,EAAKN,iBAAiBS,aAAa,CACtC/nC,sBAAuB,CACnB,CACIjwC,KAAM63E,EAAmB5nC,sBAAsB,GAAGjwC,KAClDkwC,WAAY,CACRC,mBAAoB0nC,EAAmB5nC,sBAAsB,GAAGC,WAAWC,mBAC3EC,oBAAqBynC,EAAmB5nC,sBAAsB,GAAGC,WAAWE,uBAIxFL,WAAY8nC,EAAmB9nC,WAC/BC,gBAAiB6nC,EAAmB7nC,kBACrCrqC,MAAK,SAAAxD,GACJ,IAAIA,EAASqF,OAIb,MAAM,IAAI,cAMtB,YAAAqtC,oBAAR,SAA4BC,GACxB,MAAO,CACH90C,KAAM80C,EAAgBxG,SACtB+G,OAAQP,EAAgBvG,WAIxB,YAAAkpC,uBAAR,WACI,IAAK9wE,KAAKoxE,oBACN,MAAM,IAAI,IAGd,OAAOpxE,KAAKoxE,qBAGR,YAAAD,oBAAR,SAA4BG,EAAsBp5C,GAC9C,QAAiBt4B,IAAbs4B,EACA,MAAM,IAAI,IAAiB,IAAqBl+B,sBAGpD,IAAMijD,EAA+B/kB,EAAW,OAAS,aAEzD,OAAO,IAAIo5C,EAAOrpE,SAASspE,IAAIC,eAAe,CAAEv0B,YAAW,KAGvD,YAAAliB,aAAR,WACI,IAAK/6B,KAAK86B,UACN,MAAM,IAAI,IAAoB,IAAwB/rB,uBAG1D,OAAO/O,KAAK86B,WAGR,YAAA22C,qCAAR,SAA6Cx3D,EAAgC7c,GACzE,MAAO,CACHA,GAAE,EACFG,UAAW0c,EAAYutB,kBAAkBv2B,KAAK5J,eAAe/P,KAAKwlB,MAAM,KAAKlM,MAAM,GAAI,GAAGtQ,KAAK,KAC/F9C,SAAUyc,EAAYutB,kBAAkBv2B,KAAK5J,eAAe/P,KAAKwlB,MAAM,KAAKlM,OAAO,GAAGtQ,KAAK,KAC3F7C,QAASwc,EAAYutB,kBAAkBv2B,KAAK5J,eAAeqqE,YAC3D/zE,SAAUsc,EAAYutB,kBAAkBv2B,KAAK5J,eAAe1J,SAC5DE,SAAUoc,EAAYutB,kBAAkBv2B,KAAK5J,eAAexJ,SAAWoc,EAAYutB,kBAAkBv2B,KAAK5J,eAAesqE,SACzH7zE,KAAMmc,EAAYutB,kBAAkBv2B,KAAK5J,eAAeonC,SACxDzwC,gBAAiBic,EAAYutB,kBAAkBv2B,KAAK5J,eAAeuqE,mBACnE1zE,oBAAqB+b,EAAYutB,kBAAkBv2B,KAAK5J,eAAeuqE,mBACvExzE,WAAY6b,EAAYutB,kBAAkBv2B,KAAK5J,eAAejJ,WAC9DE,YAAa2b,EAAYutB,kBAAkBv2B,KAAK5J,eAAe/I,YAC/DC,MAAO0b,EAAYutB,kBAAkBv2B,KAAK5J,eAAeinC,YACzD9vC,aAAc,GACdkJ,MAAOuS,EAAYvS,QAInB,YAAAspE,sCAAR,SAA8C/zE,GAC1C,MAAO,CACHM,UAAWN,EAAQ3F,KAAKwlB,MAAM,KAAKlM,MAAM,GAAI,GAAGtQ,KAAK,KACrD9C,SAAUP,EAAQ3F,KAAKwlB,MAAM,KAAKlM,OAAO,GAAGtQ,KAAK,KACjD7C,QAASR,EAAQy0E,YACjB/zE,SAAUV,EAAQU,SAClBE,SAAUZ,EAAQY,SAAWZ,EAAQ00E,SACrC7zE,KAAMb,EAAQwxC,SACdzwC,gBAAiBf,EAAQ20E,mBACzB1zE,oBAAqBjB,EAAQ20E,mBAC7BxzE,WAAYnB,EAAQmB,WACpBE,YAAarB,EAAQqB,YACrBC,MAAOtB,EAAQqxC,YACf9vC,aAAc,KAId,YAAAsvC,UAAR,SAAkB+jC,GACd,IAAM1jC,EAAkB0jC,EAAgB33C,QAExC,OAAOl6B,KAAKtB,eAAewZ,KAAK,gBAAiB,CAC7C5c,QAAS,CACL2E,OAAQ,YACR,eAAgB,qCAEpB5E,KAAM,CACFq+B,aAAcm4C,EAAgBx4E,KAC9Bu4B,MAAOigD,EAAgBjgD,MACvB3H,SAAUjqB,KAAK+6B,eACf7oB,OAAQ,wBACR+7B,iBAAkBjuC,KAAKkuC,oBAAoBC,OAK/C,YAAA4iC,sBAAR,SAA8B92D,GAC1B,IAAM63D,EAAuB9xE,KAAK61B,OAAOzhB,WAAW/M,eAAeuR,oBAEnE,IAAKk5D,EACD,MAAM,IAAI,IAAiB,IAAqBx4E,uBAGpD,IAAMy4E,EAAyB/xE,KAAKyxE,qCAAqCx3D,EAAa63D,EAAqB10E,IAE3G,OAAO4C,KAAK61B,OAAOe,SACf52B,KAAKmlD,6BAA6BxuC,cAAco7D,KAG5D,EAjNA,G,UCRA,WACI,WACYxkE,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAchB,OAXI,YAAAwuB,KAAA,sBACI,OAAOh8B,KAAKuN,cACPG,WAAW,yCACX1O,MAAK,WACF,IAAK,EAAKwO,QAAQ8jE,OACd,MAAM,IAAI,IAGd,OAAO,EAAK9jE,QAAQ8jE,WAGpC,EAjBA,GCOe,SAASU,EAAgCz/D,EAAsB0/D,GAC1E,IAAM1zC,EAAgB,gCAChBG,EAAe,4BAErB,OAAO,IAAI,EACPnsB,EACA,IAAI,IACA,IAAI,IAA2BgsB,IAEnC,IAAI,EAAsBG,GAC1BuzC,EACA,IAAI,IACA,IAAI,IAA4B1zC,IAEpC,IAAI,IACA,IAAI,IAAyBA,GAC7B,IAAI,IAAsBA,IAE9BA,GA/BR,mC,oFCOA,WAKI,WACY1I,EACAoB,EACAi7C,GAFA,KAAAr8C,SACA,KAAAoB,8BACA,KAAAi7C,0BAoDhB,OAjDI,YAAAvjE,WAAA,SAAWjP,GAGP,OAFAM,KAAK86B,UAAYp7B,EAEVM,KAAK6vD,oBAGhB,YAAAv0B,aAAA,SACIxb,EACAxJ,GAGA,IAAKtW,KAAKmyE,eACN,MAAM,IAAI,IAAoB,IAAwBpjE,uBAG1D,OAAO/O,KAAKmyE,eAAeC,IAAIC,aAAavyD,EAAaxJ,IAG7D,YAAAwgB,aAAA,WACI,OAAO,IAAI1nB,SAAQ,gBAGf,YAAAygD,iBAAR,sBACUnwD,EAAWM,KAAK+6B,eAEtB,OAAO/6B,KAAK61B,OAAOe,SAAS52B,KAAKi3B,4BAA4Bx3B,kBAAkBC,IAC1EV,MAAK,SAAAmV,GACF,IAAM4E,EAAgB5E,EAAM6E,eAAeC,iBAAiBvZ,GAE5D,IAAKqZ,EACD,MAAM,IAAI,IAAiB,IAAqB/e,sBAGpD,OAAO,EAAKk4E,wBAAwBl2C,KAAKjjB,GACpC/Z,MAAM,SAACszE,GACAA,IACA,EAAKH,eAAiBG,UAMtC,YAAAv3C,aAAR,WACI,IAAK/6B,KAAK86B,UACN,MAAM,IAAI,IAAoB,IAAwB/rB,uBAG1D,OAAO/O,KAAK86B,WAEpB,EA5DA,G,kBCCA,WACI,WACYvtB,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAqBhB,OAjBI,YAAAwuB,KAAA,SAAKt1B,GAAL,WAEQ,IAAAsU,mBAAsB,oBAAA4iB,cAAA,IAAS,EAAT,OAGpB20C,EAAoB,IAA0B30C,GAEpD,OAAO59B,KAAKuN,cACPG,WAAW,kBAAkB6kE,EAAgB,oCAC7CvzE,MAAK,WACF,IAAK,EAAKwO,QAAQs/B,OACd,MAAM,IAAI,IAGd,OAAO,EAAKt/B,QAAQs/B,WAGpC,EAxBA,GCEe,SAAS0lC,EAAiCjgE,GACrD,IAAMgsB,EAAgB,gCAChBG,EAAe,4BAErB,OAAO,IAAI,EACPnsB,EACA,IAAI,IACA,IAAI,IAA2BgsB,IAEnC,IAAI,EAAuBG,IAnBnC,mC,wECMA,YACI,WAAY/jC,GAAZ,MACI,YAAMA,GAAW,6EAA2E,K,OAE5F,EAAKrD,KAAO,+BACZ,EAAK+B,KAAO,8B,EAEpB,OAP0D,yBAO1D,EAPA,C,MAA0D,GCQ1D,aACI,WACYqF,GAAA,KAAAA,iBAqGhB,OAlGI,YAAAmoE,gBAAA,SACIv6B,EACA1tC,GAFJ,WAII,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMsV,EAAQ5B,EAAM6B,WACdlI,EAAWiI,EAAMjI,SAASwI,cAEhC,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpD,IAAM2N,EAAW+M,EAAM/M,SAASyR,cAEhC,GAAIzR,IAAaA,EAASI,QACtB,MAAM,IAAI,EAGd,IAEIirE,EAFEprE,EAAiB8M,EAAM9M,eAAeuR,oBAI5C,GAAKvR,EAEE,CACK,EAAAhJ,QAAA,IAAS,kCAEjBo0E,EAA4B,yCACrBC,GACApmC,QANPmmC,EAA4BnmC,EAUhCztC,EAASC,KAAK,uBAAa,IAAyBsf,2BAEpD,EAAKu0D,8BAA8BzmE,EAAS9O,GAAIq1E,EAA2B7zE,GACtEI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAyBkf,yBAA0B3iB,IAC9EwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAyB8e,sBAAuB7iB,YAKjG,YAAAmb,cAAA,SACI1Z,EACA2B,GAFJ,WAII,OAAO,SAAA2T,GAAS,oBAAWla,QAAO,SAACwG,GAC/B,IAAMsV,EAAQ5B,EAAM6B,WACdlI,EAAWiI,EAAMjI,SAASwI,cAEhC,IAAKxI,EACD,MAAM,IAAI,IAAiB,IAAqBzS,iBAGpDoF,EAASC,KAAK,uBAAa,IAAyBof,gCAEpD,IAAM7W,EAAiB8M,EAAM9M,eAAeuR,oBAOtC65D,EAA4B,yCAC3Bx1E,GAAO,CACVyK,WAAgC,IAAlBzK,EAAQyK,OAAyBL,EAAiBA,EAAeK,MAAQzK,EAAQyK,QAG/FL,GAAkBA,EAAejK,KACjCq1E,EAA0Br1E,GAAKiK,EAAejK,IAGlD,EAAKu1E,8BAA8BzmE,EAAS9O,GAAIq1E,EAA2B7zE,GACtEI,MAAK,SAAC,G,IAAE3D,EAAA,EAAAA,KACLwD,EAASC,KAAK,uBAAa,IAAyBif,8BAA+B1iB,IACnFwD,EAASQ,cAEZC,OAAM,SAAA9D,GACHqD,EAASU,MAAM,4BAAkB,IAAyB4e,2BAA4B3iB,YAK9F,YAAAm3E,8BAAR,SACIn+D,EACAvX,EACA2B,GAEA,OAAK3B,EAAQG,GAIN4C,KAAKtB,eAAeiY,cAAcnC,EAAYvX,EAAS2B,GAHnDoB,KAAKtB,eAAegoC,cAAclyB,EAAYvX,EAAS2B,IAK1E,EAvGA,G","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 172);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedContentOptions } from './iframe-content';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","module.exports = require(\"card-validator\");","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","import { FormattedPayload, FormattedVaultedInstrument, HostedVaultedInstrument, PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(instrument: PaymentInstrument): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !instrument.hasOwnProperty('ccNumber') &&\n        !instrument.hasOwnProperty('ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(instrument: PaymentInstrument): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>).formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token);\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../../common/error';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n}\n\n// Events\nexport type HostedInputEvent = (\n    HostedInputAttachSuccessEvent |\n    HostedInputAttachErrorEvent |\n    HostedInputBlurEvent |\n    HostedInputChangeEvent |\n    HostedInputCardTypeChangeEvent |\n    HostedInputFocusEvent |\n    HostedInputSubmitSuccessEvent |\n    HostedInputSubmitErrorEvent |\n    HostedInputValidateEvent\n);\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import { isBillingAddressLike, BillingAddress } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"shallowequal\");","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n}\n\nexport type HostedFieldEvent = (\n    HostedFieldAttachEvent |\n    HostedFieldSubmitRequestEvent |\n    HostedFieldValidateRequestEvent\n);\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"reselect\");","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","export type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonMaxoOptions {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonMaxoSDK {\n    Pay: AmazonMaxoClient\n}\n\nexport interface AmazonMaxoClient {\n    renderButton(containerId: string, params: AmazonMaxoButtonParams): HTMLElement;\n    bindChangeAction(): null\n}\n\nexport interface AmazonMaxoHostWindow extends Window {\n    amazon?: AmazonMaxoSDK;\n}\n\nexport interface AmazonMaxoButtonParams {\n    merchantId: string;\n    createCheckoutSession: AmazonMaxoCheckoutSession,\n    placement: AmazonMaxoPlacement,\n    ledgerCurrency: AmazonMaxoLedgerCurrency,\n    productType?: string,\n    checkoutLanguage?: AmazonMaxoCheckoutLanguage,\n    sandbox?: boolean\n}\n\nexport interface AmazonMaxoCheckoutSession {\n    url: string;\n    method?: string;\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport enum AmazonMaxoRegions {\n    eu = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonMaxoCheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonMaxoPlacement {\n    Home = 'Home',\n    Product = 'Product',\n    Cart = 'Cart',\n    Checkout = 'Checkout',\n    Other = 'Other',\n}\n\nexport enum AmazonMaxoLedgerCurrency {\n    eu = 'EUR',\n    jp = 'JPY',\n    uk = 'GBP',\n    us = 'USD',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVisaCheckout, GooglePayBraintreeSDK } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear = year.length === 4 ? year.slice(-2) : (year ? year.slice(0, 2) : month.slice(2));\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map(info => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter(gapIndex => unformattedValue.length > gapIndex)\n            .reduce((output, gapIndex, index) => (\n                [\n                    output.slice(0, gapIndex + index),\n                    output.slice(gapIndex + index),\n                ].join(NUMBER_SEPARATOR)\n            ), unformattedValue);\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport { CardExpiryFormatter, CardNumberFormatter, HostedInputValues } from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, { CreditCardInstrument, HostedCreditCardInstrument, HostedVaultedInstrument, VaultedInstrument } from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) || isFormattedVaultedInstrument(payment.paymentData)) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(values: HostedInputValues, data: HostedFormOrderData): PaymentRequestBody {\n        const { authToken, checkout, config, order, orderMeta, payment = {}, paymentMethod, paymentMethodMeta } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer: order && order.billingAddress && checkout && mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress: order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress: shippingAddress && checkout && mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: config && pick(config.storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(values: HostedInputValues, payment: HostedCreditCardInstrument | HostedVaultedInstrument): CreditCardInstrument | VaultedInstrument {\n        return 'instrumentId' in payment ?\n            {\n                ...payment,\n                ccCvv: values.cardCodeVerification,\n                ccNumber: values.cardNumberVerification && this._cardNumberFormatter.unformat(values.cardNumberVerification),\n            } :\n            {\n                ...payment,\n                ccCvv: values.cardCode,\n                ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                ccName: values.cardName || '',\n                ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n            };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState, DEFAULT_STATE } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    stripev3: {\n        provider: 'stripev3',\n        method: 'credit_card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { createSelector } from '../../common/selector';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    // TODO: Rename to `getCardInstruments`\n    getInstruments(): CardInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.method === 'credit_card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const cardInstruments = flatMap(supportedInstruments, card =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is CardInstrument => {\n                    return card.method === 'credit_card' && isMatch(instrument, card);\n                })\n            );\n\n            return cardInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<TSuccessEvent extends IframeEvent, TErrorEvent extends IframeEvent> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<TSuccessEvent extends IframeEvent = IframeEvent, TErrorEvent extends IframeEvent = IframeEvent>(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>\n    ): Promise<TSuccessEvent>;\n    post<TSuccessEvent extends IframeEvent = IframeEvent, TErrorEvent extends IframeEvent = IframeEvent>(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>\n    ): Promise<TSuccessEvent> | void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result = options && fromEvent<MessageEvent>(window, 'message')\n            .pipe(\n                filter(event =>\n                    event.origin === this._targetOrigin &&\n                    isIframeEvent(event.data, event.data.type) &&\n                    [options.successType, options.errorType].indexOf(event.data.type) !== -1\n                ),\n                map(event => {\n                    if (options.errorType === event.data.type) {\n                        throw event.data;\n                    }\n\n                    return event.data;\n                }),\n                take(1)\n            )\n            .toPromise();\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    AMAZON_MAXO = 'amazonmaxo',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeError, BraintreePaypalCheckout, BraintreeShippingAddressOverride, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: payload.details.firstName,\n                last_name: payload.details.lastName,\n                phone_number: payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeShippingAddressOverride {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { AmazonMaxoPaymentProcessor, AmazonMaxoPlacement } from '../../../payment/strategies/amazon-maxo';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class AmazonMaxoButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        //private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonMaxoPaymentProcessor: AmazonMaxoPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._amazonMaxoPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._amazonMaxoPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const state = this._store.getState();\n        const paymentMethod =  state.paymentMethods.getPaymentMethod(this._getMethodId());\n\n        const config = state.config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if(! paymentMethod ){\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {config: {merchantId, testMode}, initializationData: {checkoutLanguage, ledgerCurrency, region}} = paymentMethod;\n\n        if (!merchantId || !testMode ) {\n            throw new InvalidArgumentError();\n        }\n\n        const amazonButtonOptions = {\n            merchantId,\n            sandbox: testMode,\n            checkoutLanguage,\n            ledgerCurrency,\n            region,\n            productType: 'PayAndShip',\n            createCheckoutSession: {\n                url: `${config.links.siteLink}/remote-checkout-token/${this._getMethodId()}`,\n            },\n            placement: AmazonMaxoPlacement.Cart,\n        };\n\n        return this._amazonMaxoPaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._methodId;\n    }\n/*\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n    */\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { createAmazonMaxoPaymentProcessor } from '../payment/strategies/amazon-maxo'\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport { AmazonMaxoButtonStrategy } from './strategies/amazon-maxo';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.AMAZON_MAXO, () => \n        new AmazonMaxoButtonStrategy(\n            store,\n            checkoutActionCreator,\n            createAmazonMaxoPaymentProcessor(store)\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster, IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport const ALLOW_COOKIE_ATTEMPT_INTERVAL = 10 * 60 * 1000;\nexport const IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\nexport const LAST_ALLOW_COOKIE_ATTEMPT_KEY = 'lastAllowCookieAttempt';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            return Promise.resolve();\n        }\n\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        // It could be possible that the flag is set to true but the browser has\n        // already removed the permission to store third-party cookies. In that\n        // case, we should try to redirect the user again. But we only want to\n        // do it once within a fixed interval. This is to avoid getting into a\n        // redirect loop if the shopper actually doesn't have a valid card\n        // session.\n        this._storage.setItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY, Date.now());\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const lastAttempt = Number(this._storage.getItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY));\n        const canRetry = (\n            (!lastAttempt || Date.now() - lastAttempt > ALLOW_COOKIE_ATTEMPT_INTERVAL) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { iframeResizer, isIframeEvent, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to invalid configuration provided for the hosted payment form.');\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(\n        public errors: HostedInputValidateErrorDataMap\n    ) {\n        super([\n            'Unable to proceed due to invalid user input values',\n            ...flatMap(values(errors), fieldErrors => map(fieldErrors, ({ message }) => message)),\n        ].join('. '));\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId: string = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    /* eslint-disable-next-line import/no-internal-modules */\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport { CustomerStrategyActionType, CustomerStrategyDeinitializeAction, CustomerStrategyInitializeAction, CustomerStrategySignInAction, CustomerStrategySignOutAction, CustomerStrategyWidgetAction } from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<void> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport { VisaCheckoutAddress, VisaCheckoutInitOptions, VisaCheckoutPaymentSuccessPayload, VisaCheckoutTokenizedPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { ChasePayHostWindow, JPMC } from './chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { AmazonMaxoPaymentProcessor, AmazonMaxoPlacement } from '../../../payment/strategies/amazon-maxo';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class AmazonMaxoCustomerStrategy implements CustomerStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _amazonMaxoPaymentProcessor: AmazonMaxoPaymentProcessor,        \n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, amazonmaxo}  = options;\n\n        if (!amazonmaxo) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazonmaxo\" argument is not provided.');\n        }\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._methodId = methodId;\n\n        return this._amazonMaxoPaymentProcessor.initialize(methodId)\n            .then(() => { this._walletButton = this._createSignInButton(amazonmaxo.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._amazonMaxoPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Amazon, the shopper must click on \"Amazon Maxo\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const state = this._store.getState();\n        const paymentMethod =  state.paymentMethods.getPaymentMethod(this._getMethodId());\n\n        const config = state.config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if(! paymentMethod ){\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {config: {merchantId, testMode}, initializationData: {checkoutLanguage, ledgerCurrency, region}} = paymentMethod;\n\n        if (!merchantId || !testMode ) {\n            throw new InvalidArgumentError();\n        }\n\n        const amazonButtonOptions = {\n            merchantId,\n            sandbox: testMode,\n            checkoutLanguage,\n            ledgerCurrency,\n            region,\n            productType: 'PayAndShip',\n            createCheckoutSession: {\n                url: `${config.links.siteLink}/remote-checkout-token/${this._getMethodId()}`,\n            },\n            placement: AmazonMaxoPlacement.Checkout,\n        };\n\n        return this._amazonMaxoPaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._methodId;\n    }\n\n/*\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n*/\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutPaymentSuccessPayload, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam check. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (checkout.shouldExecuteSpamCheck) {\n                    throw new SpamProtectionNotCompletedError();\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from '../spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport { PaymentStrategyActionType, PaymentStrategyDeinitializeAction, PaymentStrategyExecuteAction, PaymentStrategyFinalizeAction, PaymentStrategyInitializeAction, PaymentStrategyWidgetAction } from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._spamProtectionActionCreator.execute()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport { InvalidHostedFormConfigError, InvalidHostedFormError, InvalidHostedFormValueError } from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport { HostedInputAttachErrorEvent, HostedInputEventMap, HostedInputEventType, HostedInputSubmitErrorEvent, HostedInputValidateEvent } from './iframe-content';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        host: string,\n        formId: string,\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _cardInstrument?: CardInstrument\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `${host}/pay/hosted_forms/${formId}/field`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError('Unable to proceed because the provided container ID is not valid.');\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        return fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post({\n                        type: HostedFieldEventType.AttachRequested,\n                        payload: {\n                            accessibilityLabel: this._accessibilityLabel,\n                            cardInstrument: this._cardInstrument,\n                            fontUrls: this._getFontUrls(),\n                            placeholder: this._placeholder,\n                            styles: this._styles,\n                            type: this._type,\n                        },\n                    }, {\n                        successType: HostedInputEventType.AttachSucceeded,\n                        errorType: HostedInputEventType.AttachFailed,\n                    });\n                }),\n                catchError(error => {\n                    if (this._isAttachErrorEvent(error)) {\n                        return this._handleAttachErrorEvent(error);\n                    }\n\n                    throw error;\n                }),\n                take(1)\n            ).toPromise();\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData\n    ): Promise<void> {\n        try {\n            await this._eventPoster.post({\n                type: HostedFieldEventType.SubmitRequested,\n                payload: { fields, data },\n            }, {\n                successType: HostedInputEventType.SubmitSucceeded,\n                errorType: HostedInputEventType.SubmitFailed,\n            });\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async validateForm(): Promise<void> {\n        const { payload } = await this._eventPoster.post<HostedInputValidateEvent>({\n            type: HostedFieldEventType.ValidateRequested,\n        }, {\n            successType: HostedInputEventType.Validated,\n        });\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private async _handleAttachErrorEvent(event: HostedInputAttachErrorEvent): Promise<void> {\n        const lastRetry = Number(this._storage.getItem(LAST_RETRY_KEY));\n\n        // This is to prevent the possibility of getting into a retry loop, in\n        // case there is something unexpected that prevents the shopper from\n        // being able to recover from an invalid hosted payment form error.\n        if (!lastRetry || Date.now() - lastRetry > RETRY_INTERVAL) {\n            this._storage.setItem(LAST_RETRY_KEY, Date.now());\n            this._location.replace(event.payload.error.redirectUrl);\n\n            return new Promise(() => {});\n        }\n\n        throw new InvalidHostedFormError(event.payload.error.message);\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice.call(links)\n            .filter(link => parseUrl(link.href).hostname === hostname)\n            .filter(link => values(this._styles)\n                .map(style => style && style.fontFamily)\n                .filter((family): family is string => typeof family === 'string')\n                .some(family => family.split(/,\\s/).some(name => link.href.indexOf(name.replace(' ', '+')) !== -1))\n            )\n            .map(link => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n\n    private _isAttachErrorEvent(event: any): event is HostedInputAttachErrorEvent {\n        return event.type === HostedInputEventType.AttachFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport { HostedInputEventMap, HostedInputEventType } from './iframe-content';\n\ntype HostedFormEventCallbacks = Pick<HostedFormOptions, 'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onValidate'>;\n\nexport default class HostedForm {\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        eventCallbacks: HostedFormEventCallbacks\n    ) {\n        const { onBlur = noop, onCardTypeChange = noop, onFocus = noop, onValidate = noop } = eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) => onBlur(payload));\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) => onCardTypeChange(payload));\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) => onFocus(payload));\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) => onValidate(payload));\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map(otherField => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach(field => {\n            field.detach();\n        });\n    }\n\n    async submit(payload: OrderPaymentRequestBody): Promise<void> {\n        return await this._getFirstField().submitForm(\n            this._fields.map(field => field.getType()),\n            this._payloadTransformer.transform(payload)\n        );\n    }\n\n    async validate(): Promise<void> {\n        return await this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError('Unable to proceed because the payment form has no field defined.');\n        }\n\n        return field;\n    }\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport { isVaultedInstrument, HostedCreditCardInstrument } from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(\n        private _store: ReadableCheckoutStore\n    ) {}\n\n    transform(payload: OrderPaymentRequestBody): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(payload.paymentData, 'ccExpiry', 'ccName', 'ccNumber', 'ccCvv') as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(payload.methodId, payload.gatewayId);\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n\n        const authToken = instrumentMeta && payment && isVaultedInstrument(payment) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { CardInstrument } from '../payment/instrument';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nconst STORAGE_NAMESPACE = 'BigCommerce.HostedField';\n\nexport default class HostedFormFactory {\n    constructor(\n        private _store: ReadableCheckoutStore\n    ) {}\n\n    create(host: string, formId: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap & HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    host,\n                    formId,\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new BrowserStorage(STORAGE_NAMESPACE),\n                    window.location,\n                    'instrumentId' in fieldOptions ?\n                        this._getCardInstrument(fieldOptions.instrumentId) :\n                        undefined\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onFocus', 'onCardTypeChange', 'onValidate')\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const { instruments: { getCardInstrument } } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender\n    ) {}\n\n    initialize(options?: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n            defer(async () => {\n                const spamProtectionElementId = options ? options.containerId : 'spamProtectionContainer';\n\n                if (!options && !document.getElementById(spamProtectionElementId)) {\n                    const spamProtectionElement = document.createElement('div');\n                    spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                    document.body.appendChild(spamProtectionElement);\n                }\n\n                const state = store.getState();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                return createAction(SpamProtectionActionType.InitializeSucceeded);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(SpamProtectionActionType.InitializeFailed, error))\n        );\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const { shouldExecuteSpamCheck } = checkout;\n\n            if (!shouldExecuteSpamCheck) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n                this._googleRecaptcha.execute()\n                    .pipe(take(1))\n                    .pipe(switchMap(({ error, token }) => {\n                        if (error || !token) {\n                            throw new SpamProtectionFailedError();\n                        }\n\n                        return this._requestSender.validate(checkout.id, token)\n                            .then(({ body }) => createAction(SpamProtectionActionType.ExecuteSucceeded, body));\n                    }))\n            ).pipe(\n                catchError(error => throwErrorAction(SpamProtectionActionType.ExecuteFailed, error))\n            );\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    validate(checkoutId: string, token: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment, { FormattedHostedInstrument, FormattedPayload, FormattedVaultedInstrument } from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string,\n        instrumentId?: string,\n        shouldSaveInstrument?: boolean\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            let paymentData: FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument> | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = { formattedPayload: { vault_payment_instrument: shouldSaveInstrument } };\n            }\n\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId, paymentData }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry, RegistryOptions } from '../common/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen' || paymentMethod.gateway === 'barclaycard') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    return {\n        color_depth: screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language: navigator.language || (navigator as any).userLanguage,\n        screen_height: screen.height,\n        screen_width: screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","export interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenCheckout;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: AdyenPaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: AdyenPaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface AdyenPaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface AdyenPaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface AdyenThreeDS2Options {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     */\n    widgetSize?: string;\n\n    /**\n     * A callback that gets called when adyen component is mounted\n     */\n    onLoad(cancel: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete(): void;\n}\n\nexport enum ThreeDS2ComponentType {\n    ThreeDS2DeviceFingerprint = 'threeDS2DeviceFingerprint',\n    ThreeDS2Challenge = 'threeDS2Challenge',\n}\n\nexport interface ThreeDS2Result {\n    payment_data: string;\n    code: string;\n    token: string;\n}\n\nexport interface ThreeDS1Result {\n    acs_url: string;\n    payer_auth_request: string;\n    callback_url: string;\n    merchant_data: string;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface RecurringDetail extends AdyenPaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenCheckout {\n    create(type: string, componentOptions?: AdyenCreditCardComponentOptions |\n        ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions | AdyenCustomCardComponentOptions): AdyenComponent;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: AdyenStyleOptions;\n}\n\nexport interface AdyenCardComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface AdyenCreditCardComponentOptions extends AdyenBaseCardComponentOptions, AdyenCardComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Prefill the card holder name field. Supported from Card component\n     */\n    holderName?: string;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface AdyenCustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface AdyenCustomCardComponentOptions extends AdyenBaseCardComponentOptions, AdyenCardComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: AdyenCustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\nexport interface AdyenCardState {\n    data: AdyenCardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface AdyenCardDataPaymentMethodState {\n    paymentMethod: AdyenCardPaymentMethodState;\n}\nexport interface AdyenCardPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n    type: string;\n}\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    fingerprintToken: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport enum ResultCode {\n    AuthenticationFinished = 'AuthenticationFinished',\n    Authorised = 'Authorised',\n    Cancelled = 'Cancelled',\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n    Pending = 'Pending',\n    Received = 'Received',\n    RedirectShopper = 'RedirectShopper',\n    Refused = 'Refused',\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    challengeToken: string;\n    size?: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenStyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface ThreeDS2OnComplete {\n    data: {\n        details: {\n            'threeds2.challengeResult'?: string;\n            'threeds2.fingerprint'?: string;\n            paymentData: string;\n        };\n    };\n}\n\nexport interface ThreeDSRequiredErrorResponse {\n    errors: [\n        { code: string }\n    ];\n    three_ds_result: {\n        code: ResultCode;\n        token?: string;\n        payment_data?: string;\n        acs_url?: string;\n        callback_url?: string;\n        payer_auth_request?: string;\n        merchant_data?: string;\n    };\n    status: string;\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { getBrowserInfo } from '../../../common/browser-info';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { AdyenCardState, AdyenCheckout, AdyenComponent, AdyenConfiguration, AdyenError, ResultCode, ThreeDS2ComponentType, ThreeDS2OnComplete, ThreeDS2Result } from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenCheckout?: AdyenCheckout;\n    private _adyenv2?: AdyenV2PaymentInitializeOptions;\n    private _adyenPaymentComponent?: AdyenComponent;\n    private _adyenCardVerificationComponent?: AdyenComponent;\n    private _adyenComponentState?: AdyenCardState;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _adyenV2ScriptLoader: AdyenV2ScriptLoader,\n        private _formPoster: FormPoster,\n        private _locale: string\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._adyenv2 = adyenv2;\n\n        const configuration: AdyenConfiguration = {\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            originKey: paymentMethod.initializationData.originKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        };\n\n        return this._adyenV2ScriptLoader.load(configuration)\n            .then(adyenCheckout => {\n                this._adyenCheckout = adyenCheckout;\n\n                const adyenPaymentComponent = this._adyenCheckout.create(\n                    paymentMethod.id,\n                    {\n                        ...adyenv2.options,\n                        onChange: (state: AdyenCardState) => {\n                            this._updateAdyenComponentState(state);\n                        },\n                    }\n                );\n\n                adyenPaymentComponent.mount(`#${adyenv2.containerId}`);\n\n                this._adyenPaymentComponent = adyenPaymentComponent;\n\n                if (adyenv2.cardVerificationContainerId) {\n                    const adyenCardVerificationComponent = this._adyenCheckout.create('securedfields', {\n                        onChange: (state: AdyenCardState) => {\n                            this._updateAdyenComponentState(state);\n                        },\n                    });\n\n                    adyenCardVerificationComponent.mount(`#${adyenv2.cardVerificationContainerId}`);\n\n                    this._adyenCardVerificationComponent = adyenCardVerificationComponent;\n                }\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                const adyenComponentState = this._adyenComponentState;\n\n                if (!adyenComponentState) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n                if (paymentData && isVaultedInstrument(paymentData)) {\n\n                    const { encryptedCardNumber, encryptedSecurityCode } = adyenComponentState.data.paymentMethod;\n\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            formattedPayload: {\n                                bigpay_token: {\n                                    credit_card_number_confirmation: encryptedCardNumber,\n                                    token: paymentData.instrumentId,\n                                    verification_value: encryptedSecurityCode,\n                                },\n                                browser_info: getBrowserInfo(),\n                            },\n                        },\n                    }));\n                }\n\n                const paymentPayload = {\n                    methodId: payment.methodId,\n                    paymentData: {\n                        formattedPayload: {\n                            credit_card_token: {\n                                token: JSON.stringify({\n                                    ...adyenComponentState.data.paymentMethod,\n                                    origin: window.location.origin,\n                                }),\n                            },\n                            browser_info: getBrowserInfo(),\n                            vault_payment_instrument: shouldSaveInstrument,\n                        },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                if (error.body.three_ds_result.code === ResultCode.IdentifyShopper) {\n                    return this._handle3DS2Fingerprint(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: {\n                                    ...payment.paymentData,\n                                    shouldSaveInstrument,\n                                },\n                            })))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            if (error.body.three_ds_result.code === ResultCode.ChallengeShopper) {\n                                return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                                    .then((payment: Payment) =>\n                                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                            ...payment,\n                                            paymentData: {\n                                                ...payment.paymentData,\n                                                shouldSaveInstrument,\n                                            },\n                                        }))\n                                    );\n                            }\n\n                            return Promise.reject(error);\n                        });\n                }\n\n                if (error.body.three_ds_result.code === ResultCode.ChallengeShopper) {\n                    return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: {\n                                    ...payment.paymentData,\n                                    shouldSaveInstrument,\n                                },\n                            }))\n                        );\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._adyenPaymentComponent) {\n            this._adyenPaymentComponent.unmount();\n            this._adyenPaymentComponent = undefined;\n        }\n\n        if (this._adyenCardVerificationComponent) {\n            this._adyenCardVerificationComponent.unmount();\n            this._adyenCardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenV2PaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._adyenv2) {\n            throw new InvalidArgumentError('\"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._adyenv2;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { widgetSize } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n        if (!widgetSize) {\n            return '01';\n        }\n\n        return widgetSize;\n    }\n\n    private _handle3DS2Challenge(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { onComplete, onLoad } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n            const challengeComponent = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2Challenge, {\n                    challengeToken: resultObject.token,\n                    onComplete: (challengeData: ThreeDS2OnComplete) => {\n                        const challengePaymentPayload = {\n                            ...challengeData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(challengePaymentPayload),\n                            },\n                        };\n\n                        onComplete();\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                    size: this._getThreeDS2ChallengeWidgetSize(),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            onLoad(() => {\n                challengeComponent.unmount();\n                reject();\n            });\n\n            challengeComponent.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _handle3DS2Fingerprint(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { onComplete, onLoad } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n            const fingerprintComponent = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2DeviceFingerprint, {\n                    fingerprintToken: resultObject.token,\n                    onComplete: (fingerprintData: ThreeDS2OnComplete) => {\n                        const fingerprintPaymentPayload = {\n                            ...fingerprintData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(fingerprintPaymentPayload),\n                            },\n                        };\n\n                        onComplete();\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            onLoad(() => {\n                fingerprintComponent.unmount();\n                reject();\n            });\n\n            fingerprintComponent.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _updateAdyenComponentState(newState: AdyenCardState) {\n        this._adyenComponentState = newState;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { AdyenCheckout, AdyenConfiguration, AdyenHostWindow } from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenHostWindow = window\n    ) {}\n\n    load(configuration: AdyenConfiguration): Promise<AdyenCheckout> {\n        return Promise.all([\n            this._stylesheetLoader.loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.3.0/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.3.0/adyen.js`),\n        ])\n        .then(() => {\n            if (!this._window.AdyenCheckout) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.AdyenCheckout(configuration);\n        })\n        .catch(() => {\n            throw new PaymentMethodClientUnavailableError();\n        });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderIncludes, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData, BraintreeShippingAddressOverride, BraintreeTokenizePayload, BraintreeVerifyPayload } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<BraintreeVerifyPayload> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    getSessionId(): Promise<string | undefined> {\n        return this._braintreeSDKCreator.getDataCollector()\n            .then(({ deviceData }) => deviceData);\n    }\n\n    /**\n     * @deprecated Use getSessionId() and combine them in the consumer.\n     */\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument, { isHostedVaultedInstrument } from '../../is-vaulted-instrument';\nimport Payment, { FormattedPayload, PaypalInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\nimport mapToBraintreeShippingAddressOverride from './map-to-braintree-shipping-address-override';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { nonce, config: { isVaultingEnabled } } = this._paymentMethod;\n        const { paymentData = {} } = payment;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: this._formattedPayload(nonce) });\n        }\n\n        if (isVaultedInstrument(paymentData) || isHostedVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError('Vaulting is disabled but a vaulted instrument was being used for this transaction');\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (paymentData.shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError('Vaulting is disabled but shouldSaveInstrument is set to true');\n        }\n\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress ? mapToBraintreeShippingAddressOverride(shippingAddress) : undefined;\n\n        return Promise.all([\n            this._braintreePaymentProcessor.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this._credit,\n                shippingAddressOverride,\n                shouldSaveInstrument: paymentData.shouldSaveInstrument || false,\n            }),\n            this._braintreePaymentProcessor.getSessionId(),\n        ]).then(([\n            { nonce, details },\n            sessionId,\n        ]) => ({\n            ...payment,\n            paymentData: this._formattedPayload(nonce, details.email, sessionId, paymentData.shouldSaveInstrument),\n        }));\n    }\n\n    private _formattedPayload(token: string, email?: string, sessionId?: string, vaultPaymentInstrument?: boolean): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the selected instrument is not in the list\n * of valid instruments or the type doesn't match the expected type.\n */\nexport default class PaymentInstrumentNotValidError extends InvalidArgumentError {\n    constructor(message?: string) {\n        super(message || 'The selected instrument is either missing or not a valid type.');\n\n        this.name = 'PaymentInstrumentNotValidError';\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, RequestError } from '../../../common/error/errors';\nimport { PaymentInstrumentNotValidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { CardinalClient, CardinalOrderData, CardinalSupportedPaymentInstrument } from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (!isVaultedInstrument(payment)) {\n            return payment.ccNumber;\n        }\n\n        const instruments = this._store.getState().instruments.getInstruments();\n        const { instrumentId: bigpayToken } = payment;\n\n        const entry = find(instruments, { bigpayToken });\n\n        if (!entry) {\n            throw new PaymentInstrumentNotValidError();\n        }\n\n        return entry.iin;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport { CardinalAccount, CardinalAddress, CardinalConsumer, CardinalEventType, CardinalInitializationType, CardinalPartialOrder, CardinalPaymentBrand, CardinalSignatureValidationErrors, CardinalSignatureVerification, CardinalSDK, CardinalTriggerEvents, CardinalValidatedAction, CardinalValidatedData } from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { HostedForm, HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n\n    constructor(\n        protected _store: CheckoutStore,\n        protected _orderActionCreator: OrderActionCreator,\n        protected _paymentActionCreator: PaymentActionCreator,\n        protected _hostedFormFactory: HostedFormFactory\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._isHostedPaymentFormEnabled() ?\n            this._executeWithHostedForm(payload, options) :\n            this._executeWithoutHostedForm(payload, options);\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isHostedPaymentFormEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const { config } = this._store.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } = config.getStoreConfig() || {};\n        const { payment: { formId = '' } = {} } = config.getContextConfig() || {};\n\n        if (!formOptions || !formId) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._hostedFormFactory.create(host, formId, formOptions);\n\n        return form.attach()\n            .then(() => {\n                this._hostedForm = form;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _executeWithoutHostedForm(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _executeWithHostedForm(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>  {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return form.validate()\n            .then(() => this._store.dispatch(this._orderActionCreator.submitOrder(order, options)))\n            .then(() => form.submit(payment))\n            .then(() => this._store.dispatch(this._orderActionCreator.loadCurrentOrder()));\n    }\n\n    private _isHostedPaymentFormEnabled(): boolean {\n        const { config } = this._store.getState();\n        const { checkoutSettings: { isHostedPaymentFormEnabled = false } = {} } = config.getStoreConfig() || {};\n\n        return isHostedPaymentFormEnabled;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { HostedInstrument, VaultedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId = paymentData && (paymentData as VaultedInstrument).instrumentId;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(\n                    payment.methodId,\n                    payment.gatewayId,\n                    instrumentId,\n                    shouldSaveInstrument))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.gatewayId === 'barclaycard' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class SagePayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _formPoster: FormPoster\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return super.execute(payload, options)\n            .catch((error: Error) => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    }, undefined, '_top');\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize(options);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, TimeoutError, UnsupportedBrowserError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, { CardData, Contact, DigitalWalletType, NonceGenerationError, SquareFormElement, SquareFormOptions, SquarePaymentRequest } from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { StripeAddress, StripeBillingDetails, StripeCardElement, StripeHandleCardPaymentOptions, StripePaymentMethodData, StripeShippingDetails, StripeV3Client } from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { GoogleRecaptcha, SpamProtectionActionCreator, SpamProtectionRequestSender } from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, BraintreeCreditCardPaymentStrategy, BraintreePaypalPaymentStrategy, BraintreeScriptLoader, BraintreeSDKCreator, BraintreeVisaCheckoutPaymentStrategy, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { CardinalClient, CardinalScriptLoader, CardinalThreeDSecureFlow } from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayPaymentStrategy, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection, new SpamProtectionRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator, spamProtectionActionCreator);\n    const formPoster = createFormPoster();\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader, getStylesheetLoader()),\n            formPoster,\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport PaymentInstrument, { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody, InstrumentErrorResponseBody, InternalInstrument, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody, InternalVaultAccessTokenResponseBody } from './instrument-response-body';\nimport { mapToAccountInstrument } from './map-to-account-instrument';\nimport { mapToCardInstrument } from './map-to-card-instrument';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): PaymentInstrument[] {\n        return vaultedInstruments\n            .map(instrument => {\n                switch (instrument.method_type) {\n                    case 'paypal':\n                        return mapToAccountInstrument(instrument);\n                    default:\n                        return mapToCardInstrument(instrument);\n                }\n            });\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { AccountInstrument } from './instrument';\nimport { AccountInternalInstrument } from './instrument-response-body';\n\nexport function mapToAccountInstrument(instrument: AccountInternalInstrument): AccountInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        externalId: instrument.external_id,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method: instrument.method_type,\n        type: 'account',\n    };\n}\n","import { CardInstrument } from './instrument';\nimport { CardInternalInstrument } from './instrument-response-body';\n\nexport function mapToCardInstrument(instrument: CardInternalInstrument): CardInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        iin: instrument.iin,\n        last4: instrument.last_4,\n        expiryMonth: instrument.expiry_month,\n        expiryYear: instrument.expiry_year,\n        brand: instrument.brand,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method:  instrument.method,\n        type: 'card',\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody } from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport { ShippingStrategyActionType, ShippingStrategyDeinitializeAction, ShippingStrategyInitializeAction, ShippingStrategySelectOptionAction, ShippingStrategyUpdateAddressAction } from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection challenge. Please try again.');\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, of, throwError, Observable, Subject } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError, SpamProtectionNotLoadedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => Subject<RecaptchaResult>;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {\n        this._memoized = memoize((recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n            const event$ = new Subject<RecaptchaResult>();\n\n            if (!container) {\n                throw new Error();\n            }\n\n            recaptcha.render(container.id, {\n                sitekey,\n                size: 'invisible',\n                callback: () => {\n                    event$.next({\n                        token: recaptcha.getResponse(),\n                    });\n                    recaptcha.reset();\n                },\n                'error-callback': () => {\n                    event$.next({\n                        error: new SpamProtectionFailedError(),\n                    });\n                },\n            });\n\n            return event$;\n        }, { isEqual: (a, b) => a === b });\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                this._event$ = this._memoized(recaptcha, sitekey, document.getElementById(containerId));\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        const event$ = this._event$;\n        const recaptcha = this._recaptcha;\n\n        if (!event$ || !recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        const timeout = 7000;\n        const retryInterval = 250;\n        const maxRetries = timeout / retryInterval;\n\n        return defer(() => {\n            const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n            return element ?\n                of(element) :\n                throwError(new SpamProtectionNotLoadedError());\n        })\n            .pipe(\n                retryWhen(errors => errors.pipe(\n                    delay(retryInterval),\n                    switchMap((error, index) =>\n                        index < maxRetries ? of(error) : throwError(error)\n                    )\n                )),\n                switchMap(element => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute();\n\n                    return event$;\n                }),\n                catchError(error => of({ error }))\n            );\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionChallengeNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import { createCheckoutStoreErrorSelectorFactory, createCheckoutStoreSelectorFactory, createCheckoutStoreStatusSelectorFactory, CheckoutSelectors, InternalCheckoutSelectors } from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { omit, values } from 'lodash';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { CardInstrument, PaymentInstrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type Instrument = CardInstrument;\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n    getInstruments(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getBillingAddress, getContextConfig) => clone(() => {\n            const billingAddress = getBillingAddress();\n            const context = getContextConfig();\n            const isEmptyBillingAddress = !billingAddress ||\n                values(omit(billingAddress, 'email', 'id')).every(val => !val || !val.length);\n\n            if (isEmptyBillingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return billingAddress;\n                }\n\n                return {\n                    id: billingAddress ? billingAddress.id : '',\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    email: billingAddress ? billingAddress.email : '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return billingAddress;\n        })\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstrumentsByPaymentMethod,\n        (getInstruments, getInstrumentsByPaymentMethod) => {\n            function getInstrumentsSelector(): Instrument[] | undefined;\n            function getInstrumentsSelector(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n            function getInstrumentsSelector(paymentMethod?: PaymentMethod): PaymentInstrument[] | undefined {\n                return paymentMethod ? getInstrumentsByPaymentMethod(paymentMethod) : getInstruments();\n            }\n\n            return clone(getInstrumentsSelector);\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether spam check is executing.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isExecutingSpamCheck(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isSubmittingOrder = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ checkout }: InternalCheckoutSelectors) => checkout.isExecutingSpamCheck, // Remove this when CheckoutService#initializeSpamProtection is deprecated\n        (isExecuting, isExecutingSpamCheck) => (methodId?: string) => {\n            return (\n                isExecuting(methodId) ||\n                isExecutingSpamCheck()\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isExecutingSpamCheck: state.checkout.isExecutingSpamCheck,\n            isSubmittingOrder: isSubmittingOrder(state),\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(\n        address: Partial<AddressRequestBody>,\n        options?: ShippingRequestOptions<CheckoutParams>\n    ): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action)\n            .then(() => this.loadInstruments());\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * Note: Use `CheckoutService#executeSpamCheck` instead.\n     * You do not need to call this method before calling\n     * `CheckoutService#executeSpamCheck`.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection();\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     * @deprecated - Use CheckoutService#executeSpamCheck instead.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Verifies whether the current checkout is created by a human.\n     *\n     * Note: this method will do the initialization, therefore you do not\n     * need to call `CheckoutService#initializeSpamProtection`\n     * before calling this method.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.executeSpamCheck();\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    executeSpamCheck(): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize();\n\n        return this._dispatch(action, { queueId: 'spamProtection' })\n            .then(() => {\n                const action = this._spamProtectionActionCreator.execute();\n\n                return this._dispatch(action, { queueId: 'spamProtection' });\n            });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { createSpamProtection, SpamProtectionActionCreator, SpamProtectionRequestSender } from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection, spamProtectionRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender)\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator,\n            spamProtectionActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { createAmazonMaxoPaymentProcessor } from '../payment/strategies/amazon-maxo'\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, BraintreeScriptLoader, BraintreeSDKCreator, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { AmazonMaxoCustomerStrategy } from './strategies/amazon-maxo'\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazonmaxo', ()=>\n            new AmazonMaxoCustomerStrategy(\n                store,\n                remoteCheckoutActionCreator,\n                createAmazonMaxoPaymentProcessor(store)\n            )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport { EmbeddedCheckoutCompleteEvent, EmbeddedCheckoutErrorEvent, EmbeddedCheckoutEvent, EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType, EmbeddedCheckoutFrameErrorEvent, EmbeddedCheckoutFrameLoadedEvent, EmbeddedCheckoutLoadedEvent, EmbeddedCheckoutSignedOutEvent } from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                if (message.type !== key) {\n                    return;\n                }\n\n                const handler = this._messageHandlers[key];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer, IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport MessageFormat from 'messageformat';\n\nimport { Logger } from '../common/log';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { keys } from 'lodash';\n\nimport { LineItemMap } from '../cart';\nimport { Checkout, CheckoutService } from '../checkout';\nimport { InvalidArgumentError } from '../common/error/errors';\nimport { ShopperCurrency, StoreProfile } from '../config';\nimport { Coupon } from '../coupon';\nimport { Order } from '../order';\nimport { ShippingOption } from '../shipping';\n\nimport { AnalyticsTracker } from './analytics-tracker-window';\nimport StepTracker from './step-tracker';\n\nexport interface StepTrackerConfig {\n    checkoutSteps?: AnalyticStepType[];\n}\n\nexport type AnalyticStepType = 'customer' | 'shipping' | 'billing' | 'payment';\n\nconst ORDER_ITEMS_STORAGE_KEY = 'ORDER_ITEMS';\n\nexport enum AnalyticStepId {\n    CUSTOMER = 1,\n    SHIPPING,\n    BILLING,\n    PAYMENT,\n}\n\nconst ANALYTIC_STEPS: { [key: string]: AnalyticStepId } = {\n    customer: AnalyticStepId.CUSTOMER,\n    shipping: AnalyticStepId.SHIPPING,\n    billing: AnalyticStepId.BILLING,\n    payment: AnalyticStepId.PAYMENT,\n};\n\nexport default class AnalyticsStepTracker implements StepTracker {\n    private _checkoutStarted: boolean = false;\n    private _completedSteps: { [key: string]: boolean } = {};\n    private _viewedSteps: { [key in AnalyticStepId]?: boolean; } = {};\n    private _analyticStepOrder: AnalyticStepType[] = [\n        'customer',\n        'shipping',\n        'billing',\n        'payment',\n    ];\n\n    constructor(\n        private checkoutService: CheckoutService,\n        private storage: StorageFallback,\n        private analytics: AnalyticsTracker,\n        { checkoutSteps }: StepTrackerConfig = {}\n    ) {\n        if (checkoutSteps !== undefined) {\n            if (checkoutSteps.some(value => !(value in ANALYTIC_STEPS))) {\n                throw new InvalidArgumentError(\n                    `Invalid checkout steps provided. Valid values are: ${keys(ANALYTIC_STEPS).join(', ')}.`\n                );\n            }\n            this._analyticStepOrder = checkoutSteps;\n\n        }\n    }\n\n    trackCheckoutStarted(): void {\n        if (this._checkoutStarted) {\n            return;\n        }\n\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const {\n            coupons,\n            grandTotal,\n            shippingCostTotal,\n            taxTotal,\n            cart: {\n                lineItems,\n                discountAmount,\n                id,\n            },\n        } = checkout;\n\n        const extraItemsData = this.saveExtraItemsData(id, lineItems);\n\n        this.analytics.track('Checkout Started', this.getTrackingPayload({\n            revenue: grandTotal,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            lineItems,\n            extraItemsData,\n        }));\n\n        this._checkoutStarted = true;\n    }\n\n    trackOrderComplete(): void {\n        const order = this.getOrder();\n\n        if (!order) {\n            return;\n        }\n\n        const {\n            isComplete,\n            orderId,\n            orderAmount,\n            shippingCostTotal,\n            taxTotal,\n            discountAmount,\n            coupons,\n            lineItems,\n            cartId,\n        } = order;\n\n        if (!isComplete) {\n            return;\n        }\n\n        const extraItemsData = this.readExtraItemsData(cartId);\n\n        if (extraItemsData === null) {\n            return;\n        }\n\n        this.analytics.track('Order Completed', this.getTrackingPayload({\n            orderId,\n            revenue: orderAmount,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            extraItemsData,\n            lineItems,\n        }));\n\n        this.clearExtraItemData(cartId);\n    }\n\n    trackStepViewed(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepViewed(stepId)) {\n            return;\n        }\n\n        this.trackViewed(stepId);\n        this.backfill(stepId);\n    }\n\n    trackStepCompleted(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepCompleted(stepId)) {\n            return;\n        }\n\n        this.backfill(stepId);\n        this.trackCompleted(stepId);\n    }\n\n    private backfill(stepId: AnalyticStepId): void {\n        for (const i of this._analyticStepOrder) {\n            const id = this.getIdFromStep(i);\n\n            if (!id) {\n                break;\n            }\n\n            if (!this.hasStepViewed(id)) {\n                this.trackViewed(id);\n            }\n\n            if (id === stepId) {\n                break;\n            }\n\n            if (!this.hasStepCompleted(id)) {\n                this.trackCompleted(id);\n            }\n        }\n    }\n\n    private trackCompleted(stepId: AnalyticStepId): void {\n        const shippingMethod = this.getSelectedShippingOption();\n        const { code: currency = '' } = this.getShopperCurrency() || {};\n        const paymentMethod = this.getPaymentMethodName();\n\n        const payload: {\n            step: number;\n            currency: string;\n            shippingMethod?: string;\n            paymentMethod?: string;\n        } = {\n            step: stepId,\n            currency,\n        };\n\n        if (shippingMethod) {\n            payload.shippingMethod = shippingMethod.description;\n        }\n\n        if (paymentMethod) {\n            payload.paymentMethod = paymentMethod;\n        }\n\n        // due to an issue with the way the segment library works, we must send at least one of the two\n        // options--otherwise it rejects the track call with no diagnostic messages. however, if we blindly\n        // include both options, it sends a single comma for the value, which is undesireable. by only adding\n        // one of the two (shippingMethod here being arbitrarily chosen), we always have at least one value, but\n        // never send two empty values.\n        if (!payload.shippingMethod && !payload.paymentMethod) {\n            payload.shippingMethod = ' ';\n        }\n\n        this.analytics.track('Checkout Step Completed', payload);\n\n        const shippingMethodId = shippingMethod ? shippingMethod.id : '';\n        const completedStepId = stepId === AnalyticStepId.SHIPPING ?\n            `${stepId}-${shippingMethodId}` :\n            stepId;\n\n        this._completedSteps[completedStepId] = true;\n    }\n\n    private getTrackingPayload({\n        orderId,\n        revenue,\n        shipping,\n        tax,\n        discount,\n        coupons,\n        extraItemsData,\n        lineItems,\n    }: {\n        orderId?: number;\n        revenue: number;\n        shipping: number;\n        tax: number;\n        discount: number;\n        coupons: Coupon[];\n        extraItemsData: ExtraItemsData;\n        lineItems: LineItemMap;\n    }) {\n        const { code = '' } = this.getShopperCurrency() || {};\n        const { storeName = '' } = this.getStoreProfile() || {};\n\n        return {\n            orderId,\n            affiliation: storeName,\n            revenue: this.toShopperCurrency(revenue),\n            shipping: this.toShopperCurrency(shipping),\n            tax: this.toShopperCurrency(tax),\n            discount: this.toShopperCurrency(discount),\n            coupon: (coupons || []).map(coupon => coupon.code).join(','),\n            currency: code,\n            products: this.getProducts(extraItemsData, lineItems),\n        };\n    }\n\n    private hasStepCompleted(stepId: AnalyticStepId): boolean {\n        const shippingOption = this.getSelectedShippingOption();\n        const shippingMethodId = shippingOption ? shippingOption.id : '';\n\n        return this._completedSteps.hasOwnProperty(stepId) ||\n            (\n                stepId === AnalyticStepId.SHIPPING &&\n                this._completedSteps.hasOwnProperty(`${stepId}-${shippingMethodId}`)\n            );\n    }\n\n    private hasStepViewed(stepId: AnalyticStepId): boolean {\n        return !!this._viewedSteps[stepId];\n    }\n\n    private getIdFromStep(step: string): AnalyticStepId | null {\n        const name = step.split('.');\n\n        return ANALYTIC_STEPS[name[0]] || null;\n    }\n\n    private trackViewed(stepId: AnalyticStepId): void {\n        const currency = this.getShopperCurrency();\n\n        this.analytics.track('Checkout Step Viewed', {\n            step: stepId,\n            currency: currency ? currency.code : '',\n        });\n\n        this._viewedSteps[stepId] = true;\n    }\n\n    private getOrder(): Order | undefined {\n        const { data: { getOrder } } = this.checkoutService.getState();\n\n        return getOrder();\n    }\n\n    private getCheckout(): Checkout | undefined {\n        const { data: { getCheckout } } = this.checkoutService.getState();\n\n        return getCheckout();\n    }\n\n    private getShopperCurrency(): ShopperCurrency | undefined {\n        const { data: { getConfig } } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.shopperCurrency;\n    }\n\n    private getStoreProfile(): StoreProfile | undefined {\n        const { data: { getConfig } } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.storeProfile;\n    }\n\n    private toShopperCurrency(amount: number): number {\n        const { exchangeRate = 1 } = this.getShopperCurrency() || {};\n\n        return Math.round(amount * exchangeRate * 100) / 100;\n    }\n\n    private saveExtraItemsData(id: string, lineItems: LineItemMap): ExtraItemsData {\n        const data = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].reduce((result, item) => {\n            result[item.productId] = {\n                brand: item.brand ? item.brand : '',\n                category: item.categoryNames ? item.categoryNames.join(', ') : '',\n            };\n\n            return result;\n        }, {} as ExtraItemsData);\n\n        try {\n            this.storage.setItem(this.getStorageKey(id), JSON.stringify(data));\n\n            return data;\n        } catch (err) {\n            return {};\n        }\n    }\n\n    private getStorageKey(id: string): string {\n        return id ? `${ORDER_ITEMS_STORAGE_KEY}_${id}` : '';\n    }\n\n    private readExtraItemsData(id: string): ExtraItemsData | null {\n        try {\n            const item = this.storage.getItem(this.getStorageKey(id));\n\n            return item ? JSON.parse(item) : null;\n        } catch (err) {\n            return null;\n        }\n    }\n\n    private clearExtraItemData(id: string): void {\n        try {\n            this.storage.removeItem(this.getStorageKey(id));\n        } catch (err) {\n            // silently ignore the failure\n        }\n    }\n\n    private getSelectedShippingOption(): ShippingOption | null {\n        const { data } = this.checkoutService.getState();\n        const shippingOption = data.getSelectedShippingOption();\n\n        return (shippingOption && shippingOption.id && shippingOption.description) ?\n            shippingOption :\n            null;\n    }\n\n    private getPaymentMethodName(): string {\n        const { data } = this.checkoutService.getState();\n        const paymentMethod = data.getSelectedPaymentMethod();\n\n        return (paymentMethod && paymentMethod.config) ?\n            paymentMethod.config.displayName || '' :\n            '';\n    }\n\n    private getProducts(itemsData: ExtraItemsData, lineItems: LineItemMap): AnalyticsProduct[] {\n        const customItems: AnalyticsProduct[] = (lineItems.customItems || []).map(item => ({\n            product_id: item.id,\n            sku: item.sku,\n            price: item.listPrice,\n            quantity: item.quantity,\n            name: item.name,\n        }));\n\n        const giftCertificateItems: AnalyticsProduct[] = lineItems.giftCertificates.map(item => {\n            return {\n                product_id: item.id,\n                price: this.toShopperCurrency(item.amount),\n                name: item.name,\n                quantity: 1,\n            };\n        });\n\n        const physicalAndDigitalItems: AnalyticsProduct[] = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].map(item => {\n            let itemAttributes;\n\n            if (item.options && item.options.length) {\n                itemAttributes = item.options.map(option => `${option.name}:${option.value}`);\n                itemAttributes.sort();\n            }\n\n            return {\n                product_id: item.productId,\n                sku: item.sku,\n                price: item.listPrice,\n                image_url: item.imageUrl,\n                name: item.name,\n                quantity: item.quantity,\n                brand: itemsData[item.productId] ? itemsData[item.productId].brand : '',\n                category: itemsData[item.productId] ? itemsData[item.productId].category : '',\n                variant: (itemAttributes || []).join(', '),\n            };\n        });\n\n        return [\n            ...customItems,\n            ...physicalAndDigitalItems,\n            ...giftCertificateItems,\n        ];\n    }\n}\n\nexport interface AnalyticsProduct {\n    product_id: string | number;\n    price: number;\n    quantity: number;\n    name: string;\n    sku?: string;\n    image_url?: string;\n    category?: string;\n    variant?: string;\n    brand?: string;\n}\n\nexport interface ExtraItemsData {\n    [productId: string]: {\n        brand: string;\n        category: string;\n    };\n}\n","import StepTracker from './step-tracker';\n\nexport default class NoopStepTracker implements StepTracker {\n    trackCheckoutStarted(): void {\n        return;\n    }\n\n    trackOrderComplete(): void {\n        return;\n    }\n\n    trackStepViewed(): void {\n        return;\n    }\n\n    trackStepCompleted(): void {\n        return;\n    }\n}\n","import localStorageFallback from 'local-storage-fallback';\n\nimport { CheckoutService } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport AnalyticsStepTracker, { StepTrackerConfig } from './analytics-step-tracker';\nimport { isAnalyticsTrackerWindow } from './is-analytics-step-tracker-window';\nimport NoopStepTracker from './noop-step-tracker';\nimport StepTracker from './step-tracker';\n\n/**\n * Creates an instance of `StepTracker`.\n *\n * @remarks\n * ```js\n * const checkoutService = createCheckoutService();\n * await checkoutService.loadCheckout();\n * const stepTracker = createStepTracker(checkoutService);\n *\n * stepTracker.trackCheckoutStarted();\n * ```\n *\n * @alpha\n * Please note that `StepTracker` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param CheckoutService - An instance of CheckoutService\n * @param StepTrackerConfig - A step tracker config object\n * @returns an instance of `StepTracker`.\n */\nexport default function createStepTracker(\n    checkoutService: CheckoutService,\n    stepTrackerConfig?: StepTrackerConfig\n): StepTracker {\n    const { data } = checkoutService.getState();\n    const config = data.getConfig();\n\n    if (!config) {\n        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n    }\n\n    const { isAnalyticsEnabled } = config.checkoutSettings;\n\n    if (isAnalyticsEnabled && isAnalyticsTrackerWindow(window)) {\n        return new AnalyticsStepTracker(\n            checkoutService,\n            localStorageFallback,\n            window.analytics,\n            stepTrackerConfig\n        );\n    }\n\n    return new NoopStepTracker();\n}\n","import AnalyticsTrackerWindow from './analytics-tracker-window';\n\nexport function isAnalyticsTrackerWindow(window: Window): window is AnalyticsTrackerWindow {\n    return Boolean((window as AnalyticsTrackerWindow).analytics);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from '../checkout';\nexport { createCheckoutButtonInitializer } from '../checkout-buttons';\nexport { embedCheckout } from '../embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from '../embedded-checkout/iframe-content';\nexport { createLanguageService } from '../locale';\nexport { createCurrencyService } from '../currency';\nexport { createStepTracker } from '../analytics';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { AmazonMaxoButtonParams, AmazonMaxoSDK } from './amazon-maxo';\nimport AmazonMaxoScriptLoader from './amazon-maxo-script-loader';\n\nexport default class AmazonMaxoPaymentProcessor {\n    //private _amazonMaxoClient?: AmazonMaxoClient;\n    private _amazonMaxoSDK?: AmazonMaxoSDK;\n    private _methodId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _amazonMaxoScriptLoader: AmazonMaxoScriptLoader,\n    ) { }\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    createButton(\n        containerId: string,\n        params: AmazonMaxoButtonParams\n    ): HTMLElement {\n\n        if (!this._amazonMaxoSDK) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._amazonMaxoSDK.Pay.renderButton(containerId, params);\n    }\n\n    deinitialize(): Promise<void> {\n        return new Promise(() => { });\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._amazonMaxoScriptLoader.load(paymentMethod)\n                    .then( (amazonMaxoClient) => {\n                        if (amazonMaxoClient) {\n                            this._amazonMaxoSDK = amazonMaxoClient;\n                        }\n                    })\n            });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonMaxoHostWindow, AmazonMaxoSDK, AmazonMaxoRegions } from './amazon-maxo';\n\nexport default class AmazonMaxoScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonMaxoHostWindow = window\n    ) {}\n\n    //verify the url depending to the zone\n    load(method: PaymentMethod): Promise<AmazonMaxoSDK> {\n        const {            \n            initializationData: { region = 'us' } = {},\n        } = method;      \n                \n        const amazonMaxoRegion = (AmazonMaxoRegions as any)[region];\n\n        return this._scriptLoader\n            .loadScript(`https://static-${amazonMaxoRegion}.payments-amazon.com/checkout.js`)\n            .then(() => {\n                if (!this._window.amazon) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.amazon;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutStore } from '../../../checkout';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport AmazonMaxoPaymentProcessor from './amazon-maxo-payment-processor';\nimport AmazonMaxoScriptLoader from './amazon-maxo-script-loader';\n\nexport default function createAmazonMaxoPaymentProcessor(store: CheckoutStore): AmazonMaxoPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new AmazonMaxoPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new AmazonMaxoScriptLoader(scriptLoader),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}