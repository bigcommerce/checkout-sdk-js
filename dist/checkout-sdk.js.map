{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"@bigcommerce/memoize\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/utility/is-plain-object.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/store-credit/store-credit-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/external \"shallowequal\"","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"reselect\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/common/selector/with-memoized-combiner.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/data-store/cache-action.ts","webpack://checkoutKit/./src/common/data-store/is-action-options.ts","webpack://checkoutKit/./src/common/data-store/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/http-request/join-or-merge-includes.ts","webpack://checkoutKit/./src/common/http-request/merge-includes.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/common/utility/replace.ts","webpack://checkoutKit/./src/common/utility/object-set.ts","webpack://checkoutKit/./src/billing/billing-address-state.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/common/utility/array-replace.ts","webpack://checkoutKit/./src/common/utility/object-merge.ts","webpack://checkoutKit/./src/cart/cart-state.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-state.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-state.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-state.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-state.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-state.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-state.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-state.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-state.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-state.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-state.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-state.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-state.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/store-credit/store-credit-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-state.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/payment/instrument/supported-payment-instruments.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-state.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/common/utility/cache-key-maps.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/selector/create-selector.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/iframe/iframe-resizer.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/spam-protection/spam-protection-request-sender.ts","webpack://checkoutKit/./src/store-credit/store-credit-action-creator.ts","webpack://checkoutKit/./src/store-credit/store-credit-request-sender.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-request-transformer.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/errors/payment-method-failed-error.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-instrument-not-valid-error.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/map-to-account-instrument.ts","webpack://checkoutKit/./src/payment/instrument/map-to-card-instrument.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/common/data-store/create-data-store-projection.ts","webpack://checkoutKit/./src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://checkoutKit/./src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://checkoutKit/./src/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/common/utility/clone-result.ts","webpack://checkoutKit/./src/common/selector/create-shallow-equal-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/analytics/analytics-step-tracker.ts","webpack://checkoutKit/./src/analytics/noop-step-tracker.ts","webpack://checkoutKit/./src/analytics/create-step-tracker.ts","webpack://checkoutKit/./src/analytics/is-analytics-step-tracker-window.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","CheckoutActionType","OrderActionType","PaymentMethodActionType","BillingAddressActionType","CheckoutButtonActionType","CouponActionType","InstrumentActionType","GiftCertificateActionType","EmbeddedCheckoutEventType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","response","errors","ConfigActionType","isPlainObject","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","StoreCreditActionType","ContentType","PaymentActionType","HOSTED","OFFLINE","joinIncludes","includes","join","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","targetOrigin","_targetWindow","this","_targetOrigin","origin","post","event","window","postMessage","setTarget","SpamProtectionActionType","CustomerActionType","withMemoizedCombiner","creator","combiner","args","pop","result","combinerArgs","ErrorActionType","_requestSender","loadPaymentMethods","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","timeout","Accept","JsonV1","url","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","data","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","map","item","amountTransformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","mapToInternalLineItemType","INTERNAL_USE_ONLY","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","productId","option","addedByPromotion","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","action","payload","_decimalPlaces","Math","round","pow","parseUrl","test","anchor","document","createElement","href","port","hostname","hash","protocol","pathname","search","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","method","lastArg","instanceMethods","set","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","mergeIncludes","bindMethodDecorator","boundMethod","target","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","omitDeep","predicate","_checkoutRequestSender","_configActionCreator","loadCheckout","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","updateCheckout","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","lineItem","concat","request","DEFAULT_INCLUDES","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","EmbeddedContentEventType","joinErrors","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","replace","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customer","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","checkoutReducer","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","provider","braintreepaypal","authorizenet","stripe","stripev3","cybersource","converge","bluesnapv2","paymetric","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getStoreConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getInstruments","card","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","providerType","internalPayment","step","redirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutIncludes","couponTypes","mapToInternalCoupon","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","slice","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","merchantId","clientId","actions","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","createCheckoutButtonRegistry","NotEmbeddableErrorType","_namespace","getItem","rawValue","withNamespace","parse","removeItem","getItemOnce","setItem","UnknownError","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","StyleConfigured","reject","now","encodeURIComponent","visibility","lastAttempt","Number","MissingContent","EmbeddedCheckout","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","loadingIndicator","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","_configRequestSender","DEFAULT_PARAMS","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","paymentMethodTokenizationParameters","shippingAddressParameters","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","last4","err","stripeVersion","stripePublishableKey","mapToInternalCustomer","customerId","isGuest","fullName","customerGroupName","customerGroup","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","scriptSrc","async","iframeResizer","originalIframeResizer","setupContentWindowForIframeResizer","clearError","getEnvironment","process","NODE_ENV","e","_console","log","_logToConsole","messages","info","warn","debug","isEnabled","logger","console","getDefaultLogger","_couponRequestSender","applyCoupon","removeCoupon","couponCode","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","giftCertificateCode","_strategyRegistry","signIn","credentials","signOut","widgetInteraction","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_postForm","userData","userEmail","card_information","_getCardInformation","cardInformation","_getAddress","_toVisaCheckoutAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","V","JPMC","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","_remoteCheckoutActionCreator","amazonOptions","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","braintreevisacheckout","visaCheckoutOptions","initOptions","storeProfile","storeLanguage","signInButton","init","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","_chasePayScriptLoader","chasepay","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","_customerActionCreator","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","masterpassOptions","Masterpass","_countryRequestSender","loadCountries","_config","loadOrder","submitOrder","finalizeOrder","_orderRequestSender","_checkoutValidator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","shouldExecuteSpamCheck","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","PaymentStrategyType","_orderActionCreator","_spamProtectionActionCreator","execute","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","comparator","_compareCoupons","_compareGiftCertificates","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_googleRecaptcha","spamProtectionElementId","spamProtectionElement","setAttribute","recaptchaSitekey","checkoutSettings","googleRecaptchaSitekey","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_paymentRequestSender","_paymentRequestTransformer","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","initializeOffsitePayment","shouldSaveInstrument","formattedPayload","bigpay_token","vault_payment_instrument","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_transformResponse","statusText","isVaultedInstrument","ThreeDS2ComponentType","ResultCode","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","authToken","vaultAccessToken","quoteMeta","geoCountryCode","source","paymentMethodSelector","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","invalidFields","OrderIncludes","_paymentActionCreator","_adyenV2ScriptLoader","_locale","adyenv2","_adyenv2","configuration","environment","originKey","paymentMethodsResponse","adyenCheckout","_adyenCheckout","adyenPaymentComponent","onChange","_updateAdyenComponentState","mount","_adyenPaymentComponent","cardVerificationContainerId","adyenCardVerificationComponent","_adyenCardVerificationComponent","adyenComponentState","_adyenComponentState","encryptedCardNumber","encryptedSecurityCode","ccCvv","ccNumber","paymentPayload","three_ds_result","IdentifyShopper","_handle3DS2Fingerprint","ChallengeShopper","_handle3DS2Challenge","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","unmount","_getAdyenV2PaymentInitializeOptions","_getThreeDS2ChallengeWidgetSize","widgetSize","resultObject","paymentMethodId","challengeComponent","ThreeDS2Challenge","challengeToken","challengeData","challengePaymentPayload","payment_data","threeDS2Container","threeDS2ContainerId","fingerprintComponent","ThreeDS2DeviceFingerprint","fingerprintToken","fingerprintData","fingerprintPaymentPayload","newState","_stylesheetLoader","loadStylesheet","AdyenCheckout","_affirmScriptLoader","publicKey","affirm","_affirm","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","Function","apikey","scriptURI","_getScriptURI","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_element","_createElement","parentElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","handeTransition","propertyName","promise","cancellable","cancel","race","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","getSessionId","appendSessionId","processedPayment","creditCard","cardholderName","ccName","cvv","expirationDate","ccExpiry","month","year","endpoint","isCreditCardLike","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","tokenizedCard","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","_credit","braintreeOptions","isBraintreeError","isVaultingEnabled","_formattedPayload","vaultPaymentInstrument","device_info","paypal_account","_paymentStrategyActionCreator","visaInitOptions","_cardinalClient","prepare","start","runBinProcess","_getBinNumber","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","ChasePayEventType","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","CardBrand","DigitalWalletType","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","_threeDSecureFlow","_googlePayOptions","statusCode","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorization_token","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","Klarna","Credit","orderPayload","_shouldSubmitFullPayload","_isPaymentAcknowledged","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","square","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SqPaymentForm","_stripeScriptLoader","stripeOptions","stripeJs","_stripeV3Client","cardElement","elements","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","publishableKey","Stripe","betas","_riskClient","WePay","risk","generate_risk_token","get_risk_token","orderActionCreator","paymentActionCreator","payloadWithToken","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","onCheckout","openModal","externalId","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","paymentRequestTransformer","paymentRequestSender","billingAddressActionCreator","braintreePaymentProcessor","overlay","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","spamProtectionActionCreator","storeCreditActionCreator","paymentMethodActionCreator","remoteCheckoutActionCreator","configActionCreator","paymentStrategyActionCreator","ADYENV2","AFFIRM","AFTERPAY","AMAZON","CYBERSOURCE","KLARNA","PAYPAL","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","SQUARE","BRAINTREE","BRAINTREE_VISA_CHECKOUT","CHASE_PAY","BRAINTREE_GOOGLE_PAY","WE_PAY","STRIPE_GOOGLE_PAY","ZIP","CONVERGE","STRIPEV3","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","method_type","defaultInstrument","default_instrument","external_id","trustedShippingAddress","trusted_shipping_address","mapToAccountInstrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","mapToCardInstrument","_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","_shippingCountryRequestSender","selectOption","mergedOptions","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","ProjectionActionType","callback","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","event$","getResponse","reset","a","b","_event$","_recaptcha","_watchRecaptchaChallengeWindow","iframeContainer","observe","attributeFilter","_loadPromise","_loadScript","grecaptcha","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","isSubmittingOrder","createCheckoutStoreSelector","availableShippingOptions","val","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","_messageCustomizer","trim","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","executeSpamCheck","CheckoutService","createCheckoutService","setHost","paymentSettings","bigpayBaseUrl","createPaymentClient","orderRequestSender","MutationObserverFactory","spamProtectionRequestSender","remoteCheckoutRequestSender","createCustomerStrategyRegistry","consignmentRequestSender","consignmentActionCreator","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","isCustomError","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","_logger","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","compile","_transformData","_transformConfig","output","defaultTranslations","_flattenObject","parentKey","resultKey","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","decimalAmount","parsedIntegerAmount","_toFixed","precision","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","AnalyticStepId","ANALYTIC_STEPS","CUSTOMER","SHIPPING","BILLING","PAYMENT","checkoutService","storage","analytics","checkoutSteps","_checkoutStarted","_completedSteps","_viewedSteps","_analyticStepOrder","trackCheckoutStarted","extraItemsData","saveExtraItemsData","track","getTrackingPayload","revenue","tax","trackOrderComplete","readExtraItemsData","clearExtraItemData","trackStepViewed","stepId","getIdFromStep","hasStepViewed","trackViewed","backfill","trackStepCompleted","hasStepCompleted","trackCompleted","shippingMethod","getPaymentMethodName","shippingMethodId","completedStepId","affiliation","toShopperCurrency","products","getProducts","getShopperCurrency","getStoreProfile","getStorageKey","ORDER_ITEMS_STORAGE_KEY","itemsData","product_id","giftCertificateItems","physicalAndDigitalItems","itemAttributes","image_url","variant","createStepTracker","stepTrackerConfig","isAnalyticsEnabled","isAnalyticsTrackerWindow","ButtonType","ButtonColor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","mapToInternalCart","promotions","notifications","promotion","banners","banner","placeholders","messageHtml","certificate","isShippingRequired","taxSubtotal","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 153);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedContentOptions } from './iframe-content';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVisaCheckout, GooglePayBraintreeSDK } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState, DEFAULT_STATE } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    stripev3: {\n        provider: 'stripev3',\n        method: 'credit_card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    'barclaycard.card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch } from 'lodash';\n\nimport { PaymentMethod } from '..';\nimport { createSelector } from '../../common/selector';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getInstruments(): CardInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const cardInstruments = flatMap(supportedInstruments, card =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is CardInstrument => {\n                    return card.method === 'credit_card' && isMatch(instrument, card);\n                })\n            );\n\n            return cardInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike, BillingAddress } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeError, BraintreePaypalCheckout, BraintreeShippingAddressOverride, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: payload.details.firstName,\n                last_name: payload.details.lastName,\n                phone_number: payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeShippingAddressOverride {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport const ALLOW_COOKIE_ATTEMPT_INTERVAL = 10 * 60 * 1000;\nexport const IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\nexport const LAST_ALLOW_COOKIE_ATTEMPT_KEY = 'lastAllowCookieAttempt';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            return Promise.resolve();\n        }\n\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        // It could be possible that the flag is set to true but the browser has\n        // already removed the permission to store third-party cookies. In that\n        // case, we should try to redirect the user again. But we only want to\n        // do it once within a fixed interval. This is to avoid getting into a\n        // redirect loop if the shopper actually doesn't have a valid card\n        // session.\n        this._storage.setItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY, Date.now());\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const lastAttempt = Number(this._storage.getItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY));\n        const canRetry = (\n            (!lastAttempt || Date.now() - lastAttempt > ALLOW_COOKIE_ATTEMPT_INTERVAL) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId: string = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    /* eslint-disable-next-line import/no-internal-modules */\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport { CustomerStrategyActionType, CustomerStrategyDeinitializeAction, CustomerStrategyInitializeAction, CustomerStrategySignInAction, CustomerStrategySignOutAction, CustomerStrategyWidgetAction } from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<void> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport { VisaCheckoutAddress, VisaCheckoutInitOptions, VisaCheckoutPaymentSuccessPayload, VisaCheckoutTokenizedPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { ChasePayHostWindow, JPMC } from './chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutPaymentSuccessPayload, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam check. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (checkout.shouldExecuteSpamCheck) {\n                    throw new SpamProtectionNotCompletedError();\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from '../spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport { PaymentStrategyActionType, PaymentStrategyDeinitializeAction, PaymentStrategyExecuteAction, PaymentStrategyFinalizeAction, PaymentStrategyInitializeAction, PaymentStrategyWidgetAction } from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._spamProtectionActionCreator.execute()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender\n    ) {}\n\n    initialize(options?: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n            defer(async () => {\n                const spamProtectionElementId = options ? options.containerId : 'spamProtectionContainer';\n\n                if (!options && !document.getElementById(spamProtectionElementId)) {\n                    const spamProtectionElement = document.createElement('div');\n                    spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                    document.body.appendChild(spamProtectionElement);\n                }\n\n                const state = store.getState();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                return createAction(SpamProtectionActionType.InitializeSucceeded);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(SpamProtectionActionType.InitializeFailed, error))\n        );\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const { shouldExecuteSpamCheck } = checkout;\n\n            if (!shouldExecuteSpamCheck) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n                this._googleRecaptcha.execute()\n                    .pipe(take(1))\n                    .pipe(switchMap(({ error, token }) => {\n                        if (error || !token) {\n                            throw new SpamProtectionFailedError();\n                        }\n\n                        return this._requestSender.validate(checkout.id, token)\n                            .then(({ body }) => createAction(SpamProtectionActionType.ExecuteSucceeded, body));\n                    }))\n            ).pipe(\n                catchError(error => throwErrorAction(SpamProtectionActionType.ExecuteFailed, error))\n            );\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    validate(checkoutId: string, token: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment, { FormattedHostedInstrument, FormattedPayload, FormattedVaultedInstrument } from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string,\n        instrumentId?: string,\n        shouldSaveInstrument?: boolean\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            let paymentData: FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument> | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = { formattedPayload: { vault_payment_instrument: shouldSaveInstrument } };\n            }\n\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId, paymentData }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenCheckout;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: AdyenPaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: AdyenPaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface AdyenPaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface AdyenPaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface AdyenThreeDS2Options {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     */\n    widgetSize?: string;\n\n    /**\n     * A callback that gets called when adyen component is mounted\n     */\n    onLoad(cancel: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete(): void;\n}\n\nexport enum ThreeDS2ComponentType {\n    ThreeDS2DeviceFingerprint = 'threeDS2DeviceFingerprint',\n    ThreeDS2Challenge = 'threeDS2Challenge',\n}\n\nexport interface ThreeDS2Result {\n    payment_data: string;\n    code: string;\n    token: string;\n}\n\nexport interface ThreeDS1Result {\n    acs_url: string;\n    payer_auth_request: string;\n    callback_url: string;\n    merchant_data: string;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface RecurringDetail extends AdyenPaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenCheckout {\n    create(type: string, componentOptions?: AdyenCreditCardComponentOptions |\n        ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions | AdyenCustomCardComponentOptions): AdyenComponent;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: AdyenStyleOptions;\n}\n\nexport interface AdyenCardComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface AdyenCreditCardComponentOptions extends AdyenBaseCardComponentOptions, AdyenCardComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Prefill the card holder name field. Supported from Card component\n     */\n    holderName?: string;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface AdyenCustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface AdyenCustomCardComponentOptions extends AdyenBaseCardComponentOptions, AdyenCardComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: AdyenCustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\nexport interface AdyenCardState {\n    data: AdyenCardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface AdyenCardDataPaymentMethodState {\n    paymentMethod: AdyenCardPaymentMethodState;\n}\nexport interface AdyenCardPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n    type: string;\n}\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    fingerprintToken: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport enum ResultCode {\n    AuthenticationFinished = 'AuthenticationFinished',\n    Authorised = 'Authorised',\n    Cancelled = 'Cancelled',\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n    Pending = 'Pending',\n    Received = 'Received',\n    RedirectShopper = 'RedirectShopper',\n    Refused = 'Refused',\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    challengeToken: string;\n    size?: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenStyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface ThreeDS2OnComplete {\n    data: {\n        details: {\n            'threeds2.challengeResult'?: string;\n            'threeds2.fingerprint'?: string;\n            paymentData: string;\n        };\n    };\n}\n\nexport interface ThreeDSRequiredErrorResponse {\n    errors: [\n        { code: string }\n    ];\n    three_ds_result: {\n        code: ResultCode;\n        token?: string;\n        payment_data?: string;\n        acs_url?: string;\n        callback_url?: string;\n        payer_auth_request?: string;\n        merchant_data?: string;\n    };\n    status: string;\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry, RegistryOptions } from '../common/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen' || paymentMethod.gateway === 'barclaycard') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { AdyenCardState, AdyenCheckout, AdyenComponent, AdyenConfiguration, AdyenError, ResultCode, ThreeDS2ComponentType, ThreeDS2OnComplete, ThreeDS2Result } from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenCheckout?: AdyenCheckout;\n    private _adyenv2?: AdyenV2PaymentInitializeOptions;\n    private _adyenPaymentComponent?: AdyenComponent;\n    private _adyenCardVerificationComponent?: AdyenComponent;\n    private _adyenComponentState?: AdyenCardState;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _adyenV2ScriptLoader: AdyenV2ScriptLoader,\n        private _formPoster: FormPoster,\n        private _locale: string\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._adyenv2 = adyenv2;\n\n        const configuration: AdyenConfiguration = {\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            originKey: paymentMethod.initializationData.originKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        };\n\n        return this._adyenV2ScriptLoader.load(configuration)\n            .then(adyenCheckout => {\n                this._adyenCheckout = adyenCheckout;\n\n                const adyenPaymentComponent = this._adyenCheckout.create(\n                    paymentMethod.id,\n                    {\n                        ...adyenv2.options,\n                        onChange: (state: AdyenCardState) => {\n                            this._updateAdyenComponentState(state);\n                        },\n                    }\n                );\n\n                adyenPaymentComponent.mount(`#${adyenv2.containerId}`);\n\n                this._adyenPaymentComponent = adyenPaymentComponent;\n\n                if (adyenv2.cardVerificationContainerId) {\n                    const adyenCardVerificationComponent = this._adyenCheckout.create('securedfields', {\n                        onChange: (state: AdyenCardState) => {\n                            this._updateAdyenComponentState(state);\n                        },\n                    });\n\n                    adyenCardVerificationComponent.mount(`#${adyenv2.cardVerificationContainerId}`);\n\n                    this._adyenCardVerificationComponent = adyenCardVerificationComponent;\n                }\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                const adyenComponentState = this._adyenComponentState;\n\n                if (!adyenComponentState) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n                if (paymentData && isVaultedInstrument(paymentData)) {\n\n                    const { encryptedCardNumber, encryptedSecurityCode } = adyenComponentState.data.paymentMethod;\n\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            instrumentId: paymentData.instrumentId,\n                            ccCvv: encryptedSecurityCode,\n                            ccNumber: encryptedCardNumber,\n                        },\n                    }));\n                }\n\n                const paymentPayload = {\n                    methodId: payment.methodId,\n                    paymentData: {\n                        nonce: JSON.stringify({\n                            ...adyenComponentState.data.paymentMethod,\n                            origin: window.location.origin,\n                        }),\n                        shouldSaveInstrument,\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                if (error.body.three_ds_result.code === ResultCode.IdentifyShopper) {\n                    return this._handle3DS2Fingerprint(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: {\n                                    ...payment.paymentData,\n                                    shouldSaveInstrument,\n                                },\n                            })))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            if (error.body.three_ds_result.code === ResultCode.ChallengeShopper) {\n                                return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                                    .then((payment: Payment) =>\n                                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                            ...payment,\n                                            paymentData: {\n                                                ...payment.paymentData,\n                                                shouldSaveInstrument,\n                                            },\n                                        }))\n                                    );\n                            }\n\n                            return Promise.reject(error);\n                        });\n                }\n\n                if (error.body.three_ds_result.code === ResultCode.ChallengeShopper) {\n                    return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: {\n                                    ...payment.paymentData,\n                                    shouldSaveInstrument,\n                                },\n                            }))\n                        );\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._adyenPaymentComponent) {\n            this._adyenPaymentComponent.unmount();\n            this._adyenPaymentComponent = undefined;\n        }\n\n        if (this._adyenCardVerificationComponent) {\n            this._adyenCardVerificationComponent.unmount();\n            this._adyenCardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenV2PaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._adyenv2) {\n            throw new InvalidArgumentError('\"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._adyenv2;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { widgetSize } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n        if (!widgetSize) {\n            return '01';\n        }\n\n        return widgetSize;\n    }\n\n    private _handle3DS2Challenge(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { onComplete, onLoad } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n            const challengeComponent = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2Challenge, {\n                    challengeToken: resultObject.token,\n                    onComplete: (challengeData: ThreeDS2OnComplete) => {\n                        const challengePaymentPayload = {\n                            ...challengeData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(challengePaymentPayload),\n                            },\n                        };\n\n                        onComplete();\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                    size: this._getThreeDS2ChallengeWidgetSize(),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            onLoad(() => {\n                challengeComponent.unmount();\n                reject();\n            });\n\n            challengeComponent.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _handle3DS2Fingerprint(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { onComplete, onLoad } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n            const fingerprintComponent = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2DeviceFingerprint, {\n                    fingerprintToken: resultObject.token,\n                    onComplete: (fingerprintData: ThreeDS2OnComplete) => {\n                        const fingerprintPaymentPayload = {\n                            ...fingerprintData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(fingerprintPaymentPayload),\n                            },\n                        };\n\n                        onComplete();\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            onLoad(() => {\n                fingerprintComponent.unmount();\n                reject();\n            });\n\n            fingerprintComponent.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _updateAdyenComponentState(newState: AdyenCardState) {\n        this._adyenComponentState = newState;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { AdyenCheckout, AdyenConfiguration, AdyenHostWindow } from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenHostWindow = window\n    ) {}\n\n    load(configuration: AdyenConfiguration): Promise<AdyenCheckout> {\n        return Promise.all([\n            this._stylesheetLoader.loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.3.0/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.3.0/adyen.js`),\n        ])\n        .then(() => {\n            if (!this._window.AdyenCheckout) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.AdyenCheckout(configuration);\n        })\n        .catch(() => {\n            throw new PaymentMethodClientUnavailableError();\n        });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderIncludes, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData, BraintreeShippingAddressOverride, BraintreeTokenizePayload, BraintreeVerifyPayload } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<BraintreeVerifyPayload> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    getSessionId(): Promise<string | undefined> {\n        return this._braintreeSDKCreator.getDataCollector()\n            .then(({ deviceData }) => deviceData);\n    }\n\n    /**\n     * @deprecated Use getSessionId() and combine them in the consumer.\n     */\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { FormattedPayload, PaypalInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\nimport mapToBraintreeShippingAddressOverride from './map-to-braintree-shipping-address-override';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { nonce, config: { isVaultingEnabled } } = this._paymentMethod;\n        const { paymentData = {} } = payment;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: this._formattedPayload(nonce) });\n        }\n\n        if (isVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError('Vaulting is disabled but a vaulted instrument was being used for this transaction');\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (paymentData.shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError('Vaulting is disabled but shouldSaveInstrument is set to true');\n        }\n\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress ? mapToBraintreeShippingAddressOverride(shippingAddress) : undefined;\n\n        return Promise.all([\n            this._braintreePaymentProcessor.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this._credit,\n                shippingAddressOverride,\n                shouldSaveInstrument: paymentData.shouldSaveInstrument || false,\n            }),\n            this._braintreePaymentProcessor.getSessionId(),\n        ]).then(([\n            { nonce, details },\n            sessionId,\n        ]) => ({\n            ...payment,\n            paymentData: this._formattedPayload(nonce, details.email, sessionId, paymentData.shouldSaveInstrument),\n        }));\n    }\n\n    private _formattedPayload(token: string, email?: string, sessionId?: string, vaultPaymentInstrument?: boolean): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the selected instrument is not in the list\n * of valid instruments or the type doesn't match the expected type.\n */\nexport default class PaymentInstrumentNotValidError extends InvalidArgumentError {\n    constructor(message?: string) {\n        super(message || 'The selected instrument is either missing or not a valid type.');\n\n        this.name = 'PaymentInstrumentNotValidError';\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, RequestError } from '../../../common/error/errors';\nimport { PaymentInstrumentNotValidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { CardinalClient, CardinalOrderData, CardinalSupportedPaymentInstrument } from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (!isVaultedInstrument(payment)) {\n            return payment.ccNumber;\n        }\n\n        const instruments = this._store.getState().instruments.getInstruments();\n        const { instrumentId: bigpayToken } = payment;\n\n        const entry = find(instruments, { bigpayToken });\n\n        if (!entry) {\n            throw new PaymentInstrumentNotValidError();\n        }\n\n        return entry.iin;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport { CardinalAccount, CardinalAddress, CardinalConsumer, CardinalEventType, CardinalInitializationType, CardinalPartialOrder, CardinalPaymentBrand, CardinalSignatureValidationErrors, CardinalSignatureVerification, CardinalSDK, CardinalTriggerEvents, CardinalValidatedAction, CardinalValidatedData } from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { HostedInstrument, VaultedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId = paymentData && (paymentData as VaultedInstrument).instrumentId;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(\n                    payment.methodId,\n                    payment.gatewayId,\n                    instrumentId,\n                    shouldSaveInstrument))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.gatewayId === 'barclaycard' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, TimeoutError, UnsupportedBrowserError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, { CardData, Contact, DigitalWalletType, NonceGenerationError, SquareFormElement, SquareFormOptions, SquarePaymentRequest } from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { StripeAddress, StripeBillingDetails, StripeCardElement, StripeHandleCardPaymentOptions, StripePaymentMethodData, StripeShippingDetails, StripeV3Client } from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { GoogleRecaptcha, SpamProtectionActionCreator, SpamProtectionRequestSender } from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, BraintreeCreditCardPaymentStrategy, BraintreePaypalPaymentStrategy, BraintreeScriptLoader, BraintreeSDKCreator, BraintreeVisaCheckoutPaymentStrategy, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { CardinalClient, CardinalScriptLoader, CardinalThreeDSecureFlow } from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayPaymentStrategy, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection, new SpamProtectionRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator, spamProtectionActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader, getStylesheetLoader()),\n            formPoster,\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport PaymentInstrument, { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody, InstrumentErrorResponseBody, InternalInstrument, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody, InternalVaultAccessTokenResponseBody } from './instrument-response-body';\nimport { mapToAccountInstrument } from './map-to-account-instrument';\nimport { mapToCardInstrument } from './map-to-card-instrument';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): PaymentInstrument[] {\n        return vaultedInstruments\n            .map(instrument => {\n                switch (instrument.method_type) {\n                    case 'paypal':\n                        return mapToAccountInstrument(instrument);\n                    default:\n                        return mapToCardInstrument(instrument);\n                }\n            });\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { AccountInstrument } from './instrument';\nimport { AccountInternalInstrument } from './instrument-response-body';\n\nexport function mapToAccountInstrument(instrument: AccountInternalInstrument): AccountInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        externalId: instrument.external_id,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method: instrument.method_type,\n        type: 'account',\n    };\n}\n","import { CardInstrument } from './instrument';\nimport { CardInternalInstrument } from './instrument-response-body';\n\nexport function mapToCardInstrument(instrument: CardInternalInstrument): CardInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        iin: instrument.iin,\n        last4: instrument.last_4,\n        expiryMonth: instrument.expiry_month,\n        expiryYear: instrument.expiry_year,\n        brand: instrument.brand,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method:  instrument.method === 'card' ? 'credit_card' : instrument.method, // This is a temporary change for the rollout of some changes in bigpay. It is meant to be removed when the changes in bigpay are fully rolled out\n        type: 'card',\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody } from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport { ShippingStrategyActionType, ShippingStrategyDeinitializeAction, ShippingStrategyInitializeAction, ShippingStrategySelectOptionAction, ShippingStrategyUpdateAddressAction } from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection challenge. Please try again.');\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, of, throwError, Observable, Subject } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError, SpamProtectionNotLoadedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => Subject<RecaptchaResult>;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {\n        this._memoized = memoize((recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n            const event$ = new Subject<RecaptchaResult>();\n\n            if (!container) {\n                throw new Error();\n            }\n\n            recaptcha.render(container.id, {\n                sitekey,\n                size: 'invisible',\n                callback: () => {\n                    event$.next({\n                        token: recaptcha.getResponse(),\n                    });\n                    recaptcha.reset();\n                },\n                'error-callback': () => {\n                    event$.next({\n                        error: new SpamProtectionFailedError(),\n                    });\n                },\n            });\n\n            return event$;\n        }, { isEqual: (a, b) => a === b });\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                this._event$ = this._memoized(recaptcha, sitekey, document.getElementById(containerId));\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        const event$ = this._event$;\n        const recaptcha = this._recaptcha;\n\n        if (!event$ || !recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        const timeout = 7000;\n        const retryInterval = 250;\n        const maxRetries = timeout / retryInterval;\n\n        return defer(() => {\n            const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n            return element ?\n                of(element) :\n                throwError(new SpamProtectionNotLoadedError());\n        })\n            .pipe(\n                retryWhen(errors => errors.pipe(\n                    delay(retryInterval),\n                    switchMap((error, index) =>\n                        index < maxRetries ? of(error) : throwError(error)\n                    )\n                )),\n                switchMap(element => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute();\n\n                    return event$;\n                }),\n                catchError(error => of({ error }))\n            );\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionChallengeNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import { createCheckoutStoreErrorSelectorFactory, createCheckoutStoreSelectorFactory, createCheckoutStoreStatusSelectorFactory, CheckoutSelectors, InternalCheckoutSelectors } from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { omit, values } from 'lodash';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { CardInstrument, PaymentInstrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type Instrument = CardInstrument;\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n    getInstruments(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getBillingAddress, getContextConfig) => clone(() => {\n            const billingAddress = getBillingAddress();\n            const context = getContextConfig();\n            const isEmptyBillingAddress = !billingAddress ||\n                values(omit(billingAddress, 'email', 'id')).every(val => !val || !val.length);\n\n            if (isEmptyBillingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return billingAddress;\n                }\n\n                return {\n                    id: billingAddress ? billingAddress.id : '',\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    email: billingAddress ? billingAddress.email : '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return billingAddress;\n        })\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstrumentsByPaymentMethod,\n        (getInstruments, getInstrumentsByPaymentMethod) => {\n            function getInstrumentsSelector(): Instrument[] | undefined;\n            function getInstrumentsSelector(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n            function getInstrumentsSelector(paymentMethod?: PaymentMethod): PaymentInstrument[] | undefined {\n                return paymentMethod ? getInstrumentsByPaymentMethod(paymentMethod) : getInstruments();\n            }\n\n            return clone(getInstrumentsSelector);\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether spam check is executing.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isExecutingSpamCheck(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isSubmittingOrder = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ checkout }: InternalCheckoutSelectors) => checkout.isExecutingSpamCheck, // Remove this when CheckoutService#initializeSpamProtection is deprecated\n        (isExecuting, isExecutingSpamCheck) => (methodId?: string) => {\n            return (\n                isExecuting(methodId) ||\n                isExecutingSpamCheck()\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isExecutingSpamCheck: state.checkout.isExecutingSpamCheck,\n            isSubmittingOrder: isSubmittingOrder(state),\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(\n        address: Partial<AddressRequestBody>,\n        options?: ShippingRequestOptions<CheckoutParams>\n    ): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * Note: Use `CheckoutService#executeSpamCheck` instead.\n     * You do not need to call this method before calling\n     * `CheckoutService#executeSpamCheck`.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection();\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     * @deprecated - Use CheckoutService#executeSpamCheck instead.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Verifies whether the current checkout is created by a human.\n     *\n     * Note: this method will do the initialization, therefore you do not\n     * need to call `CheckoutService#initializeSpamProtection`\n     * before calling this method.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.executeSpamCheck();\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    executeSpamCheck(): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize();\n\n        return this._dispatch(action, { queueId: 'spamProtection' })\n            .then(() => {\n                const action = this._spamProtectionActionCreator.execute();\n\n                return this._dispatch(action, { queueId: 'spamProtection' });\n            });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { createSpamProtection, SpamProtectionActionCreator, SpamProtectionRequestSender } from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection, spamProtectionRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender)\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator,\n            spamProtectionActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, BraintreeScriptLoader, BraintreeSDKCreator, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport { EmbeddedCheckoutCompleteEvent, EmbeddedCheckoutErrorEvent, EmbeddedCheckoutEvent, EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType, EmbeddedCheckoutFrameErrorEvent, EmbeddedCheckoutFrameLoadedEvent, EmbeddedCheckoutLoadedEvent, EmbeddedCheckoutSignedOutEvent } from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                if (message.type !== key) {\n                    return;\n                }\n\n                const handler = this._messageHandlers[key];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport { Logger } from '../common/log';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { keys } from 'lodash';\n\nimport { LineItemMap } from '../cart';\nimport { Checkout, CheckoutService } from '../checkout';\nimport { InvalidArgumentError } from '../common/error/errors';\nimport { ShopperCurrency, StoreProfile } from '../config';\nimport { Coupon } from '../coupon';\nimport { Order } from '../order';\nimport { ShippingOption } from '../shipping';\n\nimport { AnalyticsTracker } from './analytics-tracker-window';\nimport StepTracker from './step-tracker';\n\nexport interface StepTrackerConfig {\n    checkoutSteps?: AnalyticStepType[];\n}\n\nexport type AnalyticStepType = 'customer' | 'shipping' | 'billing' | 'payment';\n\nconst ORDER_ITEMS_STORAGE_KEY = 'ORDER_ITEMS';\n\nexport enum AnalyticStepId {\n    CUSTOMER = 1,\n    SHIPPING,\n    BILLING,\n    PAYMENT,\n}\n\nconst ANALYTIC_STEPS: { [key: string]: AnalyticStepId } = {\n    customer: AnalyticStepId.CUSTOMER,\n    shipping: AnalyticStepId.SHIPPING,\n    billing: AnalyticStepId.BILLING,\n    payment: AnalyticStepId.PAYMENT,\n};\n\nexport default class AnalyticsStepTracker implements StepTracker {\n    private _checkoutStarted: boolean = false;\n    private _completedSteps: { [key: string]: boolean } = {};\n    private _viewedSteps: { [key in AnalyticStepId]?: boolean; } = {};\n    private _analyticStepOrder: AnalyticStepType[] = [\n        'customer',\n        'shipping',\n        'billing',\n        'payment',\n    ];\n\n    constructor(\n        private checkoutService: CheckoutService,\n        private storage: StorageFallback,\n        private analytics: AnalyticsTracker,\n        { checkoutSteps }: StepTrackerConfig = {}\n    ) {\n        if (checkoutSteps !== undefined) {\n            if (checkoutSteps.some(value => !(value in ANALYTIC_STEPS))) {\n                throw new InvalidArgumentError(\n                    `Invalid checkout steps provided. Valid values are: ${keys(ANALYTIC_STEPS).join(', ')}.`\n                );\n            }\n            this._analyticStepOrder = checkoutSteps;\n\n        }\n    }\n\n    trackCheckoutStarted(): void {\n        if (this._checkoutStarted) {\n            return;\n        }\n\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const {\n            coupons,\n            grandTotal,\n            shippingCostTotal,\n            taxTotal,\n            cart: {\n                lineItems,\n                discountAmount,\n                id,\n            },\n        } = checkout;\n\n        const extraItemsData = this.saveExtraItemsData(id, lineItems);\n\n        this.analytics.track('Checkout Started', this.getTrackingPayload({\n            revenue: grandTotal,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            lineItems,\n            extraItemsData,\n        }));\n\n        this._checkoutStarted = true;\n    }\n\n    trackOrderComplete(): void {\n        const order = this.getOrder();\n\n        if (!order) {\n            return;\n        }\n\n        const {\n            isComplete,\n            orderId,\n            orderAmount,\n            shippingCostTotal,\n            taxTotal,\n            discountAmount,\n            coupons,\n            lineItems,\n            cartId,\n        } = order;\n\n        if (!isComplete) {\n            return;\n        }\n\n        const extraItemsData = this.readExtraItemsData(cartId);\n\n        if (extraItemsData === null) {\n            return;\n        }\n\n        this.analytics.track('Order Completed', this.getTrackingPayload({\n            orderId,\n            revenue: orderAmount,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            extraItemsData,\n            lineItems,\n        }));\n\n        this.clearExtraItemData(cartId);\n    }\n\n    trackStepViewed(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepViewed(stepId)) {\n            return;\n        }\n\n        this.trackViewed(stepId);\n        this.backfill(stepId);\n    }\n\n    trackStepCompleted(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepCompleted(stepId)) {\n            return;\n        }\n\n        this.backfill(stepId);\n        this.trackCompleted(stepId);\n    }\n\n    private backfill(stepId: AnalyticStepId): void {\n        for (const i of this._analyticStepOrder) {\n            const id = this.getIdFromStep(i);\n\n            if (!id) {\n                break;\n            }\n\n            if (!this.hasStepViewed(id)) {\n                this.trackViewed(id);\n            }\n\n            if (id === stepId) {\n                break;\n            }\n\n            if (!this.hasStepCompleted(id)) {\n                this.trackCompleted(id);\n            }\n        }\n    }\n\n    private trackCompleted(stepId: AnalyticStepId): void {\n        const shippingMethod = this.getSelectedShippingOption();\n        const { code: currency = '' } = this.getShopperCurrency() || {};\n        const paymentMethod = this.getPaymentMethodName();\n\n        const payload: {\n            step: number;\n            currency: string;\n            shippingMethod?: string;\n            paymentMethod?: string;\n        } = {\n            step: stepId,\n            currency,\n        };\n\n        if (shippingMethod) {\n            payload.shippingMethod = shippingMethod.description;\n        }\n\n        if (paymentMethod) {\n            payload.paymentMethod = paymentMethod;\n        }\n\n        // due to an issue with the way the segment library works, we must send at least one of the two\n        // options--otherwise it rejects the track call with no diagnostic messages. however, if we blindly\n        // include both options, it sends a single comma for the value, which is undesireable. by only adding\n        // one of the two (shippingMethod here being arbitrarily chosen), we always have at least one value, but\n        // never send two empty values.\n        if (!payload.shippingMethod && !payload.paymentMethod) {\n            payload.shippingMethod = ' ';\n        }\n\n        this.analytics.track('Checkout Step Completed', payload);\n\n        const shippingMethodId = shippingMethod ? shippingMethod.id : '';\n        const completedStepId = stepId === AnalyticStepId.SHIPPING ?\n            `${stepId}-${shippingMethodId}` :\n            stepId;\n\n        this._completedSteps[completedStepId] = true;\n    }\n\n    private getTrackingPayload({\n        orderId,\n        revenue,\n        shipping,\n        tax,\n        discount,\n        coupons,\n        extraItemsData,\n        lineItems,\n    }: {\n        orderId?: number;\n        revenue: number;\n        shipping: number;\n        tax: number;\n        discount: number;\n        coupons: Coupon[];\n        extraItemsData: ExtraItemsData;\n        lineItems: LineItemMap;\n    }) {\n        const { code = '' } = this.getShopperCurrency() || {};\n        const { storeName = '' } = this.getStoreProfile() || {};\n\n        return {\n            orderId,\n            affiliation: storeName,\n            revenue: this.toShopperCurrency(revenue),\n            shipping: this.toShopperCurrency(shipping),\n            tax: this.toShopperCurrency(tax),\n            discount: this.toShopperCurrency(discount),\n            coupon: (coupons || []).map(coupon => coupon.code).join(','),\n            currency: code,\n            products: this.getProducts(extraItemsData, lineItems),\n        };\n    }\n\n    private hasStepCompleted(stepId: AnalyticStepId): boolean {\n        const shippingOption = this.getSelectedShippingOption();\n        const shippingMethodId = shippingOption ? shippingOption.id : '';\n\n        return this._completedSteps.hasOwnProperty(stepId) ||\n            (\n                stepId === AnalyticStepId.SHIPPING &&\n                this._completedSteps.hasOwnProperty(`${stepId}-${shippingMethodId}`)\n            );\n    }\n\n    private hasStepViewed(stepId: AnalyticStepId): boolean {\n        return !!this._viewedSteps[stepId];\n    }\n\n    private getIdFromStep(step: string): AnalyticStepId | null {\n        const name = step.split('.');\n\n        return ANALYTIC_STEPS[name[0]] || null;\n    }\n\n    private trackViewed(stepId: AnalyticStepId): void {\n        const currency = this.getShopperCurrency();\n\n        this.analytics.track('Checkout Step Viewed', {\n            step: stepId,\n            currency: currency ? currency.code : '',\n        });\n\n        this._viewedSteps[stepId] = true;\n    }\n\n    private getOrder(): Order | undefined {\n        const { data: { getOrder } } = this.checkoutService.getState();\n\n        return getOrder();\n    }\n\n    private getCheckout(): Checkout | undefined {\n        const { data: { getCheckout } } = this.checkoutService.getState();\n\n        return getCheckout();\n    }\n\n    private getShopperCurrency(): ShopperCurrency | undefined {\n        const { data: { getConfig } } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.shopperCurrency;\n    }\n\n    private getStoreProfile(): StoreProfile | undefined {\n        const { data: { getConfig } } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.storeProfile;\n    }\n\n    private toShopperCurrency(amount: number): number {\n        const { exchangeRate = 1 } = this.getShopperCurrency() || {};\n\n        return Math.round(amount * exchangeRate * 100) / 100;\n    }\n\n    private saveExtraItemsData(id: string, lineItems: LineItemMap): ExtraItemsData {\n        const data = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].reduce((result, item) => {\n            result[item.productId] = {\n                brand: item.brand ? item.brand : '',\n                category: item.categoryNames ? item.categoryNames.join(', ') : '',\n            };\n\n            return result;\n        }, {} as ExtraItemsData);\n\n        try {\n            this.storage.setItem(this.getStorageKey(id), JSON.stringify(data));\n\n            return data;\n        } catch (err) {\n            return {};\n        }\n    }\n\n    private getStorageKey(id: string): string {\n        return id ? `${ORDER_ITEMS_STORAGE_KEY}_${id}` : '';\n    }\n\n    private readExtraItemsData(id: string): ExtraItemsData | null {\n        try {\n            const item = this.storage.getItem(this.getStorageKey(id));\n\n            return item ? JSON.parse(item) : null;\n        } catch (err) {\n            return null;\n        }\n    }\n\n    private clearExtraItemData(id: string): void {\n        try {\n            this.storage.removeItem(this.getStorageKey(id));\n        } catch (err) {\n            // silently ignore the failure\n        }\n    }\n\n    private getSelectedShippingOption(): ShippingOption | null {\n        const { data } = this.checkoutService.getState();\n        const shippingOption = data.getSelectedShippingOption();\n\n        return (shippingOption && shippingOption.id && shippingOption.description) ?\n            shippingOption :\n            null;\n    }\n\n    private getPaymentMethodName(): string {\n        const { data } = this.checkoutService.getState();\n        const paymentMethod = data.getSelectedPaymentMethod();\n\n        return (paymentMethod && paymentMethod.config) ?\n            paymentMethod.config.displayName || '' :\n            '';\n    }\n\n    private getProducts(itemsData: ExtraItemsData, lineItems: LineItemMap): AnalyticsProduct[] {\n        const customItems: AnalyticsProduct[] = (lineItems.customItems || []).map(item => ({\n            product_id: item.id,\n            sku: item.sku,\n            price: item.listPrice,\n            quantity: item.quantity,\n            name: item.name,\n        }));\n\n        const giftCertificateItems: AnalyticsProduct[] = lineItems.giftCertificates.map(item => {\n            return {\n                product_id: item.id,\n                price: this.toShopperCurrency(item.amount),\n                name: item.name,\n                quantity: 1,\n            };\n        });\n\n        const physicalAndDigitalItems: AnalyticsProduct[] = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].map(item => {\n            let itemAttributes;\n\n            if (item.options && item.options.length) {\n                itemAttributes = item.options.map(option => `${option.name}:${option.value}`);\n                itemAttributes.sort();\n            }\n\n            return {\n                product_id: item.productId,\n                sku: item.sku,\n                price: item.listPrice,\n                image_url: item.imageUrl,\n                name: item.name,\n                quantity: item.quantity,\n                brand: itemsData[item.productId] ? itemsData[item.productId].brand : '',\n                category: itemsData[item.productId] ? itemsData[item.productId].category : '',\n                variant: (itemAttributes || []).join(', '),\n            };\n        });\n\n        return [\n            ...customItems,\n            ...physicalAndDigitalItems,\n            ...giftCertificateItems,\n        ];\n    }\n}\n\nexport interface AnalyticsProduct {\n    product_id: string | number;\n    price: number;\n    quantity: number;\n    name: string;\n    sku?: string;\n    image_url?: string;\n    category?: string;\n    variant?: string;\n    brand?: string;\n}\n\nexport interface ExtraItemsData {\n    [productId: string]: {\n        brand: string;\n        category: string;\n    };\n}\n","import StepTracker from './step-tracker';\n\nexport default class NoopStepTracker implements StepTracker {\n    trackCheckoutStarted(): void {\n        return;\n    }\n\n    trackOrderComplete(): void {\n        return;\n    }\n\n    trackStepViewed(): void {\n        return;\n    }\n\n    trackStepCompleted(): void {\n        return;\n    }\n}\n","import localStorageFallback from 'local-storage-fallback';\n\nimport { CheckoutService } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport AnalyticsStepTracker, { StepTrackerConfig } from './analytics-step-tracker';\nimport { isAnalyticsTrackerWindow } from './is-analytics-step-tracker-window';\nimport NoopStepTracker from './noop-step-tracker';\nimport StepTracker from './step-tracker';\n\n/**\n * Creates an instance of `StepTracker`.\n *\n * @remarks\n * ```js\n * const checkoutService = createCheckoutService();\n * await checkoutService.loadCheckout();\n * const stepTracker = createStepTracker(checkoutService);\n *\n * stepTracker.trackCheckoutStarted();\n * ```\n *\n * @alpha\n * Please note that `StepTracker` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param CheckoutService - An instance of CheckoutService\n * @param StepTrackerConfig - A step tracker config object\n * @returns an instance of `StepTracker`.\n */\nexport default function createStepTracker(\n    checkoutService: CheckoutService,\n    stepTrackerConfig?: StepTrackerConfig\n): StepTracker {\n    const { data } = checkoutService.getState();\n    const config = data.getConfig();\n\n    if (!config) {\n        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n    }\n\n    const { isAnalyticsEnabled } = config.checkoutSettings;\n\n    if (isAnalyticsEnabled && isAnalyticsTrackerWindow(window)) {\n        return new AnalyticsStepTracker(\n            checkoutService,\n            localStorageFallback,\n            window.analytics,\n            stepTrackerConfig\n        );\n    }\n\n    return new NoopStepTracker();\n}\n","import AnalyticsTrackerWindow from './analytics-tracker-window';\n\nexport function isAnalyticsTrackerWindow(window: Window): window is AnalyticsTrackerWindow {\n    return Boolean((window as AnalyticsTrackerWindow).analytics);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\nexport { createStepTracker } from './analytics';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}