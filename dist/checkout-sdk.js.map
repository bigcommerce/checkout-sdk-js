{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-client.ts","webpack://checkoutKit/./src/checkout/create-checkout-client.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","GiftCertificateActionType","PaymentMethodActionType","BillingAddressActionType","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","BillingAddressActionCreator","_checkoutClient","this","continueAsGuest","credentials","options","_this","store","Observable_","observer","state","getState","checkout","getCheckout","missing_data_error","MissingCheckout","customer","getCustomer","isGuest","standard_error","billingAddressRequestBody","billingAddress","getBillingAddress","country","existingBillingAddressRequestBody","external_tslib_","next","data_store_","billing_address_actions","ContinueAsGuestRequested","_createOrUpdateBillingAddress","id","then","_a","body","ContinueAsGuestSucceeded","complete","catch","response","error","ContinueAsGuestFailed","updateAddress","address","UpdateBillingAddressRequested","email","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","checkoutId","updateBillingAddress","createBillingAddress","CountryActionCreator","loadCountries","country_action_types","data","_super","OrderFinalizationNotRequiredError","type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","strategy","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","headers","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","message","join","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","internalBillingAddress","is_internal_address_equal","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_requestSender","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getPaymentData","initializationData","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","post","Accept","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","locale","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","Error","handleSuccess","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","endpoint","KlarnaScriptLoader","Klarna","Credit","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","wepay_payment_strategy","wepay_risk_client","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","timeout","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_config","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","subtype","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","DEFAULT_PARAMS","include","BillingAddressRequestSender","createAddress","url","content_type","JsonV1","params","put","CountryRequestSender","Accept-Language","CheckoutClient","_billingAddressRequestSender","_countryRequestSender","_customerRequestSender","_orderRequestSender","_shippingCountryRequestSender","createCheckoutClient","billingAddressRequestSender","billing_address_request_sender","countryRequestSender","country_request_sender","customerRequestSender","customer_request_sender","orderRequestSender","order_request_sender","shippingCountryRequestSender","shipping_country_request_sender","checkout_client","createCheckoutService","protocol","get_default_logger","warn","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_strategy_action_creator","create_shipping_strategy_registry","standard_error_StandardError","StandardError","setPrototypeOf","__proto__","_newTarget","captureStackTrace","stack","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","ConfigActionType","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","__webpack_exports__","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","Button","render","env","commit","shouldProcessPayment","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","CheckoutButtonStrategy","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","createCheckoutButtonRegistry","CheckoutActionType","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","push","OrderActionType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","tslib__WEBPACK_IMPORTED_MODULE_0__","createError","DEFAULT_RESPONSE","RequestError","Array","isArray","reduce","result","joinErrors","detail","title","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","forEach","charAt","createProxy","ConfigSelector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","storeCredit","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","bindDecorator","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","set","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","toString","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","selectorMethodDecorator","mapToInternalCart","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","checkout_actions","order_actions","LoadOrderSucceeded","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CustomerRequestSender","delete","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","getConsignmentByAddress","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","lineItemIds","indexOf","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","LoadShippingOptionsSucceeded","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","_createOrUpdateConsignment","_combineLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","_getConsignmentRequestBody","_isUpdateConsignmentRequest","itemId","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","BraintreeScriptLoader","loadClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","_teardown","mod","CustomerActionCreator","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","find","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","customerStrategyReducer","customer_strategy_actions","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","OrderRequestSender","ShippingCountryRequestSender","PaymentMethodInvalidError","isPrivate","OrderActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","productId","giftWrapping","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","PaymentMethodActionCreator","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","sessionHash","PaymentMethodRequestSender","X-API-INTERNAL","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","ShippingStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","ChasePayScriptLoader","JPMC","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","_createSignInButton","not_implemented_error","color","size","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","visibility","containerId","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","createElement","className","innerHTML","appendChild","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","isChasePayUp","insertButtons","containers","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","chasepay_script_loader","square_customer_strategy","default_customer_strategy","customer_action_creator","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","INTERNAL_USE_ONLY","ContentType","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","Registry","_factories","_instances","_options","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","InvalidArgumentError","PaypalScriptLoader","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","err","createLanguageService","language_service","getEnvironment","process","NODE_ENV","e","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","toFormUrlEncoded","encodeURIComponent","VisaCheckoutScriptLoader","V","RemoteCheckoutSynchronizationError","ConsoleLogger","_console","log","messages","_logToConsole","info","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","extendedAddress","locality","cardType","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 152);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, CheckoutClient, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _checkoutClient: CheckoutClient\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._checkoutClient.createBillingAddress(checkoutId, address, options);\n        }\n\n        return this._checkoutClient.updateBillingAddress(checkoutId, address, options);\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutClient } from '../checkout';\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _checkoutClient: CheckoutClient\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._checkoutClient.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        return (paymentMethod && paymentMethod.method === 'multi-option' && !paymentMethod.gateway) ?\n            { ...paymentMethod, gateway: paymentMethod.id } :\n            paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = payment && payment.gatewayId === 'adyen' ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getPaymentData(payment.methodId)\n            .then(paymentData =>\n                 this._store.dispatch(this._orderActionCreator.submitOrder(orderRequest, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })))\n            );\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'UNITED STATES':\n                return 'US';\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getPaymentData(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CheckoutActionCreator, CheckoutClient, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    client: CheckoutClient,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(client, checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(client),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { BillingAddressRequestSender, BillingAddressUpdateRequestBody } from '../billing';\nimport { RequestOptions } from '../common/http-request';\nimport { CustomerCredentials, CustomerRequestSender } from '../customer';\nimport { CountryRequestSender, CountryResponseBody } from '../geography';\nimport { InternalOrderRequestBody, InternalOrderResponseBody, Order, OrderRequestSender } from '../order';\nimport { ShippingCountryRequestSender } from '../shipping';\n\nimport Checkout from './checkout';\n\n/**\n * @deprecated Use request senders directly\n */\nexport default class CheckoutClient {\n    /**\n     * @internal\n     */\n    constructor(\n        private _billingAddressRequestSender: BillingAddressRequestSender,\n        private _countryRequestSender: CountryRequestSender,\n        private _customerRequestSender: CustomerRequestSender,\n        private _orderRequestSender: OrderRequestSender,\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Promise<Response<Order>> {\n        return this._orderRequestSender.loadOrder(orderId, options);\n    }\n\n    submitOrder(body: InternalOrderRequestBody, options?: RequestOptions): Promise<Response<InternalOrderResponseBody>> {\n        return this._orderRequestSender.submitOrder(body, options);\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Promise<Response<InternalOrderResponseBody>> {\n        return this._orderRequestSender.finalizeOrder(orderId, options);\n    }\n\n    loadCountries(options?: RequestOptions): Promise<Response<CountryResponseBody>> {\n        return this._countryRequestSender.loadCountries(options);\n    }\n\n    loadShippingCountries(options?: RequestOptions): Promise<Response<CountryResponseBody>> {\n        return this._shippingCountryRequestSender.loadCountries(options);\n    }\n\n    createBillingAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, options?: RequestOptions): Promise<Response<Checkout>> {\n        return this._billingAddressRequestSender.createAddress(checkoutId, address, options);\n    }\n\n    updateBillingAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, options?: RequestOptions): Promise<Response> {\n        return this._billingAddressRequestSender.updateAddress(checkoutId, address, options);\n    }\n\n    signInCustomer(credentials: CustomerCredentials, options?: RequestOptions): Promise<Response> {\n        return this._customerRequestSender.signInCustomer(credentials, options);\n    }\n\n    signOutCustomer(options?: RequestOptions): Promise<Response> {\n        return this._customerRequestSender.signOutCustomer(options);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressRequestSender } from '../billing';\nimport { CustomerRequestSender } from '../customer';\nimport { CountryRequestSender } from '../geography';\nimport { OrderRequestSender } from '../order';\nimport { ShippingCountryRequestSender } from '../shipping';\n\nimport CheckoutClient from './checkout-client';\n\nexport default function createCheckoutClient(\n    requestSender: RequestSender,\n    config: { locale?: string } = {}\n): CheckoutClient {\n    const billingAddressRequestSender = new BillingAddressRequestSender(requestSender);\n    const countryRequestSender = new CountryRequestSender(requestSender, config);\n    const customerRequestSender = new CustomerRequestSender(requestSender);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const shippingCountryRequestSender = new ShippingCountryRequestSender(requestSender, config);\n\n    return new CheckoutClient(\n        billingAddressRequestSender,\n        countryRequestSender,\n        customerRequestSender,\n        orderRequestSender,\n        shippingCountryRequestSender\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutClient from './create-checkout-client';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const client = createCheckoutClient(requestSender, { locale });\n    const store = createCheckoutStore({}, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(client, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(client),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(client),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, client, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(client),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { setPrototypeOf } from '../../utility';\n\nexport default class StandardError extends Error {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","module.exports = require(\"rxjs/observable/defer\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","module.exports = require(\"@bigcommerce/form-poster\");","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     braintreepaypal: {\n     *         container: '#checkoutButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize(options)\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, paypalOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize(options);\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized = false;\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host: options && options.host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy> {\n    const registry = new Registry<CheckoutButtonStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster()\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster(),\n            true\n        )\n    );\n\n    return registry;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        variantId: item.variantId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: Action\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find, map } from 'lodash';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._combineLineItems(\n                    consignment,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _combineLineItems(\n        consignment: ConsignmentAssignmentRequestBody,\n        existingConsignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!existingConsignment) {\n            return consignment.lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const existingLineItems = map(existingConsignment.lineItemIds, itemId => {\n            const item = find(cart.lineItems.physicalItems, { id: itemId });\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        }) as ConsignmentLineItem[];\n\n        return existingLineItems.concat(consignment.lineItems);\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutClient, CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _checkoutClient: CheckoutClient,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._checkoutClient.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._checkoutClient.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._checkoutClient.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._checkoutClient.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutClient } from '../checkout';\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _checkoutClient: CheckoutClient\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._checkoutClient.loadShippingCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n} from './strategies';\nimport SquareCustomerStrategy from './strategies/square-customer-strategy';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(getScriptLoader(), requestSender),\n            new VisaCheckoutScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(getScriptLoader()),\n            requestSender,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"rxjs/observable/empty\");","module.exports = require(\"messageformat\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}