{"version":3,"file":"checkout-button.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-hydrate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isInternalCheckoutSelectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/errors/amazon-pay-v2-config-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/isWithBuyNowFeatures.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/create-amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/create-bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/paypal-sdk-helper.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/create-bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/create-bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/paypal.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-credit-card-instrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-messages.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/isUnsupportedBrowserError.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/create-braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-initialize-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/bind-decorator/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-card-network-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/create-currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/items-require-shipping.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-braintree-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-braintree-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-error-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-additional-action-processable.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/create-google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-braintree-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-paypal-commerce-payment-method.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv3-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-authorizenet-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-authorizenet-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-authorizenet-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-checkoutcom-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-checkoutcom-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-threedsecure-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-checkoutcom-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-cybersource-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-cybersource-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-orbital-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-orbital-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/google-pay-stripe-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/stripe-upe-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-worldpayaccess-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-worldpayaccess-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-tdonlinemart-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-td-online-mart-additional-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-tdonlinemart-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/create-paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/create-paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/create-paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/empty-cart-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/is-spam-protection-succeeded-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-consistency-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/missing-shipping-method-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/invalid-shipping-address-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-actions-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-widget-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/get-environment.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/console-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/noop-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/get-default-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/create-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message:\n                message ||\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length\n            ? errors.map((message) => ({ code: body.type, message }))\n            : [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors\n        .reduce((result: string[], error) => {\n            if (error) {\n                return [...result, error];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport {\n    ErrorResponseBody,\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    mapFromInternalErrorResponse,\n    mapFromPaymentErrorResponse,\n    mapFromStorefrontErrorResponse,\n    RequestError,\n    TimeoutError,\n} from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) =>\n            mapFromInternalErrorResponse(response, message),\n        );\n        this.register('storefront', (response, message) =>\n            mapFromStorefrontErrorResponse(response, message),\n        );\n        this.register('payment', (response, message) =>\n            mapFromPaymentErrorResponse(response, message),\n        );\n        this.register('timeout', (response) => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod =\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return (\n            !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string'\n        );\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return (\n            typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number'\n        );\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string,\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [\n            {\n                code: body.code || body.type,\n                message: body.detail || body.title,\n            },\n        ],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    | LoadCheckoutRequestedAction\n    | LoadCheckoutSucceededAction\n    | LoadCheckoutFailedAction\n    | LoadFormFieldsAction\n    | LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    | UpdateCheckoutRequestedAction\n    | UpdateCheckoutSucceededAction\n    | UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport CheckoutInitialState from './checkout-initial-state';\n\nexport enum CheckoutHydrateActionType {\n    HydrateInitialState = 'HYDRATE_INITIAL_STATE',\n}\n\nexport interface CheckoutHydrateAction extends Action<CheckoutInitialState> {\n    type: CheckoutHydrateActionType.HydrateInitialState;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    | UpdateSubscriptionsRequestedAction\n    | UpdateSubscriptionsSucceededAction\n    | UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    | UpdateBillingAddressRequested\n    | UpdateBillingAddressSucceeded\n    | UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    | ContinueAsGuestRequested\n    | ContinueAsGuestSucceeded\n    | ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(\n    object: any,\n    predicate: (value: any, key: string) => boolean,\n): any {\n    if (Array.isArray(object)) {\n        return object.map((value) => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(\n            omitBy(object, predicate),\n            (result, value, key) => {\n                result[key] = omitDeep(value, predicate);\n            },\n            {} as { [key: string]: any },\n        );\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<\n    TState extends { [key: string]: any },\n    TAction extends Action,\n>(state: TState, action: TAction): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, (value) => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if (objectA instanceof Date && objectB instanceof Date) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof Date || objectB instanceof Date) {\n            return false;\n        }\n\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions,\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K],\n): T {\n    if (\n        object &&\n        Object.prototype.hasOwnProperty.call(object, key) &&\n        isEqual(object[key], value)\n    ) {\n        return object;\n    }\n\n    return {\n        ...(object as any),\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, {\n    BillingAddressErrorsState,\n    BillingAddressStatusesState,\n    DEFAULT_STATE,\n} from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action,\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction | CheckoutHydrateAction,\n): BillingAddress | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return replace(data, action.payload?.checkout?.billingAddress);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(errors, 'continueAsGuestError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n            return objectSet(errors, 'continueAsGuestError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isContinuingAsGuest', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(statuses, 'isContinuingAsGuest', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(\n    currentArray: T[] | undefined,\n    newArray: T[],\n    options?: ArrayReplaceOptions,\n): T[];\nfunction arrayReplace<T>(\n    currentArray: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): undefined;\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined;\n\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\n            }\n\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\n        }\n\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (\n        sameAsCurrentCount === newArray.length &&\n        currentArray &&\n        currentArray.length === newArray.length\n    ) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(\n    currentObject: T | undefined,\n    newObject: Partial<T>,\n): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\n\nfunction objectMerge<T extends object>(\n    currentObject?: T,\n    newObject?: Partial<T>,\n): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\n        const currentValue = result[key];\n        const newValue = newObject[key];\n\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n            return objectSet(result, key, objectMerge(currentValue, newValue));\n        }\n\n        if (isArray(currentValue) && isArray(newValue)) {\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n        }\n\n        return objectSet(result, key, newValue as any);\n    }, currentObject);\n}\n\nexport default objectMerge;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    | ApplyCouponRequestedAction\n    | ApplyCouponSucceededAction\n    | ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    | RemoveCouponRequestedAction\n    | RemoveCouponSucceededAction\n    | RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    | ApplyGiftCertificateRequestedAction\n    | ApplyGiftCertificateSucceededAction\n    | ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    | RemoveGiftCertificateRequestedAction\n    | RemoveGiftCertificateSucceededAction\n    | RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    | CreateConsignmentsAction\n    | UpdateConsignmentAction\n    | DeleteConsignmentAction\n    | UpdateShippingOptionAction\n    | LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    | CreateConsignmentsRequestedAction\n    | CreateConsignmentsSucceededAction\n    | CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    | UpdateConsignmentRequestedAction\n    | UpdateConsignmentSucceededAction\n    | UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    | DeleteConsignmentRequestedAction\n    | DeleteConsignmentSucceededAction\n    | DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    | UpdateShippingOptionRequestedAction\n    | UpdateShippingOptionSucceededAction\n    | UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    | LoadShippingOptionsRequestedAction\n    | LoadShippingOptionsSucceededAction\n    | LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action:\n        | BillingAddressAction\n        | CheckoutAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | CheckoutHydrateAction,\n): Cart | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectMerge(data, action.payload && action.payload.cart);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return objectMerge(data, action.payload?.checkout?.cart);\n\n        default:\n            return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction,\n): CartStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction,\n): CartErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    | InitializeButtonRequestedAction\n    | InitializeButtonSucceededAction\n    | InitializeButtonFailedAction\n    | LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    | DeinitializeButtonRequestedAction\n    | DeinitializeButtonSucceededAction\n    | DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, {\n    CheckoutButtonDataState,\n    CheckoutButtonErrorsState,\n    CheckoutButtonStatusesState,\n    DEFAULT_STATE,\n} from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonDataState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            if (!action.meta || !action.meta.containerId) {\n                return data;\n            }\n\n            return objectMerge(data, {\n                initializedContainers: {\n                    [action.meta.containerId]: true,\n                },\n            });\n\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(errors, 'initializeError', undefined);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n            return objectSet(errors, 'initializeError', action.payload);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(errors, 'deinitializeError', undefined);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n            return objectSet(errors, 'deinitializeError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n            return objectSet(statuses, 'isInitializing', true);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(statuses, 'isInitializing', false);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n            return objectSet(statuses, 'isDeinitializing', true);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(statuses, 'isDeinitializing', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    | LoadConfigRequestedAction\n    | LoadConfigSucceededAction\n    | LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutHydrateAction, CheckoutHydrateActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action,\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction | CheckoutHydrateAction,\n): Config | undefined {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return objectMerge(data, action.payload?.config);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction,\n): ConfigErrorsState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction,\n): ConfigStatusesState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConfigActionType.LoadConfigSucceeded:\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction =\n    | LoadOrderAction\n    | LoadOrderPaymentsAction\n    | SubmitOrderAction\n    | FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction =\n    | LoadOrderPaymentsRequestedAction\n    | LoadOrderPaymentsSucceededAction\n    | LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    | LoadOrderRequestedAction\n    | LoadOrderSucceededAction\n    | LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    | SubmitOrderRequestedAction\n    | SubmitOrderSucceededAction\n    | SubmitOrderFailedAction\n    | LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    | FinalizeOrderRequestedAction\n    | FinalizeOrderSucceededAction\n    | FinalizeOrderFailedAction\n    | LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action,\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction | CheckoutHydrateAction,\n): Coupon[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return arrayReplace(data, action.payload && action.payload.coupons);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return arrayReplace(data, action.payload?.checkout?.coupons);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n        case CouponActionType.ApplyCouponSucceeded:\n            return objectSet(errors, 'applyCouponError', undefined);\n\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(errors, 'applyCouponError', action.payload);\n\n        case CouponActionType.RemoveCouponRequested:\n        case CouponActionType.RemoveCouponSucceeded:\n            return objectSet(errors, 'removeCouponError', undefined);\n\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(errors, 'removeCouponError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction,\n): CouponStatusesState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n            return objectSet(statuses, 'isApplyingCoupon', true);\n\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(statuses, 'isApplyingCoupon', false);\n\n        case CouponActionType.RemoveCouponRequested:\n            return objectSet(statuses, 'isRemovingCoupon', true);\n\n        case CouponActionType.RemoveCouponSucceeded:\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(statuses, 'isRemovingCoupon', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, {\n    DEFAULT_STATE,\n    GiftCertificateErrorsState,\n    GiftCertificateStatusesState,\n} from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action,\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action:\n        | CheckoutAction\n        | GiftCertificateAction\n        | ConsignmentAction\n        | CouponAction\n        | CheckoutHydrateAction,\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return arrayReplace(data, action.payload?.checkout?.giftCertificates);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction,\n): GiftCertificateErrorsState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction,\n): GiftCertificateStatusesState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    | SignInCustomerAction\n    | SignOutCustomerAction\n    | CreateCustomerAddressAction\n    | CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    | CreateCustomerRequestedAction\n    | CreateCustomerSucceededAction\n    | CreateCustomerFailedAction\n    | SpamProtectionAction\n    | LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    | CreateCustomerAddressRequestedAction\n    | CreateCustomerAddressSucceededAction\n    | CreateCustomerAddressFailedAction\n    | LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    | SignInCustomerRequestedAction\n    | SignInCustomerSucceededAction\n    | SignInCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    | SignOutCustomerRequestedAction\n    | SignOutCustomerSucceededAction\n    | SignOutCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport {\n    CustomerAction,\n    CustomerActionType,\n    StripeLinkAuthenticatedAction,\n} from './customer-actions';\nimport CustomerState, {\n    CustomerErrorsState,\n    CustomerStatusesState,\n    DEFAULT_STATE,\n} from './customer-state';\n\ntype ReducerActionType =\n    | CheckoutAction\n    | ContinueAsGuestAction\n    | CustomerAction\n    | StripeLinkAuthenticatedAction\n    | CheckoutHydrateAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectMerge(data, action.payload && action.payload.customer);\n\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return objectMerge(data, action.payload?.checkout?.customer);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType,\n): CustomerErrorsState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case CustomerActionType.CreateCustomerFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(errors, 'createAddressError', undefined);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n            return objectSet(errors, 'createAddressError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType,\n): CustomerStatusesState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case CustomerActionType.CreateCustomerFailed:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(statuses, 'isCreating', false);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n            return objectSet(statuses, 'isCreatingAddress', true);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(statuses, 'isCreatingAddress', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    | CustomerStrategySignInAction\n    | CustomerStrategySignOutAction\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\n    | CustomerStrategyInitializeAction\n    | CustomerStrategyDeinitializeAction\n    | CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    | SignInRequestedAction\n    | SignInSucceededAction\n    | SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    | SignOutRequestedAction\n    | SignOutSucceededAction\n    | SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    | ExecutePaymentMethodCheckoutRequestedAction\n    | ExecutePaymentMethodCheckoutSucceededAction\n    | ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeErrors?: { [key: string]: Error };\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, {\n    CustomerStrategyDataState,\n    CustomerStrategyErrorsState,\n    CustomerStrategyStatusesState,\n    DEFAULT_STATE,\n} from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action,\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction,\n): CustomerStrategyDataState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction,\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeErrors: { ...errors.initializeErrors },\n                initializeMethodId: errors.initializeMethodId\n                    ? errors.initializeMethodId\n                    : undefined,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeErrors: {\n                    ...errors.initializeErrors,\n                    [action.meta && action.meta.methodId]: action.payload,\n                },\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(errors, {\n                signInError: undefined,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n            return objectMerge(errors, {\n                signInError: action.payload,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(errors, {\n                signOutError: undefined,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n            return objectMerge(errors, {\n                signOutError: action.payload,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: undefined,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: action.payload,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction,\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n            return objectMerge(statuses, {\n                isSigningIn: true,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(statuses, {\n                isSigningIn: false,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n            return objectMerge(statuses, {\n                isSigningOut: true,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(statuses, {\n                isSigningOut: false,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: true,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: false,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Extension } from './extension';\n\nexport enum ExtensionActionType {\n    LoadExtensionsRequested = 'LOAD_EXTENSIONS_REQUESTED',\n    LoadExtensionsSucceeded = 'LOAD_EXTENSIONS_SUCCEEDED',\n    LoadExtensionsFailed = 'LOAD_EXTENSIONS_FAILED',\n    RenderExtensionRequested = 'RENDER_EXTENSION_REQUESTED',\n    RenderExtensionSucceeded = 'RENDER_EXTENSION_SUCCEEDED',\n    RenderExtensionFailed = 'RENDER_EXTENSION_FAILED',\n}\n\nexport type ExtensionAction =\n    | LoadExtensionsRequestedAction\n    | LoadExtensionsSucceededAction\n    | LoadExtensionsFailedAction\n    | RenderExtensionRequestedAction\n    | RenderExtensionSucceededAction\n    | RenderExtensionFailedAction;\n\nexport interface LoadExtensionsRequestedAction extends Action {\n    type: ExtensionActionType.LoadExtensionsRequested;\n}\n\nexport interface LoadExtensionsSucceededAction extends Action<Extension[]> {\n    type: ExtensionActionType.LoadExtensionsSucceeded;\n}\n\nexport interface LoadExtensionsFailedAction extends Action<Error> {\n    type: ExtensionActionType.LoadExtensionsFailed;\n}\n\nexport interface RenderExtensionRequestedAction extends Action {\n    type: ExtensionActionType.RenderExtensionRequested;\n}\n\nexport interface RenderExtensionSucceededAction extends Action {\n    type: ExtensionActionType.RenderExtensionSucceeded;\n}\n\nexport interface RenderExtensionFailedAction extends Action<Error> {\n    type: ExtensionActionType.RenderExtensionFailed;\n}\n","import { Extension } from './extension';\n\nexport interface ExtensionState {\n    data?: Extension[];\n    errors: ExtensionErrorsState;\n    statuses: ExtensionStatusesState;\n}\n\nexport interface ExtensionErrorsState {\n    loadError?: Error;\n    renderError?: Error;\n}\n\nexport interface ExtensionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ExtensionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout/checkout-hydrate-actions';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport { Extension } from './extension';\nimport { ExtensionAction, ExtensionActionType } from './extension-actions';\nimport {\n    DEFAULT_STATE,\n    ExtensionErrorsState,\n    ExtensionState,\n    ExtensionStatusesState,\n} from './extension-state';\n\nexport function extensionReducer(\n    state: ExtensionState = DEFAULT_STATE,\n    action: Action,\n): ExtensionState {\n    const reducer = combineReducers<ExtensionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Extension[] | undefined,\n    action: ExtensionAction | CheckoutHydrateAction,\n): Extension[] | undefined {\n    if (action.type === ExtensionActionType.LoadExtensionsSucceeded) {\n        return arrayReplace(data, action.payload);\n    }\n\n    if (action.type === CheckoutHydrateActionType.HydrateInitialState) {\n        return arrayReplace(data, action.payload?.extensions);\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ExtensionErrorsState = DEFAULT_STATE.errors,\n    action: ExtensionAction,\n): ExtensionErrorsState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n        case ExtensionActionType.LoadExtensionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ExtensionActionType.RenderExtensionRequested:\n        case ExtensionActionType.RenderExtensionSucceeded:\n            return objectSet(errors, 'renderError', undefined);\n\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ExtensionActionType.RenderExtensionFailed:\n            return objectSet(errors, 'renderError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ExtensionStatusesState = DEFAULT_STATE.statuses,\n    action: ExtensionAction,\n): ExtensionStatusesState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ExtensionActionType.LoadExtensionsSucceeded:\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    | LoadFormFieldsRequestedAction\n    | LoadFormFieldsSucceededAction\n    | LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout/checkout-hydrate-actions';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, {\n    DEFAULT_STATE,\n    FormFieldsErrorState,\n    FormFieldsStatusesState,\n} from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action,\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction | CheckoutHydrateAction,\n): FormFields | undefined {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return objectMerge(data, action.payload?.formFields);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction,\n): FormFieldsErrorState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction,\n): FormFieldsStatusesState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    | LoadCountriesRequestedAction\n    | LoadCountriesSucceededAction\n    | LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, {\n    CountryErrorsState,\n    CountryStatusesState,\n    DEFAULT_STATE,\n} from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action,\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction,\n): CountryErrorsState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n        case CountryActionType.LoadCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction,\n): CountryStatusesState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CountryActionType.LoadCountriesSucceeded:\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, {\n    DEFAULT_STATE,\n    OrderDataState,\n    OrderErrorsState,\n    OrderMetaState,\n    OrderStatusesState,\n} from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action,\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction,\n): OrderDataState | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, ['billingAddress', 'coupons']),\n            ) as OrderDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction,\n): OrderMetaState | undefined {\n    switch (action.type) {\n        case OrderActionType.FinalizeOrderSucceeded:\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectMerge(meta, {\n                ...action.meta,\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\n                orderToken: action.payload && action.payload.order.token,\n                payment: action.payload && action.payload.order && action.payload.order.payment,\n            });\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction,\n): OrderErrorsState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction,\n): OrderStatusesState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Address } from '../address';\n\nexport interface OrderBillingAddress extends Address {\n    email?: string;\n}\n\nexport default interface OrderBillingAddressState {\n    data?: OrderBillingAddress;\n}\n\nexport const DEFAULT_STATE: OrderBillingAddressState = {};\n","import { Action, combineReducers } from '@bigcommerce/data-store';\n\nimport { replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default function orderBillingAddressReducer(\n    state: OrderBillingAddressState = DEFAULT_STATE,\n    action: Action,\n): OrderBillingAddressState {\n    const reducer = combineReducers<OrderBillingAddressState>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderBillingAddress | undefined,\n    action: OrderAction,\n): OrderBillingAddress | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    | SubmitPaymentRequestedAction\n    | SubmitPaymentSucceededAction\n    | SubmitPaymentFailedAction\n    | LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    | InitializeOffsitePaymentRequestedAction\n    | InitializeOffsitePaymentSucceededAction\n    | InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    | LoadPaymentMethodRequestedAction\n    | LoadPaymentMethodSucceededAction\n    | LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    | LoadPaymentMethodsRequestedAction\n    | LoadPaymentMethodsSucceededAction\n    | LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(\n    state: PaymentState = {},\n    action: PaymentAction,\n): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentResponseBody | undefined,\n    action: PaymentAction,\n): PaymentResponseBody | undefined {\n    switch (action.type) {\n        case PaymentActionType.SubmitPaymentSucceeded:\n            return action.payload;\n\n        default:\n            return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, {\n    DEFAULT_STATE,\n    PaymentMethodErrorsState,\n    PaymentMethodStatusesState,\n} from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action,\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction,\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return mergeOrPush(\n                data || [],\n                action.payload,\n                action.payload && {\n                    id: action.payload.id,\n                    gateway: action.payload.gateway,\n                },\n            );\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return arrayReplace(data, action.payload, {\n                matchObject: (methodA, methodB) =>\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\n            });\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction,\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction,\n): PaymentMethodErrorsState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return objectMerge(errors, {\n                loadMethodId: undefined,\n                loadMethodError: undefined,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(errors, {\n                loadMethodId: action.meta.methodId,\n                loadMethodError: action.payload,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction,\n): PaymentMethodStatusesState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n            return objectMerge(statuses, {\n                isLoadingMethod: true,\n                loadMethodId: action.meta.methodId,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(statuses, {\n                isLoadingMethod: false,\n                loadMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick<T>(item, 'id');\n    const derivedPredicate: any =\n        typeof predicate === 'object' ? pickBy<T>(predicate) : predicate || defaultPredicate;\n    const index = findIndex(array, derivedPredicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] =\n            isPlainObject(existingItem) && isPlainObject(item)\n                ? objectMerge(existingItem, item)\n                : item;\n    }\n\n    return newArray;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    | PaymentStrategyExecuteAction\n    | PaymentStrategyFinalizeAction\n    | PaymentStrategyInitializeAction\n    | PaymentStrategyDeinitializeAction\n    | PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    | FinalizeRequestedAction\n    | FinalizeSucceededAction\n    | FinalizeFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, {\n    DEFAULT_STATE,\n    PaymentStrategyDataState,\n    PaymentStrategyErrorsState,\n    PaymentStrategyStatusesState,\n} from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action,\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction,\n): PaymentStrategyDataState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: true,\n                    },\n                });\n            }\n\n            break;\n        }\n\n        case PaymentStrategyActionType.DeinitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: false,\n                    },\n                });\n            }\n        }\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction,\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.ExecuteRequested:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(errors, {\n                executeError: undefined,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n            return objectMerge(errors, {\n                executeError: action.payload,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(errors, {\n                finalizeError: undefined,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n            return objectMerge(errors, {\n                finalizeError: action.payload,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction,\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.InitializeFailed:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n            return objectMerge(statuses, {\n                isExecuting: true,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(statuses, {\n                isExecuting: false,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n            return objectMerge(statuses, {\n                isFinalizing: true,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(statuses, {\n                isFinalizing: false,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum PaymentProviderCustomerType {\n    UpdatePaymentProviderCustomer = 'UPDATE_PAYMENT_PROVIDER_CUSTOMER',\n}\n\nexport type PaymentProviderCustomerAction = UpdatePaymentProviderCustomerAction;\n\nexport interface UpdatePaymentProviderCustomerAction extends Action {\n    type: PaymentProviderCustomerType.UpdatePaymentProviderCustomer;\n}\n","import { PaymentProviderCustomer } from './payment-provider-customer';\n\nexport default interface PaymentProviderCustomerState {\n    data: PaymentProviderCustomer;\n}\n\nexport const DEFAULT_STATE = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport {\n    PaymentProviderCustomerType,\n    UpdatePaymentProviderCustomerAction,\n} from './payment-provider-customer-actions';\nimport PaymentProviderCustomerState, { DEFAULT_STATE } from './payment-provider-customer-state';\n\ntype ReducerActionType = UpdatePaymentProviderCustomerAction;\n\nexport default function paymentProviderCustomerReducer(\n    state: PaymentProviderCustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): PaymentProviderCustomerState {\n    const reducer = combineReducers<PaymentProviderCustomerState, ReducerActionType>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentProviderCustomer = DEFAULT_STATE.data,\n    action: ReducerActionType,\n): PaymentProviderCustomer {\n    switch (action.type) {\n        case PaymentProviderCustomerType.UpdatePaymentProviderCustomer:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    | LoadInstrumentsRequestedAction\n    | LoadInstrumentsSucceededAction\n    | LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    | DeleteInstrumentRequestedAction\n    | DeleteInstrumentSucceededAction\n    | DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, {\n    DEFAULT_STATE,\n    InstrumentErrorState,\n    InstrumentMeta,\n    InstrumentStatusState,\n} from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action,\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction,\n): PaymentInstrument[] {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction,\n): InstrumentMeta | undefined {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction,\n): InstrumentErrorState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(errors, {\n                deleteError: undefined,\n                failedInstrument: undefined,\n            });\n\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(errors, {\n                deleteError: action.payload,\n                failedInstrument: action.meta.instrumentId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction,\n): InstrumentStatusState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n            return objectMerge(statuses, {\n                isDeleting: true,\n                deletingInstrument: action.meta.instrumentId,\n            });\n\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(statuses, {\n                isDeleting: false,\n                deletingInstrument: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction =\n    | ForgetCheckoutRemoteCustomerAction\n    | InitializeRemoteBillingAction\n    | InitializeRemoteShippingAction\n    | InitializeRemotePaymentAction\n    | SignOutRemoteCustomerAction\n    | LoadRemoteSettingsAction\n    | UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction =\n    | ForgetCheckoutRemoteCustomerRequestedAction\n    | ForgetCheckoutRemoteCustomerSucceededAction\n    | ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction =\n    | InitializeRemoteBillingSucceededAction\n    | InitializeRemoteBillingFailedAction\n    | InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction =\n    | InitializeRemoteShippingSucceededAction\n    | InitializeRemoteShippingFailedAction\n    | InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction =\n    | InitializeRemotePaymentSucceededAction\n    | InitializeRemotePaymentFailedAction\n    | InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction =\n    | SignOutRemoteCustomerSucceededAction\n    | SignOutRemoteCustomerFailedAction\n    | SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction =\n    | LoadRemoteSettingsSucceededAction\n    | LoadRemoteSettingsRequestedAction\n    | LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction,\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\n    switch (action.type) {\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n            return objectSet(data, 'settings', action.payload);\n\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, {\n    ConsignmentErrorsState,\n    ConsignmentStatusesState,\n    DEFAULT_STATE,\n} from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action,\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action:\n        | ConsignmentAction\n        | CheckoutAction\n        | CouponAction\n        | CustomerAction\n        | CheckoutHydrateAction,\n): Consignment[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n            return arrayReplace(data, action.payload && action.payload.consignments);\n\n        case CustomerActionType.SignOutCustomerSucceeded:\n            return arrayReplace(data, []);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return arrayReplace(data, action.payload?.checkout?.consignments);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(statuses, 'isCreating', false);\n\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        default:\n            return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [key: string]: any },\n    parent?: string,\n): { [key: string]: any } {\n    const flattened: { [key: string]: any } = {};\n\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? `${parent}.${key}` : key;\n\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce(\n        (previous, current) => ({\n            ...previous,\n            [current]: object[current],\n        }),\n        {},\n    );\n\n    return sortedArray;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    | PickupOptionRequestedAction\n    | LoadPickupOptionsSucceededAction\n    | LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, {\n    DEFAULT_STATE,\n    PickupOptionErrorsState,\n    PickupOptionStatusesState,\n} from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action,\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction,\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString, action.payload);\n            }\n\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action,\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction =\n    | LoadShippingCountriesRequestedAction\n    | LoadShippingCountriesSucceededAction\n    | LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, {\n    DEFAULT_STATE,\n    ShippingCountryErrorsState,\n    ShippingCountryStatusesState,\n} from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action,\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction,\n): ShippingCountryErrorsState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction,\n): ShippingCountryStatusesState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    | ShippingStrategyUpdateAddressAction\n    | ShippingStrategySelectOptionAction\n    | ShippingStrategyInitializeAction\n    | ShippingStrategyDeinitializeAction\n    | ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    | UpdateAddressRequestedAction\n    | UpdateAddressSucceededAction\n    | UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    | SelectOptionRequestedAction\n    | SelectOptionSucceededAction\n    | SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, {\n    DEFAULT_STATE,\n    ShippingStrategyDataState,\n    ShippingStrategyErrorsState,\n    ShippingStrategyStatusesState,\n} from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action,\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction,\n): ShippingStrategyDataState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction,\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(errors, {\n                updateAddressError: undefined,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n            return objectMerge(errors, {\n                updateAddressError: action.payload,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(errors, {\n                selectOptionError: undefined,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n            return objectMerge(errors, {\n                selectOptionError: action.payload,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction,\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n            return objectMerge(statuses, {\n                isUpdatingAddress: true,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(statuses, {\n                isUpdatingAddress: false,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n            return objectMerge(statuses, {\n                isSelectingOption: true,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(statuses, {\n                isSelectingOption: false,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    | SendSignInEmailRequestedAction\n    | SendSignInEmailSucceededAction\n    | SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, {\n    DEFAULT_STATE,\n    SignInEmailErrorsState,\n    SignInEmailStatusesState,\n} from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action,\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction,\n): SignInEmail | undefined {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction,\n): SignInEmailErrorsState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(errors, 'sendError', undefined);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n            return objectSet(errors, 'sendError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction,\n): SignInEmailStatusesState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n            return objectSet(statuses, 'isSending', true);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(statuses, 'isSending', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction = ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    | ApplyStoreCreditRequestedAction\n    | ApplyStoreCreditSucceededAction\n    | ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, {\n    StoreCreditErrorsState,\n    StoreCreditStatusesState,\n} from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action,\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction,\n): StoreCreditErrorsState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n            return objectSet(errors, 'applyError', undefined);\n\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(errors, 'applyError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction,\n): StoreCreditStatusesState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n            return objectSet(statuses, 'isApplying', true);\n\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(statuses, 'isApplying', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, {\n    DEFAULT_STATE,\n    SubscriptionsErrorsState,\n    SubscriptionsStatusesState,\n} from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action,\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsErrorsState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsStatusesState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | CheckoutVerifyRequestedAction\n    | CheckoutVerifyFailedAction\n    | CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<\n    Checkout,\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\n>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport { CheckoutHydrateAction, CheckoutHydrateActionType } from './checkout-hydrate-actions';\nimport CheckoutState, {\n    CheckoutDataState,\n    CheckoutErrorsState,\n    CheckoutStatusesState,\n    DEFAULT_STATE,\n} from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action,\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action:\n        | CheckoutAction\n        | BillingAddressAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | OrderAction\n        | SpamProtectionAction\n        | StoreCreditAction\n        | CheckoutHydrateAction,\n): CheckoutDataState | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return objectMerge(\n                data,\n                omit(action.payload?.checkout, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction,\n): CheckoutErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\n): CheckoutStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case SpamProtectionActionType.ExecuteRequested:\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n        case SpamProtectionActionType.ExecuteFailed:\n        case SpamProtectionActionType.ExecuteSucceeded:\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n        default:\n            return statuses;\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentProviderCustomer,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingPaymentProviderCustomer:\n            return 'Unable to proceed because payment provider customer is unavailable.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T,\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(\n        target,\n        (target, name) =>\n            (...args: any[]) =>\n                deepFreeze(target[name].call(target, ...args)),\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\n    map: TMap,\n): TMap {\n    return Object.keys(map).reduce((result, key) => {\n        result[key] = createFreezeProxy(map[key]);\n\n        return result;\n    }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(\n    target: T,\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\n): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, (prototype) => {\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\n            if (\n                name === 'constructor' ||\n                typeof proxy[name] !== 'function' ||\n                name.charAt(0) === '_'\n            ) {\n                return;\n            }\n\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n        });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    braintreeach: {\n        provider: 'braintree',\n        method: 'ach',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.credit_card': {\n        provider: 'bluesnapdirect',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.ecp': {\n        provider: 'bluesnapdirect',\n        method: 'ecp',\n    },\n    'bluesnapdirect.sepa_direct_debit': {\n        provider: 'bluesnapdirect',\n        method: 'sepa_direct_debit',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n    squarev2: {\n        provider: 'squarev2',\n        method: 'credit_card',\n    },\n    paypalcommercecreditcards: {\n        provider: 'paypalcommerce',\n        method: 'credit_card',\n    },\n    paypalcommerce: {\n        provider: 'paypalcommerce',\n        method: 'paypal',\n    },\n    bigcommerce_payments_creditcards: {\n        provider: 'bigcommerce_payments',\n        method: 'credit_card',\n    },\n    bigcommerce_payments: {\n        provider: 'bigcommerce_payments',\n        method: 'paypal',\n    },\n    tdonlinemart: {\n        provider: 'tdonlinemart',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(\n    addressA: Partial<Address>,\n    addressB: Partial<Address>,\n): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy(\n        {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            company: address.company,\n            address1: address.address1,\n            address2: address.address2,\n            city: address.city,\n            stateOrProvince: address.stateOrProvince,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n            phone: address.phone,\n            customFields: address.customFields,\n        },\n        identity,\n    );\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createExtensionSelectorFactory } from '../extension';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createOrderBillingAddressSelectorFactory } from '../order-billing-address';\nimport {\n    createPaymentMethodSelectorFactory,\n    createPaymentSelectorFactory,\n    createPaymentStrategySelectorFactory,\n} from '../payment';\nimport { createPaymentProviderCustomerSelectorFactory } from '../payment-provider-customer';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport {\n    createConsignmentSelectorFactory,\n    createPickupOptionSelectorFactory,\n    createShippingAddressSelectorFactory,\n    createShippingCountrySelectorFactory,\n    createShippingStrategySelectorFactory,\n} from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createPaymentProviderCustomerSelector = createPaymentProviderCustomerSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createOrderBillingAddressSelector = createOrderBillingAddressSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n    const createExtensionSelector = createExtensionSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const extensions = createExtensionSelector(state.extensions);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const orderBillingAddress = createOrderBillingAddressSelector(state.orderBillingAddress);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentProviderCustomer = createPaymentProviderCustomerSelector(\n            state.paymentProviderCustomer,\n        );\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(\n            state.checkout,\n            billingAddress,\n            cart,\n            consignments,\n            coupons,\n            customer,\n            giftCertificates,\n        );\n        const order = createOrderSelector(state.order, orderBillingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            extensions,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            orderBillingAddress,\n            payment,\n            paymentMethods,\n            paymentProviderCustomer,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        (getBillingAddress) => () => {\n            return guard(\n                getBillingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        (error) => () => error,\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        (status) => () => status,\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        (cart) => () => cart,\n    );\n\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n    });\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        (state) => () => state,\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isInitializing) === true;\n                }\n\n                return some(statuses, { isInitializing: true });\n            }),\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        (data) =>\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n                const method = data[methodId];\n\n                if (!method) {\n                    return false;\n                }\n\n                if (!containerId) {\n                    return some(\n                        method.initializedContainers,\n                        (isInitialized) => isInitialized === true,\n                    );\n                }\n\n                return method.initializedContainers[containerId] === true;\n            }),\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isDeinitializing) === true;\n                }\n\n                return some(statuses, { isDeinitializing: true });\n            }),\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.initializeError));\n\n                return method && method.initializeError;\n            }),\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\n\n                return method && method.deinitializeError;\n            }),\n    );\n\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState,\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => () => data,\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined\n                ? flashMessages.filter(({ type }) => filterType === type)\n                : flashMessages;\n        },\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields = { customerAccount: [], shippingAddress: [], billingAddress: [] }) =>\n            () =>\n                data\n                    ? {\n                          ...data.storeConfig,\n                          formFields,\n                      }\n                    : undefined,\n    );\n\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\n        return guard(\n            getStoreConfig(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\n        );\n    });\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        (data) => () => data,\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        (data) => () => data,\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        (data) => () => data,\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        (data) => () => data,\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\n            return {\n                getConfig: getConfig(state),\n                getFlashMessages: getFlashMessages(state),\n                getStoreConfig: getStoreConfig(state, { formState }),\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n                getContextConfig: getContextConfig(state),\n                getExternalSource: getExternalSource(state),\n                getHost: getHost(state),\n                getLocale: getLocale(state),\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\n                getLoadError: getLoadError(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        (countries) => () => countries,\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        (customer) => () => customer,\n    );\n\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\n        return guard(\n            getCustomer(),\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\n        );\n    });\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        (status) => () => status,\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (\n    state: CustomerStrategyState,\n) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        },\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        },\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return;\n                }\n\n                return executePaymentMethodCheckoutError;\n            },\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeErrors,\n        (initializeMethodId, initializeErrors) => (methodId?: string) => {\n            if (!initializeMethodId || !initializeErrors) {\n                return;\n            }\n\n            if (methodId) {\n                return initializeErrors[methodId];\n            }\n\n            return initializeErrors[initializeMethodId];\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        },\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        },\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return false;\n                }\n\n                return !!isExecutingPaymentMethodCheckout;\n            },\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (\n    state: GiftCertificateState,\n) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\n                : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        },\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) =>\n            (instrumentId: string) => {\n                const cards = values(supportedInstruments);\n\n                return instruments.find(\n                    (instrument): instrument is CardInstrument =>\n                        instrument.bigpayToken === instrumentId &&\n                        instrument.type === 'card' &&\n                        cards.some((card) => isMatch(instrument, card)),\n                );\n            },\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        (getCardInstrument) => (instrumentId: string) => {\n            return guard(\n                getCardInstrument(instrumentId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\n            );\n        },\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\n                filter(\n                    instruments,\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                        return isMatch(instrument, supportedProvider);\n                    },\n                ),\n            );\n\n            return allSupportedInstruments;\n        },\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        },\n    );\n\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.shippingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.billingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) => () => formFields ? formFields.customerAccount : [],\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    function processField(\n        field: FormField,\n        countries: Country[],\n        selectedCountry?: Country,\n    ): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(\n        field: FormField,\n        countries: Country[] = [],\n        country?: Country,\n    ): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => () => paymentMethods,\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\n            return gatewayId\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\n                : find(paymentMethods, { id: methodId });\n        },\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\n            return guard(\n                getPaymentMethod(methodId, gatewayId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\n            );\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        },\n    );\n\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\ninterface InitiaizedQuery {\n    methodId: string;\n    gatewayId?: string;\n}\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(query: InitiaizedQuery): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (\n    state: PaymentStrategyState,\n) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        },\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        },\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (key?: string) => {\n            if (key && initializeMethodId !== key) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        (data) => (query: InitiaizedQuery) => {\n            const key = query.gatewayId ? `${query.methodId}.${query.gatewayId}` : query.methodId;\n\n            return !!(data[key] && data[key].isInitialized);\n        },\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        },\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport PaymentProviderCustomerState, { DEFAULT_STATE } from './payment-provider-customer-state';\n\nexport default interface PaymentProviderCustomerSelector {\n    getPaymentProviderCustomer(): PaymentProviderCustomer | undefined;\n    getPaymentProviderCustomerOrThrow(): PaymentProviderCustomer;\n}\n\nexport type PaymentProviderCustomerSelectorFactory = (\n    state: PaymentProviderCustomerState,\n) => PaymentProviderCustomerSelector;\n\nexport function createPaymentProviderCustomerSelectorFactory(): PaymentProviderCustomerSelectorFactory {\n    const getPaymentProviderCustomer = createSelector(\n        (state: PaymentProviderCustomerState) => state.data,\n        (data) => () => data,\n    );\n\n    const getPaymentProviderCustomerOrThrow = createSelector(\n        getPaymentProviderCustomer,\n        (getPaymentProviderCustomer) => () => {\n            return guard(\n                getPaymentProviderCustomer(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentProviderCustomer),\n            );\n        },\n    );\n\n    return memoizeOne(\n        (state: PaymentProviderCustomerState = DEFAULT_STATE): PaymentProviderCustomerSelector => {\n            return {\n                getPaymentProviderCustomer: getPaymentProviderCustomer(state),\n                getPaymentProviderCustomerOrThrow: getPaymentProviderCustomerOrThrow(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId,\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        (data) =>\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n                return data[methodId];\n            },\n    );\n\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n    getShippingAddresses(): Address[];\n    getShippingAddressesOrThrow(): Address[];\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignment = consignments?.find(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignment?.shippingAddress;\n        },\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        (getShippingAddress) => () => {\n            return guard(\n                getShippingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    const getShippingAddresses = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignments = consignments?.filter(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignments\n                ? shippingConsignments.map((consignment) => consignment.shippingAddress)\n                : [];\n        },\n    );\n\n    const getShippingAddressesOrThrow = createSelector(\n        getShippingAddresses,\n        (getShippingAddresses) => () => {\n            return guard(\n                getShippingAddresses(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n            getShippingAddresses: getShippingAddresses(state),\n            getShippingAddressesOrThrow: getShippingAddressesOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (\n    state: ShippingCountryState,\n) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        (status) => () => !!status,\n    );\n\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (\n    state: ShippingStrategyState,\n) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        },\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        },\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        },\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { AddressRequestBody, isAddressEqual } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector,\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => consignments,\n    );\n\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\n        return guard(\n            getConsignments(),\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\n        );\n    });\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        },\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, (consignment) =>\n                isAddressEqual(consignment.shippingAddress, address),\n            );\n        },\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        (error) => () => error,\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[],\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        (updateError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        },\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        (deleteError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        },\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\n            (address: AddressRequestBody) => {\n                const consignment = getConsignmentByAddress(address);\n\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\n            },\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        (updateShippingOptionError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        (isCreating) => () => isCreating === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        (isUpdating) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        },\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        (isDeleting) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        },\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        },\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        },\n    );\n\n    return memoizeOne(\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\n            return {\n                getConsignments: getConsignments(state),\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n                getConsignmentById: getConsignmentById(state),\n                getConsignmentByAddress: getConsignmentByAddress(state),\n                getShippingOption: getShippingOption(state),\n                getLoadError: getLoadError(state),\n                getCreateError: getCreateError(state),\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n                getUnassignedItems: getUnassignedItems(state, { cart }),\n                getUpdateError: getUpdateError(state),\n                getDeleteError: getDeleteError(state),\n                getItemAssignmentError: getItemAssignmentError(state),\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n                isLoading: isLoading(state),\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\n                isCreating: isCreating(state),\n                isUpdating: isUpdating(state),\n                isDeleting: isDeleting(state),\n                isAssigningItems: isAssigningItems(state),\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector,\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\n            billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\n            consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\n            giftCertificates.getGiftCertificates,\n        (\n                data,\n                getBillingAddress,\n                getCart,\n                getCustomer,\n                getConsignments,\n                getCoupons,\n                getGiftCertificates,\n            ) =>\n            () => {\n                const billingAddress = getBillingAddress();\n                const cart = getCart();\n                const customer = getCustomer();\n                const consignments = getConsignments() || [];\n                const coupons = getCoupons() || [];\n                const giftCertificates = getGiftCertificates() || [];\n\n                if (!data || !cart || !customer) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    cart,\n                    customer,\n                    consignments,\n                    coupons,\n                    giftCertificates,\n                };\n            },\n    );\n\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\n        return guard(\n            getCheckout(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\n        );\n    });\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        (getCheckout) => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit\n                ? Math.max(grandTotal - storeCredit, 0)\n                : checkout.outstandingBalance;\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        (isUpdating) => () => isUpdating === true,\n    );\n\n    return memoizeOne(\n        (\n            state: CheckoutState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            cart: CartSelector,\n            consignments: ConsignmentSelector,\n            coupons: CouponSelector,\n            customer: CustomerSelector,\n            giftCertificates: GiftCertificateSelector,\n        ): CheckoutSelector => {\n            return {\n                getCheckout: getCheckout(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getOutstandingBalance: getOutstandingBalance(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getLoadError: getLoadError(state),\n                getUpdateError: getUpdateError(state),\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\n                isLoading: isLoading(state),\n                isUpdating: isUpdating(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\nimport OrderBillingAddressSelector from '../order-billing-address/order-billing-address-selector';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: OrderBillingAddressSelector,\n    coupons: CouponSelector,\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: OrderBillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\n            billingAddress.getOrderBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) =>\n            () => {\n                if (!data || !billingAddress) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    coupons,\n                };\n            },\n    );\n\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n    });\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) =>\n            (methodId: string) => {\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n                return currentPayment?.paymentId;\n            },\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (\n            state: OrderState = DEFAULT_STATE,\n            billingAddress: OrderBillingAddressSelector,\n            coupons: CouponSelector,\n        ): OrderSelector => {\n            return {\n                getOrder: getOrder(state, { billingAddress, coupons }),\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n                getOrderMeta: getOrderMeta(state),\n                getLoadError: getLoadError(state),\n                getPaymentId: getPaymentId(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default interface OrderBillingAddressSelector {\n    getOrderBillingAddress(): OrderBillingAddress | undefined;\n}\n\nexport type OrderBillingAddressSelectorFactory = (\n    state: OrderBillingAddressState,\n) => OrderBillingAddressSelector;\n\nexport function createOrderBillingAddressSelectorFactory(): OrderBillingAddressSelectorFactory {\n    const getOrderBillingAddress = createSelector(\n        (state: OrderBillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    return memoizeOne(\n        (state: OrderBillingAddressState = DEFAULT_STATE): OrderBillingAddressSelector => {\n            return {\n                getOrderBillingAddress: getOrderBillingAddress(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector,\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        },\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        (getOrder) => () => {\n            const order = getOrder();\n\n            return find(\n                order && order.payments,\n                ({ providerId }) =>\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\n            ) as GatewayOrderPayment;\n        },\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        (getCheckout) => () => {\n            const checkout = getCheckout();\n\n            return find(\n                checkout && checkout.payments,\n                ({ providerType }) => providerType === HOSTED,\n            );\n        },\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        },\n    );\n\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\n        return guard(\n            getPaymentId(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\n        );\n    });\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        },\n    );\n\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\n        return guard(\n            getPaymentStatus(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\n        );\n    });\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        },\n    );\n\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\n        return guard(\n            getPaymentToken(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    });\n\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\n        const payment = getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    });\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        (getPaymentRedirectUrl) => () => {\n            return guard(\n                getPaymentRedirectUrl(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\n            );\n        },\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        (getOutstandingBalance) =>\n            (useStoreCredit = false) => {\n                const grandTotal = getOutstandingBalance(useStoreCredit);\n\n                return grandTotal ? grandTotal > 0 : false;\n            },\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        },\n    );\n\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        (signInEmail) => () => signInEmail,\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        (error) => () => error,\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { Extension, ExtensionRegion } from './extension';\nimport { DEFAULT_STATE, ExtensionState } from './extension-state';\n\nexport interface ExtensionSelector {\n    getExtensions(): Extension[] | undefined;\n    getExtensionByRegion(region: ExtensionRegion): Extension | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ExtensionSelectorFactory = (state: ExtensionState) => ExtensionSelector;\n\nexport function createExtensionSelectorFactory(): ExtensionSelectorFactory {\n    const getExtensions = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => () => data,\n    );\n\n    const getExtensionByRegion = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => (region: ExtensionRegion) => data?.find((e) => e.region === region),\n    );\n\n    const getLoadError = createSelector(\n        (state: ExtensionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ExtensionState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    return memoizeOne((state: ExtensionState = DEFAULT_STATE): ExtensionSelector => {\n        return {\n            getExtensions: getExtensions(state),\n            getExtensionByRegion: getExtensionByRegion(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialStoreState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions,\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n    const reducer = createCheckoutStoreReducer();\n\n    return createDataStore(reducer, initialStoreState, {\n        actionTransformer,\n        stateTransformer,\n        ...options,\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory,\n): (action: Subscribable<Action>) => Observable<Action> {\n    return (action$) =>\n        from(action$).pipe(\n            catchError<Action, never>((action) => {\n                if (action instanceof Error || action.payload instanceof Error) {\n                    throw action;\n                }\n\n                if (isResponse(action.payload)) {\n                    const message = action.payload.body && action.payload.body.detail;\n\n                    throw {\n                        ...action,\n                        payload: requestErrorFactory.createError(action.payload, message),\n                    };\n                }\n\n                throw action;\n            }),\n        );\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\n        Object.prototype.hasOwnProperty.call(object, key),\n    );\n}\n","import { PaymentMethodInvalidError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach((type) => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register(\n        'invalid_payment_provider',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n    factory.register(\n        'payment_config_not_found',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n\n    return factory;\n}\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { extensionReducer } from '../extension';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { orderBillingAddressReducer } from '../order-billing-address';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { paymentProviderCustomerReducer } from '../payment-provider-customer';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport {\n    consignmentReducer,\n    pickupOptionReducer,\n    shippingCountryReducer,\n    shippingStrategyReducer,\n} from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        extensions: extensionReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        orderBillingAddress: orderBillingAddressReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        paymentProviderCustomer: paymentProviderCustomerReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item: LineItem) => total + item.quantity, 0);\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import {\n    Cart,\n    Checkout,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void | Promise<void>) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n\n    /**\n     * Sets Amazon Pay button design.\n     */\n    design?: AmazonPayV2ButtonDesign;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport const amazonPayV2Regions: { [key: string]: string } = {\n    de: 'eu',\n    jp: 'fe',\n    uk: 'eu',\n    us: 'na',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport enum AmazonPayV2ButtonDesign {\n    C0001 = 'C0001',\n}\n\n// TODO: after migration AmazonPay strategies to integration package\n// <InternalCheckoutSelectors> should be removed\n// and replaced usage with <PaymentIntegrationService>\nexport interface InternalCheckoutSelectors {\n    cart: {\n        getCart: () => Cart | undefined;\n    };\n    checkout: {\n        getCheckout: () => Checkout | undefined;\n    };\n    config: {\n        getStoreConfigOrThrow: () => StoreConfig;\n    };\n    paymentMethods: {\n        getPaymentMethodOrThrow: <T>(methodId: string) => PaymentMethod<T>;\n    };\n}\n\nexport interface AmazonPayV2InitializeOptions {\n    buttonColor?: AmazonPayV2ButtonColor;\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n    checkoutSessionMethod?: 'GET' | 'POST';\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n    extractAmazonCheckoutSessionId?: string;\n    ledgerCurrency?: AmazonPayV2LedgerCurrency;\n    publicKeyId?: string;\n    region?: string;\n    isButtonMicroTextDisabled?: boolean;\n    paymentToken?: string;\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    buttonColor?: AmazonPayV2ButtonColor;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n    isButtonMicroTextDisabled?: boolean;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface AmazonPayAdditionalActionErrorBody {\n    status: string;\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n","import {\n    CheckoutSettings,\n    getShippableItemsCount,\n    guard,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonDesign,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    InternalCheckoutSelectors,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\nimport { isInternalCheckoutSelectors } from './isInternalCheckoutSelectors';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private amazonPayV2SDK?: AmazonPayV2SDK;\n    private buttonParentContainer?: HTMLDivElement;\n    private amazonPayV2Button?: AmazonPayV2Button;\n    private isBuyNowFlow?: boolean;\n\n    constructor(private amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<void> {\n        this.amazonPayV2SDK = await this.amazonPayV2ScriptLoader.load(paymentMethod);\n        this.buttonParentContainer =\n            this.buttonParentContainer || this.createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this.amazonPayV2Button = undefined;\n        this.buttonParentContainer?.remove();\n        this.buttonParentContainer = undefined;\n        this.amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this.getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this.amazonPayV2Button = this.getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this.prepareRequestConfig(createCheckoutSessionConfig);\n\n        this.getAmazonPayV2Button().onClick(() => {\n            this.getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<\n            | {\n                  createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n                  estimatedOrderAmount: AmazonPayV2Price;\n                  productType: AmazonPayV2PayOptions;\n              }\n            | undefined\n        >,\n    ) {\n        this.getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n\n            if (config) {\n                const requestConfig = this.prepareRequestConfig(\n                    config.createCheckoutSessionConfig,\n                    config.estimatedOrderAmount,\n                    config.productType,\n                );\n\n                this.getAmazonPayV2Button().initCheckout(requestConfig);\n            }\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this.amazonPayV2SDK) {\n            this.amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        buttonColor,\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n        isButtonMicroTextDisabled = false,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const { id: parentContainerId } = container.appendChild(this.getButtonParentContainer());\n\n        if (options && isButtonMicroTextDisabled) {\n            options.design = AmazonPayV2ButtonDesign.C0001;\n        }\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this.getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n                buttonColor,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this.getButtonParentContainer();\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow?: boolean) {\n        this.isBuyNowFlow = Boolean(isBuyNowFlow);\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this.isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private getAmazonPayV2ButtonOptions(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n        buttonColor = AmazonPayV2ButtonColor.Gold,\n    ): AmazonPayV2ButtonParameters {\n        const { getCart, getCheckout, getStoreConfigOrThrow, getPaymentMethodOrThrow } =\n            this.getCheckoutState(checkoutState);\n        const {\n            config: { merchantId, testMode },\n            initializationData,\n        } = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n\n        if (!initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            checkoutLanguage,\n            checkoutSessionMethod,\n            createCheckoutSessionConfig,\n            extractAmazonCheckoutSessionId,\n            ledgerCurrency,\n            publicKeyId = '',\n            isButtonMicroTextDisabled,\n        } = initializationData;\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor,\n            ...(isButtonMicroTextDisabled ? { design: AmazonPayV2ButtonDesign.C0001 } : {}),\n        };\n\n        if (this.isBuyNowFlow) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            if (!createCheckoutSessionConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this.isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this.getOrThrow(this.amazonPayV2SDK);\n    }\n\n    private getButtonParentContainer(): HTMLDivElement {\n        return this.getOrThrow(this.buttonParentContainer);\n    }\n\n    private getAmazonPayV2Button(): AmazonPayV2Button {\n        return this.getOrThrow(this.amazonPayV2Button);\n    }\n\n    private getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    // INFO: need this mapping while we have strategies in core and in integration package at the same time\n    private getCheckoutState(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n    ): Pick<\n        PaymentIntegrationSelectors,\n        'getCart' | 'getCheckout' | 'getStoreConfigOrThrow' | 'getPaymentMethodOrThrow'\n    > {\n        if (isInternalCheckoutSelectors(checkoutState)) {\n            return {\n                getCart: checkoutState.cart.getCart,\n                getCheckout: checkoutState.checkout.getCheckout,\n                getStoreConfigOrThrow: checkoutState.config.getStoreConfigOrThrow,\n                getPaymentMethodOrThrow: <T>(methodId: string) =>\n                    checkoutState.paymentMethods.getPaymentMethodOrThrow<T>(methodId),\n            };\n        }\n\n        return checkoutState;\n    }\n}\n","import { InternalCheckoutSelectors } from './amazon-pay-v2';\n\nexport function isInternalCheckoutSelectors(\n    checkoutSelectors: unknown,\n): checkoutSelectors is InternalCheckoutSelectors {\n    return (\n        typeof checkoutSelectors === 'object' &&\n        checkoutSelectors !== null &&\n        'cart' in checkoutSelectors &&\n        'checkout' in checkoutSelectors &&\n        'config' in checkoutSelectors &&\n        'paymentMethods' in checkoutSelectors\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2HostWindow,\n    AmazonPayV2InitializeOptions,\n    amazonPayV2Regions,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private windowWithAmazonPay: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<AmazonPayV2SDK> {\n        const { initializationData } = method;\n        const region = initializationData?.region || 'us';\n\n        const amazonPayV2Region = amazonPayV2Regions[region];\n\n        await this.scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this.windowWithAmazonPay.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.windowWithAmazonPay.amazon;\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during config creation process. Please try again later.',\n        );\n\n        this.name = 'AmazonPayV2ConfigCreationError';\n        this.type = 'amazon_pay_v2_config_creation_error';\n    }\n}\n","import { WithBuyNowFeature } from './amazon-pay-v2-button-options';\n\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\n    if (!(options instanceof Object)) {\n        return false;\n    }\n\n    return 'buyNowInitializeOptions' in options;\n}\n","import {\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    BuyNowCartCreationError,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    getShippableItemsCount,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    WithAmazonPayV2ButtonInitializeOptions,\n    WithBuyNowFeature,\n} from './amazon-pay-v2-button-options';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\nimport { isWithBuyNowFeatures } from './isWithBuyNowFeatures';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowInitializeOptions: WithBuyNowFeature['buyNowInitializeOptions'];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithAmazonPayV2ButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n        const { buttonColor } = amazonpay || {};\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n\n        const paymentMethod = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const { initializationData } = paymentMethod;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (!amazonpay) {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\n            ? undefined\n            : amazonpay;\n\n        if (\n            isWithBuyNowFeatures(amazonpay) &&\n            typeof amazonpay.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n        ) {\n            this._buyNowInitializeOptions = amazonpay.buyNowInitializeOptions;\n            this.amazonPayV2PaymentProcessor.updateBuyNowFlowFlag(true);\n        }\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId,\n            methodId,\n            options: initializeAmazonButtonOptions,\n            placement: AmazonPayV2Placement.Cart,\n            buttonColor,\n            isButtonMicroTextDisabled: initializationData?.isButtonMicroTextDisabled,\n        });\n\n        if (this._buyNowInitializeOptions) {\n            this.amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\n                this._getCheckoutCreationRequestConfig.bind(this),\n            );\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    private async _createBuyNowCartOrThrow() {\n        const buyNowCartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n        if (!buyNowCartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                buyNowCartRequestBody,\n            );\n\n            return buyNowCart;\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private async _createCheckoutConfig(\n        id: string,\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\n        try {\n            const {\n                body: { payload, public_key, ...rest },\n            } = await this.amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\n\n            return {\n                payloadJSON: payload,\n                publicKeyId: public_key,\n                ...rest,\n            };\n        } catch (error) {\n            throw new AmazonPayV2ConfigCreationError();\n        }\n    }\n\n    private async _getCheckoutCreationRequestConfig() {\n        const buyNowCart = await this._createBuyNowCartOrThrow();\n        const estimatedOrderAmount = {\n            amount: String(buyNowCart.baseAmount),\n            currencyCode: buyNowCart.currency.code,\n        };\n        const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\n\n        return {\n            createCheckoutSessionConfig,\n            estimatedOrderAmount,\n            productType:\n                getShippableItemsCount(buyNowCart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n        };\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface CheckoutConfig {\n    payload: string;\n    signature: string;\n    public_key: string;\n}\n\nexport default class AmazonPayV2RequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createCheckoutConfig(cartId: string): Promise<Response<CheckoutConfig>> {\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2ButtonStrategy from './amazon-pay-v2-button-strategy';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\n\nconst createAmazonPayV2ButtonStrategy: CheckoutButtonStrategyFactory<AmazonPayV2ButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\n    const amazonPayV2PaymentProcessor = createAmazonPayV2PaymentProcessor();\n\n    return new AmazonPayV2ButtonStrategy(\n        paymentIntegrationService,\n        amazonPayV2PaymentProcessor,\n        amazonPayV2RequestSender,\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2ButtonStrategy, [{ id: 'amazonpay' }]);\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","export const BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION = '3.128.0';\nexport const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5809.braintree_hosted_fields_fix_version')) {\n            return BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n    nonce?: string;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    preventCursorJumps?: boolean;\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n    [BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh',\n        [BraintreeModuleName.Paypal]:\n            'sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv',\n        [BraintreeModuleName.Venmo]:\n            'sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr',\n    },\n};\n","export enum ApplePayGatewayType {\n    BRAINTREE = 'braintree',\n    BRAINTREE_FASTLANE = 'braintreeacceleratedcheckout',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport ApplePayButtonInitializeOptions, {\n    WithApplePayButtonInitializeOptions,\n} from './apple-pay-button-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nexport enum ButtonStyleOption {\n    Black = 'black',\n    White = 'white',\n    WhiteBorder = 'white-border',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nconst getButtonStyle = (buttonStyle?: ButtonStyleOption): string => {\n    switch (buttonStyle) {\n        case ButtonStyleOption.White:\n            return 'white';\n\n        case ButtonStyleOption.WhiteBorder:\n            return 'white-outline';\n\n        case ButtonStyleOption.Black:\n        default:\n            return 'black';\n    }\n};\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _requiresShipping?: boolean;\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await this._applePayScriptLoader.loadSdk();\n\n        const { onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } = applepay;\n\n        this._requiresShipping = requiresShipping;\n\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        if (!buyNowInitializeOptions) {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const cart = state.getCart();\n\n        if (cart) {\n            await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n        }\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n\n        this._applePayButton = this._createButton(\n            containerId,\n            this._paymentMethod.initializationData?.styleOption,\n        );\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string, styleOption?: ButtonStyleOption): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement(styleOption);\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(styleOption?: ButtonStyleOption): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', getButtonStyle(styleOption));\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 40px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private async _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this._buyNowInitializeOptions &&\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const {\n                countryCode,\n                currencyCode,\n                merchantCapabilities,\n                supportedNetworks,\n                storeName,\n            } = this._paymentMethod.initializationData;\n\n            const request = this._getRequestWithEmptyTotal(\n                countryCode,\n                currencyCode,\n                supportedNetworks,\n                merchantCapabilities,\n            );\n\n            if (this._requiresShipping) {\n                request.requiredShippingContactFields?.push('postalAddress');\n            }\n\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\n\n            applePaySession.begin();\n        } else {\n            const state = this._paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const config = state.getStoreConfigOrThrow();\n            const checkout = state.getCheckoutOrThrow();\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(\n                applePaySession,\n                this._paymentMethod,\n                config.storeProfile.storeName,\n            );\n\n            applePaySession.begin();\n        }\n    }\n\n    private _getRequestWithEmptyTotal(\n        countryCode: string,\n        currencyCode: string,\n        supportedNetworks: string[],\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\n    ): ApplePayJS.ApplePayPaymentRequest {\n        return {\n            countryCode,\n            currencyCode,\n            supportedNetworks,\n            merchantCapabilities,\n            total: { label: '', amount: '0', type: 'pending' },\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n        };\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        storeName: string,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\n            applePaySession.onpaymentmethodselected = async () => {\n                await this._createBuyNowCart();\n                this._handlePaymentMethodSelected(applePaySession);\n            };\n        }\n\n        applePaySession.onshippingcontactselected = async (event) => {\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\n                await this._createBuyNowCart();\n            }\n\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.onshippingmethodselected = async (event) => {\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _createBuyNowCart() {\n        try {\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                cartRequestBody,\n            );\n\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\n\n            const state = this._paymentIntegrationService.getState();\n            const { shouldExecuteSpamCheck } = state.getCheckoutOrThrow();\n\n            if (shouldExecuteSpamCheck) {\n                await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n            }\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n\n        delete request.total.type;\n\n        applePaySession.completePaymentMethodSelection({\n            newTotal: request.total,\n            newLineItems: request.lineItems,\n        });\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { assertApplePayWindow } from './apple-pay-session-factory';\n\nexport default class ApplePayScriptLoader {\n    private sdkVersion = '1.latest';\n\n    constructor(private scriptLoader: ScriptLoader) {}\n\n    async loadSdk() {\n        await this.scriptLoader.loadScript(\n            `https://applepay.cdn-apple.com/jsapi/${this.sdkVersion}/apple-pay-sdk.js`,\n        );\n\n        assertApplePayWindow(window);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n// TODO: rename BigCommercePaymentsSDKFunding to PayPalSDKFunding\nexport interface BigCommercePaymentsSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * BigCommerce Payments SDK\n *\n */\n\nexport interface BigCommercePaymentsCardFieldsConfig {\n    inputEvents: {\n        onChange(data: BigCommercePaymentsCardFieldsState): void;\n        onFocus(data: BigCommercePaymentsCardFieldsState): void;\n        onBlur(data: BigCommercePaymentsCardFieldsState): void;\n        onInputSubmitRequest(data: BigCommercePaymentsCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: BigCommercePaymentsCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: BigCommercePaymentsHostedFieldsRenderOptions['styles'];\n    onApprove(data: BigCommercePaymentsCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface BigCommercePaymentsCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface BigCommercePaymentsCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype BigCommercePaymentsCardFieldsCard = BigCommercePaymentsHostedFieldsCard;\n\nexport interface BigCommercePaymentsCardFieldsState {\n    cards: BigCommercePaymentsCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: BigCommercePaymentsCardFieldsFieldData;\n        cardNumberField: BigCommercePaymentsCardFieldsFieldData;\n        cardNameField?: BigCommercePaymentsCardFieldsFieldData;\n        cardExpiryField: BigCommercePaymentsCardFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface BigCommercePaymentsFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsCardFields {\n    isEligible(): boolean;\n    CVVField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    ExpiryField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NameField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NumberField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    submit(config?: BigCommercePaymentsCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<BigCommercePaymentsCardFieldsState>;\n}\n\nexport interface BigCommercePaymentsCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (\n        data: BigCommercePaymentsCardFieldsConfig,\n    ) => Promise<BigCommercePaymentsCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: BigCommercePaymentsSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(\n            data: BigCommercePaymentsHostedFieldsRenderOptions,\n        ): Promise<BigCommercePaymentsHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n    Messages(options: BigCommercePaymentsMessagesOptions): BigCommercePaymentsMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\n/**\n *\n * BigCommerce Payments BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * BigCommerce Payments Hosted Fields\n *\n */\nexport interface BigCommercePaymentsHostedFieldsRenderOptions {\n    fields?: {\n        number?: BigCommercePaymentsHostedFieldOption;\n        cvv?: BigCommercePaymentsHostedFieldOption;\n        expirationDate?: BigCommercePaymentsHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface BigCommercePaymentsHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsHostedFields {\n    submit(\n        options?: BigCommercePaymentsHostedFieldsSubmitOptions,\n    ): Promise<BigCommercePaymentsHostedFieldsApprove>;\n    getState(): BigCommercePaymentsHostedFieldsState;\n    on(eventName: string, callback: (event: BigCommercePaymentsHostedFieldsState) => void): void;\n}\n\nexport interface BigCommercePaymentsHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface BigCommercePaymentsHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface BigCommercePaymentsHostedFieldsState {\n    cards: BigCommercePaymentsHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationDate?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationMonth?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationYear?: BigCommercePaymentsHostedFieldsFieldData;\n        cvv?: BigCommercePaymentsHostedFieldsFieldData;\n        postalCode?: BigCommercePaymentsHostedFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments Payment fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * BigCommercePayments Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: BigCommercePaymentsMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from './bigcommerce-payments-request-sender';\nimport BigCommercePaymentsScriptLoader from './bigcommerce-payments-script-loader';\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsScriptLoader: BigCommercePaymentsScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.paypalSdk = await this.bigCommercePaymentsScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.bigCommercePaymentsRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.bigCommercePaymentsRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.bigCommercePaymentsRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/bigcommerce_payments`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'bigcommerce_payments',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsHostWindow,\n    BigCommercePaymentsInitializationData,\n    BigCommercePaymentsScriptParams,\n    ComponentsScriptType,\n    FundingType,\n    PayPalSDK,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsScriptLoader {\n    private window: BigCommercePaymentsHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: BigCommercePaymentsScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<BigCommercePaymentsScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<BigCommercePaymentsScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): BigCommercePaymentsScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'bigcommerce_payments_creditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsIntegrationService,\n    BigCommercePaymentsRequestSender,\n    BigCommercePaymentsScriptLoader,\n} from './index';\n\nconst createBigCommercePaymentsIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        new BigCommercePaymentsScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createBigCommercePaymentsIntegrationService;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsButtonInitializeOptions, {\n    WithBigCommercePaymentsButtonInitializeOptions,\n} from './bigcommerce-payments-button-initialize-options';\n\nexport default class BigCommercePaymentsButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBigCommercePaymentsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(bigcommerce_payments?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !bigcommerce_payments.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof bigcommerce_payments.buyNowInitializeOptions?.getBuyNowCartRequestBody !==\n                'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? bigcommerce_payments.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsButtonStrategy from './bigcommerce-payments-button-strategy';\n\nconst createBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsButtonStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './bigcommerce-payments-types';\n\nexport default class PayPalSdkHelper {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane', 'three-domain-secure'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../bigcommerce-payments-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import {\n    BigCommercePaymentsInitializationData,\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalMessagesSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterButtonInitializeOptions, {\n    WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n} from './bigcommerce-payments-paylater-button-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private payPalSdkHelper: PayPalSdkHelper,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_paylater, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = bigcommerce_payments_paylater || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_paylater);\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this when data attributes will be removed from related cart banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const payPalSdkHelper = await this.payPalSdkHelper.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(payPalSdkHelper, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_paylater: BigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments_paylater;\n\n        const bigCommercePaymentsSdk =\n            this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_paylater',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [\n            bigCommercePaymentsSdk.FUNDING.PAYLATER,\n            bigCommercePaymentsSdk.FUNDING.CREDIT,\n        ];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n                    fundingSource,\n                    style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = bigCommercePaymentsSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterButtonStrategy from './bigcommerce-payments-paylater-button-strategy';\n\nconst createBigCommercePaymentsPayLaterButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsPayLaterButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterButtonStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalSdkHelper from './paypal-sdk-helper';\n\nexport default function createBigCommercePaymentsSdk(): PayPalSdkHelper {\n    return new PayPalSdkHelper(createScriptLoader());\n}\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsAlternativeMethodsButtonInitializeOptions, {\n    WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n} from './bigcommerce-payments-alternative-methods-button-initialize-options';\n\nexport default class BigCommercePaymentsAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_apms, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = bigcommerce_payments_apms || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_apms) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_apms);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            bigcommerce_payments_apms;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.bigcommerce_payments_apms.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments_apms'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: apm,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsAlternativeMethodsButtonStrategy from './bigcommerce-payments-alternative-methods-button-strategy';\n\nconst createBigCommercePaymentsAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsAlternativeMethodsButtonStrategy, [\n    { id: 'bigcommerce_payments_apms' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    StyleButtonColor,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoButtonInitializeOptions, {\n    WithBigCommercePaymentsVenmoButtonInitializeOptions,\n} from './bigcommerce-payments-venmo-button-initialize-options';\n\nexport default class BigCommercePaymentsVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_venmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            bigcommerce_payments_venmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_venmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = bigcommerce_payments_venmo;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle =\n            this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoButtonStrategy from './bigcommerce-payments-venmo-button-strategy';\n\nconst createBigCommercePaymentsVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoButtonStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    BuyNowCartRequestBody,\n    NonceInstrument,\n    PaymentMethod,\n    WithAccountCreation,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface BoltHostWindow extends Window {\n    BoltCheckout?: BoltCheckout;\n    BoltConnect?: BoltConnect;\n    Bolt?(publicKey: string): BoltEmbedded;\n}\n\nexport interface BoltCheckout {\n    configure(cart: BoltCart, hints: Record<string, never>, callbacks?: BoltCallbacks): BoltClient;\n    hasBoltAccount(email: string): Promise<boolean>;\n    getTransactionReference(): Promise<string | undefined>;\n    openCheckout(email: string, callbacks?: BoltOpenCheckoutCallbacks): Promise<void>;\n    setClientCustomCallbacks(callbacks: BoltCallbacks): void;\n    setOrderId(orderId: number): Promise<void>;\n}\n\nexport interface BoltConnect {\n    setupProductPageCheckout?(): void;\n}\n\nexport interface BoltOpenCheckoutCallbacks {\n    close?(): void;\n}\n\nexport interface BoltEmbeddedOptions {\n    styles: { backgroundColor: string };\n    renderSeparateFields?: boolean;\n}\n\nexport interface BoltEmbedded {\n    create(name: string, options?: BoltEmbeddedOptions): BoltEmbededField;\n}\n\nexport interface BoltEmbededField {\n    mount(element: string): void;\n    unmount(): void;\n    tokenize(): Promise<BoltEmbeddedTokenize | Error>;\n}\n\nexport interface BoltDeveloperModeParams {\n    developerMode: BoltDeveloperMode;\n    developerDomain: string;\n}\n\nexport enum BoltDeveloperMode {\n    SandboxMode = 'bolt_sandbox',\n    StagingMode = 'bolt_staging',\n    DevelopmentMode = 'bolt_development',\n}\n\nexport interface BoltClient {\n    open(): void;\n}\n\nexport interface BoltCart {\n    orderToken: string;\n}\n\nexport interface BoltCallbacks {\n    check?(): boolean;\n    onCheckoutStart?(): void;\n    onPaymentSubmit?(): void;\n    success(transaction: BoltTransaction, callback: () => void): void;\n    close?(): void;\n}\n\nexport interface BoltTransaction {\n    id: string;\n    type: string;\n    processor: string;\n    date: number;\n    reference: string;\n    status: string;\n    authorization: BoltAuthorization;\n}\n\nexport interface BoltAuthorization {\n    status: string;\n    reason: string;\n}\n\nexport interface BoltEmbeddedTokenize {\n    bin: string;\n    expiration: string;\n    last4: string;\n    postal_code?: string;\n    token: string;\n    token_type: string;\n}\n\nexport interface BoltPaymentMethod extends PaymentMethod {\n    initializationData?: BoltInitializationData;\n}\n\nexport interface BoltInitializationData {\n    publishableKey: string;\n    developerConfig: BoltDeveloperModeParams;\n    embeddedOneClickEnabled: boolean;\n}\n\nexport type BoltPaymentData = WithAccountCreation & NonceInstrument;\n\nexport interface BoltBuyNowInitializeOptions {\n    storefrontApiToken?: string;\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\nexport enum StyleButtonSize {\n    Small = 'small',\n    Medium = 'medium',\n    Large = 'large',\n}\n\nexport enum StyleButtonShape {\n    Pill = 'pill',\n    Rect = 'rect',\n}\n\nexport interface BoltButtonStyleOptions {\n    shape?: StyleButtonShape;\n    size?: StyleButtonSize;\n}\n","import { stringifyUrl } from 'query-string';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    NotImplementedError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltButtonStyleOptions,\n    BoltHostWindow,\n    BoltPaymentMethod,\n    StyleButtonShape,\n    StyleButtonSize,\n} from './bolt';\nimport { WithBoltButtonInitializeOptions } from './bolt-button-initialize-options';\nimport BoltScriptLoader from './bolt-script-loader';\n\nexport default class BoltButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private boltScriptLoader: BoltScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBoltButtonInitializeOptions,\n    ): Promise<void> {\n        const { bolt, containerId, methodId } = options;\n        const { buyNowInitializeOptions, style } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bolt) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bolt\" argument is not provided.`,\n            );\n        }\n\n        const isBuyNowFlow = Boolean(buyNowInitializeOptions);\n\n        if (!isBuyNowFlow) {\n            throw new NotImplementedError('Only buy now flow is implemented for Bolt button');\n        }\n\n        if (\n            !buyNowInitializeOptions?.storefrontApiToken ||\n            typeof buyNowInitializeOptions.storefrontApiToken !== 'string'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.storefrontApiToken\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod: BoltPaymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        await this.boltScriptLoader.loadBoltClient(\n            publishableKey,\n            config.testMode,\n            developerConfig,\n            'BigCommerce',\n            buyNowInitializeOptions.storefrontApiToken,\n        );\n\n        this.renderButton(containerId, paymentMethod, style);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        if (typeof this.boltHostWindow.BoltConnect?.setupProductPageCheckout !== 'function') {\n            return;\n        }\n\n        this.addButtonContainer(containerId, paymentMethod, style);\n        this.boltHostWindow.BoltConnect.setupProductPageCheckout();\n    }\n\n    private addButtonContainer(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            return;\n        }\n\n        const boltButtonContainer = document.createElement('div');\n        const boltButtonObject = document.createElement('object');\n\n        boltButtonContainer.setAttribute('id', 'product-page-checkout-wrapper');\n        boltButtonContainer.setAttribute('class', 'bolt-button-wrapper');\n        boltButtonContainer.setAttribute('style', 'display:none');\n        boltButtonContainer.setAttribute('data-tid', 'product-page-checkout-wrapper');\n\n        boltButtonObject.setAttribute('data', this.getBoltObjectData(paymentMethod, style));\n        boltButtonObject.setAttribute('class', 'bolt-product-checkout-button');\n\n        boltButtonContainer.append(boltButtonObject);\n        container.innerHTML = '';\n        container.append(boltButtonContainer);\n    }\n\n    private getBoltObjectData(\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): string {\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        const domainUrl = this.boltScriptLoader.getDomainURL(!!config.testMode, developerConfig);\n        const buttonHeight = this.getButtonHeight(style?.size);\n        const buttonBorderRadius = this.getButtonBorderRadius(style?.shape, buttonHeight);\n\n        return stringifyUrl({\n            url: `https://${domainUrl}/v1/checkout_button`,\n            query: {\n                publishable_key: publishableKey,\n                variant: 'ppc',\n                height: buttonHeight,\n                border_radius: buttonBorderRadius,\n            },\n        });\n    }\n\n    private getButtonHeight(buttonSize?: StyleButtonSize): number | undefined {\n        if (!buttonSize) {\n            return;\n        }\n\n        switch (buttonSize) {\n            case StyleButtonSize.Small:\n                return 25;\n\n            case StyleButtonSize.Large:\n                return 45;\n\n            case StyleButtonSize.Medium:\n            default:\n                return 40;\n        }\n    }\n\n    private getButtonBorderRadius(\n        buttonShape?: StyleButtonShape,\n        buttonHeight?: number,\n    ): number | undefined {\n        if (!buttonShape) {\n            return;\n        }\n\n        switch (buttonShape) {\n            case StyleButtonShape.Pill:\n                return buttonHeight ? Math.round(buttonHeight / 2) : undefined;\n\n            case StyleButtonShape.Rect:\n            default:\n                return 4;\n        }\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    InvalidArgumentError,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltCheckout,\n    BoltDeveloperMode,\n    BoltDeveloperModeParams,\n    BoltEmbedded,\n    BoltHostWindow,\n} from './bolt';\n\nexport default class BoltScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async loadBoltClient(\n        publishableKey?: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): Promise<BoltCheckout> {\n        if (this.boltHostWindow.BoltCheckout) {\n            return this.boltHostWindow.BoltCheckout;\n        }\n\n        if (!publishableKey) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"publishableKey\" argument is not provided.',\n            );\n        }\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/connect-bigcommerce.js`,\n            this.getScriptOptions('bolt-connect', publishableKey, cartId, storefrontApiToken),\n        );\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/track.js`,\n            this.getScriptOptions('bolt-track', publishableKey),\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this.boltHostWindow.BoltCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.BoltCheckout;\n    }\n\n    async loadBoltEmbedded(\n        publishableKey: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n    ): Promise<BoltEmbedded> {\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: {\n                id: 'bolt-embedded',\n            },\n        };\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/embed.js`,\n            options,\n        );\n\n        if (!this.boltHostWindow.Bolt) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.Bolt(publishableKey);\n    }\n\n    getDomainURL(testMode: boolean, developerModeParams?: BoltDeveloperModeParams): string {\n        if (!testMode) {\n            return 'connect.bolt.com';\n        }\n\n        if (developerModeParams) {\n            switch (developerModeParams.developerMode) {\n                case BoltDeveloperMode.StagingMode:\n                    return 'connect-staging.bolt.com';\n\n                case BoltDeveloperMode.DevelopmentMode:\n                    return `connect.${developerModeParams.developerDomain}`;\n            }\n        }\n\n        return 'connect-sandbox.bolt.com';\n    }\n\n    private getScriptOptions(\n        id: string,\n        publishableKey: string,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): LoadScriptOptions {\n        return {\n            async: true,\n            attributes: {\n                id,\n                'data-publishable-key': publishableKey,\n                ...(cartId && { 'data-shopping-cart-id': cartId }),\n                ...(storefrontApiToken && { 'data-storefront-api-token': storefrontApiToken }),\n            },\n        };\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BoltButtonStrategy from './bolt-button-strategy';\nimport BoltScriptLoader from './bolt-script-loader';\n\nconst createBoltButtonStrategy: CheckoutButtonStrategyFactory<BoltButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BoltButtonStrategy(\n        paymentIntegrationService,\n        new BoltScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createBoltButtonStrategy, [{ id: 'bolt' }]);\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","// the PayPal side of things uses uppercase keys instead of camel case\n\n/**\n *\n * PayPal constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\n/**\n *\n * PayPal interfaces\n *\n */\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    buyerCountry?: string;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport enum MessagingPlacements {\n    CART = 'cart',\n    HOME = 'homepage',\n    PAYMENT = 'payment',\n    PRODUCT = 'product',\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onClick?(): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number | string;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n    close(): void;\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<unknown>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n","import { supportsPopups } from '@braintree/browser-detection';\n\nimport {\n    Address,\n    CancellablePromise,\n    CreditCardInstrument,\n    LegacyAddress,\n    NonceInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodCancelledError,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeDataCollectors,\n    BraintreeEnv,\n    BraintreeError,\n    BraintreeFastlane,\n    BraintreeFastlaneStylesOption,\n    BraintreeHostWindow,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeRequestData,\n    BraintreeShippingAddressOverride,\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureOptions,\n    BraintreeTokenizationDetails,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig,\n    BraintreeVerifyPayload,\n    PAYPAL_COMPONENTS,\n    TokenizationPayload,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { isEmpty } from 'lodash';\nimport isCreditCardInstrumentLike from './utils/is-credit-card-instrument-like';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\n// Info: this class is deprecated and will be removed in a nearest future. Please, do not add anything here.\nexport default class BraintreeIntegrationService {\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private dataCollectors: BraintreeDataCollectors = {};\n    private paypalCheckout?: BraintreePaypalCheckout;\n    private braintreePaypal?: Promise<BraintreePaypal>;\n    private threeDSecureOptions?: BraintreeThreeDSecureOptions;\n    private threeDS?: Promise<BraintreeThreeDSecure>;\n    private venmoCheckout?: BraintreeVenmoCheckout;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private overlay?: Overlay,\n    ) {}\n\n    initialize(clientToken: string, threeDSecureOptions?: BraintreeThreeDSecureOptions) {\n        this.clientToken = clientToken;\n        this.threeDSecureOptions = threeDSecureOptions;\n    }\n\n    async getBraintreeFastlane(\n        cardId?: string,\n        isTestModeEnabled?: boolean,\n        styles?: BraintreeFastlaneStylesOption,\n    ): Promise<BraintreeFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('axoEnv', 'sandbox');\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n        }\n\n        if (!this.braintreeHostWindow.braintreeFastlane) {\n            const clientToken = this.getClientTokenOrThrow();\n            const client = await this.getClient();\n            const deviceData = await this.getSessionId(cardId);\n\n            const braintreeFastlaneCreator = await this.braintreeScriptLoader.loadFastlane();\n\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.braintreeHostWindow.braintreeFastlane = await braintreeFastlaneCreator.create({\n                authorization: clientToken,\n                client,\n                deviceData,\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.braintreeHostWindow.braintreeFastlane;\n    }\n\n    // Info: This method is deprecated. Use getClient method from BraintreeSdk class instead\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this.braintreePaypal) {\n            this.braintreePaypal = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.braintreePaypal;\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        const newWindowFlow = supportsPopups();\n\n        return this.getPaypal()\n            .then((paypal) => {\n                if (newWindowFlow) {\n                    this.overlay?.show({\n                        onClick: () => paypal.focusWindow(),\n                    });\n                }\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then((response) => {\n                this.overlay?.remove();\n\n                return response;\n            })\n            .catch((error) => {\n                this.overlay?.remove();\n\n                throw error;\n            });\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this.braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError | undefined,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n                components: PAYPAL_COMPONENTS.toString(),\n                intent: config.intent,\n                commit: config.commit ?? true,\n            };\n\n            if (!this.braintreeHostWindow.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this.paypalCheckout = await paypalCheckout.create(\n            paypalCheckoutConfig,\n            paypalCheckoutCallback,\n        );\n\n        return this.paypalCheckout;\n    }\n\n    async getDataCollector(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const cacheKey: keyof BraintreeDataCollectors = options?.paypal ? 'paypal' : 'default';\n\n        let cached = this.dataCollectors[cacheKey];\n\n        if (!cached) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                cached = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    cached = {\n                        deviceData: undefined,\n                        teardown: () => Promise.resolve(),\n                    };\n                } else {\n                    throw error;\n                }\n            }\n\n            this.dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getBraintreeEnv(isTestMode = false): BraintreeEnv {\n        return isTestMode ? BraintreeEnv.Sandbox : BraintreeEnv.Production;\n    }\n\n    mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n        return {\n            recipientName: `${address.firstName} ${address.lastName}`,\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n        };\n    }\n\n    mapToLegacyShippingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { email, phone, shippingAddress } = details;\n        const recipientName = shippingAddress?.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email,\n            first_name: firstName || '',\n            last_name: lastName || '',\n            phone_number: phone,\n            address_line_1: shippingAddress?.line1,\n            address_line_2: shippingAddress?.line2,\n            city: shippingAddress?.city,\n            state: shippingAddress?.state,\n            country_code: shippingAddress?.countryCode,\n            postal_code: shippingAddress?.postalCode,\n        };\n    }\n\n    mapToLegacyBillingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n        const address = billingAddress || shippingAddress;\n\n        return {\n            email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: phone,\n            address_line_1: address?.line1,\n            address_line_2: address?.line2,\n            city: address?.city,\n            state: address?.state,\n            country_code: address?.countryCode,\n            postal_code: address?.postalCode,\n        };\n    }\n\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    async getSessionId(cartId?: string): Promise<string | undefined> {\n        const { deviceData } = await this.getDataCollector({\n            riskCorrelationId: cartId,\n        });\n\n        return deviceData;\n    }\n\n    async teardown(): Promise<void> {\n        await this.teardownModule(this.dataCollectors.default);\n        await this.teardownModule(this.dataCollectors.paypal);\n        this.dataCollectors = {};\n\n        await this.teardownModule(this.paypalCheckout);\n        this.paypalCheckout = undefined;\n\n        // await this.teardownModule(this._venmoCheckout);\n        // this._venmoCheckout = undefined;\n\n        // await this.teardownModule(this._visaCheckout);\n        // this._visaCheckout = undefined;\n    }\n\n    async get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            this.threeDS = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]).then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }));\n        }\n\n        return this.threeDS;\n    }\n\n    async getVenmoCheckout(\n        venmoConfig?: BraintreeVenmoCreatorConfig,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this.venmoCheckout) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n                ...(venmoConfig || {}),\n            };\n\n            this.venmoCheckout = await new Promise<BraintreeVenmoCheckout>((resolve, reject) => {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                venmoCheckout.create(\n                    venmoCheckoutConfig,\n                    (error: BraintreeError, braintreeVenmoCheckout: BraintreeVenmoCheckout) => {\n                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                        if (error) {\n                            return reject(error);\n                        }\n\n                        if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                            return reject(new UnsupportedBrowserError());\n                        }\n\n                        resolve(braintreeVenmoCheckout);\n                    },\n                );\n            });\n        }\n\n        return this.venmoCheckout;\n    }\n\n    /*\n       Braintree Credit Card and Braintree Hosted Form\n   */\n    async verifyCard(\n        payment: Payment,\n        billingAddress: Address,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this.tokenizeCard(payment, billingAddress);\n\n        return this.challenge3DSVerification(tokenizationPayload, amount);\n    }\n\n    async tokenizeCard(payment: Payment, billingAddress: Address): Promise<TokenizationPayload> {\n        const { paymentData } = payment;\n\n        if (!isCreditCardInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const errors = this.getErrorsRequiredFields(paymentData);\n\n        if (!isEmpty(errors)) {\n            throw new PaymentInvalidFormError(errors);\n        }\n\n        const requestData = this.mapToCreditCard(paymentData, billingAddress);\n        const client = await this.getClient();\n        const { creditCards } = await client.request(requestData);\n\n        return {\n            nonce: creditCards[0].nonce,\n            bin: creditCards[0].details.bin,\n        };\n    }\n\n    async challenge3DSVerification(\n        tokenizationPayload: TokenizationPayload,\n        amount: number,\n    ): Promise<BraintreeVerifyPayload> {\n        const threeDSecure = await this.get3DS();\n\n        return this.present3DSChallenge(threeDSecure, amount, tokenizationPayload);\n    }\n\n    private teardownModule(module?: BraintreeModule) {\n        return module ? module.teardown() : Promise.resolve();\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private getErrorsRequiredFields(\n        paymentData: CreditCardInstrument,\n    ): PaymentInvalidFormErrorDetails {\n        const { ccNumber, ccExpiry } = paymentData;\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        if (!ccNumber) {\n            errors.ccNumber = [\n                {\n                    message: 'Credit card number is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!ccExpiry) {\n            errors.ccExpiry = [\n                {\n                    message: 'Expiration date is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        return errors;\n    }\n\n    private mapToCreditCard(\n        creditCard: CreditCardInstrument,\n        billingAddress?: Address,\n    ): BraintreeRequestData {\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: billingAddress && {\n                        countryCodeAlpha2: billingAddress.countryCode,\n                        locality: billingAddress.city,\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress: billingAddress.address2\n                            ? `${billingAddress.address1} ${billingAddress.address2}`\n                            : billingAddress.address1,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n\n    private present3DSChallenge(\n        threeDSecure: BraintreeThreeDSecure,\n        amount: number,\n        tokenizationPayload: TokenizationPayload,\n    ): Promise<BraintreeVerifyPayload> {\n        const { nonce, bin } = tokenizationPayload;\n\n        if (!this.threeDSecureOptions || !nonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            addFrame,\n            removeFrame,\n            challengeRequested = true,\n            additionalInformation,\n        } = this.threeDSecureOptions;\n        const cancelVerifyCard = async () => {\n            const response = await threeDSecure.cancelVerifyCard();\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            verification.cancel(new PaymentMethodCancelledError());\n\n            return response;\n        };\n\n        const roundedAmount = amount.toFixed(2);\n\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                addFrame: (error, iframe) => {\n                    if (addFrame) {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    }\n                },\n                amount: Number(roundedAmount),\n                bin,\n                challengeRequested,\n                nonce,\n                removeFrame,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n                collectDeviceData: true,\n                additionalInformation,\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import { CreditCardInstrument } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isCreditCardInstrumentLike(\n    instrument: unknown,\n): instrument is CreditCardInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const creditCardInstrument = instrument as Partial<Record<string, unknown>>;\n\n    return (\n        typeof creditCardInstrument.ccExpiry === 'object' &&\n        creditCardInstrument.ccExpiry !== null &&\n        typeof creditCardInstrument.ccNumber === 'string' &&\n        typeof creditCardInstrument.ccName === 'string'\n    );\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalStyleOptions } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function getValidButtonStyle(style?: PaypalStyleOptions): PaypalStyleOptions {\n    const { color, fundingicons, height = 40, layout, shape, size, tagline } = style || {};\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height: number | string): number {\n    const minHeight = 25;\n    const defaultHeight = 40;\n    const maxHeight = 55;\n\n    const currentHeight = Number(height);\n\n    if (!currentHeight || Number.isNaN(currentHeight)) {\n        return defaultHeight;\n    }\n\n    if (currentHeight > maxHeight) {\n        return maxHeight;\n    }\n\n    if (currentHeight < minHeight) {\n        return minHeight;\n    }\n\n    return currentHeight;\n}\n","import { BraintreeShippingAddressOverride } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalButtonInitializeOptions, {\n    WithBraintreePaypalButtonInitializeOptions,\n} from './braintree-paypal-button-initialize-options';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypal.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypal;\n        const { paypal } = this.braintreeHostWindow;\n\n        if (paypal) {\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                fundingSource: paypal.FUNDING.PAYPAL,\n                style: getValidButtonStyle(style),\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                onEligibilityFailure();\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypal;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount;\n            const currencyCode = buyNowCart\n                ? braintreepaypal.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalButtonStrategy from './braintree-paypal-button-strategy';\n\nconst createBraintreePaypalButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalButtonStrategy, [{ id: 'braintreepaypal' }]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    PayPalBNPLConfigurationItem,\n} from './braintree';\nimport { MessagesStyleOptions, MessagingPlacements } from './paypal';\n\nexport default class BraintreeMessages {\n    private braintreeHostWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    render(methodId: string, containerId: string, placement: MessagingPlacements): void {\n        const messagingContainer = containerId && document.getElementById(containerId);\n\n        if (this.braintreeHostWindow.paypal && messagingContainer) {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const billingAddress = state.getBillingAddressOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n            if (!paymentMethod.initializationData) {\n                return;\n            }\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData;\n\n            const bannedId = placement === MessagingPlacements.PAYMENT ? 'checkout' : placement;\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === bannedId);\n\n            if (!bannerConfiguration || !bannerConfiguration.status) {\n                return;\n            }\n\n            // TODO: remove this code when this data attributes will be removed from banner div container in content service\n            if (placement === MessagingPlacements.CART) {\n                messagingContainer.removeAttribute('data-pp-style-logo-type');\n                messagingContainer.removeAttribute('data-pp-style-logo-position');\n                messagingContainer.removeAttribute('data-pp-style-text-color');\n                messagingContainer.removeAttribute('data-pp-style-text-size');\n            }\n\n            this.braintreeHostWindow.paypal\n                .Messages({\n                    amount: cart.cartAmount,\n                    buyerCountry: billingAddress.countryCode,\n                    placement,\n                    style: this.getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n                })\n                .render(`#${containerId}`);\n        }\n    }\n\n    private getPaypalMessagesStylesFromBNPLConfig({\n        styles,\n    }: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n        const messagesStyles: MessagesStyleOptions = {};\n\n        if (styles.color) {\n            messagesStyles.color = styles.color;\n        }\n\n        if (styles.layout) {\n            messagesStyles.layout = styles.layout;\n        }\n\n        if (styles['logo-type'] || styles['logo-position']) {\n            messagesStyles.logo = {};\n\n            if (styles['logo-type']) {\n                messagesStyles.logo.type = styles['logo-type'];\n            }\n\n            if (styles['logo-position']) {\n                messagesStyles.logo.position = styles['logo-position'];\n            }\n        }\n\n        if (styles.ratio) {\n            messagesStyles.ratio = styles.ratio;\n        }\n\n        if (styles['text-color'] || styles['text-size']) {\n            messagesStyles.text = {};\n\n            if (styles['text-color']) {\n                messagesStyles.text.color = styles['text-color'];\n            }\n\n            if (styles['text-size']) {\n                messagesStyles.text.size = +styles['text-size'];\n            }\n        }\n\n        return messagesStyles;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    MessagingPlacements,\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalCreditButtonInitializeOptions, {\n    WithBraintreePaypalCreditButtonInitializeOptions,\n} from './braintree-paypal-credit-button-initialize-options';\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeMessages: BraintreeMessages,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk will be rolled out to 100%\n        const features = state.getStoreConfig()?.checkoutSettings.features ?? {};\n        const isBannerImplementationDisabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk',\n        );\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (!isBannerImplementationDisabled && braintreepaypalcredit.messagingContainerId) {\n                this.renderPayPalMessages(methodId, braintreepaypalcredit.messagingContainerId);\n            }\n\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalMessages(methodId: string, messagingContainerId: string): void {\n        this.braintreeMessages.render(methodId, messagingContainerId, MessagingPlacements.CART);\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? {\n                              label: PaypalButtonStyleLabelOption.CREDIT,\n                              ...getValidButtonStyle(style),\n                          }\n                        : getValidButtonStyle(style);\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    } else if (\n                        paypal.FUNDING.CREDIT &&\n                        onEligibilityFailure &&\n                        typeof onEligibilityFailure === 'function'\n                    ) {\n                        // the condition is related to paypal.FUNDING.CREDIT because when paypal.FUNDING.PAYLATER is not eligible then\n                        // CREDIT button should be configured and triggered to render with eligibility check\n                        // and if it is not eligible, then onEligibilityFailure callback should be called\n                        onEligibilityFailure();\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount; // state.getCheckoutOrThrow().outstandingBalance\n            const currencyCode = buyNowCart\n                ? braintreepaypalcredit.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditButtonStrategy from './braintree-paypal-credit-button-strategy';\n\nconst createBraintreePaypalCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalCreditButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n    const braintreeMessages = new BraintreeMessages(paymentIntegrationService);\n\n    return new BraintreePaypalCreditButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeMessages,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditButtonStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeVisaCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const { clientToken, initializationData, config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const {\n            currency: { code },\n            cartAmount,\n        } = state.getCartOrThrow();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: code,\n                subtotal: String(cartAmount),\n            },\n            settings: {\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        this.createSignInButton(containerId);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on('payment.success', async (payment) => {\n            await this.paymentSuccess(braintreeVisaCheckout, payment);\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private async paymentSuccess(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.toVisaCheckoutAddress(shipping),\n                billingAddress = this.toVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return this.insertVisaCheckoutButton(container);\n    }\n\n    private insertVisaCheckoutButton(container: Element): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.alignItems = 'flex-end';\n\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutButtonStrategy from './braintree-visa-checkout-button-strategy';\n\nconst createBraintreeVisaCheckoutButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVisaCheckoutButtonStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutButtonStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeSdk,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    mapToLegacyBillingAddress,\n    mapToLegacyShippingAddress,\n    PaypalButtonStyleColorOption,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isBraintreeError from '../is-braintree-error';\nimport { isUnsupportedBrowserError } from '../isUnsupportedBrowserError';\n\nimport { WithBraintreeVenmoInitializeOptions } from './braintree-venmo-initialize-options';\n\nconst getVenmoButtonStyle = (styles: PaypalStyleOptions): Record<string, string> => {\n    const { color, height } = styles;\n\n    const colorParser = (c: string) => {\n        if (c === PaypalButtonStyleColorOption.WHITE) {\n            return '#FFFFFF';\n        }\n\n        return '#3D95CE';\n    };\n\n    return {\n        backgroundColor: colorParser(color || ''),\n        backgroundPosition: '50% 50%',\n        backgroundSize: '80px auto',\n        backgroundImage: `url(\"/app/assets/img/payment-providers/venmo-logo-${\n            color === PaypalButtonStyleColorOption.WHITE\n                ? PaypalButtonStyleColorOption.BLUE\n                : PaypalButtonStyleColorOption.WHITE\n        }.svg\")`,\n        backgroundRepeat: 'no-repeat',\n        borderRadius: '4px',\n        cursor: 'pointer',\n        transition: '0.2s ease',\n        minHeight: `${height || 40}px`,\n        minWidth: '150px',\n        height: '100%',\n        width: '100%',\n        border: color === PaypalButtonStyleColorOption.WHITE ? '1px solid black' : 'none',\n    };\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreeVenmoInitializeOptions,\n    ): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { clientToken, initializationData }: PaymentMethod = paymentMethod;\n        const { paymentButtonStyles } = initializationData;\n        const { cartButtonStyles } = paymentButtonStyles || {};\n        const styles = braintreevenmo?.style || cartButtonStyles;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadDefaultCheckout();\n\n        this.onError = braintreevenmo?.onError || this.handleError;\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            const braintreeVenmoCheckout = await this.braintreeSdk.getVenmoCheckoutOrThrow();\n\n            this.renderVenmoButton(\n                braintreeVenmoCheckout,\n                containerId,\n                braintreevenmo?.buyNowInitializeOptions,\n                styles,\n            );\n        } catch (error) {\n            if (isBraintreeError(error) || isUnsupportedBrowserError(error)) {\n                this.handleInitializationVenmoError(error, containerId);\n            }\n        }\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private async createBuyNowCart(\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): Promise<Cart | undefined> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions?.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n\n        return undefined;\n    }\n\n    private handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this.removeVenmoContainer(containerId);\n\n        return this.onError(error);\n    }\n\n    private removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n        buttonStyles?: PaypalStyleOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n        const { color } = buttonStyles || {};\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, getVenmoButtonStyle(buttonStyles || {}));\n\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this.createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (\n                        error: BraintreeError | undefined,\n                        payload: BraintreeTokenizePayload,\n                    ) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            this.onError(error);\n                        }\n\n                        await this.handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        if (color === PaypalButtonStyleColorOption.BLUE) {\n            venmoButton.addEventListener('mouseenter', () => {\n                venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n            });\n\n            venmoButton.addEventListener('mouseleave', () => {\n                venmoButton.style.backgroundColor = getVenmoButtonStyle(\n                    buttonStyles || {},\n                ).backgroundColor;\n            });\n        }\n    }\n\n    private async handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { nonce, details } = payload;\n\n        this.formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: 'braintreevenmo',\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import { BraintreeError } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function isBraintreeError(\n    error: BraintreeError | Error | unknown,\n): error is BraintreeError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'name' in error &&\n        (error as BraintreeError).name === 'BraintreeError'\n    );\n}\n","import { UnsupportedBrowserError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport function isUnsupportedBrowserError(error: unknown): error is UnsupportedBrowserError {\n    return error instanceof UnsupportedBrowserError;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVenmoButtonStrategy from './braintree-venmo-button-strategy';\n\nconst createBraintreeVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVenmoButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const scriptLoader = getScriptLoader();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        scriptLoader,\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeVenmoButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVenmoButtonStrategy, [{ id: 'braintreevenmo' }]);\n","/**\n * A set of options that are required to initialize the GooglePay payment method\n *\n * If the customer chooses to pay with GooglePay, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n *\n * ```html\n * <!-- This is where the GooglePay button will be inserted -->\n * <div id=\"wallet-button\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     // Using GooglePay provided by Braintree as an example\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button'\n *     },\n * });\n * ```\n *\n * Additional event callbacks can be registered.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button',\n *         onError(error) {\n *             console.log(error);\n *         },\n *         onPaymentSelect() {\n *             console.log('Selected');\n *         },\n *     },\n * });\n * ```\n */\nexport default interface GooglePayPaymentInitializeOptions {\n    /**\n     * A container for loading spinner.\n     */\n    loadingContainerId?: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the GooglePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when GooglePay fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n\n/**\n * The recognized keys to pass the initialization options for Google Pay.\n */\nexport enum GooglePayKey {\n    ADYEN_V2 = 'googlepayadyenv2',\n    ADYEN_V3 = 'googlepayadyenv3',\n    AUTHORIZE_NET = 'googlepayauthorizenet',\n    BNZ = 'googlepaybnz',\n    BRAINTREE = 'googlepaybraintree',\n    PAYPAL_COMMERCE = 'googlepaypaypalcommerce',\n    BIGCOMMERCE_PAYMENTS = 'googlepay_bigcommerce_payments',\n    CHECKOUT_COM = 'googlepaycheckoutcom',\n    CYBERSOURCE_V2 = 'googlepaycybersourcev2',\n    ORBITAL = 'googlepayorbital',\n    STRIPE = 'googlepaystripe',\n    STRIPE_UPE = 'googlepaystripeupe',\n    STRIPE_OCS = 'googlepaystripeocs',\n    WORLDPAY_ACCESS = 'googlepayworldpayaccess',\n    TD_ONLINE_MART = 'googlepaytdonlinemart',\n}\n\n/**\n * The options that are required to initialize the GooglePay payment method.\n * They can be omitted unless you need to support GooglePay.\n */\nexport type WithGooglePayPaymentInitializeOptions = {\n    [k in GooglePayKey]?: GooglePayPaymentInitializeOptions;\n};\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { InvalidArgumentError } from '../errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(currencySettings: CurrencyConfig) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const { decimalPlaces, symbolLocation, symbol, thousandsSeparator, decimalSeparator } =\n            currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ? `-${formattedCurrency}` : formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [integerAmount, decimalAmount = ''] = this._toFixed(\n            positiveAmount,\n            this._decimalPlaces,\n        ).split('.');\n        const parsedIntegerAmount = integerAmount.replace(\n            /\\B(?=(\\d{3})+(?!\\d))/g,\n            this._thousandsSeparator,\n        );\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [parsedIntegerAmount, decimalAmount].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return this._symbolLocation.toLowerCase() === 'left'\n            ? `${this._symbol}${formattedNumber}`\n            : `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+`${Math.round(+`${value}e${precision}`)}e${-precision}`).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(private _storeConfig: StoreConfig) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { BigCommercePaymentsIntent } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    BrowserInfo,\n    BuyNowCartRequestBody,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { FundingType } from './google-pay-paypal-commerce/types';\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\nexport interface GooglePayGatewayBaseRequest {\n    apiVersion: 2;\n    apiVersionMinor: 0;\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\ntype GooglePayGatewayBaseResponse = GooglePayGatewayBaseRequest;\n\ninterface GooglePayPaymentMethod<T> {\n    type: string;\n    parameters: T;\n}\n\ntype GooglePayAuthMethod = 'PAN_ONLY' | 'CRYPTOGRAM_3DS';\n\nexport enum GooglePayCardNetwork {\n    AMEX = 'AMEX',\n    DISCOVER = 'DISCOVER',\n    INTERAC = 'INTERAC',\n    JCB = 'JCB',\n    MC = 'MASTERCARD',\n    VISA = 'VISA',\n}\n\nexport interface GooglePayCardParameters {\n    allowedAuthMethods: GooglePayAuthMethod[];\n    allowedCardNetworks: GooglePayCardNetwork[];\n    billingAddressRequired?: boolean;\n    billingAddressParameters?: {\n        format?: 'MIN' | 'FULL';\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface GooglePayBaseCardPaymentMethod\n    extends GooglePayPaymentMethod<GooglePayCardParameters> {\n    type: 'CARD';\n    parameters: GooglePayCardParameters;\n}\n\nexport interface GooglePayIsReadyToPayRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n}\n\ninterface GooglePayGatewayBaseParameters {\n    gateway: string;\n}\n\nexport interface GooglePayRegularGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId: string;\n}\n\nexport interface GooglePayStripeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'stripe:version'?: string;\n    'stripe:publishableKey'?: string;\n}\n\nexport interface GooglePayBraintreeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'braintree:apiVersion'?: string;\n    'braintree:authorizationFingerprint'?: string;\n    'braintree:merchantId'?: string;\n    'braintree:sdkVersion'?: string;\n}\n\nexport interface GooglePayPayPalCommerceGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId?: string;\n}\n\nexport type GooglePayGatewayParameters =\n    | GooglePayRegularGatewayParameters\n    | GooglePayStripeGatewayParameters\n    | GooglePayBraintreeGatewayParameters;\n\nexport interface GooglePayCardPaymentMethod extends GooglePayBaseCardPaymentMethod {\n    tokenizationSpecification: {\n        type: 'PAYMENT_GATEWAY';\n        parameters: GooglePayGatewayParameters;\n    };\n}\n\nexport interface GooglePayTransactionInfo {\n    /** [!] Required for EEA countries */\n    countryCode?: string;\n    currencyCode: string;\n    totalPriceStatus: TotalPriceStatusType;\n    totalPrice: string;\n}\n\nexport interface GooglePayMerchantInfo {\n    merchantName: string;\n    merchantId: string;\n    authJwt: string;\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport interface GooglePayPaymentDataRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayCardPaymentMethod];\n    transactionInfo: GooglePayTransactionInfo;\n    merchantInfo: GooglePayMerchantInfo;\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n    offerInfo: Offers;\n    shippingOptionRequired?: boolean;\n    callbackIntents?: CallbackIntentsType[];\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport interface ShippingOptionParameters {\n    defaultSelectedOptionId?: string;\n    shippingOptions?: GoogleShippingOption[];\n}\n\nexport interface NewShippingOptionParameters {\n    newShippingOptionParameters?: ShippingOptionParameters;\n}\n\nexport interface NewOfferInfo {\n    newOfferInfo?: Offers;\n}\n\nexport interface Offers {\n    offers: OfferInfoItem[];\n}\n\nexport interface GooglePayError {\n    message: string;\n    reason: ErrorReasonType;\n    intent: CallbackTriggerType;\n}\n\nexport enum ErrorReasonType {\n    OFFER_INVALID = 'OFFER_INVALID',\n    PAYMENT_DATA_INVALID = 'PAYMENT_DATA_INVALID',\n    SHIPPING_ADDRESS_INVALID = 'SHIPPING_ADDRESS_INVALID',\n    SHIPPING_ADDRESS_UNSERVICEABLE = 'SHIPPING_ADDRESS_UNSERVICEABLE',\n    SHIPPING_OPTION_INVALID = 'SHIPPING_OPTION_INVALID',\n    OTHER_ERROR = 'OTHER_ERROR',\n}\n\nexport interface OfferInfoItem {\n    redemptionCode: string;\n    description: string;\n}\n\nexport interface HandleCouponsOut {\n    newOfferInfo: GooglePayPaymentDataRequest['offerInfo'];\n    error?: GooglePayError;\n}\n\nexport interface GoogleShippingOption {\n    id: string;\n    label?: string;\n}\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n    shippingAddress: GooglePayFullBillingAddress;\n    shippingOptionData: GoogleShippingOption;\n    offerData: {\n        redemptionCodes: string[];\n    };\n}\n\nexport interface GooglePayPaymentOptions {\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): onPaymentDataChangedOut;\n    };\n}\n\nexport type onPaymentDataChangedOut = Promise<\n    | (NewTransactionInfo & NewShippingOptionParameters & NewOfferInfo & { error?: GooglePayError })\n    | void\n>;\n\nexport type GooglePayRequiredPaymentData = Pick<\n    GooglePayPaymentDataRequest,\n    | 'emailRequired'\n    | 'shippingAddressRequired'\n    | 'shippingAddressParameters'\n    | 'shippingOptionRequired'\n>;\n\ninterface GooglePayMinBillingAddress {\n    name: string;\n    postalCode: string;\n    countryCode: string;\n    phoneNumber?: string;\n}\n\nexport interface GooglePayFullBillingAddress extends GooglePayMinBillingAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    locality: string;\n    administrativeArea: string;\n    sortingCode: string;\n}\n\ninterface GooglePayCardInfo {\n    cardNetwork: GooglePayCardNetwork;\n    cardDetails: string;\n    billingAddress?: GooglePayFullBillingAddress;\n}\n\ninterface GooglePayPaymentMethodData<T> {\n    description: string;\n    tokenizationData: {\n        type: 'PAYMENT_GATEWAY';\n        token: string;\n    };\n    type: string;\n    info: T;\n}\n\ninterface GooglePayCardData extends GooglePayPaymentMethodData<GooglePayCardInfo> {\n    type: 'CARD';\n}\n\ninterface GooglePayPaymentDataResponse<T> extends GooglePayGatewayBaseResponse {\n    paymentMethodData: GooglePayPaymentMethodData<T>;\n    shippingAddress?: GooglePayFullBillingAddress;\n    email?: string;\n}\n\nexport interface GooglePayCardDataResponse extends GooglePayPaymentDataResponse<GooglePayCardInfo> {\n    paymentMethodData: GooglePayCardData;\n}\n\ninterface GooglePayIsReadyToPayResponse {\n    result: boolean;\n}\n\nexport interface GooglePayButtonOptions {\n    onClick: (event: MouseEvent) => Promise<void>;\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n    buttonColor?: GooglePayButtonColor;\n    buttonType?: GooglePayButtonType;\n}\n\nexport interface GooglePaymentsClient {\n    isReadyToPay(request: GooglePayIsReadyToPayRequest): Promise<GooglePayIsReadyToPayResponse>;\n    createButton(options: GooglePayButtonOptions): HTMLElement;\n    loadPaymentData(request: GooglePayPaymentDataRequest): Promise<GooglePayCardDataResponse>;\n    prefetchPaymentData(request: GooglePayPaymentDataRequest): void;\n}\n\ntype GooglePayEnvironment = 'TEST' | 'PRODUCTION';\n\nexport type GooglePaymentsClientConstructor = new (paymentOptions: {\n    environment: GooglePayEnvironment;\n}) => GooglePaymentsClient;\n\nexport interface GooglePayHostWindow extends Window {\n    google?: {\n        payments: {\n            api: {\n                PaymentsClient: GooglePaymentsClientConstructor;\n            };\n        };\n    };\n}\n\ninterface GooglePayBaseInitializationData {\n    card_information?: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    gateway: string;\n    gatewayMerchantId?: string;\n    googleMerchantId: string;\n    googleMerchantName: string;\n    isThreeDSecureEnabled: boolean;\n    nonce?: string;\n    platformToken: string;\n    storeCountry?: string;\n}\n\nexport interface GooglePayPayPalCommerceInitializationData extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayBigCommercePaymentsInitializationData\n    extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayAuthorizeNetInitializationData extends GooglePayBaseInitializationData {\n    paymentGatewayId: string;\n}\n\nexport interface GooglePayStripeInitializationData extends GooglePayBaseInitializationData {\n    stripeConnectedAccount: string;\n    stripePublishableKey: string;\n    stripeVersion: string;\n}\n\nexport interface GooglePayCheckoutComInitializationData extends GooglePayBaseInitializationData {\n    checkoutcomkey: string;\n}\n\nexport interface GooglePayAdyenV2InitializationData extends GooglePayBaseInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface GooglePayAdyenV3InitializationData extends GooglePayBaseInitializationData {\n    clientKey: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport type GooglePayInitializationData =\n    | GooglePayBaseInitializationData\n    | GooglePayAdyenV2InitializationData\n    | GooglePayAdyenV3InitializationData\n    | GooglePayAuthorizeNetInitializationData\n    | GooglePayStripeInitializationData\n    | GooglePayCheckoutComInitializationData\n    | GooglePayPayPalCommerceInitializationData\n    | GooglePayBigCommercePaymentsInitializationData;\n\nexport interface GooglePaySetExternalCheckoutData {\n    nonce: string;\n    card_information: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    cart_id?: string;\n}\n\nexport interface GooglePayAdditionalActionProcessable {\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void>;\n}\n\nexport interface GooglePayErrorObject {\n    errorCode?: number;\n    statusCode: 'CANCELED' | 'DEVELOPER_ERROR';\n    statusMessage?: string;\n}\n\nexport interface GooglePayTokenObject {\n    protocolVersion: string;\n    signature: string;\n    signedMessage: string;\n}\n\nexport interface GooglePayStripeTokenObject {\n    id: string;\n}\n\nexport interface GooglePayBraintreeTokenObject {\n    androidPayCards: [\n        {\n            nonce: string;\n            details: {\n                bin: string;\n                isNetworkTokenized?: boolean;\n            };\n        },\n    ];\n}\n\nexport interface GooglePayCheckoutComTokenObject {\n    token: string;\n}\n\nexport interface GooglePayThreeDSecureResult {\n    three_ds_result: {\n        acs_url: string;\n        code: string;\n    };\n}\n\nexport interface GooglePayBuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody;\n}\n\nexport interface ExtraPaymentData {\n    deviceSessionId?: string;\n    browser_info?: BrowserInfo;\n}\n\nexport type GooglePayButtonColor = 'default' | 'black' | 'white';\nexport type GooglePayButtonType =\n    | 'book'\n    | 'buy'\n    | 'checkout'\n    | 'donate'\n    | 'order'\n    | 'pay'\n    | 'plain'\n    | 'subscribe'\n    | 'long'\n    | 'short';\n\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n","import { GooglePayCardNetwork } from '../types';\n\nexport default function isGooglePayCardNetworkKey(\n    card: string,\n): card is keyof typeof GooglePayCardNetwork {\n    return card in GooglePayCardNetwork;\n}\n","import { round } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    createCurrencyService,\n    CurrencyService,\n    guard,\n    InvalidArgumentError,\n    itemsRequireShipping,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isGooglePayCardNetworkKey from '../guards/is-google-pay-card-network-key';\nimport {\n    CallbackIntentsType,\n    CallbackTriggerType,\n    ErrorReasonType,\n    ExtraPaymentData,\n    GooglePayCardDataResponse,\n    GooglePayCardNetwork,\n    GooglePayCardParameters,\n    GooglePayError,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePayMerchantInfo,\n    GooglePayPaymentDataRequest,\n    GooglePayRequiredPaymentData,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTransactionInfo,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from '../types';\n\nexport default class GooglePayGateway {\n    private _getPaymentMethodFn?: () => PaymentMethod<GooglePayInitializationData>;\n    private _isBuyNowFlow = false;\n    private _currencyCode?: string;\n    private _currencyService?: CurrencyService;\n\n    constructor(\n        private _gatewayIdentifier: string,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    mapToShippingAddressRequestBody({\n        shippingAddress,\n    }: GooglePayCardDataResponse): AddressRequestBody | undefined {\n        if (!shippingAddress) {\n            return;\n        }\n\n        const { company = '', phone = '' } =\n            this._paymentIntegrationService.getState().getShippingAddress() || {};\n\n        return this._mapToAddressRequestBody(shippingAddress, company, phone);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        const { billingAddress } = response.paymentMethodData.info;\n\n        if (!billingAddress) {\n            return;\n        }\n\n        const {\n            company = '',\n            phone = '',\n            email,\n            customFields = [],\n        } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        return {\n            ...this._mapToAddressRequestBody(billingAddress, company, phone, customFields),\n            email: email || response.email,\n        };\n    }\n\n    mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const {\n            paymentMethodData: {\n                tokenizationData: { token: nonce },\n                info: { cardNetwork: type, cardDetails: number },\n            },\n        } = response;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve({\n            nonce,\n            card_information: { type, number },\n            ...(this._isBuyNowFlow && {\n                cart_id: this._paymentIntegrationService.getState().getCart()?.id,\n            }),\n        });\n    }\n\n    async getRequiredData(): Promise<GooglePayRequiredPaymentData> {\n        const data: GooglePayRequiredPaymentData = { emailRequired: true };\n\n        if (!this._isShippingAddressRequired()) {\n            return data;\n        }\n\n        const state = await this._paymentIntegrationService.loadShippingCountries();\n        const allowedCountryCodes = state.getShippingCountries()?.map((country) => country.code);\n\n        return {\n            ...data,\n            shippingAddressRequired: true,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n                ...(allowedCountryCodes && { allowedCountryCodes }),\n            },\n            shippingOptionRequired: true,\n        };\n    }\n\n    getCallbackIntents(): CallbackIntentsType[] {\n        if (this._isShippingAddressRequired()) {\n            return [\n                CallbackIntentsType.OFFER,\n                CallbackIntentsType.SHIPPING_ADDRESS,\n                CallbackIntentsType.SHIPPING_OPTION,\n            ];\n        }\n\n        return [CallbackIntentsType.OFFER];\n    }\n\n    getCallbackTriggers(): { [key: string]: CallbackTriggerType[] } {\n        const state = this._paymentIntegrationService.getState();\n        // TODO remove this experiment usage after we make sure that coupons handling works fine\n        const isGooglePayCouponsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-2875.googlepay_coupons_handling'\n            ] || false;\n\n        const availableTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n            CallbackTriggerType.SHIPPING_OPTION,\n            ...(isGooglePayCouponsExperimentOn ? [CallbackTriggerType.OFFER] : []),\n        ];\n\n        const initializationTrigger = [CallbackTriggerType.INITIALIZE];\n        const addressChangeTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n        ];\n        const shippingOptionsChangeTriggers = [CallbackTriggerType.SHIPPING_OPTION];\n        const offerChangeTriggers = isGooglePayCouponsExperimentOn\n            ? [CallbackTriggerType.OFFER]\n            : [];\n\n        return {\n            availableTriggers,\n            initializationTrigger,\n            addressChangeTriggers,\n            shippingOptionsChangeTriggers,\n            offerChangeTriggers,\n        };\n    }\n\n    getNonce(methodId: string) {\n        const nonce = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(methodId)\n            .initializationData?.nonce;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve(nonce);\n    }\n\n    extraPaymentData(): Promise<undefined | ExtraPaymentData> {\n        return Promise.resolve(undefined);\n    }\n\n    getMerchantInfo(): GooglePayMerchantInfo {\n        const {\n            googleMerchantName: merchantName,\n            googleMerchantId: merchantId,\n            platformToken: authJwt,\n        } = this.getGooglePayInitializationData();\n\n        return { merchantName, merchantId, authJwt };\n    }\n\n    getTransactionInfo(): GooglePayTransactionInfo {\n        let currencyCode: string;\n\n        if (this._isBuyNowFlow) {\n            currencyCode = this._getCurrencyCodeOrThrow();\n        } else {\n            const { getCartOrThrow } = this._paymentIntegrationService.getState();\n\n            currencyCode = getCartOrThrow().currency.code;\n        }\n\n        const countryCode = this.getGooglePayInitializationData().storeCountry;\n\n        return {\n            ...(countryCode && { countryCode }),\n            currencyCode,\n            totalPriceStatus: TotalPriceStatusType.ESTIMATED,\n            totalPrice: '0',\n        };\n    }\n\n    getPaymentGatewayParameters():\n        | Promise<GooglePayGatewayParameters>\n        | GooglePayGatewayParameters {\n        const gatewayMerchantId = this.getGooglePayInitializationData().gatewayMerchantId;\n\n        if (!gatewayMerchantId) {\n            throw new InvalidArgumentError('Unable to proceed, gatewayMerchantId is missing.');\n        }\n\n        return {\n            gateway: this._gatewayIdentifier,\n            gatewayMerchantId,\n        };\n    }\n\n    getCardParameters(): GooglePayCardParameters {\n        const allowedCardNetworks = this.getPaymentMethod()\n            .supportedCards.filter(isGooglePayCardNetworkKey)\n            .map((key) => GooglePayCardNetwork[key]);\n\n        return {\n            allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n            allowedCardNetworks,\n            billingAddressRequired: true,\n            billingAddressParameters: {\n                format: 'FULL',\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._getPaymentMethodFn = getPaymentMethod;\n        this._isBuyNowFlow = Boolean(isBuyNowFlow);\n        this._currencyCode = currencyCode;\n\n        if (this._isBuyNowFlow) {\n            this._getCurrencyCodeOrThrow();\n        }\n\n        return Promise.resolve();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress?: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        if (shippingAddress) {\n            shippingAddress.name = shippingAddress.name || '';\n            shippingAddress.address1 = shippingAddress.address1 || '';\n        }\n\n        const mappedShippingAddress = this.mapToShippingAddressRequestBody({\n            shippingAddress,\n        } as GooglePayCardDataResponse);\n\n        if (mappedShippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(mappedShippingAddress);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            // Info: we can not return an empty data because shippingOptions should contain at least one element, it caused a developer exception\n            return;\n        }\n\n        const consignment = consignments[0];\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!this._currencyService) {\n            this._currencyService = createCurrencyService(storeConfig);\n        }\n\n        const availableShippingOptions = (consignment.availableShippingOptions || []).map(\n            this._getGooglePayShippingOption.bind(this),\n        );\n\n        const recommendedShippingOption = consignment.availableShippingOptions?.find(\n            (shippingOption) => shippingOption.isRecommended,\n        );\n\n        if (availableShippingOptions.length) {\n            const selectedShippingOptionId =\n                consignment.selectedShippingOption?.id ||\n                recommendedShippingOption?.id ||\n                availableShippingOptions[0]?.id;\n\n            if (!consignment.selectedShippingOption?.id && availableShippingOptions[0]) {\n                await this.handleShippingOptionChange(\n                    recommendedShippingOption?.id || availableShippingOptions[0].id,\n                );\n            }\n\n            return {\n                defaultSelectedOptionId: selectedShippingOptionId,\n                shippingOptions: availableShippingOptions,\n            };\n        }\n    }\n\n    async handleShippingOptionChange(optionId: string) {\n        if (optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    getTotalPrice(): string {\n        const { getCheckoutOrThrow, getCartOrThrow } = this._paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return totalPrice;\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        const { redemptionCodes: newCouponsState = [] } = offerData;\n        const { offers: appliedCoupons } = this.getAppliedCoupons();\n        let error;\n\n        await newCouponsState.reduce(async (promise, code) => {\n            await promise;\n\n            const exists = appliedCoupons.some(({ redemptionCode }) => redemptionCode === code);\n\n            if (exists) {\n                return;\n            }\n\n            const appliedCouponError = await this.applyCoupon(code);\n\n            if (appliedCouponError) {\n                error = appliedCouponError;\n            }\n        }, Promise.resolve());\n\n        await appliedCoupons.reduce(async (promise, coupon) => {\n            await promise;\n\n            const stillExists = newCouponsState.includes(coupon.redemptionCode);\n\n            if (!stillExists) {\n                await this._paymentIntegrationService.removeCoupon(coupon.redemptionCode);\n            }\n        }, Promise.resolve());\n\n        return {\n            newOfferInfo: this.getAppliedCoupons(),\n            error,\n        };\n    }\n\n    getAppliedCoupons(): GooglePayPaymentDataRequest['offerInfo'] {\n        const state = this._paymentIntegrationService.getState();\n        const { coupons } = state.getCheckout() || {};\n\n        const offers = (coupons || []).map((coupon) => {\n            const { displayName, code } = coupon;\n\n            return {\n                redemptionCode: code,\n                description: displayName,\n            };\n        });\n\n        return {\n            offers,\n        };\n    }\n\n    async applyCoupon(code: string): Promise<GooglePayError | void> {\n        let error: GooglePayError | undefined;\n\n        try {\n            await this._paymentIntegrationService.applyCoupon(code);\n        } catch (e) {\n            if (e instanceof Error) {\n                error = {\n                    reason: ErrorReasonType.OFFER_INVALID,\n                    message: e.message,\n                    intent: CallbackTriggerType.OFFER,\n                };\n            }\n\n            return error;\n        }\n    }\n\n    protected getGooglePayInitializationData(): GooglePayInitializationData {\n        return guard(\n            this.getPaymentMethod().initializationData,\n            () => new InvalidArgumentError('Missing initialization data.'),\n        );\n    }\n\n    protected getPaymentMethod(): PaymentMethod<GooglePayInitializationData> {\n        return guard(\n            this._getPaymentMethodFn,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        )();\n    }\n\n    protected getGatewayIdentifier(): string {\n        return this._gatewayIdentifier;\n    }\n\n    protected setGatewayIdentifier(gateway?: string) {\n        this._gatewayIdentifier = gateway || this.getGatewayIdentifier();\n    }\n\n    private _isShippingAddressRequired(): boolean {\n        const { getCartOrThrow, getStoreConfig, getShippingAddress } =\n            this._paymentIntegrationService.getState();\n\n        return (\n            getShippingAddress() === undefined &&\n            itemsRequireShipping(getCartOrThrow(), getStoreConfig())\n        );\n    }\n\n    private _mapToAddressRequestBody(\n        address: GooglePayFullBillingAddress,\n        company: string,\n        phone: string,\n        customFields?: AddressRequestBody['customFields'],\n    ): AddressRequestBody {\n        const {\n            name,\n            address1,\n            address2,\n            address3,\n            locality: city,\n            administrativeArea: stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phoneNumber,\n        } = address;\n        const [firstName, lastName] = this._getFirstAndLastName(name);\n\n        return {\n            firstName,\n            lastName,\n            company,\n            address1,\n            address2: `${address2} ${address3}`.trim(),\n            city: city || stateOrProvinceCode,\n            stateOrProvince: stateOrProvinceCode,\n            stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phone: phoneNumber || phone,\n            customFields: customFields || [],\n        };\n    }\n\n    private _getFirstAndLastName(fullName: string): [string, string] {\n        const nameParts = fullName.split(' ');\n\n        if (nameParts.length === 1) {\n            return [fullName, ''];\n        }\n\n        const firstName = nameParts.slice(0, -1).join(' ');\n        const lastName = nameParts[nameParts.length - 1];\n\n        return [firstName, lastName];\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n\n    private _getGooglePayShippingOption({\n        id,\n        cost,\n        description,\n        additionalDescription,\n    }: ShippingOption) {\n        const formattedCost = this._currencyService?.toCustomerCurrency(cost);\n        const state = this._paymentIntegrationService.getState();\n        const isNewShippingOptionsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-3540.googlepay_new_shipping_options_description'\n            ];\n\n        if (isNewShippingOptionsExperimentOn) {\n            return {\n                id,\n                label: `${formattedCost || cost} ${description}`,\n                description: additionalDescription,\n            };\n        }\n\n        return {\n            id,\n            label: description,\n            description: formattedCost || cost,\n        };\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * param config - The config object containing the currency configuration\n * returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(config: StoreConfig): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Cart } from '../cart';\nimport { StoreConfig } from '../config';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (config && cart.lineItems.customItems) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import {\n    BraintreeGooglePayment,\n    BraintreeGooglePayThreeDSecure,\n    BraintreeSdk,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CancellablePromise,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayKey } from '../google-pay-payment-initialize-options';\nimport assertIsGooglePayBraintreeTokenObject from '../guards/is-google-pay-braintree-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayBraintreeGateway extends GooglePayGateway {\n    private _braintreeGooglePayment?: BraintreeGooglePayment;\n    private _service: PaymentIntegrationService;\n    private _methodId = GooglePayKey.BRAINTREE;\n\n    constructor(service: PaymentIntegrationService, private _braintreeSdk: BraintreeSdk) {\n        super('braintree', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        let paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.clientToken) {\n            const state = await this._service.loadPaymentMethod(this._methodId);\n\n            paymentMethod = state.getPaymentMethodOrThrow(this._methodId);\n        }\n\n        if (!paymentMethod.clientToken || !paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSdk.initialize(paymentMethod.clientToken);\n        this._braintreeGooglePayment = await this._braintreeSdk.getBraintreeGooglePayment();\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n\n        const { clientToken, initializationData } = super.getPaymentMethod();\n\n        if (!clientToken || !initializationData || !initializationData.card_information?.bin) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            isThreeDSecureEnabled,\n            card_information: { bin, isNetworkTokenized },\n        } = initializationData;\n\n        if (isThreeDSecureEnabled && !isNetworkTokenized) {\n            const threeDSecure = await this._braintreeSdk.getBraintreeThreeDS();\n\n            const { orderAmount } = this._service.getState().getOrderOrThrow();\n\n            const verification = await this._braintreePresent3DSChallenge(\n                threeDSecure,\n                orderAmount,\n                nonce,\n                bin,\n            );\n\n            return verification.nonce;\n        }\n\n        return nonce;\n    }\n\n    async extraPaymentData() {\n        return {\n            deviceSessionId: await this._getBraintreeDeviceData(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayBraintreeTokenObject(token);\n\n        data.nonce = token.androidPayCards[0].nonce;\n        data.card_information.bin = token.androidPayCards[0].details.bin;\n        data.card_information.isNetworkTokenized =\n            token.androidPayCards[0].details.isNetworkTokenized;\n\n        return data;\n    }\n\n    getCardParameters() {\n        return super.getCardParameters();\n    }\n\n    async getPaymentGatewayParameters(): Promise<GooglePayGatewayParameters> {\n        const braintreeGooglePayment = this.getBraintreeGooglePayment();\n\n        const request = braintreeGooglePayment.createPaymentDataRequest({\n            merchantInfo: super.getMerchantInfo(),\n            transactionInfo: super.getTransactionInfo(),\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            ...(await super.getRequiredData()),\n        });\n\n        return request.paymentMethodTokenizationParameters.parameters;\n    }\n\n    private getBraintreeGooglePayment(): BraintreeGooglePayment {\n        if (!this._braintreeGooglePayment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._braintreeGooglePayment;\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n        return deviceData;\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n        bin: string,\n    ) {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                bin,\n                nonce,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayBraintreeTokenObject } from '../types';\n\nfunction isGooglePayBraintreeTokenObject(token: unknown): token is GooglePayBraintreeTokenObject {\n    return typeof token === 'object' && token !== null && 'androidPayCards' in token;\n}\n\nexport default function assertIsGooglePayBraintreeTokenObject(\n    token: unknown,\n): asserts token is GooglePayBraintreeTokenObject {\n    if (!isGooglePayBraintreeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import {\n    BuyNowCartCreationError,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithGooglePayButtonInitializeOptions } from './google-pay-button-initialize-option';\nimport GooglePayCustomerInitializeOptions from './google-pay-customer-initialize-options';\nimport { WithGooglePayPaymentInitializeOptions } from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayBuyNowInitializeOptions,\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n    private _buyNowCart?: Cart;\n    private _currencyCode?: string;\n    private _buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions;\n    private _countryCode?: string;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithGooglePayButtonInitializeOptions,\n    ): Promise<void> {\n        if (!options.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        if (!options.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" is not a valid key.',\n            );\n        }\n\n        const googlePayOptions = options[this._getMethodOrThrow()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { buyNowInitializeOptions, currencyCode, buttonColor, buttonType, onError } =\n            googlePayOptions;\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(\n                this._getMethodOrThrow(),\n            );\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        }\n\n        this._countryCode = paymentMethod.initializationData?.storeCountry;\n\n        if (buyNowInitializeOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._currencyCode = currencyCode;\n            this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n                !!buyNowInitializeOptions,\n                currencyCode,\n            );\n        } else {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n            );\n        }\n\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(options.containerId, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError),\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n    ): (event: MouseEvent) => Promise<void> {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            try {\n                if (this._buyNowInitializeOptions) {\n                    await this._createBuyNowCartOrThrow(this._buyNowInitializeOptions);\n                } else {\n                    await this._paymentIntegrationService.loadDefaultCheckout();\n                }\n\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && !this._buyNowCart?.lineItems.digitalItems.length) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodOrThrow(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getGooglePayClientOptions(): GooglePayPaymentOptions | undefined {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                    offerData,\n                }) => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                        offerChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._googlePayPaymentProcessor.handleCoupons(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    if (this._buyNowInitializeOptions) {\n                        return this._getBuyNowTransactionInfo(\n                            availableShippingOptions,\n                            newOfferInfo,\n                            error,\n                        );\n                    }\n\n                    return this._getTransactionInfo(availableShippingOptions, newOfferInfo, error);\n                },\n            },\n        };\n    }\n\n    private async _createBuyNowCartOrThrow(\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            try {\n                this._buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                await this._paymentIntegrationService.loadCheckout(this._buyNowCart.id);\n            } catch (error) {\n                if (typeof error === 'string') {\n                    throw new BuyNowCartCreationError(error);\n                }\n\n                throw error;\n            }\n        }\n    }\n\n    private _getBuyNowTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        if (!this._buyNowCart) {\n            return;\n        }\n\n        const { cartAmount } = this._buyNowCart;\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode: this._getCurrencyCodeOrThrow(),\n                totalPrice: totalPrice || String(cartAmount),\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private async _getTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        await this._paymentIntegrationService.loadCheckout();\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n        const { code: currencyCode } = this._paymentIntegrationService\n            .getState()\n            .getCartOrThrow().currency;\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private _getMethodOrThrow(): keyof WithGooglePayButtonInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n}\n","import { GooglePayKey } from '../google-pay-payment-initialize-options';\n\nexport default function isGooglePayKey(key: string): key is GooglePayKey {\n    return Object.values<string>(GooglePayKey).includes(key);\n}\n","import { GooglePayErrorObject } from '../types';\n\nexport default function isGooglePayErrorObject(error: unknown): error is GooglePayErrorObject {\n    return typeof error === 'object' && error !== null && 'statusCode' in error;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Omit,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from './gateways/google-pay-gateway';\nimport GooglePayScriptLoader from './google-pay-script-loader';\nimport isGooglePayAdditionalActionProcessable from './guards/is-google-pay-additional-action-processable';\nimport {\n    GooglePayBaseCardPaymentMethod,\n    GooglePayButtonOptions,\n    GooglePayCardDataResponse,\n    GooglePayCardPaymentMethod,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayBaseRequest,\n    GooglePayInitializationData,\n    GooglePayIsReadyToPayRequest,\n    GooglePaymentsClient,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n} from './types';\n\nexport default class GooglePayPaymentProcessor {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _baseRequest: GooglePayGatewayBaseRequest = { apiVersion: 2, apiVersionMinor: 0 };\n    private _baseCardPaymentMethod?: GooglePayBaseCardPaymentMethod;\n    private _cardPaymentMethod?: GooglePayCardPaymentMethod;\n    private _paymentDataRequest?: GooglePayPaymentDataRequest;\n    private _isReadyToPayRequest?: GooglePayIsReadyToPayRequest;\n\n    constructor(\n        private _scriptLoader: GooglePayScriptLoader,\n        private _gateway: GooglePayGateway,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        googlePayPaymentOptions?: GooglePayPaymentOptions,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._paymentsClient = await this._scriptLoader.getGooglePaymentsClient(\n            getPaymentMethod().config.testMode,\n            googlePayPaymentOptions,\n        );\n\n        await this._gateway.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        this._buildButtonPayloads();\n    }\n\n    async initializeWidget() {\n        await this._buildWidgetPayloads();\n\n        await this._determineReadinessToPay();\n\n        this._prefetchGooglePaymentData();\n    }\n\n    getNonce(methodId: string) {\n        return this._gateway.getNonce(methodId);\n    }\n\n    async extraPaymentData() {\n        return this._gateway.extraPaymentData();\n    }\n\n    addPaymentButton(\n        containerId: string,\n        options: Omit<GooglePayButtonOptions, 'allowedPaymentMethods'>,\n    ): HTMLElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const paymentButton = this._getPaymentsClient().createButton({\n            ...options,\n            allowedPaymentMethods: [this._getBaseCardPaymentMethod()],\n        });\n\n        return container.appendChild(paymentButton);\n    }\n\n    async showPaymentSheet(): Promise<GooglePayCardDataResponse> {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        return this._getPaymentsClient().loadPaymentData(paymentDataRequest);\n    }\n\n    async setExternalCheckoutXhr(\n        provider: string,\n        response: GooglePayCardDataResponse,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response);\n    }\n\n    async setExternalCheckoutForm(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        siteLink?: string,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response, true, siteLink);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        return this._gateway.mapToBillingAddressRequestBody(response);\n    }\n\n    mapToShippingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): AddressRequestBody | undefined {\n        return this._gateway.mapToShippingAddressRequestBody(response);\n    }\n\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void> {\n        return isGooglePayAdditionalActionProcessable(this._gateway)\n            ? this._gateway.processAdditionalAction(error, methodId)\n            : Promise.reject(error);\n    }\n\n    async signOut(providerId: string): Promise<void> {\n        await this._requestSender.get(`/remote-checkout/${providerId}/signout`);\n    }\n\n    getCallbackTriggers() {\n        return this._gateway.getCallbackTriggers();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        return this._gateway.handleShippingAddressChange(shippingAddress);\n    }\n\n    async handleShippingOptionChange(optionId: string): Promise<void> {\n        await this._gateway.handleShippingOptionChange(optionId);\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        return this._gateway.handleCoupons(offerData);\n    }\n\n    getTotalPrice(): string {\n        return this._gateway.getTotalPrice();\n    }\n\n    async _setExternalCheckout(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        useFormPoster = false,\n        siteLink?: string,\n    ): Promise<void> {\n        const url = '/checkout.php';\n        const body = {\n            action: 'set_external_checkout',\n            provider,\n            ...(await this._gateway.mapToExternalCheckoutData(response)),\n        };\n\n        if (useFormPoster) {\n            return new Promise((resolve) => {\n                this._formPoster.postForm(\n                    siteLink ? `${siteLink}/checkout` : url,\n                    {\n                        ...body,\n                        card_information: JSON.stringify(body.card_information),\n                    },\n                    resolve,\n                );\n            });\n        }\n\n        await this._requestSender.post(url, {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body,\n        });\n    }\n\n    private _prefetchGooglePaymentData(): void {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo = this._gateway.getTransactionInfo();\n\n        this._getPaymentsClient().prefetchPaymentData(paymentDataRequest);\n    }\n\n    private async _determineReadinessToPay(): Promise<void> {\n        try {\n            const { result } = await this._getPaymentsClient().isReadyToPay(\n                this._getIsReadyToPayRequest(),\n            );\n\n            if (result === false) {\n                throw new PaymentMethodFailedError(\n                    'Google Pay is not supported by the current device and browser, please try another payment method.',\n                );\n            }\n        } catch (error) {\n            if (error instanceof PaymentMethodFailedError) {\n                throw error;\n            }\n\n            throw new PaymentMethodFailedError();\n        }\n    }\n\n    private _buildButtonPayloads() {\n        this._baseCardPaymentMethod = {\n            type: 'CARD',\n            parameters: this._gateway.getCardParameters(),\n        };\n    }\n\n    private async _buildWidgetPayloads(): Promise<void> {\n        const baseCardPaymentMethod = this._getBaseCardPaymentMethod();\n\n        this._cardPaymentMethod = {\n            ...baseCardPaymentMethod,\n            tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: await this._gateway.getPaymentGatewayParameters(),\n            },\n        };\n        this._paymentDataRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [this._cardPaymentMethod],\n            transactionInfo: this._gateway.getTransactionInfo(),\n            merchantInfo: this._gateway.getMerchantInfo(),\n            ...(await this._gateway.getRequiredData()),\n            callbackIntents: this._gateway.getCallbackIntents(),\n            offerInfo: this._gateway.getAppliedCoupons(),\n        };\n        this._isReadyToPayRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [baseCardPaymentMethod],\n        };\n    }\n\n    private _getBaseCardPaymentMethod(): GooglePayBaseCardPaymentMethod {\n        return this._getOrThrow(this._baseCardPaymentMethod);\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequest {\n        return this._getOrThrow(this._paymentDataRequest);\n    }\n\n    private _getIsReadyToPayRequest(): GooglePayIsReadyToPayRequest {\n        return this._getOrThrow(this._isReadyToPayRequest);\n    }\n\n    private _getPaymentsClient(): GooglePaymentsClient {\n        return this._getOrThrow(this._paymentsClient);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import GooglePayGateway from '../gateways/google-pay-gateway';\nimport { GooglePayAdditionalActionProcessable } from '../types';\n\nexport default function isGooglePayAdditionalActionProcessable(\n    gateway: GooglePayGateway,\n): gateway is GooglePayGateway & GooglePayAdditionalActionProcessable {\n    return 'processAdditionalAction' in gateway;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayHostWindow, GooglePaymentsClient, GooglePayPaymentOptions } from './types';\n\nexport const GOOGLE_PAY_LIBRARY = 'https://pay.google.com/gp/p/js/pay.js';\n\nexport default class GooglePayScriptLoader {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _window: GooglePayHostWindow = window;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async getGooglePaymentsClient(\n        testMode = false,\n        options?: GooglePayPaymentOptions,\n    ): Promise<GooglePaymentsClient> {\n        await this._scriptLoader.loadScript(GOOGLE_PAY_LIBRARY);\n\n        if (!this._window.google) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (this._paymentsClient === undefined) {\n            this._paymentsClient = new this._window.google.payments.api.PaymentsClient({\n                environment: testMode ? 'TEST' : 'PRODUCTION',\n                ...(options ?? {}),\n            });\n        }\n\n        return this._paymentsClient;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport GooglePayScriptLoader from '../google-pay-script-loader';\n\nexport default function createGooglePayScriptLoader() {\n    return new GooglePayScriptLoader(getScriptLoader());\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreeButtonStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: [\n                    'fastlane',\n                    'buttons',\n                    'payment-fields',\n                    'hosted-fields',\n                    'three-domain-secure',\n                ],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nfunction isGooglePayPaypalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (data.initializationData) {\n        return (\n            'attributionId' in data.initializationData &&\n            'isVenmoEnabled' in data.initializationData &&\n            'isGooglePayEnabled' in data.initializationData &&\n            'isPayPalCreditAvailable' in data.initializationData\n        );\n    }\n\n    return false;\n}\n\nexport default function assertsIsGooglePayPayPalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): asserts data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (!isGooglePayPaypalCommercePaymentMethod(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport { GooglePayConfig } from './types';\n\nexport default class GooglePayPaypalCommerceGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalCommerceSdk: PayPalCommerceSdk) {\n        super('paypalsb', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\n\nconst createGooglePayPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceSdk(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceButtonStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayConfig,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nexport default class GooglePayBigCommercePaymentsGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalSdkHelper: PayPalSdkHelper) {\n        super('googlepay_bigcommerce_payments', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\n\nconst createGooglePayBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(\n                paymentIntegrationService,\n                new PayPalSdkHelper(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsButtonStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2ButtonStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3ButtonStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayAuthorizeNetInitializationData from '../guards/is-google-pay-authorizenet-initialization-data';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAuthorizeNetGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('authorizenet', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayAuthorizeNetInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.paymentGatewayId,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayAuthorizeNetInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayAuthorizeNetInitializationData {\n    return 'paymentGatewayId' in data;\n}\n\nexport default function assertsIsGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayAuthorizeNetInitializationData {\n    if (!isGooglePayAuthorizeNetInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetButtonStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCheckoutComInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayCheckoutComInitializationData {\n    return 'checkoutcomkey' in data;\n}\n\nexport default function assertIsGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayCheckoutComInitializationData {\n    if (!isGooglePayCheckoutComInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    InvalidArgumentError,\n    isRequestError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayCheckoutComInitializationData from '../guards/is-google-pay-checkoutcom-initialization-data';\nimport { isGooglePayThreeDSecureResult } from '../guards/is-google-pay-threedsecure-result';\nimport assertIsGooglePayTokenObject from '../guards/is-google-pay-token-object';\nimport {\n    GooglePayAdditionalActionProcessable,\n    GooglePayCardDataResponse,\n    GooglePayCheckoutComTokenObject,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTokenObject,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCheckoutComGateway\n    extends GooglePayGateway\n    implements GooglePayAdditionalActionProcessable\n{\n    constructor(service: PaymentIntegrationService, private _requestSender: RequestSender) {\n        super('checkoutltd', service);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            if (\n                isRequestError(error) &&\n                isGooglePayThreeDSecureResult(error.body) &&\n                error.body.three_ds_result.code === 'three_d_secure_required'\n            ) {\n                return window.location.assign(error.body.three_ds_result.acs_url);\n            }\n\n            reject(error);\n        });\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayTokenObject(token);\n\n        data.nonce = await this._tokenize(token);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.checkoutcomkey,\n        };\n    }\n\n    private async _tokenize(token_data: GooglePayTokenObject): Promise<string> {\n        const url = this.getPaymentMethod().config.testMode\n            ? 'https://api.sandbox.checkout.com/tokens'\n            : 'https://api.checkout.com/tokens';\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        const { body } = await this._requestSender.post<GooglePayCheckoutComTokenObject>(url, {\n            credentials: false,\n            body: {\n                type: 'googlepay',\n                token_data,\n            },\n            headers: {\n                Authorization: data.checkoutcomkey,\n                'Content-Type': ContentType.Json,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return body.token;\n    }\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayThreeDSecureResult } from '../types';\n\nexport function isGooglePayThreeDSecureResult(\n    body: RequestError['body'],\n): body is GooglePayThreeDSecureResult {\n    if (typeof body !== 'object' || body === null) {\n        return false;\n    }\n\n    const threeDSBody = body as Partial<GooglePayThreeDSecureResult>;\n\n    return (\n        typeof threeDSBody.three_ds_result?.acs_url === 'string' &&\n        typeof threeDSBody.three_ds_result.code === 'string'\n    );\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayTokenObject } from '../types';\n\nfunction isGooglePayTokenObject(token: unknown): token is GooglePayTokenObject {\n    return (\n        typeof token === 'object' &&\n        token !== null &&\n        'protocolVersion' in token &&\n        'signature' in token &&\n        'signedMessage' in token\n    );\n}\n\nexport default function assertIsGooglePayTokenObject(\n    token: unknown,\n): asserts token is GooglePayTokenObject {\n    if (!isGooglePayTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComButtonStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCybersourceGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('cybersource', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourceButtonStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayOrbitalGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('chase', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalButtonStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayStripeInitializationData } from '../types';\n\nfunction isGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayStripeInitializationData {\n    return (\n        'stripeConnectedAccount' in data &&\n        'stripePublishableKey' in data &&\n        'stripeVersion' in data\n    );\n}\n\nexport default function assertsIsGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayStripeInitializationData {\n    if (!isGooglePayStripeInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    isRequestError,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayStripeInitializationData from '../guards/is-google-pay-stripe-initialization-data';\nimport isGooglePayStripeRequestError from '../guards/is-google-pay-stripe-request-error';\nimport assertIsGooglePayStripeTokenObject from '../guards/is-google-pay-stripe-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePaySetExternalCheckoutData,\n    GooglePayStripeGatewayParameters,\n} from '../types';\n\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\nimport { StripeError, StripeUPEClient } from './types';\n\nexport default class GooglePayStripeGateway extends GooglePayGateway {\n    private stripeUPEClient?: StripeUPEClient;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeUPEScriptLoader,\n    ) {\n        super('stripe', paymentIntegrationService);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayStripeTokenObject(token);\n\n        data.nonce = token.id;\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayStripeGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayStripeInitializationData(data);\n\n        const { stripeVersion, stripePublishableKey, stripeConnectedAccount } = data;\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            'stripe:version': stripeVersion,\n            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n        };\n    }\n\n    async processAdditionalAction(\n        error: unknown,\n        methodId?: string,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!isRequestError(error) || !isGooglePayStripeRequestError(error.body)) {\n            throw error;\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const isStripeGooglePay3dsExperimentIsOn =\n            state.getStoreConfig()?.checkoutSettings.features[\n                'STRIPE-476.enable_stripe_googlepay_3ds'\n            ];\n        const shouldTrigger3DS =\n            some(error.body.errors, { code: 'three_d_secure_required' }) &&\n            isStripeGooglePay3dsExperimentIsOn;\n\n        if (shouldTrigger3DS) {\n            const data = this.getGooglePayInitializationData();\n\n            assertsIsGooglePayStripeInitializationData(data);\n\n            const { stripePublishableKey, stripeConnectedAccount } = data;\n\n            this.stripeUPEClient = await this.loadStripeJs(\n                stripePublishableKey,\n                stripeConnectedAccount,\n            );\n\n            const clientSecret = error.body.three_ds_result.token;\n            let result;\n            let catchedConfirmError = false;\n\n            try {\n                result = await this.stripeUPEClient.confirmCardPayment(clientSecret);\n            } catch (_) {\n                try {\n                    result = await this.stripeUPEClient.retrievePaymentIntent(clientSecret);\n                } catch (__) {\n                    catchedConfirmError = true;\n                }\n            }\n\n            if (result?.error) {\n                this._throwDisplayableStripeError(result.error);\n\n                if (this._isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                throw new PaymentMethodFailedError();\n            }\n\n            if (!result?.paymentIntent && !catchedConfirmError) {\n                throw new RequestError();\n            }\n\n            return this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce: result?.paymentIntent?.id || clientSecret },\n            });\n        }\n\n        throw error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeUPEClient> {\n        if (this.stripeUPEClient) {\n            return this.stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(stripePublishableKey, stripeConnectedAccount);\n    }\n\n    private _isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private _throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayStripeTokenObject } from '../types';\n\nfunction isGooglePayStripeTokenObject(token: unknown): token is GooglePayStripeTokenObject {\n    return typeof token === 'object' && token !== null && 'id' in token;\n}\n\nexport default function assertIsGooglePayStripeTokenObject(\n    token: unknown,\n): asserts token is GooglePayStripeTokenObject {\n    if (!isGooglePayStripeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","interface AdditionalActionError {\n    three_ds_result: { token: string };\n    errors: Array<{ code: string }>;\n}\n\nconst isGooglePayStripeRequestError = (body: unknown): body is AdditionalActionError => {\n    return (\n        typeof body === 'object' && body !== null && 'three_ds_result' in body && 'errors' in body\n    );\n};\n\nexport default isGooglePayStripeRequestError;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeUPEClient } from './types';\n\nexport default class StripeUPEScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeUPEClient> {\n        let stripeClient = this.stripeWindow.bcStripeClient;\n\n        if (!stripeClient) {\n            const stripe = await this.load();\n\n            stripeClient = stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: [\n                    'payment_element_beta_2',\n                    'alipay_pm_beta_1',\n                    'link_default_integration_beta_1',\n                    'shipping_address_element_beta_1',\n                    'address_element_beta_1',\n                ],\n                apiVersion: '2020-03-02;alipay_beta=v1;link_beta=v1',\n            });\n\n            Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n        }\n\n        return stripeClient;\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n        }\n\n        if (!this.stripeWindow.Stripe) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripeButtonStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayWorldpayAccessGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('worldpay', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessButtonStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { isTdOnlineMartAdditionalAction } from '../guards/is-google-pay-td-online-mart-additional-action';\nimport { ExtraPaymentData, TdOnlineMartThreeDSErrorBody } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayTdOnlineMartGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService, private formPoster: FormPoster) {\n        super('worldlinena', service);\n    }\n\n    async extraPaymentData(): Promise<ExtraPaymentData> {\n        return Promise.resolve({ browser_info: getBrowserInfo() });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from '../types';\n\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartButtonStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\n\nexport interface PayPalCommerceCardFieldsConfig {\n    inputEvents: {\n        onChange(data: PayPalCommerceCardFieldsState): void;\n        onFocus(data: PayPalCommerceCardFieldsState): void;\n        onBlur(data: PayPalCommerceCardFieldsState): void;\n        onInputSubmitRequest(data: PayPalCommerceCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: PayPalCommerceCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: PayPalCommerceHostedFieldsRenderOptions['styles'];\n    onApprove(data: PayPalCommerceCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface PayPalCommerceCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface PayPalCommerceCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype PayPalCommerceCardFieldsCard = PayPalCommerceHostedFieldsCard;\n\nexport interface PayPalCommerceCardFieldsState {\n    cards: PayPalCommerceCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: PayPalCommerceCardFieldsFieldData;\n        cardNumberField: PayPalCommerceCardFieldsFieldData;\n        cardNameField?: PayPalCommerceCardFieldsFieldData;\n        cardExpiryField: PayPalCommerceCardFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface PayPalCommerceFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceCardFields {\n    isEligible(): boolean;\n    CVVField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    ExpiryField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NameField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NumberField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    submit(config?: PayPalCommerceCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<PayPalCommerceCardFieldsState>;\n}\n\nexport interface PayPalCommerceCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (data: PayPalCommerceCardFieldsConfig) => Promise<PayPalCommerceCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    isAppSwitchEnabled?: boolean;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Commerce BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(\n        options?: PayPalCommerceHostedFieldsSubmitOptions,\n    ): Promise<PayPalCommerceHostedFieldsApprove>;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n    hasReturned?(): boolean;\n    resume?(): void;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n    fastlaneToken?: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from './paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from './paypal-commerce-script-loader';\nimport {\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceInitializationData,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.paypalCommerceRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.paypalCommerceRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'paypalcommerce',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    ComponentsScriptType,\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<PayPalCommerceScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<PayPalCommerceScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceIntegrationService,\n    PayPalCommerceRequestSender,\n    PayPalCommerceScriptLoader,\n} from './index';\n\nconst createPayPalCommerceIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createPayPalCommerceIntegrationService;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceButtonInitializeOptions, {\n    WithPayPalCommerceButtonInitializeOptions,\n} from './paypal-commerce-button-initialize-options';\n\nexport default class PayPalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(paypalcommerce?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !paypalcommerce.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof paypalcommerce.buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? paypalcommerce.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommerce, isBuyNowFlow);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PayPalCommerceButtonInitializeOptions,\n        isBuyNowFlow?: boolean,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            ...(!isBuyNowFlow &&\n                this.isPaypalCommerceAppSwitchEnabled(methodId) && {\n                    appSwitchWhenAvailable: true,\n                }),\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            if (paypalButton.hasReturned?.() && this.isPaypalCommerceAppSwitchEnabled(methodId)) {\n                paypalButton.resume?.();\n            } else {\n                paypalButton.render(`#${containerId}`);\n            }\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     *\n     * PayPal AppSwitch enabling handling\n     *\n     */\n    private isPaypalCommerceAppSwitchEnabled(methodId: string): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        return paymentMethod.initializationData?.isAppSwitchEnabled || false;\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceButtonStrategy from './paypal-commerce-button-strategy';\n\nconst createPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceButtonStrategy, [{ id: 'paypalcommerce' }]);\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../paypal-commerce-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditButtonInitializeOptions, {\n    WithPayPalCommerceCreditButtonInitializeOptions,\n} from './paypal-commerce-credit-button-initialize-options';\n\nexport default class PayPalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = paypalcommercecredit || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercecredit);\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5557.Hide_ppc_banner_implementation will be rolled out to 100%\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isBannerImplementationDisabled =\n            features['PAYPAL-5557.Hide_ppc_banner_implementation'] ?? false;\n\n        if (isBannerImplementationDisabled) {\n            return;\n        }\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this code when data attributes will be removed from the banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const paypalSdk = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(paypalSdk, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PayPalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            paypalcommercecredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditButtonStrategy from './paypal-commerce-credit-button-strategy';\n\nconst createPayPalCommerceCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceCreditButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditButtonStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalCommerceSdk from './paypal-commerce-sdk';\n\nexport default function createPayPalCommerceSdk(): PayPalCommerceSdk {\n    return new PayPalCommerceSdk(createScriptLoader());\n}\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    StyleButtonColor,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoButtonInitializeOptions, {\n    WithPayPalCommerceVenmoButtonInitializeOptions,\n} from './paypal-commerce-venmo-button-initialize-options';\n\nexport default class PayPalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            paypalcommercevenmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle = this.paypalCommerceIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoButtonStrategy from './paypal-commerce-venmo-button-strategy';\n\nconst createPayPalCommerceVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoButtonStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsButtonOptions, {\n    WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n} from './paypal-commerce-alternative-methods-button-initialize-options';\n\nexport default class PayPalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = paypalcommercealternativemethods || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercealternativemethods: PayPalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            paypalcommercealternativemethods;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder(\n                    'paypalcommercealternativemethod',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: apm,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceAlternativeMethodsButtonStrategy from './paypal-commerce-alternative-methods-button-strategy';\n\nconst createPayPalCommerceAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsButtonStrategy, [\n    { id: 'paypalcommercealternativemethods' },\n]);\n","export interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithPaypalExpressButtonInitializeOptions } from './paypal-express-button-initialize-options';\nimport PaypalScriptLoader from './paypal-express-script-loader';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal-express-types';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalExpressScriptLoader: PaypalScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!options.paypal) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalSDK = await this.paypalExpressScriptLoader.loadPaypalSDK(\n            paymentMethod.config.merchantId,\n        );\n\n        this.renderButton(options, paypalSDK);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n        paypalSDK: PaypalSDK,\n    ) {\n        const { containerId, methodId, paypal } = options;\n        const { allowCredit, clientId, onPaymentError, shouldProcessPayment, style } = paypal;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const merchantId = paymentMethod.config.merchantId;\n        const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n        const clientToken: PaypalClientToken = { [env]: clientId };\n        const fundingCreditOption = paypalSDK.FUNDING.CREDIT || 'credit';\n        const allowedSources = allowCredit ? [fundingCreditOption] : [];\n        const disallowedSources = !allowCredit ? [fundingCreditOption] : [];\n\n        return paypalSDK.Button.render(\n            {\n                env,\n                client: clientToken,\n                commit: shouldProcessPayment,\n                funding: {\n                    allowed: allowedSources,\n                    disallowed: disallowedSources,\n                },\n                style: this.getStyle(style),\n                payment: (_, actions) => this.setupPayment(merchantId, actions, onPaymentError),\n                onAuthorize: (data, actions) =>\n                    this.tokenizePayment(data, methodId, actions, shouldProcessPayment),\n            },\n            containerId,\n        );\n    }\n\n    private getStyle(style?: Omit<PaypalStyleOptions, 'height'>): PaypalStyleOptions {\n        const { color, fundingicons, label, layout, shape, size, tagline } = style || {};\n\n        return {\n            color,\n            fundingicons,\n            label,\n            layout,\n            shape: shape || PaypalButtonStyleShapeOption.RECT,\n            size: size === 'small' ? PaypalButtonStyleSizeOption.RESPONSIVE : size,\n            tagline,\n        };\n    }\n\n    private async setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        try {\n            const state = await this.paymentIntegrationService.loadDefaultCheckout();\n            const { id: cartId } = state.getCartOrThrow();\n            const host = state.getHost() || '';\n\n            const paymentRequest = await actions.request.post(\n                `${host}/api/storefront/payment/paypalexpress`,\n                { merchantId, cartId },\n                {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                },\n            );\n\n            return paymentRequest.id;\n        } catch (error) {\n            if (onError && error instanceof StandardError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        data: PaypalAuthorizeData,\n        methodId: string,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n    ): Promise<void> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const getPaymentData = await actions.payment.get(data.paymentID);\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            provider: paymentMethod.id,\n            action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n            paymentId: data.paymentID,\n            payerId: data.payerID,\n            payerInfo: JSON.stringify(getPaymentData.payer.payer_info),\n        });\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-express-types';\n\nexport default class PaypalScriptLoader {\n    private window: PaypalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async loadPaypalSDK(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n            ...(merchantId && {\n                attributes: { 'data-merchant-id': merchantId },\n            }),\n        };\n\n        await this.scriptLoader.loadScript(scriptSrc, options);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalExpressButtonStrategy, PaypalExpressScriptLoader } from './index';\n\nconst createPaypalExpressButtonStrategy: CheckoutButtonStrategyFactory<\n    PaypalExpressButtonStrategy\n> = (paymentIntegrationService) => {\n    return new PaypalExpressButtonStrategy(\n        paymentIntegrationService,\n        new PaypalExpressScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createPaypalExpressButtonStrategy, [{ id: 'paypalexpress' }]);\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>,\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { isEqual } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize((store) => from(action(store)).pipe(shareReplay()), { isEqual });\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction, { isEqual });\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    LoadPaymentMethodAction,\n    LoadPaymentMethodsAction,\n    PaymentMethodActionType,\n} from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nimport { PaymentMethod } from '.';\n\nconst isPaymentMethod = (value: PaymentMethod | undefined): value is PaymentMethod => {\n    return !!value;\n};\n\nexport default class PaymentMethodActionCreator {\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\n\n    loadPaymentMethodsById(\n        methodIds: string[],\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n                Promise.all(\n                    methodIds.map(async (id) => {\n                        try {\n                            const response = await this._requestSender.loadPaymentMethod(id, {\n                                ...options,\n                                params,\n                            });\n\n                            return response.body;\n                        } catch (_e) {\n                            return undefined;\n                        }\n                    }),\n                )\n                    .then((response) => {\n                        const paymentMethods = response.filter(isPaymentMethod);\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                paymentMethods,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                        observer.complete();\n                    });\n            });\n    }\n\n    loadPaymentMethods(\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cart = state.cart.getCartOrThrow();\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n                this._requestSender\n                    .loadPaymentMethods({\n                        ...options,\n                        params: { ...options?.params, cartId: cart.id },\n                    })\n                    .then((response) => {\n                        const meta = {\n                            deviceSessionId: response.headers['x-device-session-id'],\n                            sessionHash: response.headers['x-session-hash'],\n                        };\n                        const methods = response.body;\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                methods,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    @cachableAction\n    loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions & ActionOptions,\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._requestSender\n                    .loadPaymentMethod(methodId, { ...options, params })\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\n                                response.body,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\n                                response,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\n        Response<PaymentMethod[]>\n    > {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(\n        methodId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","import { Action, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, Observable, of, throwError } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta,\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message || 'Unable to continue as a guest because the customer is already signed in.',\n        );\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { isEmpty } from 'lodash';\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport {\n    BillingAddressActionType,\n    ContinueAsGuestAction,\n    UpdateBillingAddressAction,\n} from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nimport { BillingAddressRequestSender } from '.';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            const hasBillingAddress = !isEmpty(billingAddress);\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            hasBillingAddress,\n                            options,\n                        );\n\n                        return createAction(\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\n                            body,\n                        );\n                    }),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\n                    ),\n                ),\n                this._updateCustomerConsent(credentials, options),\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n                const billingAddress = state.billingAddress.getBillingAddress();\n\n                const hasBillingAddress = !isEmpty(billingAddress);\n\n                // If email is not present in the address provided by the client, then\n                // fall back to the stored email as it could have been set separately\n                // using a convenience method. We can't rely on billingAddress having\n                // an ID to consider that there's a preexisting email, as billingAddress\n                // object from Order doesn't have an ID.\n                const billingAddressRequestBody = {\n                    ...address,\n                    email:\n                        typeof address.email === 'undefined' && billingAddress\n                            ? billingAddress.email\n                            : address.email,\n                };\n\n                if (billingAddress && billingAddress.id) {\n                    billingAddressRequestBody.id = billingAddress.id;\n                }\n\n                this._createOrUpdateBillingAddress(\n                    checkout.id,\n                    billingAddressRequestBody,\n                    hasBillingAddress,\n                    options,\n                )\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                BillingAddressActionType.UpdateBillingAddressFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _updateCustomerConsent(\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        if (\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\n        ) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions(\n            {\n                email,\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n            },\n            options,\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        hasBillingAddress: boolean,\n        options?: RequestOptions,\n    ): Promise<Response<Checkout>> {\n        if (!hasBillingAddress) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when cart is removed or empty.\n */\nexport default class EmptyCartError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because your cart is empty. Please add items to your cart and try again.',\n        );\n\n        this.name = 'EmptyCartError';\n        this.type = 'empty_cart';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { EmptyCartError } from '../cart/errors';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAddress(\n        checkoutId: string,\n        address: Partial<AddressRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .post<Checkout>(url, {\n                body: address,\n                params: DEFAULT_PARAMS,\n                headers,\n                timeout,\n            })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n\n    updateAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .put<Checkout>(url, { params: DEFAULT_PARAMS, body, headers, timeout })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { BuyNowCartRequestBody, Cart } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class CartRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createBuyNowCart(\n        body: BuyNowCartRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { Action, createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport { CheckoutHydrateActionType } from './checkout-hydrate-actions';\nimport CheckoutInitialState from './checkout-initial-state';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return () => {\n            return concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig({\n                        useCache: true,\n                        timeout: options?.timeout,\n                        params: { checkoutId: id },\n                    }),\n                    this._formFieldsActionCreator.loadFormFields({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                ),\n                defer(() => {\n                    return this._checkoutRequestSender\n                        .loadCheckout(id, options)\n                        .then(({ body }) => {\n                            return createAction(\n                                CheckoutActionType.LoadCheckoutSucceeded,\n                                this._transformCustomerAddresses(body),\n                            );\n                        });\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n        };\n    }\n\n    loadDefaultCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                    this._formFieldsActionCreator.loadFormFields({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                ),\n                defer(async () => {\n                    const state = store.getState();\n                    const context = state.config.getContextConfig();\n\n                    if (!context || !context.checkoutId) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\n                        context.checkoutId,\n                        options,\n                    );\n\n                    return createAction(\n                        CheckoutActionType.LoadCheckoutSucceeded,\n                        this._transformCustomerAddresses(body),\n                    );\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n                this._checkoutRequestSender\n                    .updateCheckout(checkout.id, body, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\n                        );\n                    });\n            });\n    }\n\n    loadCurrentCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n\n    hydrateInitialState(state: CheckoutInitialState): Action<CheckoutInitialState> {\n        return {\n            type: CheckoutHydrateActionType.HydrateInitialState,\n            payload: state,\n        };\n    }\n\n    private _transformCustomerAddresses(body: Checkout): Checkout {\n        return {\n            ...body,\n            customer: {\n                ...body.customer,\n                addresses: body.customer.addresses.map((address) => ({\n                    ...address,\n                    shouldSaveAddress: false,\n                })),\n            },\n        };\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\n): string {\n    return Array.isArray(includeDictionaryOrList)\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean },\n): string {\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadCheckout(\n        id: string,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .get<Checkout>(url, {\n                params: {\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    updateCheckout(\n        id: string,\n        body: CheckoutRequestBody,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map((item) => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\n        super(\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\n        );\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport type ComparableCheckout = Pick<\n    Checkout,\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\n> & {\n    cart: Partial<Cart>;\n};\n\nexport default class CheckoutValidator {\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\n            const comparator = new CartComparator();\n\n            if (\n                checkout.outstandingBalance === response.body.outstandingBalance &&\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\n                this._compareGiftCertificates(\n                    checkout.giftCertificates,\n                    response.body.giftCertificates,\n                ) &&\n                comparator.isEqual(checkout.cart, response.body.cart)\n            ) {\n                return;\n            }\n\n            throw new CartChangedError(\n                this._getComparableCheckout(checkout),\n                this._getComparableCheckout(response.body),\n            );\n        });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(\n        giftCertificatesA: GiftCertificate[],\n        giftCertificatesB: GiftCertificate[],\n    ): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nimport { ConfigRequestSender } from '.';\n\nexport default class ConfigActionCreator {\n    constructor(private _configRequestSender: ConfigRequestSender) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender\n                .loadConfig(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender\n            .get<Config>(url, {\n                timeout,\n                headers: {\n                    Accept: ContentType.JsonV1,\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    ...SDK_VERSION_HEADERS,\n                },\n                params,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    ApplyCouponAction,\n    CouponAction,\n    CouponActionType,\n    RemoveCouponAction,\n} from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(private _couponRequestSender: CouponRequestSender) {}\n\n    applyCoupon(\n        code: string,\n        options?: RequestOptions,\n    ): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ApplyCouponAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n                this._couponRequestSender\n                    .applyCoupon(checkout.id, code, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CouponActionType.ApplyCouponFailed, response),\n                        );\n                    });\n            });\n    }\n\n    removeCoupon(\n        code: string,\n        options?: RequestOptions,\n    ): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<RemoveCouponAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n                this._couponRequestSender\n                    .removeCoupon(checkout.id, code, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CouponActionType.RemoveCouponFailed, response),\n                        );\n                    });\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { EmptyCartError } from '../cart/errors';\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES, CheckoutIncludes } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyCoupon(\n        checkoutId: string,\n        couponCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .post<Checkout>(url, {\n                headers,\n                timeout,\n                params: {\n                    include: joinIncludes([\n                        ...CHECKOUT_DEFAULT_INCLUDES,\n                        CheckoutIncludes.AvailableShippingOptions,\n                    ]),\n                },\n                body: { couponCode },\n            })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n\n    removeCoupon(\n        checkoutId: string,\n        couponCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .delete<Checkout>(url, {\n                headers,\n                timeout,\n                params: {\n                    include: joinIncludes([\n                        ...CHECKOUT_DEFAULT_INCLUDES,\n                        CheckoutIncludes.AvailableShippingOptions,\n                    ]),\n                },\n            })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n}\n","import { ExecuteSucceededAction, SpamProtectionAction } from './spam-protection-actions';\n\nexport default function isSpamProtectionExecuteSucceededAction(\n    action: SpamProtectionAction,\n): action is ExecuteSucceededAction {\n    const succeededAction = action as ExecuteSucceededAction;\n\n    return (\n        typeof succeededAction === 'object' &&\n        typeof succeededAction.payload === 'object' &&\n        typeof succeededAction.payload.token === 'string'\n    );\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CartSource } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    isSpamProtectionExecuteSucceededAction,\n    SpamProtectionActionCreator,\n} from '../spam-protection';\n\nimport CustomerAccountRequestBody, { CustomerAddressRequestBody } from './customer-account';\nimport {\n    CreateCustomerAction,\n    CreateCustomerAddressAction,\n    CustomerActionType,\n    SignInCustomerAction,\n    SignOutCustomerAction,\n} from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    createCustomer(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<CreateCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const config = state.config.getStoreConfigOrThrow();\n            const { isStorefrontSpamProtectionEnabled } = config.checkoutSettings;\n\n            const createCustomer = (token?: string) =>\n                from(\n                    this._customerRequestSender.createAccount(\n                        { ...customerAccount, token },\n                        options,\n                    ),\n                ).pipe(\n                    switchMap(() =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.CreateCustomerSucceeded)),\n                        ),\n                    ),\n                );\n\n            return concat(\n                of(createAction(CustomerActionType.CreateCustomerRequested)),\n                isStorefrontSpamProtectionEnabled\n                    ? from(this._spamProtectionActionCreator.execute()(store)).pipe(\n                          switchMap((action) =>\n                              isSpamProtectionExecuteSucceededAction(action)\n                                  ? concat(of(action), createCustomer(action.payload?.token))\n                                  : of(action),\n                          ),\n                      )\n                    : createCustomer(),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.CreateCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Observable<CreateCustomerAddressAction> {\n        return concat(\n            of(createAction(CustomerActionType.CreateCustomerAddressRequested)),\n            defer(async () => {\n                const { body } = await this._customerRequestSender.createAddress(\n                    customerAddress,\n                    options,\n                );\n\n                return createAction(CustomerActionType.CreateCustomerAddressSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(CustomerActionType.CreateCustomerAddressFailed, error),\n            ),\n        );\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckoutOrThrow();\n            const cartId = checkout.cart.source === CartSource.BuyNow ? checkout.id : undefined;\n\n            return concat(\n                of(createAction(CustomerActionType.SignInCustomerRequested)),\n                from(\n                    this._customerRequestSender.signInCustomer({ ...credentials, cartId }, options),\n                ).pipe(\n                    switchMap(({ body }) => {\n                        if (body.data.persistentCartRetrievalInformation) {\n                            return concat(\n                                this._checkoutActionCreator.loadCheckout(\n                                    body.data.persistentCartRetrievalInformation.id,\n                                    options,\n                                )(store),\n                                of(\n                                    createAction(\n                                        CustomerActionType.SignInCustomerSucceeded,\n                                        body.data,\n                                    ),\n                                ),\n                            );\n                        }\n\n                        return concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data)),\n                        );\n                    }),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignInCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    signOutCustomer(\n        options?: RequestOptions,\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckoutOrThrow();\n            const cartId = checkout.cart.source === CartSource.BuyNow ? checkout.id : undefined;\n\n            return concat(\n                of(createAction(CustomerActionType.SignOutCustomerRequested)),\n                from(this._customerRequestSender.signOutCustomer(options, cartId)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(\n                                createAction(\n                                    CustomerActionType.SignOutCustomerSucceeded,\n                                    body.data,\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignOutCustomerFailed, error),\n                ),\n            );\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Customer from './customer';\nimport { CustomerAccountInternalRequestBody, CustomerAddressRequestBody } from './customer-account';\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAccount(\n        customerAccount: CustomerAccountInternalRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<{}>> {\n        const url = '/api/storefront/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAccount,\n        });\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Customer>> {\n        const url = `/api/storefront/customer-address`;\n\n        return this._requestSender.post<Customer>(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAddress,\n        });\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: credentials,\n        });\n    }\n\n    signOutCustomer(\n        { timeout }: RequestOptions = {},\n        cartId?: string,\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            ...(cartId && { body: { cartId } }),\n        });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((response) =>\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent, TContext = undefined> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window, private _context?: TContext) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage({ ...event, context: this._context }, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n\n    setContext(context: TContext) {\n        this._context = context;\n    }\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { appendWww, parseUrl } from '../url';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<\n    TEventMap extends IframeEventMap<keyof TEventMap>,\n    TContext = undefined,\n> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap, TContext>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType], context?: TContext): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => (context ? listener(event, context) : listener(event)));\n    }\n\n    @bind\n    private _handleMessage(messageEvent: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(messageEvent.origin) === -1 ||\n            !isIframeEvent(messageEvent.data as TEventMap[keyof TEventMap], messageEvent.data.type)\n        ) {\n            return;\n        }\n\n        const { context, ...event } = messageEvent.data;\n\n        this.trigger(event, context);\n    }\n}\n\nexport type EventListeners<TEventMap, TContext = undefined> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key], context?: TContext) => void>;\n};\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n    StoredCardRequested = 'HOSTED_FIELD:STORED_CARD_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n    [HostedFieldEventType.StoredCardRequested]: HostedFieldStoredCardRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent\n    | HostedFieldStoredCardRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n\nexport interface HostedFieldStoredCardRequestEvent {\n    type: HostedFieldEventType.StoredCardRequested;\n    payload: {\n        data: StoredCardHostedFormData;\n        fields: StoredCardHostedFormInstrumentFields;\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentErrorData,\n    PaymentErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HostedFieldType from '../hosted-field-type';\nimport { HostedFormErrorsData } from '../hosted-form-options';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n    StoredCardSucceeded = 'HOSTED_INPUT:STORED_CARD_SUCCEEDED',\n    StoredCardFailed = 'HOSTED_INPUT:STORED_CARD_FAILED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n    [HostedInputEventType.StoredCardFailed]: HostedInputStoredCardErrorEvent;\n    [HostedInputEventType.StoredCardSucceeded]: HostedInputStoredCardSucceededEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent\n    | HostedInputStoredCardSucceededEvent\n    | HostedInputStoredCardErrorEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputStoredCardSucceededEvent {\n    type: HostedInputEventType.StoredCardSucceeded;\n}\n\nexport interface HostedInputStoredCardErrorEvent {\n    type: HostedInputEventType.StoredCardFailed;\n    payload?: {\n        errors?: string[];\n        error?: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n        errors?: HostedFormErrorsData;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport {\n    CardingProtectionChallengeNotCompletedError,\n    CardingProtectionFailedError,\n    SpamProtectionChallengeNotCompletedError,\n} from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\n\n    handle(error: any): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(\n        error: Error,\n    ): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(\n        id: string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha\n            .execute()\n            .pipe(take(1))\n            .pipe(\n                switchMap(async ({ error, token }) => {\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                        throw new CardingProtectionChallengeNotCompletedError();\n                    }\n\n                    if (error || !token) {\n                        throw new CardingProtectionFailedError();\n                    }\n\n                    return {\n                        type: 'recaptcha_v2_verification',\n                        data: {\n                            human_verification_token: token,\n                        },\n                    };\n                }),\n            )\n            .toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'recaptcha_v2_verification'\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport {\n    SpamProtectionChallengeNotCompletedError,\n    SpamProtectionFailedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (\n        recaptcha: ReCaptchaV2.ReCaptcha,\n        sitekey: string,\n        container: HTMLElement | null,\n    ) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory,\n    ) {\n        this._memoized = memoize(\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n                const event$ = new Subject<RecaptchaResult>();\n\n                if (!container) {\n                    throw new Error();\n                }\n\n                this._widgetId = recaptcha.render(container.id, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(this._widgetId),\n                        });\n                        recaptcha.reset(this._widgetId);\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                return event$;\n            },\n            { isEqual: (a, b) => a === b },\n        );\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader\n            .load()\n            .then((recaptcha) => {\n                if (recaptcha) {\n                    this._event$ = this._memoized(\n                        recaptcha,\n                        sitekey,\n                        document.getElementById(containerId),\n                    );\n                    this._recaptcha = recaptcha;\n                }\n            })\n            .catch((err) => {\n                throw err;\n            });\n    }\n\n    reset(containerId: string): void {\n        const element = document.getElementById(containerId);\n\n        element?.remove();\n        this._recaptcha?.reset(this._widgetId);\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            }).pipe(\n                retryWhen((errors) =>\n                    errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error),\n                        ),\n                    ),\n                ),\n                switchMap((element) => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute(this._widgetId);\n\n                    return event$;\n                }),\n                catchError((error) => of({ error })),\n            );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory\n            .create(() => {\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n                if (container.style.visibility === 'hidden') {\n                    event.next({\n                        error: new SpamProtectionChallengeNotCompletedError(),\n                    });\n                }\n            })\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window,\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch((error) => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory(),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _checkoutId?: string,\n        private _cardInstrument?: CardInstrument,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        const src = this._checkoutId\n            ? `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}&checkoutId=${this._checkoutId}`\n            : `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n\n        this._iframe.src = src;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                cardInstrument: this._cardInstrument,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async submitStoredCardForm(\n        fields: StoredCardHostedFormInstrumentFields,\n        data: StoredCardHostedFormData,\n    ): Promise<HostedInputStoredCardSucceededEvent> {\n        const promise = this._eventPoster.post<HostedInputStoredCardSucceededEvent>(\n            {\n                type: HostedFieldEventType.StoredCardRequested,\n                payload: { fields, data },\n            },\n            {\n                successType: HostedInputEventType.StoredCardSucceeded,\n                errorType: HostedInputEventType.StoredCardFailed,\n            },\n        );\n\n        return this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport LegacyHostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\ntype HostedFormEventCallbacks = Pick<\n    LegacyHostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalActionData),\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction),\n            );\n        }\n    }\n\n    async submitStoredCard(payload: {\n        fields: StoredCardHostedFormInstrumentFields;\n        data: StoredCardHostedFormData;\n    }): Promise<HostedInputStoredCardSucceededEvent | void> {\n        return this._getFirstField().submitStoredCardForm(payload.fields, payload.data);\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error instanceof Error && error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport {\n    HostedCreditCardInstrument,\n    isVaultedInstrument,\n    PaymentAdditionalAction,\n} from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    transform(\n        payload: OrderPaymentRequestBody,\n        additionalAction?: PaymentAdditionalAction,\n    ): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(\n            payload.paymentData,\n            'ccExpiry',\n            'ccName',\n            'ccNumber',\n            'ccCvv',\n        ) as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            payload.methodId,\n            payload.gatewayId,\n        );\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken =\n            instrumentMeta && payment && isVaultedInstrument(payment)\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport LegacyHostedFormOptions, {\n    HostedCardFieldOptionsMap,\n    HostedStoredCardFieldOptionsMap,\n} from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    create(host: string, options: LegacyHostedFormOptions, checkoutId?: string): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\n                HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    checkoutId,\n                    'instrumentId' in fieldOptions\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\n                        : undefined,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam check. Please try again.\");\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport {\n    FinalizeOrderAction,\n    LoadOrderAction,\n    LoadOrderPaymentsAction,\n    OrderActionType,\n    SubmitOrderAction,\n} from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\n                    );\n                });\n        });\n    }\n\n    loadCurrentOrder(\n        options?: RequestOptions,\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            defer(() => {\n                const orderId = this._getCurrentOrderId(store.getState());\n\n                if (!orderId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n                }\n\n                return this.loadOrder(orderId, options);\n            });\n    }\n\n    submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(OrderActionType.SubmitOrderRequested)),\n                defer(() => {\n                    const state = store.getState();\n                    const externalSource = state.config.getExternalSource();\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (checkout.shouldExecuteSpamCheck) {\n                        throw new SpamProtectionNotCompletedError();\n                    }\n\n                    return from(\n                        this._checkoutValidator.validate(checkout, options).then(() =>\n                            this._orderRequestSender.submitOrder(\n                                this._mapToOrderRequestBody(\n                                    payload ?? {},\n                                    checkout.id,\n                                    checkout.customerMessage,\n                                    externalSource,\n                                ),\n                                {\n                                    ...options,\n                                    headers: {\n                                        checkoutVariant: variantIdentificationToken,\n                                    },\n                                },\n                            ),\n                        ),\n                    ).pipe(\n                        switchMap((response) =>\n                            concat(\n                                // TODO: Remove once we can submit orders using storefront API\n                                this.loadOrder(response.body.data.order.orderId, options),\n                                of(\n                                    createAction(\n                                        OrderActionType.SubmitOrderSucceeded,\n                                        response.body.data,\n                                        { ...response.body.meta, token: response.headers.token },\n                                    ),\n                                ),\n                            ),\n                        ),\n                    );\n                }).pipe(\n                    catchError((error) =>\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\n                    ),\n                ),\n            );\n    }\n\n    finalizeOrder(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\n                switchMap((response) =>\n                    concat(\n                        this.loadOrder(orderId, options),\n                        of(\n                            createAction(\n                                OrderActionType.FinalizeOrderSucceeded,\n                                response.body.data,\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string,\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when the server detects inconsistency in cart data since it is last requested,\n * for example, product prices or eligible discounts have changed.\n */\nexport default class CartConsistencyError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because some details have changed. Please review your order and try again.',\n        );\n\n        this.name = 'CartConsistencyError';\n        this.type = 'cart_consistency';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class MissingShippingMethodError extends StandardError {\n    constructor(message: string) {\n        super(message);\n\n        this.name = 'MissingShippingMethodError';\n        this.type = 'missing_shipping_method';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidShippingAddressError extends StandardError {\n    constructor(message: string) {\n        super(message);\n\n        this.name = 'InvalidShippingAddressError';\n        this.type = 'invalid_shipping_address';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { CartConsistencyError, EmptyCartError } from '../cart/errors';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { MissingShippingMethodError, OrderTaxProviderUnavailableError } from './errors';\nimport InvalidShippingAddressError from './errors/invalid-shipping-address-error';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.physicalItems.categories',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n            'lineItems.digitalItems.categories',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes(include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(\n        body?: InternalOrderRequestBody,\n        { headers, timeout }: SubmitOrderRequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender\n            .post<InternalOrderResponseBody>(url, {\n                body,\n                headers: omitBy(\n                    {\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    isNil,\n                ),\n                timeout,\n            })\n            .catch((error) => {\n                if (error.body.type === 'tax_provider_unavailable') {\n                    throw new OrderTaxProviderUnavailableError();\n                }\n\n                if (error.body.type === 'cart_has_changed') {\n                    throw new CartConsistencyError();\n                }\n\n                if (error.body.type === 'missing_shipping_method') {\n                    throw new MissingShippingMethodError(error.body.detail);\n                }\n\n                if (error.body.type === 'invalid_shipping_address') {\n                    throw new InvalidShippingAddressError(error.body.detail);\n                }\n\n                if (error.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw error;\n            });\n    }\n\n    finalizeOrder(\n        orderId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, {\n    FormattedHostedInstrument,\n    FormattedPayload,\n    FormattedVaultedInstrument,\n} from './payment';\nimport {\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (\n    settings: InitializeOffsitePaymentSettings,\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\n                defer(async () => {\n                    try {\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\n                        );\n                    } catch (error) {\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\n                            error,\n                        );\n\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(\n                                { ...payment, additionalAction },\n                                store.getState(),\n                            ),\n                        );\n                    }\n                }).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._orderActionCreator.loadCurrentOrder()(store),\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\n                ),\n            );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return (store) => {\n            let paymentData:\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\n                | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform(\n                { gatewayId, methodId, paymentData },\n                store.getState(),\n            );\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race(\n                    [\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\n                        promise,\n                    ].filter(Boolean),\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\n                ),\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    GOOGLEPAY_WORLDPAYACCESS = \"googlepayworldpayaccess\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\"\n}\nexport default CheckoutButtonMethodType;\n\n","import { mapToInternalAddress } from '../address';\nimport { OrderBillingAddress } from '../order-billing-address/order-billing-address-state';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: OrderBillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { Observable, of } from 'rxjs';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport {\n    PaymentProviderCustomerAction,\n    PaymentProviderCustomerType,\n} from './payment-provider-customer-actions';\n\nexport default class PaymentProviderCustomerActionCreator {\n    updatePaymentProviderCustomer(\n        providerCustomerData: PaymentProviderCustomer,\n    ): Observable<PaymentProviderCustomerAction> {\n        return of(\n            createAction(\n                PaymentProviderCustomerType.UpdatePaymentProviderCustomer,\n                providerCustomerData,\n            ),\n        );\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\n\nimport { PaymentRequestOptions } from './payment-request-options';\nimport { PaymentStrategyActionType, PaymentStrategyWidgetAction } from './payment-strategy-actions';\n\nexport default class PaymentStrategyWidgetActionCreator {\n    widgetInteraction(\n        method: () => Promise<unknown>,\n        options?: PaymentRequestOptions,\n    ): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() =>\n                    createAction(\n                        PaymentStrategyActionType.WidgetInteractionFinished,\n                        undefined,\n                        meta,\n                    ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta),\n            ),\n        );\n    }\n}\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, {\n    InitializePaymentOptions,\n} from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n    ) {}\n\n    initializeBilling(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializeShipping(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(\n                    RemoteCheckoutActionType.InitializeRemoteShippingRequested,\n                    undefined,\n                    { methodId },\n                ),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(\n                        createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, {\n                            methodId,\n                        }),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.LoadRemoteSettingsFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .signOut(methodId, options)\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded,\n                            undefined,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(\n                createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested,\n                    undefined,\n                    { methodId },\n                ),\n            ),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded,\n                    undefined,\n                    { methodId },\n                );\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed,\n                    error,\n                    { methodId },\n                ),\n            ),\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(\n        methodId: K,\n        data: Partial<RemoteCheckoutStateData[K]>,\n    ): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    initializeBilling(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(\n        methodName: string,\n        params?: InitializePaymentOptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url =\n            '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport {\n    CheckoutIncludes,\n    CheckoutParams,\n    CheckoutRequestSender,\n    InternalCheckoutSelectors,\n    ReadableCheckoutStore,\n} from '../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender,\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart(),\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment(\n                {\n                    id: existingConsignment.id,\n                    address,\n                    lineItems,\n                },\n                options,\n            )(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment(\n                {\n                    id: existingConsignment && existingConsignment.id,\n                    address,\n                    lineItems: this._addLineItems(\n                        consignment.lineItems,\n                        existingConsignment,\n                        state.cart.getCart(),\n                    ),\n                },\n                options,\n            )(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const consignments = state.consignments.getConsignments();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!consignments || !consignments.length) {\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n                }\n\n                const consignmentUpdateBody = {\n                    id: consignments[0].id,\n                    shippingOptionId: id,\n                };\n\n                const consignmentMeta = {\n                    id: consignments[0].id,\n                };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    loadShippingOptions(\n        options?: RequestOptions,\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n                this._checkoutRequestSender\n                    .loadCheckout(checkout.id, {\n                        ...options,\n                        params: {\n                            include: [CheckoutIncludes.AvailableShippingOptions],\n                        },\n                    })\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.LoadShippingOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n                this._consignmentRequestSender\n                    .createConsignments(checkout.id, consignments, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.CreateConsignmentsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n                const consignmentMeta = { id: consignmentId };\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.DeleteConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .deleteConsignment(checkout.id, consignmentId, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.DeleteConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                const consignmentInMemory = store\n                    .getState()\n                    .consignments.getConsignmentById(consignment.id);\n\n                const alreadySelectedOptionId = consignmentInMemory?.selectedShippingOption?.id;\n\n                if (alreadySelectedOptionId === consignment.shippingOptionId) {\n                    observer.complete();\n\n                    return;\n                }\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore,\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\n            .map((existingItem) => {\n                const sharedItem = find(\n                    lineItems,\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\n                );\n\n                return {\n                    ...existingItem,\n                    quantity: sharedItem\n                        ? existingItem.quantity - sharedItem.quantity\n                        : existingItem.quantity,\n                };\n            })\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map((itemId) => {\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody,\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment:\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { EmptyCartError } from '../cart/errors';\nimport { Checkout, CheckoutParams } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .post<Checkout>(url, {\n                body: consignments,\n                params: {\n                    include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .put<Checkout>(url, {\n                body,\n                params: {\n                    include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender\n            .delete<Checkout>(url, { params: { include }, headers, timeout })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport CheckoutStore from '../checkout/checkout-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender,\n        private _store: CheckoutStore,\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        const { checkout } = this._store.getState();\n        const checkoutData = checkout.getCheckout();\n\n        const channelId = checkoutData ? checkoutData.channelId : null;\n\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender\n                .loadCountries(channelId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(\n                            ShippingCountryActionType.LoadShippingCountriesSucceeded,\n                            response.body.data,\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            ShippingCountryActionType.LoadShippingCountriesFailed,\n                            response,\n                        ),\n                    );\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(private _requestSender: RequestSender, private _config: { locale?: string }) {}\n\n    loadCountries(\n        channelId: number | null,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<CountryResponseBody>> {\n        const channelIdParam = channelId ? `?channel_id=${channelId}` : '';\n        const url = `/internalapi/v1/shipping/countries${channelIdParam}`;\n\n        const headers = {\n            'Accept-Language': this._config.locale,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport isSpamProtectionExecuteSucceededAction from './is-spam-protection-succeeded-action';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender,\n    ) {}\n\n    initialize(\n        options?: SpamProtectionOptions,\n    ): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) => {\n            return concat(\n                of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n                defer(async () => {\n                    const spamProtectionElementId = options\n                        ? options.containerId\n                        : 'spamProtectionContainer';\n\n                    const element = document.getElementById(spamProtectionElementId);\n\n                    if (element) {\n                        this._googleRecaptcha.reset(spamProtectionElementId);\n                    }\n\n                    if (!options && !document.getElementById(spamProtectionElementId)) {\n                        const spamProtectionElement = document.createElement('div');\n\n                        spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                        document.body.appendChild(spamProtectionElement);\n                    }\n\n                    const state = store.getState();\n                    const storeConfig = state.config.getStoreConfigOrThrow();\n                    const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                    await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                    return createAction(SpamProtectionActionType.InitializeSucceeded);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.InitializeFailed, error),\n                ),\n            );\n        };\n    }\n\n    verifyCheckoutSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return concat(\n                    of(createAction(SpamProtectionActionType.VerifyCheckoutRequested)),\n                    from(this.execute()(store)).pipe(\n                        switchMap((action) => {\n                            if (\n                                !isSpamProtectionExecuteSucceededAction(action) ||\n                                !action.payload\n                            ) {\n                                return of(action);\n                            }\n\n                            return from(\n                                this._requestSender.validate(checkout.id, action.payload.token),\n                            ).pipe(\n                                switchMap(({ body }) =>\n                                    concat(\n                                        of(action),\n                                        of(\n                                            createAction(\n                                                SpamProtectionActionType.VerifyCheckoutSucceeded,\n                                                body,\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            );\n                        }),\n                    ),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(SpamProtectionActionType.VerifyCheckoutFailed, error),\n                    ),\n                );\n            });\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested)),\n                this.initialize()(store),\n                this._googleRecaptcha\n                    .execute()\n                    .pipe(take(1))\n                    .pipe(\n                        switchMap(async ({ error, token }) => {\n                            if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                                throw error;\n                            }\n\n                            if (error || !token) {\n                                throw new SpamProtectionFailedError();\n                            }\n\n                            return createAction(SpamProtectionActionType.ExecuteSucceeded, {\n                                token,\n                            });\n                        }),\n                    ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.ExecuteFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { EmptyCartError } from '../cart/errors';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    validate(\n        checkoutId: string,\n        token: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .post<Checkout>(url, { body: { token }, headers, timeout })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(private _storeCreditRequestSender: StoreCreditRequestSender) {}\n\n    applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n                defer(async () => {\n                    const state = store.getState();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    const { body } = await (useStoreCredit\n                        ? this._storeCreditRequestSender.applyStoreCredit(checkout.id, options)\n                        : this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                    return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    Subscriptions,\n    SubscriptionsActionType,\n    SubscriptionsRequestSender,\n    UpdateSubscriptionsAction,\n} from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\n                    subscriptions,\n                    options,\n                );\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\n                    new UpdateSubscriptionsError(error),\n                ),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>).reduce(\n            (result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }),\n            {},\n        ) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cloneResult as clone } from '../common/utility';\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow, getOutstandingBalance },\n    config: {\n        getContextConfig,\n        getHost,\n        getLocale,\n        getStoreConfig,\n        getStoreConfigOrThrow,\n        getConfig,\n    },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    countries: { getCountries },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: {\n        getCardInstrument,\n        getCardInstrumentOrThrow,\n        getInstruments,\n        getInstrumentsMeta,\n    },\n    order: { getOrder, getOrderOrThrow, getOrderMeta },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow, getPaymentMethodsMeta },\n    paymentProviderCustomer: { getPaymentProviderCustomer, getPaymentProviderCustomerOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: {\n        getShippingAddress,\n        getShippingAddressOrThrow,\n        getShippingAddresses,\n        getShippingAddressesOrThrow,\n    },\n    shippingCountries: { getShippingCountries },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getCountries: clone(getCountries),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConfig: clone(getConfig),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getContextConfig: clone(getContextConfig),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getInstruments: clone(getInstruments),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getOrderMeta: clone(getOrderMeta),\n        getInstrumentsMeta: clone(getInstrumentsMeta),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getPaymentMethodsMeta: clone(getPaymentMethodsMeta),\n        getPaymentProviderCustomer: clone(getPaymentProviderCustomer),\n        getPaymentProviderCustomerOrThrow: clone(getPaymentProviderCustomerOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        getShippingAddresses: clone(getShippingAddresses),\n        getShippingAddressesOrThrow: clone(getShippingAddressesOrThrow),\n        getShippingCountries: clone(getShippingCountries),\n        getOutstandingBalance: clone(getOutstandingBalance),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState>\n    extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState,\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<\n        TState | undefined,\n        SynchronizeAction<TState>,\n        TTransformedState\n    >(\n        (state, action) =>\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\n        store.getState(),\n        { stateTransformer },\n    );\n\n    store.subscribe(\n        (state) => {\n            projection.dispatch(\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\n            );\n        },\n        { initial: false },\n    );\n\n    return projection;\n}\n","import {\n    BillingAddressRequestBody,\n    BuyNowCartRequestBody,\n    Cart,\n    HostedForm,\n    HostedFormOptions,\n    InitializeOffsitePaymentConfig,\n    OrderRequestBody,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    RequestOptions,\n    ShippingAddressRequestBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport CouponActionCreator from '../coupon/coupon-action-creator';\nimport { CustomerActionCreator, CustomerCredentials } from '../customer';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport {\n    PaymentProviderCustomer,\n    PaymentProviderCustomerActionCreator,\n} from '../payment-provider-customer';\nimport PaymentActionCreator from '../payment/payment-action-creator';\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\nimport PaymentStrategyWidgetActionCreator from '../payment/payment-strategy-widget-action-creator';\nimport { RemoteCheckoutActionCreator } from '../remote-checkout';\nimport { InitializePaymentOptions } from '../remote-checkout/remote-checkout-request-sender';\nimport { ConsignmentActionCreator, ShippingCountryActionCreator } from '../shipping';\nimport { PaymentHumanVerificationHandler, SpamProtectionActionCreator } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\n\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _checkoutValidator: CheckoutValidator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n        private _customerActionCreator: CustomerActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _paymentProviderCustomerActionCreator: PaymentProviderCustomerActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _paymentStrategyWidgetActionCreator: PaymentStrategyWidgetActionCreator,\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\n    }\n\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\n        const checkoutId = this._storeProjection.getState().getCheckoutOrThrow().id;\n\n        return this._hostedFormFactory.create(host, options, checkoutId);\n    }\n\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async initializeOffsitePayment(\n        initializeOffsitePaymentConfig: InitializeOffsitePaymentConfig,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.initializeOffsitePayment(initializeOffsitePaymentConfig),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(id?: string): Promise<PaymentIntegrationSelectors> {\n        if (id) {\n            await this._store.dispatch(this._checkoutActionCreator.loadCheckout(id));\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethods(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethods(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signOutCustomer(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async createBuyNowCart(\n        buyNowCartRequestBody: BuyNowCartRequestBody,\n        options?: RequestOptions,\n    ): Promise<Cart> {\n        const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n            buyNowCartRequestBody,\n            options,\n        );\n\n        return buyNowCart;\n    }\n\n    async applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async applyCoupon(\n        coupon: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._couponActionCreator.applyCoupon(coupon, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async removeCoupon(\n        coupon: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._couponActionCreator.removeCoupon(coupon, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async verifyCheckoutSpamProtection(): Promise<PaymentIntegrationSelectors> {\n        const { checkout } = this._store.getState();\n        const { shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\n\n        if (shouldExecuteSpamCheck) {\n            await this._store.dispatch(\n                this._spamProtectionActionCreator.verifyCheckoutSpamProtection(),\n            );\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCurrentOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.loadCurrentOrder(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async updatePaymentProviderCustomer(\n        paymentProviderCustomer: PaymentProviderCustomer,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentProviderCustomerActionCreator.updatePaymentProviderCustomer(\n                paymentProviderCustomer,\n            ),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadShippingCountries(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._shippingCountryActionCreator.loadCountries(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.deleteConsignment(consignmentId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(methodId, params, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async forgetCheckout(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.forgetCheckout(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async remoteCheckoutSignOut(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._remoteCheckoutActionCreator.signOut(methodId, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async validateCheckout(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        await this._checkoutValidator.validate(checkout, options);\n    }\n\n    async handlePaymentHumanVerification(\n        errorOrId: Error | string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this._paymentHumanVerificationHandler.handle(errorOrId, key ?? '');\n        }\n\n        return this._paymentHumanVerificationHandler.handle(errorOrId);\n    }\n\n    async widgetInteraction(\n        callback: () => Promise<unknown>,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentStrategyWidgetActionCreator.widgetInteraction(callback),\n            { queueId: 'widgetInteraction' },\n        );\n\n        return this._storeProjection.getState();\n    }\n}\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors,\n        ) => PaymentIntegrationSelectors,\n    ) {}\n\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nconst getUniqId = (idPrefix?: string): string => {\n    const id = uniqueId(idPrefix);\n\n    return document.getElementById(id) ? getUniqId(idPrefix) : id;\n};\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(\n            `Unable to find any element with the specified selector: ${selector}`,\n        );\n    }\n\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\n        if (!container.id) {\n            container.id = getUniqId(idPrefix);\n        }\n\n        return container.id;\n    });\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap,\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if (\n                    (args.length === 0 || index === args.length - 1) &&\n                    isTerminalCacheKeyMap(map)\n                ) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\n        args: any[],\n    ): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CacheKeyResolver, isEqual, isPrivate } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            selectorMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe((state) => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            (state) => state.checkoutButton.getState(),\n            ...filters.map(\n                (filter) => (state: InternalCheckoutSelectors) =>\n                    filter(createCheckoutButtonSelectors(state)),\n            ),\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId)\n            ? [options.containerId]\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map((containerId) => {\n                const action = this._buttonStrategyActionCreator.initialize({\n                    ...options,\n                    containerId,\n                });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            }),\n        ).then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions,\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\n            ) {\n                return empty();\n            }\n\n            const paymentMethodRequestParams = options.currencyCode\n                ? { params: { currencyCode: options.currencyCode } }\n                : {};\n\n            const paymentMethodRequestOptions = {\n                ...paymentMethodRequestParams,\n                timeout: options.timeout,\n                useCache: true,\n            };\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    paymentMethodRequestOptions,\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions,\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta,\n                    ),\n                ),\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType,\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken,\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\n        }\n    }\n\n    getFactory(token: string): Factory<T> | undefined {\n        const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n        const factory = resolvedToken ? this._factories[resolvedToken] : undefined;\n\n        return factory;\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this.getFactory(token);\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n}\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window,\n    ) {}\n\n    async load({\n        useMasterpassSrc,\n        language,\n        testMode,\n        checkoutId,\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\n\n            const sourceUrl = [\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n                params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n        }\n\n        await this._scriptLoader.loadScript(\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\n        );\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n        };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: [\n        'en_us',\n        'en_gb',\n        'en_ca',\n        'en_es',\n        'en_fr',\n        'en_ie',\n        'en_sg',\n        'en_au',\n        'en_nz',\n        'en_my',\n        'en_hk',\n        'en_th',\n        'en_ae',\n        'en_sa',\n        'en_qa',\n        'en_kw',\n        'en_za',\n    ],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca'],\n};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: 'text' | 'flex';\n    logo?: {\n        type: 'none' | 'inline' | 'primary';\n    };\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onClick?(): void;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    Masterpass,\n    MasterpassCheckoutOptions,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalScriptLoader,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = '',\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n        ));\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader\n            .loadPaypal(paymentMethod.config.merchantId)\n            .then((paypal) => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render(\n                    {\n                        env,\n                        client: clientToken,\n                        commit: paypalOptions.shouldProcessPayment,\n                        funding: {\n                            allowed: allowedSources,\n                            disallowed: disallowedSources,\n                        },\n                        style: {\n                            shape: PaypalButtonStyleShapeOption.RECT,\n                            ...pick(\n                                paypalOptions.style,\n                                'layout',\n                                'color',\n                                'label',\n                                'shape',\n                                'tagline',\n                                'fundingicons',\n                            ),\n                            size:\n                                paymentMethod.id === 'paypalexpress' &&\n                                paypalOptions.style?.size === 'small'\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\n                                    : paypalOptions.style?.size,\n                        },\n                        payment: (_, actions) =>\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                        onAuthorize: (data, actions) =>\n                            this._tokenizePayment(\n                                data,\n                                actions,\n                                paypalOptions.shouldProcessPayment,\n                                paypalOptions.onAuthorizeError,\n                            ),\n                    },\n                    options.containerId,\n                );\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(\n                    `${this._host}/api/storefront/payment/paypalexpress`,\n                    { merchantId, cartId },\n                    {\n                        headers: {\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                            ...SDK_VERSION_HEADERS,\n                        },\n                    },\n                );\n            })\n            .then((res) => res.id)\n            .catch((error) => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then((payload) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n): module is ResolvableModule<TModule, TIdentifier> {\n    return module && 'resolveIds' in module;\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\ntype keys = 'log' | 'info' | 'warn' | 'error' | 'debug';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(private _console?: Console) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keys, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { getDefaultLogger } from '../log';\nimport { getEnvironment } from '../utility';\n\nimport Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor(private _useFallback = false) {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: this._useFallback,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    getFactory(resolveId: TToken): Factory<TType> | undefined {\n        try {\n            return this._registry.getFactory(this._encodeToken(resolveId));\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n\n        const results: Array<{ token: string; matches: number; default: boolean }> = [];\n\n        registeredTokens.forEach((registeredToken) => {\n            const resolverId = this._decodeToken(registeredToken);\n\n            const result = { token: registeredToken, matches: 0, default: false };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] !== value) {\n                    result.matches = 0;\n                    break;\n                }\n\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n\n                if (key === 'default' && value === true) {\n                    result.default = true;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matchedResults = results\n            .sort((a, b) => b.matches - a.matches)\n            .filter((result) => result.matches > 0);\n\n        if (matchedResults.length > 1 && matchedResults[0].matches === matchedResults[1].matches) {\n            if (getEnvironment() === 'development') {\n                getDefaultLogger().warn(\n                    'The provided query matches at least two strategies with the same specificity. This warning can be resolved by making their resolve ID more specific.',\n                );\n            }\n        }\n\n        const matched = matchedResults[0];\n\n        if (matched && matched.token) {\n            return matched.token;\n        }\n\n        if (this._useFallback) {\n            const defaultToken = results.find((result) => result.default)?.token;\n\n            if (defaultToken) {\n                return defaultToken;\n            }\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { ConfigState } from '../config';\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions,\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n\n    const config: ConfigState = {\n        meta: {\n            host: options?.host,\n            locale: options?.locale,\n        },\n        errors: {},\n        statuses: {},\n    };\n\n    const store = createCheckoutStore({ config });\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(\n        paymentIntegrationService,\n        defaultCheckoutButtonStrategyFactories,\n        // TODO: Replace once CHECKOUT-9450.lazy_load_payment_strategies experiment is rolled out\n        // process.env.ESSENTIAL_BUILD ? {} : defaultCheckoutButtonStrategyFactories,\n    );\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, locale, host),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        ),\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories,\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories,\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService),\n            );\n        }\n    }\n\n    return registry;\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport CouponActionCreator from '../coupon/coupon-action-creator';\nimport CouponRequestSender from '../coupon/coupon-request-sender';\nimport { CustomerActionCreator, CustomerRequestSender } from '../customer';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { PaymentProviderCustomerActionCreator } from '../payment-provider-customer';\nimport PaymentStrategyWidgetActionCreator from '../payment/payment-strategy-widget-action-creator';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport {\n    ConsignmentActionCreator,\n    ConsignmentRequestSender,\n    ShippingCountryActionCreator,\n    ShippingCountryRequestSender,\n} from '../shipping';\nimport {\n    createSpamProtection,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore,\n): PaymentIntegrationService {\n    const {\n        config: { getHost, getLocale },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors,\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const checkoutValidator = new CheckoutValidator(new CheckoutRequestSender(requestSender));\n\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(\n        createSpamProtection(createScriptLoader()),\n    );\n\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        new SpamProtectionActionCreator(\n            createSpamProtection(createScriptLoader()),\n            new SpamProtectionRequestSender(requestSender),\n        ),\n    );\n\n    const storeCreditActionCreator = new StoreCreditActionCreator(\n        new StoreCreditRequestSender(requestSender),\n    );\n\n    const applyCouponActionCreator = new CouponActionCreator(\n        new CouponRequestSender(requestSender),\n    );\n\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        spamProtection,\n        spamProtectionRequestSender,\n    );\n\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    const paymentProviderCustomerActionCreator = new PaymentProviderCustomerActionCreator();\n\n    const shippingCountryActionCreator = new ShippingCountryActionCreator(\n        new ShippingCountryRequestSender(requestSender, { locale: getLocale() }),\n        store,\n    );\n\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender),\n        checkoutActionCreator,\n    );\n\n    const paymentStrategyWidgetActionCreator = new PaymentStrategyWidgetActionCreator();\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        checkoutValidator,\n        hostedFormFactory,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator,\n        paymentHumanVerificationHandler,\n        customerActionCreator,\n        cartRequestSender,\n        storeCreditActionCreator,\n        applyCouponActionCreator,\n        spamProtectionActionCreator,\n        paymentProviderCustomerActionCreator,\n        shippingCountryActionCreator,\n        remoteCheckoutActionCreator,\n        paymentStrategyWidgetActionCreator,\n    );\n}\n","// / <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        (state) => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        (state) => state.config.getStoreConfig(),\n    );\n\n    return paymentClient;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string,\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.MASTERPASS,\n        () =>\n            new MasterpassButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALEXPRESS,\n        () =>\n            new PaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n                formPoster,\n                host,\n            ),\n    );\n\n    return registry;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","RequestError","response","errors","PaymentMethodInvalidError","UnrecoverableError","joinErrors","reduce","result","error","join","mapFromPaymentErrorResponse","Array","isArray","TimeoutError","RequestErrorFactory","_factoryMethods","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","CheckoutHydrateActionType","ErrorActionType","SubscriptionsActionType","BillingAddressActionType","omitDeep","object","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","billingAddress","HydrateInitialState","checkout","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","a","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","CheckoutButtonActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","ConfigActionType","configReducer","LoadConfigSucceeded","config","LoadConfigFailed","LoadConfigRequested","OrderActionType","couponReducer","LoadOrderSucceeded","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerActionType","customerReducer","customer","CreateCustomerAddressSucceeded","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","CustomerStrategyActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeErrors","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","ExtensionActionType","extensionReducer","LoadExtensionsSucceeded","extensions","LoadExtensionsRequested","RenderExtensionRequested","RenderExtensionSucceeded","LoadExtensionsFailed","RenderExtensionFailed","FormFieldsActionType","formFieldsReducer","LoadFormFieldsSucceeded","formFields","LoadFormFieldsFailed","LoadFormFieldsRequested","CountryActionType","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","orderBillingAddressReducer","PaymentActionType","PaymentMethodActionType","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","derivedPredicate","pickBy","findIndex","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","PaymentStrategyActionType","paymentStrategyReducer","gatewayId","initializeError","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","PaymentProviderCustomerType","paymentProviderCustomerReducer","UpdatePaymentProviderCustomer","InstrumentActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","RemoteCheckoutActionType","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","objectWithSortedKeys","sort","previous","current","PickupOptionActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingCountryActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","ShippingStrategyActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","SignInEmailActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","StoreCreditActionType","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","subscriptionsReducer","SpamProtectionActionType","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingPaymentProviderCustomer","MissingShippingAddress","getErrorMessage","creator","args","combiner","pop","combinerArgs","guard","errorFactory","createFreezeProxy","target","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","trap","createProxy","provider","method","barclays","braintree","braintreepaypal","braintreeach","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","bluesnapv2","orbital","paymetric","bolt","moneris","cba_mpgs","worldpayaccess","squarev2","paypalcommercecreditcards","paypalcommerce","bigcommerce_payments_creditcards","bigcommerce_payments","tdonlinemart","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","createBillingAddressSelector","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","continueAsGuestError","getLoadError","loadError","isContinuingAsGuest","isLoading","memoizeOne","createBillingAddressSelectorFactory","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","getState","some","getInitializeError","find","values","getDeinitializeError","createCheckoutButtonSelectorFactory","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","customerAccount","shippingAddress","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","getCoupons","getRemoveError","removeCouponError","getApplyError","applyCouponError","isApplying","isApplyingCoupon","isRemoving","isRemovingCoupon","createCouponSelectorFactory","createCustomerSelector","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","isCreating","getCreateAddressError","createAddressError","isCreatingCustomerAddress","isCreatingAddress","createCustomerSelectorFactory","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","field","processField","getBillingAddressFields","getCustomerAccountFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","query","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createPaymentProviderCustomerSelector","getPaymentProviderCustomer","getPaymentProviderCustomerOrThrow","createPaymentProviderCustomerSelectorFactory","createRemoteCheckoutSelector","getCheckout","createRemoteCheckoutSelectorFactory","createShippingAddressSelector","getShippingAddress","shippingConsignment","consignment","selectedPickupOption","getShippingAddressOrThrow","getShippingAddresses","shippingConsignments","getShippingAddressesOrThrow","createShippingAddressSelectorFactory","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","isAddressEqual","addressA","addressB","isEqual","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderBillingAddress","getOrderOrThrow","getOrderMeta","getPaymentId","payments","currentPayment","providerId","paymentId","createOrderSelectorFactory","createOrderBillingAddressSelector","createOrderBillingAddressSelectorFactory","createPaymentSelector","getInternalPayment","getGatewayPayment","getHostedPayment","providerType","internalPayment","getPaymentIdOrThrow","MissingPaymentId","getPaymentStatus","step","getPaymentStatusOrThrow","MissingPaymentStatus","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","redirectUrl","getPaymentRedirectUrlOrThrow","MissingPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","nonce","createPaymentSelectorFactory","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","getEmail","signInEmail","getSendError","sendError","isSending","createSignInEmailSelectorFactory","createExtensionSelector","getExtensions","getExtensionByRegion","region","e","createExtensionSelectorFactory","checkoutButton","customerStrategies","form","orderBillingAddress","paymentProviderCustomer","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","shouldWarnMutation","createFreezeProxies","createCheckoutStore","initialStoreState","actionTransformer","requestErrorFactory","factory","createRequestErrorFactory","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","NotInitializedErrorType","getShippableItemsCount","addedByPromotion","total","quantity","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","amazonPayV2Regions","de","jp","uk","us","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","AmazonPayV2ButtonDesign","AmazonPayV2PaymentProcessor","amazonPayV2ScriptLoader","initialize","amazonPayV2SDK","load","buttonParentContainer","createAmazonPayButtonParentContainer","deinitialize","amazonPayV2Button","remove","Promise","resolve","bindButton","buttonId","sessionId","changeAction","getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","prepareRequestConfig","getAmazonPayV2Button","onClick","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","estimatedOrderAmount","productType","signout","renderAmazonPayButton","buttonColor","checkoutState","decoupleCheckoutInitiation","placement","isButtonMicroTextDisabled","container","document","querySelector","parentContainerId","appendChild","getButtonParentContainer","design","C0001","amazonPayV2ButtonOptions","getAmazonPayV2ButtonOptions","updateBuyNowFlowFlag","isBuyNowFlow","isPh4Enabled","features","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","isEnvironmentSpecific","uid","random","substr","parentContainer","createElement","Gold","getCheckoutState","merchantId","testMode","initializationData","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","sandbox","PayOnly","PayAndShip","checkoutSettings","storeProfile","shopPath","amount","currencyCode","currency","buttonOptions","tmpConfig","createCheckoutSession","url","test","getOrThrow","checkoutSelectors","PaymentMethodClientUnavailableError","AmazonPayV2ScriptLoader","scriptLoader","windowWithAmazonPay","window","amazonPayV2Region","loadScript","amazon","toResolvableModule","module","resolveIds","InvalidArgumentError","BuyNowCartCreationError","AmazonPayV2ConfigCreationError","isWithBuyNowFeatures","AmazonPayV2ButtonStrategy","paymentIntegrationService","amazonPayV2PaymentProcessor","amazonPayV2ConfigRequestSender","amazonpay","loadDefaultCheckout","initializeAmazonButtonOptions","buyNowInitializeOptions","getBuyNowCartRequestBody","_buyNowInitializeOptions","Cart","_getCheckoutCreationRequestConfig","bind","_createBuyNowCartOrThrow","buyNowCartRequestBody","createBuyNowCart","_createCheckoutConfig","public_key","rest","payloadJSON","buyNowCart","String","baseAmount","INTERNAL_USE_ONLY","ContentType","SDK_VERSION_HEADERS","AmazonPayV2RequestSender","_requestSender","cartId","Json","post","requestSender","createRequestSender","amazonPayV2RequestSender","getScriptLoader","isExperimentEnabled","experimentName","fallbackValue","BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BraintreeSDKVersionManager","braintreeWindow","getSDKVersion","getPreloadedSDKVersion","preloadedVersion","VERSION","UnsupportedBrowserError","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","isBraintreeError","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BraintreeSdk","braintreeScriptLoader","clientToken","setClientToken","teardownModule","dataCollector","getClient","client","getClientTokenOrThrow","clientCreator","loadClient","authorization","getDataCollectorOrThrow","emptyDataCollector","deviceData","teardown","loadDataCollector","dataCollectorConfig","kount","KountNotEnabled","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","all","loadGooglePayment","getBraintreeThreeDS","threeDS","threeDSecure","load3DS","version","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","loadLocalPayment","reject","getUsBankAccount","usBankAccount","loadUsBankAccount","getBraintreeVisaCheckout","visaCheckout","loadVisaCheckout","then","paypal","getVisaCheckoutSdk","visaCheckoutSDK","loadVisaCheckoutSdk","getVenmoCheckoutOrThrow","braintreeVenmo","venmoCheckout","loadVenmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","BRAINTREE_SDK_SCRIPTS_INTEGRITY","Client","PaypalCheckout","Paypal","LocalPayment","DataCollector","UsBankAccount","GooglePayment","ThreeDSecure","VisaCheckout","Venmo","HostedFields","Fastlane","ApplePayGatewayType","BraintreeScriptLoader","braintreeHostWindow","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadHostedFields","V","hash","async","attributes","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","moduleName","PaymentMethodCancelledError","DefaultLabels","ButtonStyleOption","ApplePayButtonStrategy","_paymentIntegrationService","_sessionFactory","_braintreeSdk","_applePayScriptLoader","_onAuthorizeCallback","noop","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","loadSdk","onPaymentAuthorize","requiresShipping","_requiresShipping","loadPaymentMethod","_paymentMethod","verifyCheckoutSpamProtection","BRAINTREE","_initializeBraintreeSdk","_applePayButton","_createButton","styleOption","addEventListener","_handleWalletButtonClick","getElementById","applePayButton","_createApplePayButtonElement","setAttribute","buttonStyle","White","WhiteBorder","Black","getButtonStyle","event","preventDefault","merchantCapabilities","supportedNetworks","storeName","request","_getRequestWithEmptyTotal","requiredShippingContactFields","applePaySession","_handleApplePayEvents","begin","_getBaseRequest","requiredBillingContactFields","decimalPlaces","toFixed","subtotal","taxes","tax","onvalidatemerchant","merchantSession","_onValidateMerchant","completeMerchantValidation","onpaymentmethodselected","_createBuyNowCart","_handlePaymentMethodSelected","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","loadCheckout","onpaymentauthorized","_onPaymentAuthorized","cartRequestBody","shouldExecuteSpamCheck","completePaymentMethodSelection","newTotal","newLineItems","_transformContactToAddress","shippingContact","updateShippingAddress","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","option","shippingOptions","description","cost","additionalDescription","identifier","isRecommended","completeShippingContactSelection","ApplePaySession","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","_getUpdatedLineItems","shippingMethod","completeShippingMethodSelection","shippingCostTotal","selectShippingOption","paymentData","validationURL","location","hostname","paymentsUrl","credentials","Accept","billingContact","deviceSessionId","_getBraintreeDeviceData","formattedPayload","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","phoneNumber","updateBillingAddress","email","submitOrder","submitPayment","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","locality","addressLines","administrativeArea","stateOrProvinceCode","braintreePaymentMethod","assertApplePayWindow","isApplePayWindow","ApplePaySessionFactory","ApplePayScriptLoader","sdkVersion","ScriptLoader","CartSource","LiabilityShiftEnum","BigCommercePaymentsIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","NonInstantAlternativePaymentMethods","PayPalOrderStatus","BigCommercePaymentsIntegrationService","formPoster","bigCommercePaymentsRequestSender","bigCommercePaymentsScriptLoader","loadPayPalSdk","providedCurrencyCode","initializesOnCheckoutPage","forceLoad","paypalSdk","getPayPalSDK","getPayPalSdkOrThrow","createBuyNowCartOrThrow","createOrder","requestBody","createOrderCardFields","setupToken","updateOrder","_error","getOrderStatus","tokenizePayment","postForm","payment_type","order_id","source","BuyNow","cart_id","vault_payment_instrument","set_as_default_stored_instrument","device_info","method_id","paypal_account","getShippingOptionOrThrow","selectedShippingOptionId","recommendedShippingOption","shippingOptionToSelect","getAddress","getBillingAddressFromOrderDetails","payer","given_name","surname","email_address","address_line_1","address_line_2","admin_area_2","country_code","postal_code","admin_area_1","phone_number","national_number","getShippingAddressFromOrderDetails","orderDetails","purchase_units","full_name","getValidButtonStyle","style","color","height","shape","validStyles","getValidHeight","isNil","removeElement","elementId","element","display","BigCommercePaymentsRequestSender","put","BigCommercePaymentsScriptLoader","paypalSdkScriptConfig","getPayPalSdkScriptConfigOrThrow","loadPayPalSDK","transformConfig","scriptSrc","URLSearchParams","clientId","intent","buyerCountry","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isPayPalCreditAvailable","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","isGooglePayEnabled","commit","shouldEnableCard","enableCardFunding","enableCreditFunding","shouldEnableAPMs","enableVenmoFunding","enableAPMsFunding","googlePayComponent","cardFieldsComponent","disableFunding","apm","includes","enableFunding","components","transformedConfig","createFormPoster","BigCommercePaymentsButtonStrategy","bigCommercePaymentsIntegrationService","onComplete","onEligibilityFailure","defaultCallbacks","onApprove","orderID","buyNowFlowCallbacks","handleClick","onCancel","hostedCheckoutCallbacks","onShippingAddressChange","onShippingOptionsChange","actions","onHostedCheckoutApprove","buttonRenderOptions","fundingSource","FUNDING","PAYPAL","paypalButton","Buttons","isEligible","render","params","shippingOption","PayPalSdkHelper","getPayPalFastlaneSdk","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","getPayPalGooglePaySdk","paypalGooglePay","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","scriptOptions","scriptAttributes","disableAPMsFunding","styles","messagesStyles","layout","logo","position","ratio","text","size","BigCommercePaymentsPayLaterButtonStrategy","payPalSdkHelper","bigcommerce_payments_paylater","messagingContainerId","messagingContainer","paypalBNPLConfiguration","bannerConfiguration","removeAttribute","renderMessages","bigCommercePaymentsSdk","fundingSources","PAYLATER","CREDIT","hasRenderedSmartButton","paypalMessagesSdk","paypalMessagesOptions","Messages","createScriptLoader","BigCommercePaymentsAlternativeMethodsButtonStrategy","bigcommerce_payments_apms","paypalButtonRender","BigCommercePaymentsVenmoButtonStrategy","bigcommerce_payments_venmo","VENMO","getValidVenmoButtonStyles","validButtonStyle","gold","NotImplementedError","BoltDeveloperMode","StyleButtonSize","BoltButtonStrategy","boltScriptLoader","boltHostWindow","storefrontApiToken","publishableKey","developerConfig","loadBoltClient","BoltConnect","setupProductPageCheckout","addButtonContainer","boltButtonContainer","boltButtonObject","getBoltObjectData","append","innerHTML","domainUrl","getDomainURL","buttonHeight","getButtonHeight","buttonBorderRadius","getButtonBorderRadius","stringifyUrl","publishable_key","variant","border_radius","buttonSize","Small","Large","Medium","buttonShape","Pill","round","Rect","BoltScriptLoader","developerModeParams","BoltCheckout","getScriptOptions","loadBoltEmbedded","Bolt","developerMode","StagingMode","DevelopmentMode","developerDomain","PaymentArgumentInvalidError","invalidFields","PaymentInvalidFormError","details","CancellablePromise","promise","cancellable","cancel","race","PAYPAL_COMPONENTS","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","MessagingPlacements","BraintreeIntegrationService","overlay","dataCollectors","threeDSecureOptions","getBraintreeFastlane","cardId","isTestModeEnabled","localStorage","setItem","braintreeFastlane","getSessionId","braintreeFastlaneCreator","defaultStyles","root","backgroundColorPrimary","getPaypal","braintreePaypal","shouldSaveInstrument","newWindowFlow","supportsPopups","show","focusWindow","tokenize","enableShippingAddress","flow","useraction","catch","getPaypalCheckout","onSuccess","onError","paypalCheckout","paypalCheckoutConfig","braintreePaypalCheckout","paypalSdkLoadConfig","isCreditEnabled","getDataCollector","cacheKey","cached","getBraintreeEnv","isTestMode","Sandbox","Production","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","mapToLegacyShippingAddress","first_name","last_name","mapToLegacyBillingAddress","riskCorrelationId","get3DS","getVenmoCheckout","venmoConfig","verifyCard","tokenizationPayload","tokenizeCard","challenge3DSVerification","creditCardInstrument","ccExpiry","ccNumber","ccName","isCreditCardInstrumentLike","getErrorsRequiredFields","isEmpty","requestData","mapToCreditCard","creditCards","bin","present3DSChallenge","creditCard","cardholderName","number","cvv","ccCvv","expirationDate","month","year","validate","countryCodeAlpha2","countryName","streetAddress","endpoint","addFrame","removeFrame","challengeRequested","additionalInformation","cancelVerifyCard","verification","roundedAmount","iframe","Number","onLookupComplete","_data","next","collectDeviceData","fundingicons","tagline","currentHeight","isNaN","BraintreePaypalButtonStrategy","braintreeIntegrationService","paypalCheckoutOptions","renderPayPalButton","handleError","shouldProcessPayment","onAuthorizeError","env","setupPayment","authorizeData","onPaymentError","buyNowCartId","cartAmount","addresses","shippingAddressOverride","createPayment","shippingAddressEditable","offerCredit","tokenizePayload","device_data","billing_address","shipping_address","buyNowCardRequestBody","buttonContainerId","onErrorCallback","BraintreeMessages","bannedId","PAYMENT","CART","getPaypalMessagesStylesFromBNPLConfig","BraintreePaypalCreditButtonStrategy","braintreeMessages","braintreepaypalcredit","isBannerImplementationDisabled","renderPayPalMessages","BraintreeVisaCheckoutButtonStrategy","braintreeSdk","braintreeVisaCheckout","visaCheckoutInstance","initOptions","createInitOptions","paymentRequest","settings","collectShipping","createSignInButton","init","on","paymentSuccess","toVisaCheckoutAddress","userData","cardInformation","userEmail","card_information","cardType","lastTwo","extendedAddress","insertVisaCheckoutButton","visaCheckoutButton","flexDirection","alignItems","hostWindow","getVenmoButtonStyle","backgroundColor","c","WHITE","backgroundPosition","backgroundSize","backgroundImage","BLUE","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","width","border","BraintreeVenmoButtonStrategy","braintreevenmo","paymentButtonStyles","cartButtonStyles","renderVenmoButton","isUnsupportedBrowserError","handleInitializationVenmoError","removeVenmoContainer","buttonContainer","buttonStyles","venmoButton","buyBowCart","handlePostForm","GooglePayKey","descriptor","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","set","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","integerAmount","decimalAmount","_toFixed","parsedIntegerAmount","toLowerCase","precision","CurrencyService","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","PayPalCommerceIntent","GooglePayCardNetwork","CallbackIntentsType","ErrorReasonType","CallbackTriggerType","isGooglePayCardNetworkKey","GooglePayGateway","_gatewayIdentifier","_isBuyNowFlow","mapToShippingAddressRequestBody","_mapToAddressRequestBody","mapToBillingAddressRequestBody","paymentMethodData","info","mapToExternalCheckoutData","tokenizationData","cardNetwork","cardDetails","getRequiredData","emailRequired","_isShippingAddressRequired","loadShippingCountries","allowedCountryCodes","shippingAddressRequired","shippingAddressParameters","phoneNumberRequired","shippingOptionRequired","getCallbackIntents","OFFER","SHIPPING_ADDRESS","SHIPPING_OPTION","getCallbackTriggers","isGooglePayCouponsExperimentOn","availableTriggers","INITIALIZE","initializationTrigger","addressChangeTriggers","shippingOptionsChangeTriggers","offerChangeTriggers","getNonce","extraPaymentData","getMerchantInfo","googleMerchantName","merchantName","googleMerchantId","platformToken","authJwt","getGooglePayInitializationData","getTransactionInfo","_getCurrencyCodeOrThrow","storeCountry","totalPriceStatus","ESTIMATED","totalPrice","getPaymentGatewayParameters","gatewayMerchantId","getCardParameters","allowedAuthMethods","allowedCardNetworks","supportedCards","billingAddressRequired","billingAddressParameters","_getPaymentMethodFn","_currencyCode","handleShippingAddressChange","mappedShippingAddress","_currencyService","_getGooglePayShippingOption","handleShippingOptionChange","defaultSelectedOptionId","getTotalPrice","handleCoupons","offerData","redemptionCodes","newCouponsState","offers","appliedCoupons","getAppliedCoupons","redemptionCode","appliedCouponError","applyCoupon","coupon","removeCoupon","newOfferInfo","displayName","reason","OFFER_INVALID","getGatewayIdentifier","setGatewayIdentifier","lineItem","isShippingRequired","customItems","address3","_getFirstAndLastName","trim","fullName","nameParts","slice","formattedCost","GooglePayBraintreeGateway","service","_methodId","_service","_braintreeGooglePayment","isThreeDSecureEnabled","isNetworkTokenized","orderAmount","_braintreePresent3DSChallenge","parse","isGooglePayBraintreeTokenObject","assertIsGooglePayBraintreeTokenObject","androidPayCards","createPaymentDataRequest","merchantInfo","transactionInfo","cardRequirements","billingAddressFormat","paymentMethodTokenizationParameters","parameters","PaymentMethodFailedError","GooglePayButtonStrategy","_googlePayPaymentProcessor","googlePayOptions","_getMethodOrThrow","buttonType","_e","_countryCode","_getGooglePayClientOptions","_paymentButton","addPaymentButton","_handleClick","initializeWidget","_interactWithPaymentSheet","err","isGooglePayErrorObject","statusCode","showPaymentSheet","siteLink","pathname","links","_buyNowCart","digitalItems","setExternalCheckoutForm","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","shippingOptionData","couponsError","_getBuyNowTransactionInfo","_getTransactionInfo","newTransactionInfo","FINAL","newShippingOptionParameters","GooglePayPaymentProcessor","_scriptLoader","_gateway","_formPoster","_baseRequest","apiVersion","apiVersionMinor","googlePayPaymentOptions","_paymentsClient","getGooglePaymentsClient","_buildButtonPayloads","_buildWidgetPayloads","_determineReadinessToPay","_prefetchGooglePaymentData","paymentButton","_getPaymentsClient","allowedPaymentMethods","_getBaseCardPaymentMethod","paymentDataRequest","_getPaymentDataRequest","loadPaymentData","setExternalCheckoutXhr","_setExternalCheckout","processAdditionalAction","signOut","useFormPoster","prefetchPaymentData","isReadyToPay","_getIsReadyToPayRequest","_baseCardPaymentMethod","baseCardPaymentMethod","_cardPaymentMethod","tokenizationSpecification","_paymentDataRequest","callbackIntents","offerInfo","_isReadyToPayRequest","_getOrThrow","GooglePayScriptLoader","_window","google","api","PaymentsClient","environment","createGooglePayScriptLoader","PayPalCommerceSdk","assertsIsGooglePayPayPalCommercePaymentMethod","isGooglePayPaypalCommercePaymentMethod","GooglePayPaypalCommerceGateway","payPalCommerceSdk","googlePaySdk","googlepayConfig","Googlepay","GooglePayBigCommercePaymentsGateway","GooglePayAuthorizeNetGateway","isGooglePayAuthorizeNetInitializationData","assertsIsGooglePayAuthorizeNetInitializationData","paymentGatewayId","assertIsGooglePayCheckoutComInitializationData","isGooglePayCheckoutComInitializationData","GooglePayCheckoutComGateway","_resolve","threeDSBody","three_ds_result","acs_url","isGooglePayThreeDSecureResult","isGooglePayTokenObject","assertIsGooglePayTokenObject","_tokenize","checkoutcomkey","token_data","Authorization","GooglePayCybersourceGateway","GooglePayOrbitalGateway","assertsIsGooglePayStripeInitializationData","isGooglePayStripeInitializationData","GooglePayStripeGateway","isGooglePayStripeTokenObject","assertIsGooglePayStripeTokenObject","stripeVersion","stripePublishableKey","stripeConnectedAccount","isStripeGooglePay3dsExperimentIsOn","stripeUPEClient","loadStripeJs","clientSecret","catchedConfirmError","confirmCardPayment","retrievePaymentIntent","__","_throwDisplayableStripeError","_isCancellationError","paymentIntent","getStripeClient","stripeError","payment_intent","last_payment_error","StripeUPEScriptLoader","stripeWindow","stripeAccount","stripeClient","bcStripeClient","betas","Stripe","GooglePayWorldpayAccessGateway","getBrowserInfo","navigator","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","screen_width","time_zone_offset","getTimezoneOffset","GooglePayTdOnlineMartGateway","browser_info","errorBody","isObject","isTdOnlineMartAdditionalAction","threeDSResult","formUrl","payer_auth_request","threeDSSessionData","merchant_data","creq","PayPalCommerceIntegrationService","paypalCommerceRequestSender","paypalCommerceScriptLoader","PayPalCommerceRequestSender","PayPalCommerceScriptLoader","PayPalCommerceButtonStrategy","paypalCommerceIntegrationService","isAppSwitchEnabled","isPaypalCommerceAppSwitchEnabled","appSwitchWhenAvailable","hasReturned","resume","PayPalCommerceCreditButtonStrategy","paypalCommerceSdk","paypalcommercecredit","PayPalCommerceVenmoButtonStrategy","paypalcommercevenmo","PayPalCommerceAlternativeMethodsButtonStrategy","paypalcommercealternativemethods","PaymentStatusTypes","PaypalButtonStrategy","paypalExpressScriptLoader","paypalSDK","loadPaypalSDK","allowCredit","fundingCreditOption","allowedSources","disallowedSources","Button","funding","allowed","disallowed","getStyle","onAuthorize","RECT","RESPONSIVE","CheckoutButtonNotInitialized","paymentID","payerID","getPaymentData","payerId","payerInfo","payer_info","PaypalScriptLoader","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","lastArg","useCache","param","instanceMethods","fn","Observable","shareReplay","store","isPaymentMethod","PaymentMethodActionCreator","loadPaymentMethodsById","methodIds","observer","createAction","complete","loadPaymentMethods","sessionHash","methods","createErrorAction","PaymentMethodRequestSender","timeout","JsonV1","throwErrorAction","of","throwError","UnableToContinueAsGuestError","BillingAddressActionCreator","_subscriptionActionCreator","continueAsGuest","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","hasBillingAddress","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","EmptyCartError","DEFAULT_PARAMS","include","BillingAddressRequestSender","CartRequestSender","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadConfig","loadFormFields","_transformCustomerAddresses","updateCheckout","loadCurrentCheckout","hydrateInitialState","shouldSaveAddress","joinIncludes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","additions","difference","mergeIncludes","CheckoutNotAvailableError","CheckoutRequestSender","CartComparator","cartA","cartB","_normalize","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","recipient","giftWrapping","CartChangedError","updated","CheckoutValidator","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","CheckoutIncludes","ConfigActionCreator","_configRequestSender","ConfigRequestSender","CouponActionCreator","_couponRequestSender","CouponRequestSender","couponCode","AvailableShippingOptions","delete","isSpamProtectionExecuteSucceededAction","succeededAction","CustomerActionCreator","_customerRequestSender","_checkoutActionCreator","_spamProtectionActionCreator","createCustomer","isStorefrontSpamProtectionEnabled","createAccount","switchMap","execute","customerAddress","signInCustomer","SignInCustomerRequested","persistentCartRetrievalInformation","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","FormFieldsActionCreator","_formFieldsRequestSender","loadFields","FormFieldsRequestSender","UnexpectedDetachmentError","DetachmentObserver","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","node","contains","observe","childList","subtree","output","disconnect","MutationObserverFactory","callback","MutationObserver","parseUrl","anchor","href","port","origin","protocol","search","isIframeEvent","IframeEventPoster","targetOrigin","_targetWindow","_context","_targetOrigin","targetWindow","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","setContext","IframeEventListener","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","messageEvent","SpamProtectionChallengeNotCompletedError","CardingProtectionChallengeNotCompletedError","CardingProtectionFailedError","HostedFieldEventType","HostedInputEventType","PaymentHumanVerificationHandler","_googleRecaptcha","handle","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","human_verification_token","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","parentNode","removeChild","SpamProtectionFailedError","SpamProtectionNotLoadedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","event$","Subject","_widgetId","getResponse","reset","_event$","_recaptcha","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","visibility","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","callbackName","grecaptcha","createSpamProtection","InvalidHostedFormConfigError","InvalidHostedFormError","InvalidHostedFormValueError","fieldErrors","HostedField","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_checkoutId","_cardInstrument","_iframe","src","overflow","getType","attach","contentWindow","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","AttachSucceeded","AttachFailed","detach","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","submitStoredCardForm","StoredCardRequested","StoredCardSucceeded","StoredCardFailed","validateForm","ValidateRequested","Validated","isValid","querySelectorAll","link","fontFamily","family","HostedForm","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","onEnter","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","BinChanged","_bin","getBin","getCardType","_getFirstField","otherFields","without","otherField","submit","additionalActionData","additionalAction","submitStoredCard","isVaultedInstrument","HostedFormOrderDataTransformer","_store","instrumentMeta","orderMeta","paymentMethodMeta","authToken","vaultAccessToken","HostedFormFactory","fieldOptions","_getCardInstrument","SpamProtectionNotCompletedError","OrderActionCreator","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","checkoutVariant","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","CartConsistencyError","OrderTaxProviderUnavailableError","MissingShippingMethodError","InvalidShippingAddressError","OrderRequestSender","PaymentActionCreator","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","initializeOffsitePayment","shouldSetAsDefaultInstrument","bigpay_token","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","SubmitPaymentRequested","SubmitPaymentFailed","PaymentRequestSender","_client","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","AmountTransformer","toInteger","couponTypes","mapToInternalCoupon","discount","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToDiscountNotifications","promotions","notifications","promotion","banners","banner","placeholders","messageHtml","mapToInternalLineItems","itemMap","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","sum","discountNotifications","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","taxSubtotal","taxTotal","handling","handlingCostTotal","CheckoutButtonMethodType","mapToInternalCustomer","customerId","customerGroupName","customerGroup","CardExpiryFormatter","trimmedMonth","trimmedYear","toObject","CardNumberFormatter","maxLength","creditCardType","lengths","unformattedValue","unformat","gaps","gapIndex","mapToInternalOrder","customerCanBeCreated","mapToInternalOrderPayment","mapToGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","image","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","selected","transitTime","PaymentRequestTransformer","_cardExpiryFormatter","_cardNumberFormatter","_mapShippingAddress","contextConfig","paymentMeta","internalCustomer","formattedInstrument","isFormattedVaultedInstrument","_transformPaymentMethod","quoteMeta","geoCountryCode","transformWithHostedFormData","_transformHostedInputValues","BRAINTREE_VENMO","BRAINTREE_PAYPAL","cardCodeVerification","cardNumberVerification","hostedFormNonce","cardCode","cardExpiry","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","PaymentProviderCustomerActionCreator","updatePaymentProviderCustomer","providerCustomerData","PaymentStrategyWidgetActionCreator","widgetInteraction","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","initializeBilling","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","initializeShipping","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","initializePayment","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","loadSettings","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","forgetCheckout","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","RemoteCheckoutRequestSender","methodName","generateToken","trackAuthorizationEvent","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","consignmentInMemory","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","ConsignmentRequestSender","ShippingCountryActionCreator","_shippingCountryRequestSender","loadCountries","checkoutData","channelId","ShippingCountryRequestSender","_config","SpamProtectionActionCreator","spamProtectionElementId","spamProtectionElement","googleRecaptchaSitekey","VerifyCheckoutRequested","VerifyCheckoutFailed","SpamProtectionRequestSender","StoreCreditActionCreator","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","StoreCreditRequestSender","UpdateSubscriptionsError","SubscriptionsActionCreator","_subscriptionsRequestSender","SubscriptionsRequestSender","cloneDeep","memoize","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","ProjectionActionType","DefaultPaymentIntegrationService","_storeProjectionFactory","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_customerActionCreator","_cartRequestSender","_storeCreditActionCreator","_couponActionCreator","_paymentProviderCustomerActionCreator","_shippingCountryActionCreator","_remoteCheckoutActionCreator","_paymentStrategyWidgetActionCreator","_storeProjection","createHostedForm","subscribe","subscriber","filters","initializeOffsitePaymentConfig","dispatch","remoteCheckoutSignOut","validateCheckout","handlePaymentHumanVerification","queueId","PaymentIntegrationStoreProjectionFactory","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","getUniqId","idPrefix","uniqueId","isTerminalCacheKeyMap","CacheKeyResolver","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","getKey","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","selectorDecorator","resolver","memoizedMethod","cachedValue","isPrivate","selectorMethodDecorator","CheckoutButtonErrorSelector","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonInitializer","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","containers","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","_registryV2","paymentMethodRequestParams","paymentMethodRequestOptions","_getStrategy","strategy","Registry","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","getFactory","resolvedToken","_hasFactory","_hasInstance","MasterpassScriptLoader","useMasterpassSrc","sourceUrl","masterpass","supportedLocales","es","en","pt","zu","ar","zh","ms","sv","hr","pl","nl","it","fr","formatLocale","localeLanguage","formattedLocale","countryLocales","MasterpassButtonStrategy","_masterpassScriptLoader","_locale","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","_createSignInButton","button","subdomain","_createMasterpassPayload","allowedCardTypes","_paypalScriptLoader","_host","paypalOptions","_setupPayment","_tokenizePayment","res","_onError","isResolvableModule","getEnvironment","ConsoleLogger","_console","log","messages","_logToConsole","warn","debug","NoopLogger","logger","isEnabled","console","createLogger","ResolveIdRegistry","_resolveToken","resolveId","_encodeToken","_decodeToken","atob","registeredTokens","results","registeredToken","resolverId","matches","entries","matchedResults","matched","createCheckoutButtonInitializer","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","storeProjectionFactory","checkoutActionCreator","checkoutValidator","hostedFormFactory","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","paymentClient","setHost","paymentSettings","bigpayBaseUrl","createPaymentClient","paymentHumanVerificationHandler","customerActionCreator","storeCreditActionCreator","applyCouponActionCreator","spamProtection","spamProtectionRequestSender","spamProtectionActionCreator","cartRequestSender","paymentProviderCustomerActionCreator","shippingCountryActionCreator","remoteCheckoutActionCreator","paymentStrategyWidgetActionCreator","createPaymentIntegrationService","checkoutRequestSender","MASTERPASS","PAYPALEXPRESS","createCheckoutButtonRegistry"],"sourceRoot":""}