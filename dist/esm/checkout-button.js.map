{"version":3,"file":"checkout-button.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isInternalCheckoutSelectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/errors/amazon-pay-v2-config-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/isWithBuyNowFeatures.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/create-amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/create-bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/paypal-sdk-helper.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/create-bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/create-bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/paypal.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-credit-card-instrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-messages.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/isUnsupportedBrowserError.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/create-braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-initialize-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/bind-decorator/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-card-network-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/create-currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/items-require-shipping.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-braintree-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-braintree-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-error-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-additional-action-processable.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/create-google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-braintree-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-paypal-commerce-payment-method.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv3-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-authorizenet-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-authorizenet-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-authorizenet-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-checkoutcom-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-checkoutcom-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-threedsecure-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-checkoutcom-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-cybersource-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-cybersource-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-orbital-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-orbital-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/google-pay-stripe-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/stripe-upe-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-worldpayaccess-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-worldpayaccess-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-tdonlinemart-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-td-online-mart-additional-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-tdonlinemart-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/create-paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/create-paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/create-paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/is-spam-protection-succeeded-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-consistency-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/missing-shipping-method-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/invalid-shipping-address-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-actions-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-widget-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/get-environment.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/console-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/noop-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/get-default-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/create-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message:\n                message ||\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length\n            ? errors.map((message) => ({ code: body.type, message }))\n            : [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors\n        .reduce((result: string[], error) => {\n            if (error) {\n                return [...result, error];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport {\n    ErrorResponseBody,\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    mapFromInternalErrorResponse,\n    mapFromPaymentErrorResponse,\n    mapFromStorefrontErrorResponse,\n    RequestError,\n    TimeoutError,\n} from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) =>\n            mapFromInternalErrorResponse(response, message),\n        );\n        this.register('storefront', (response, message) =>\n            mapFromStorefrontErrorResponse(response, message),\n        );\n        this.register('payment', (response, message) =>\n            mapFromPaymentErrorResponse(response, message),\n        );\n        this.register('timeout', (response) => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod =\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return (\n            !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string'\n        );\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return (\n            typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number'\n        );\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string,\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [\n            {\n                code: body.code || body.type,\n                message: body.detail || body.title,\n            },\n        ],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    | LoadCheckoutRequestedAction\n    | LoadCheckoutSucceededAction\n    | LoadCheckoutFailedAction\n    | LoadFormFieldsAction\n    | LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    | UpdateCheckoutRequestedAction\n    | UpdateCheckoutSucceededAction\n    | UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    | UpdateSubscriptionsRequestedAction\n    | UpdateSubscriptionsSucceededAction\n    | UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    | UpdateBillingAddressRequested\n    | UpdateBillingAddressSucceeded\n    | UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    | ContinueAsGuestRequested\n    | ContinueAsGuestSucceeded\n    | ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(\n    object: any,\n    predicate: (value: any, key: string) => boolean,\n): any {\n    if (Array.isArray(object)) {\n        return object.map((value) => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(\n            omitBy(object, predicate),\n            (result, value, key) => {\n                result[key] = omitDeep(value, predicate);\n            },\n            {} as { [key: string]: any },\n        );\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<\n    TState extends { [key: string]: any },\n    TAction extends Action,\n>(state: TState, action: TAction): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, (value) => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if (objectA instanceof Date && objectB instanceof Date) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof Date || objectB instanceof Date) {\n            return false;\n        }\n\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions,\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K],\n): T {\n    if (\n        object &&\n        Object.prototype.hasOwnProperty.call(object, key) &&\n        isEqual(object[key], value)\n    ) {\n        return object;\n    }\n\n    return {\n        ...(object as any),\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, {\n    BillingAddressErrorsState,\n    BillingAddressStatusesState,\n    DEFAULT_STATE,\n} from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action,\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction,\n): BillingAddress | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(errors, 'continueAsGuestError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n            return objectSet(errors, 'continueAsGuestError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isContinuingAsGuest', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(statuses, 'isContinuingAsGuest', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(\n    currentArray: T[] | undefined,\n    newArray: T[],\n    options?: ArrayReplaceOptions,\n): T[];\nfunction arrayReplace<T>(\n    currentArray: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): undefined;\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined;\n\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\n            }\n\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\n        }\n\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (\n        sameAsCurrentCount === newArray.length &&\n        currentArray &&\n        currentArray.length === newArray.length\n    ) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(\n    currentObject: T | undefined,\n    newObject: Partial<T>,\n): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\n\nfunction objectMerge<T extends object>(\n    currentObject?: T,\n    newObject?: Partial<T>,\n): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\n        const currentValue = result[key];\n        const newValue = newObject[key];\n\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n            return objectSet(result, key, objectMerge(currentValue, newValue));\n        }\n\n        if (isArray(currentValue) && isArray(newValue)) {\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n        }\n\n        return objectSet(result, key, newValue as any);\n    }, currentObject);\n}\n\nexport default objectMerge;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    | ApplyCouponRequestedAction\n    | ApplyCouponSucceededAction\n    | ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    | RemoveCouponRequestedAction\n    | RemoveCouponSucceededAction\n    | RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    | ApplyGiftCertificateRequestedAction\n    | ApplyGiftCertificateSucceededAction\n    | ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    | RemoveGiftCertificateRequestedAction\n    | RemoveGiftCertificateSucceededAction\n    | RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    | CreateConsignmentsAction\n    | UpdateConsignmentAction\n    | DeleteConsignmentAction\n    | UpdateShippingOptionAction\n    | LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    | CreateConsignmentsRequestedAction\n    | CreateConsignmentsSucceededAction\n    | CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    | UpdateConsignmentRequestedAction\n    | UpdateConsignmentSucceededAction\n    | UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    | DeleteConsignmentRequestedAction\n    | DeleteConsignmentSucceededAction\n    | DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    | UpdateShippingOptionRequestedAction\n    | UpdateShippingOptionSucceededAction\n    | UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    | LoadShippingOptionsRequestedAction\n    | LoadShippingOptionsSucceededAction\n    | LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action:\n        | BillingAddressAction\n        | CheckoutAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction,\n): Cart | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectMerge(data, action.payload && action.payload.cart);\n\n        default:\n            return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction,\n): CartStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction,\n): CartErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    | InitializeButtonRequestedAction\n    | InitializeButtonSucceededAction\n    | InitializeButtonFailedAction\n    | LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    | DeinitializeButtonRequestedAction\n    | DeinitializeButtonSucceededAction\n    | DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, {\n    CheckoutButtonDataState,\n    CheckoutButtonErrorsState,\n    CheckoutButtonStatusesState,\n    DEFAULT_STATE,\n} from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonDataState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            if (!action.meta || !action.meta.containerId) {\n                return data;\n            }\n\n            return objectMerge(data, {\n                initializedContainers: {\n                    [action.meta.containerId]: true,\n                },\n            });\n\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(errors, 'initializeError', undefined);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n            return objectSet(errors, 'initializeError', action.payload);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(errors, 'deinitializeError', undefined);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n            return objectSet(errors, 'deinitializeError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n            return objectSet(statuses, 'isInitializing', true);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(statuses, 'isInitializing', false);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n            return objectSet(statuses, 'isDeinitializing', true);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(statuses, 'isDeinitializing', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    | LoadConfigRequestedAction\n    | LoadConfigSucceededAction\n    | LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action,\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Config | undefined, action: LoadConfigAction): Config | undefined {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction,\n): ConfigErrorsState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction,\n): ConfigStatusesState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConfigActionType.LoadConfigSucceeded:\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction =\n    | LoadOrderAction\n    | LoadOrderPaymentsAction\n    | SubmitOrderAction\n    | FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction =\n    | LoadOrderPaymentsRequestedAction\n    | LoadOrderPaymentsSucceededAction\n    | LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    | LoadOrderRequestedAction\n    | LoadOrderSucceededAction\n    | LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    | SubmitOrderRequestedAction\n    | SubmitOrderSucceededAction\n    | SubmitOrderFailedAction\n    | LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    | FinalizeOrderRequestedAction\n    | FinalizeOrderSucceededAction\n    | FinalizeOrderFailedAction\n    | LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action,\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction,\n): Coupon[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return arrayReplace(data, action.payload && action.payload.coupons);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n        case CouponActionType.ApplyCouponSucceeded:\n            return objectSet(errors, 'applyCouponError', undefined);\n\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(errors, 'applyCouponError', action.payload);\n\n        case CouponActionType.RemoveCouponRequested:\n        case CouponActionType.RemoveCouponSucceeded:\n            return objectSet(errors, 'removeCouponError', undefined);\n\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(errors, 'removeCouponError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction,\n): CouponStatusesState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n            return objectSet(statuses, 'isApplyingCoupon', true);\n\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(statuses, 'isApplyingCoupon', false);\n\n        case CouponActionType.RemoveCouponRequested:\n            return objectSet(statuses, 'isRemovingCoupon', true);\n\n        case CouponActionType.RemoveCouponSucceeded:\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(statuses, 'isRemovingCoupon', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, {\n    DEFAULT_STATE,\n    GiftCertificateErrorsState,\n    GiftCertificateStatusesState,\n} from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action,\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction,\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction,\n): GiftCertificateErrorsState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction,\n): GiftCertificateStatusesState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    | SignInCustomerAction\n    | SignOutCustomerAction\n    | CreateCustomerAddressAction\n    | CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    | CreateCustomerRequestedAction\n    | CreateCustomerSucceededAction\n    | CreateCustomerFailedAction\n    | SpamProtectionAction\n    | LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    | CreateCustomerAddressRequestedAction\n    | CreateCustomerAddressSucceededAction\n    | CreateCustomerAddressFailedAction\n    | LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    | SignInCustomerRequestedAction\n    | SignInCustomerSucceededAction\n    | SignInCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    | SignOutCustomerRequestedAction\n    | SignOutCustomerSucceededAction\n    | SignOutCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport {\n    CustomerAction,\n    CustomerActionType,\n    StripeLinkAuthenticatedAction,\n} from './customer-actions';\nimport CustomerState, {\n    CustomerErrorsState,\n    CustomerStatusesState,\n    DEFAULT_STATE,\n} from './customer-state';\n\ntype ReducerActionType =\n    | CheckoutAction\n    | ContinueAsGuestAction\n    | CustomerAction\n    | StripeLinkAuthenticatedAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectMerge(data, action.payload && action.payload.customer);\n\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType,\n): CustomerErrorsState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case CustomerActionType.CreateCustomerFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(errors, 'createAddressError', undefined);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n            return objectSet(errors, 'createAddressError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType,\n): CustomerStatusesState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case CustomerActionType.CreateCustomerFailed:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(statuses, 'isCreating', false);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n            return objectSet(statuses, 'isCreatingAddress', true);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(statuses, 'isCreatingAddress', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    | CustomerStrategySignInAction\n    | CustomerStrategySignOutAction\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\n    | CustomerStrategyInitializeAction\n    | CustomerStrategyDeinitializeAction\n    | CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    | SignInRequestedAction\n    | SignInSucceededAction\n    | SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    | SignOutRequestedAction\n    | SignOutSucceededAction\n    | SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    | ExecutePaymentMethodCheckoutRequestedAction\n    | ExecutePaymentMethodCheckoutSucceededAction\n    | ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeErrors?: { [key: string]: Error };\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, {\n    CustomerStrategyDataState,\n    CustomerStrategyErrorsState,\n    CustomerStrategyStatusesState,\n    DEFAULT_STATE,\n} from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action,\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction,\n): CustomerStrategyDataState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction,\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeErrors: { ...errors.initializeErrors },\n                initializeMethodId: errors.initializeMethodId\n                    ? errors.initializeMethodId\n                    : undefined,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeErrors: {\n                    ...errors.initializeErrors,\n                    [action.meta && action.meta.methodId]: action.payload,\n                },\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(errors, {\n                signInError: undefined,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n            return objectMerge(errors, {\n                signInError: action.payload,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(errors, {\n                signOutError: undefined,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n            return objectMerge(errors, {\n                signOutError: action.payload,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: undefined,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: action.payload,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction,\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n            return objectMerge(statuses, {\n                isSigningIn: true,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(statuses, {\n                isSigningIn: false,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n            return objectMerge(statuses, {\n                isSigningOut: true,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(statuses, {\n                isSigningOut: false,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: true,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: false,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Extension } from './extension';\n\nexport enum ExtensionActionType {\n    LoadExtensionsRequested = 'LOAD_EXTENSIONS_REQUESTED',\n    LoadExtensionsSucceeded = 'LOAD_EXTENSIONS_SUCCEEDED',\n    LoadExtensionsFailed = 'LOAD_EXTENSIONS_FAILED',\n    RenderExtensionRequested = 'RENDER_EXTENSION_REQUESTED',\n    RenderExtensionSucceeded = 'RENDER_EXTENSION_SUCCEEDED',\n    RenderExtensionFailed = 'RENDER_EXTENSION_FAILED',\n}\n\nexport type ExtensionAction =\n    | LoadExtensionsRequestedAction\n    | LoadExtensionsSucceededAction\n    | LoadExtensionsFailedAction\n    | RenderExtensionRequestedAction\n    | RenderExtensionSucceededAction\n    | RenderExtensionFailedAction;\n\nexport interface LoadExtensionsRequestedAction extends Action {\n    type: ExtensionActionType.LoadExtensionsRequested;\n}\n\nexport interface LoadExtensionsSucceededAction extends Action<Extension[]> {\n    type: ExtensionActionType.LoadExtensionsSucceeded;\n}\n\nexport interface LoadExtensionsFailedAction extends Action<Error> {\n    type: ExtensionActionType.LoadExtensionsFailed;\n}\n\nexport interface RenderExtensionRequestedAction extends Action {\n    type: ExtensionActionType.RenderExtensionRequested;\n}\n\nexport interface RenderExtensionSucceededAction extends Action {\n    type: ExtensionActionType.RenderExtensionSucceeded;\n}\n\nexport interface RenderExtensionFailedAction extends Action<Error> {\n    type: ExtensionActionType.RenderExtensionFailed;\n}\n","import { Extension } from './extension';\n\nexport interface ExtensionState {\n    data?: Extension[];\n    errors: ExtensionErrorsState;\n    statuses: ExtensionStatusesState;\n}\n\nexport interface ExtensionErrorsState {\n    loadError?: Error;\n    renderError?: Error;\n}\n\nexport interface ExtensionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ExtensionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport { Extension } from './extension';\nimport { ExtensionAction, ExtensionActionType } from './extension-actions';\nimport {\n    DEFAULT_STATE,\n    ExtensionErrorsState,\n    ExtensionState,\n    ExtensionStatusesState,\n} from './extension-state';\n\nexport function extensionReducer(\n    state: ExtensionState = DEFAULT_STATE,\n    action: Action,\n): ExtensionState {\n    const reducer = combineReducers<ExtensionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Extension[] | undefined,\n    action: ExtensionAction,\n): Extension[] | undefined {\n    if (action.type === ExtensionActionType.LoadExtensionsSucceeded) {\n        return arrayReplace(data, action.payload);\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ExtensionErrorsState = DEFAULT_STATE.errors,\n    action: ExtensionAction,\n): ExtensionErrorsState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n        case ExtensionActionType.LoadExtensionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ExtensionActionType.RenderExtensionRequested:\n        case ExtensionActionType.RenderExtensionSucceeded:\n            return objectSet(errors, 'renderError', undefined);\n\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ExtensionActionType.RenderExtensionFailed:\n            return objectSet(errors, 'renderError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ExtensionStatusesState = DEFAULT_STATE.statuses,\n    action: ExtensionAction,\n): ExtensionStatusesState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ExtensionActionType.LoadExtensionsSucceeded:\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    | LoadFormFieldsRequestedAction\n    | LoadFormFieldsSucceededAction\n    | LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, {\n    DEFAULT_STATE,\n    FormFieldsErrorState,\n    FormFieldsStatusesState,\n} from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action,\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction,\n): FormFields | undefined {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction,\n): FormFieldsErrorState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction,\n): FormFieldsStatusesState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    | LoadCountriesRequestedAction\n    | LoadCountriesSucceededAction\n    | LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, {\n    CountryErrorsState,\n    CountryStatusesState,\n    DEFAULT_STATE,\n} from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action,\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction,\n): CountryErrorsState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n        case CountryActionType.LoadCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction,\n): CountryStatusesState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CountryActionType.LoadCountriesSucceeded:\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, {\n    DEFAULT_STATE,\n    OrderDataState,\n    OrderErrorsState,\n    OrderMetaState,\n    OrderStatusesState,\n} from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action,\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction,\n): OrderDataState | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, ['billingAddress', 'coupons']),\n            ) as OrderDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction,\n): OrderMetaState | undefined {\n    switch (action.type) {\n        case OrderActionType.FinalizeOrderSucceeded:\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectMerge(meta, {\n                ...action.meta,\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\n                orderToken: action.payload && action.payload.order.token,\n                payment: action.payload && action.payload.order && action.payload.order.payment,\n            });\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction,\n): OrderErrorsState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction,\n): OrderStatusesState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Address } from '../address';\n\nexport interface OrderBillingAddress extends Address {\n    email?: string;\n}\n\nexport default interface OrderBillingAddressState {\n    data?: OrderBillingAddress;\n}\n\nexport const DEFAULT_STATE: OrderBillingAddressState = {};\n","import { Action, combineReducers } from '@bigcommerce/data-store';\n\nimport { replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default function orderBillingAddressReducer(\n    state: OrderBillingAddressState = DEFAULT_STATE,\n    action: Action,\n): OrderBillingAddressState {\n    const reducer = combineReducers<OrderBillingAddressState>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderBillingAddress | undefined,\n    action: OrderAction,\n): OrderBillingAddress | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    | SubmitPaymentRequestedAction\n    | SubmitPaymentSucceededAction\n    | SubmitPaymentFailedAction\n    | LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    | InitializeOffsitePaymentRequestedAction\n    | InitializeOffsitePaymentSucceededAction\n    | InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    | LoadPaymentMethodRequestedAction\n    | LoadPaymentMethodSucceededAction\n    | LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    | LoadPaymentMethodsRequestedAction\n    | LoadPaymentMethodsSucceededAction\n    | LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(\n    state: PaymentState = {},\n    action: PaymentAction,\n): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentResponseBody | undefined,\n    action: PaymentAction,\n): PaymentResponseBody | undefined {\n    switch (action.type) {\n        case PaymentActionType.SubmitPaymentSucceeded:\n            return action.payload;\n\n        default:\n            return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, {\n    DEFAULT_STATE,\n    PaymentMethodErrorsState,\n    PaymentMethodStatusesState,\n} from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action,\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction,\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return mergeOrPush(\n                data || [],\n                action.payload,\n                action.payload && {\n                    id: action.payload.id,\n                    gateway: action.payload.gateway,\n                },\n            );\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return arrayReplace(data, action.payload, {\n                matchObject: (methodA, methodB) =>\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\n            });\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction,\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction,\n): PaymentMethodErrorsState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return objectMerge(errors, {\n                loadMethodId: undefined,\n                loadMethodError: undefined,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(errors, {\n                loadMethodId: action.meta.methodId,\n                loadMethodError: action.payload,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction,\n): PaymentMethodStatusesState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n            return objectMerge(statuses, {\n                isLoadingMethod: true,\n                loadMethodId: action.meta.methodId,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(statuses, {\n                isLoadingMethod: false,\n                loadMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick<T>(item, 'id');\n    const derivedPredicate: any =\n        typeof predicate === 'object' ? pickBy<T>(predicate) : predicate || defaultPredicate;\n    const index = findIndex(array, derivedPredicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] =\n            isPlainObject(existingItem) && isPlainObject(item)\n                ? objectMerge(existingItem, item)\n                : item;\n    }\n\n    return newArray;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    | PaymentStrategyExecuteAction\n    | PaymentStrategyFinalizeAction\n    | PaymentStrategyInitializeAction\n    | PaymentStrategyDeinitializeAction\n    | PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    | FinalizeRequestedAction\n    | FinalizeSucceededAction\n    | FinalizeFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, {\n    DEFAULT_STATE,\n    PaymentStrategyDataState,\n    PaymentStrategyErrorsState,\n    PaymentStrategyStatusesState,\n} from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action,\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction,\n): PaymentStrategyDataState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: true,\n                    },\n                });\n            }\n\n            break;\n        }\n\n        case PaymentStrategyActionType.DeinitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: false,\n                    },\n                });\n            }\n        }\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction,\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.ExecuteRequested:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(errors, {\n                executeError: undefined,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n            return objectMerge(errors, {\n                executeError: action.payload,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(errors, {\n                finalizeError: undefined,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n            return objectMerge(errors, {\n                finalizeError: action.payload,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction,\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.InitializeFailed:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n            return objectMerge(statuses, {\n                isExecuting: true,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(statuses, {\n                isExecuting: false,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n            return objectMerge(statuses, {\n                isFinalizing: true,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(statuses, {\n                isFinalizing: false,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum PaymentProviderCustomerType {\n    UpdatePaymentProviderCustomer = 'UPDATE_PAYMENT_PROVIDER_CUSTOMER',\n}\n\nexport type PaymentProviderCustomerAction = UpdatePaymentProviderCustomerAction;\n\nexport interface UpdatePaymentProviderCustomerAction extends Action {\n    type: PaymentProviderCustomerType.UpdatePaymentProviderCustomer;\n}\n","import { PaymentProviderCustomer } from './payment-provider-customer';\n\nexport default interface PaymentProviderCustomerState {\n    data: PaymentProviderCustomer;\n}\n\nexport const DEFAULT_STATE = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport {\n    PaymentProviderCustomerType,\n    UpdatePaymentProviderCustomerAction,\n} from './payment-provider-customer-actions';\nimport PaymentProviderCustomerState, { DEFAULT_STATE } from './payment-provider-customer-state';\n\ntype ReducerActionType = UpdatePaymentProviderCustomerAction;\n\nexport default function paymentProviderCustomerReducer(\n    state: PaymentProviderCustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): PaymentProviderCustomerState {\n    const reducer = combineReducers<PaymentProviderCustomerState, ReducerActionType>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentProviderCustomer = DEFAULT_STATE.data,\n    action: ReducerActionType,\n): PaymentProviderCustomer {\n    switch (action.type) {\n        case PaymentProviderCustomerType.UpdatePaymentProviderCustomer:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    | LoadInstrumentsRequestedAction\n    | LoadInstrumentsSucceededAction\n    | LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    | DeleteInstrumentRequestedAction\n    | DeleteInstrumentSucceededAction\n    | DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, {\n    DEFAULT_STATE,\n    InstrumentErrorState,\n    InstrumentMeta,\n    InstrumentStatusState,\n} from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action,\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction,\n): PaymentInstrument[] {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction,\n): InstrumentMeta | undefined {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction,\n): InstrumentErrorState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(errors, {\n                deleteError: undefined,\n                failedInstrument: undefined,\n            });\n\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(errors, {\n                deleteError: action.payload,\n                failedInstrument: action.meta.instrumentId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction,\n): InstrumentStatusState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n            return objectMerge(statuses, {\n                isDeleting: true,\n                deletingInstrument: action.meta.instrumentId,\n            });\n\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(statuses, {\n                isDeleting: false,\n                deletingInstrument: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction =\n    | ForgetCheckoutRemoteCustomerAction\n    | InitializeRemoteBillingAction\n    | InitializeRemoteShippingAction\n    | InitializeRemotePaymentAction\n    | SignOutRemoteCustomerAction\n    | LoadRemoteSettingsAction\n    | UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction =\n    | ForgetCheckoutRemoteCustomerRequestedAction\n    | ForgetCheckoutRemoteCustomerSucceededAction\n    | ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction =\n    | InitializeRemoteBillingSucceededAction\n    | InitializeRemoteBillingFailedAction\n    | InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction =\n    | InitializeRemoteShippingSucceededAction\n    | InitializeRemoteShippingFailedAction\n    | InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction =\n    | InitializeRemotePaymentSucceededAction\n    | InitializeRemotePaymentFailedAction\n    | InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction =\n    | SignOutRemoteCustomerSucceededAction\n    | SignOutRemoteCustomerFailedAction\n    | SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction =\n    | LoadRemoteSettingsSucceededAction\n    | LoadRemoteSettingsRequestedAction\n    | LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction,\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\n    switch (action.type) {\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n            return objectSet(data, 'settings', action.payload);\n\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, {\n    ConsignmentErrorsState,\n    ConsignmentStatusesState,\n    DEFAULT_STATE,\n} from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action,\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction,\n): Consignment[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n            return arrayReplace(data, action.payload && action.payload.consignments);\n\n        case CustomerActionType.SignOutCustomerSucceeded:\n            return arrayReplace(data, []);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(statuses, 'isCreating', false);\n\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        default:\n            return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [key: string]: any },\n    parent?: string,\n): { [key: string]: any } {\n    const flattened: { [key: string]: any } = {};\n\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? `${parent}.${key}` : key;\n\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce(\n        (previous, current) => ({\n            ...previous,\n            [current]: object[current],\n        }),\n        {},\n    );\n\n    return sortedArray;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    | PickupOptionRequestedAction\n    | LoadPickupOptionsSucceededAction\n    | LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, {\n    DEFAULT_STATE,\n    PickupOptionErrorsState,\n    PickupOptionStatusesState,\n} from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action,\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction,\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString, action.payload);\n            }\n\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action,\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction =\n    | LoadShippingCountriesRequestedAction\n    | LoadShippingCountriesSucceededAction\n    | LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, {\n    DEFAULT_STATE,\n    ShippingCountryErrorsState,\n    ShippingCountryStatusesState,\n} from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action,\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction,\n): ShippingCountryErrorsState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction,\n): ShippingCountryStatusesState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    | ShippingStrategyUpdateAddressAction\n    | ShippingStrategySelectOptionAction\n    | ShippingStrategyInitializeAction\n    | ShippingStrategyDeinitializeAction\n    | ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    | UpdateAddressRequestedAction\n    | UpdateAddressSucceededAction\n    | UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    | SelectOptionRequestedAction\n    | SelectOptionSucceededAction\n    | SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, {\n    DEFAULT_STATE,\n    ShippingStrategyDataState,\n    ShippingStrategyErrorsState,\n    ShippingStrategyStatusesState,\n} from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action,\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction,\n): ShippingStrategyDataState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction,\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(errors, {\n                updateAddressError: undefined,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n            return objectMerge(errors, {\n                updateAddressError: action.payload,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(errors, {\n                selectOptionError: undefined,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n            return objectMerge(errors, {\n                selectOptionError: action.payload,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction,\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n            return objectMerge(statuses, {\n                isUpdatingAddress: true,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(statuses, {\n                isUpdatingAddress: false,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n            return objectMerge(statuses, {\n                isSelectingOption: true,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(statuses, {\n                isSelectingOption: false,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    | SendSignInEmailRequestedAction\n    | SendSignInEmailSucceededAction\n    | SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, {\n    DEFAULT_STATE,\n    SignInEmailErrorsState,\n    SignInEmailStatusesState,\n} from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action,\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction,\n): SignInEmail | undefined {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction,\n): SignInEmailErrorsState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(errors, 'sendError', undefined);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n            return objectSet(errors, 'sendError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction,\n): SignInEmailStatusesState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n            return objectSet(statuses, 'isSending', true);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(statuses, 'isSending', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction = ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    | ApplyStoreCreditRequestedAction\n    | ApplyStoreCreditSucceededAction\n    | ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, {\n    StoreCreditErrorsState,\n    StoreCreditStatusesState,\n} from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action,\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction,\n): StoreCreditErrorsState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n            return objectSet(errors, 'applyError', undefined);\n\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(errors, 'applyError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction,\n): StoreCreditStatusesState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n            return objectSet(statuses, 'isApplying', true);\n\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(statuses, 'isApplying', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, {\n    DEFAULT_STATE,\n    SubscriptionsErrorsState,\n    SubscriptionsStatusesState,\n} from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action,\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsErrorsState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsStatusesState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | CheckoutVerifyRequestedAction\n    | CheckoutVerifyFailedAction\n    | CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<\n    Checkout,\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\n>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, {\n    CheckoutDataState,\n    CheckoutErrorsState,\n    CheckoutStatusesState,\n    DEFAULT_STATE,\n} from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action,\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action:\n        | CheckoutAction\n        | BillingAddressAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | OrderAction\n        | SpamProtectionAction\n        | StoreCreditAction,\n): CheckoutDataState | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction,\n): CheckoutErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\n): CheckoutStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case SpamProtectionActionType.ExecuteRequested:\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n        case SpamProtectionActionType.ExecuteFailed:\n        case SpamProtectionActionType.ExecuteSucceeded:\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n        default:\n            return statuses;\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentProviderCustomer,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingPaymentProviderCustomer:\n            return 'Unable to proceed because payment provider customer is unavailable.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T,\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(\n        target,\n        (target, name) =>\n            (...args: any[]) =>\n                deepFreeze(target[name].call(target, ...args)),\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\n    map: TMap,\n): TMap {\n    return Object.keys(map).reduce((result, key) => {\n        result[key] = createFreezeProxy(map[key]);\n\n        return result;\n    }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(\n    target: T,\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\n): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, (prototype) => {\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\n            if (\n                name === 'constructor' ||\n                typeof proxy[name] !== 'function' ||\n                name.charAt(0) === '_'\n            ) {\n                return;\n            }\n\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n        });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    braintreeach: {\n        provider: 'braintree',\n        method: 'ach',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.credit_card': {\n        provider: 'bluesnapdirect',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.ecp': {\n        provider: 'bluesnapdirect',\n        method: 'ecp',\n    },\n    'bluesnapdirect.sepa_direct_debit': {\n        provider: 'bluesnapdirect',\n        method: 'sepa_direct_debit',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n    squarev2: {\n        provider: 'squarev2',\n        method: 'credit_card',\n    },\n    paypalcommercecreditcards: {\n        provider: 'paypalcommerce',\n        method: 'credit_card',\n    },\n    paypalcommerce: {\n        provider: 'paypalcommerce',\n        method: 'paypal',\n    },\n    bigcommerce_payments_creditcards: {\n        provider: 'bigcommerce_payments',\n        method: 'credit_card',\n    },\n    bigcommerce_payments: {\n        provider: 'bigcommerce_payments',\n        method: 'paypal',\n    },\n    tdonlinemart: {\n        provider: 'tdonlinemart',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(\n    addressA: Partial<Address>,\n    addressB: Partial<Address>,\n): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy(\n        {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            company: address.company,\n            address1: address.address1,\n            address2: address.address2,\n            city: address.city,\n            stateOrProvince: address.stateOrProvince,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n            phone: address.phone,\n            customFields: address.customFields,\n        },\n        identity,\n    );\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createExtensionSelectorFactory } from '../extension';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createOrderBillingAddressSelectorFactory } from '../order-billing-address';\nimport {\n    createPaymentMethodSelectorFactory,\n    createPaymentSelectorFactory,\n    createPaymentStrategySelectorFactory,\n} from '../payment';\nimport { createPaymentProviderCustomerSelectorFactory } from '../payment-provider-customer';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport {\n    createConsignmentSelectorFactory,\n    createPickupOptionSelectorFactory,\n    createShippingAddressSelectorFactory,\n    createShippingCountrySelectorFactory,\n    createShippingStrategySelectorFactory,\n} from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createPaymentProviderCustomerSelector = createPaymentProviderCustomerSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createOrderBillingAddressSelector = createOrderBillingAddressSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n    const createExtensionSelector = createExtensionSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const extensions = createExtensionSelector(state.extensions);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const orderBillingAddress = createOrderBillingAddressSelector(state.orderBillingAddress);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentProviderCustomer = createPaymentProviderCustomerSelector(\n            state.paymentProviderCustomer,\n        );\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(\n            state.checkout,\n            billingAddress,\n            cart,\n            consignments,\n            coupons,\n            customer,\n            giftCertificates,\n        );\n        const order = createOrderSelector(state.order, orderBillingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            extensions,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            orderBillingAddress,\n            payment,\n            paymentMethods,\n            paymentProviderCustomer,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        (getBillingAddress) => () => {\n            return guard(\n                getBillingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        (error) => () => error,\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        (status) => () => status,\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        (cart) => () => cart,\n    );\n\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n    });\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        (state) => () => state,\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isInitializing) === true;\n                }\n\n                return some(statuses, { isInitializing: true });\n            }),\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        (data) =>\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n                const method = data[methodId];\n\n                if (!method) {\n                    return false;\n                }\n\n                if (!containerId) {\n                    return some(\n                        method.initializedContainers,\n                        (isInitialized) => isInitialized === true,\n                    );\n                }\n\n                return method.initializedContainers[containerId] === true;\n            }),\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isDeinitializing) === true;\n                }\n\n                return some(statuses, { isDeinitializing: true });\n            }),\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.initializeError));\n\n                return method && method.initializeError;\n            }),\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\n\n                return method && method.deinitializeError;\n            }),\n    );\n\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState,\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => () => data,\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined\n                ? flashMessages.filter(({ type }) => filterType === type)\n                : flashMessages;\n        },\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () =>\n            data && formFields\n                ? {\n                      ...data.storeConfig,\n                      formFields,\n                  }\n                : undefined,\n    );\n\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\n        return guard(\n            getStoreConfig(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\n        );\n    });\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        (data) => () => data,\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        (data) => () => data,\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        (data) => () => data,\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        (data) => () => data,\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\n            return {\n                getConfig: getConfig(state),\n                getFlashMessages: getFlashMessages(state),\n                getStoreConfig: getStoreConfig(state, { formState }),\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n                getContextConfig: getContextConfig(state),\n                getExternalSource: getExternalSource(state),\n                getHost: getHost(state),\n                getLocale: getLocale(state),\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\n                getLoadError: getLoadError(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        (countries) => () => countries,\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        (customer) => () => customer,\n    );\n\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\n        return guard(\n            getCustomer(),\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\n        );\n    });\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        (status) => () => status,\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (\n    state: CustomerStrategyState,\n) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        },\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        },\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return;\n                }\n\n                return executePaymentMethodCheckoutError;\n            },\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeErrors,\n        (initializeMethodId, initializeErrors) => (methodId?: string) => {\n            if (!initializeMethodId || !initializeErrors) {\n                return;\n            }\n\n            if (methodId) {\n                return initializeErrors[methodId];\n            }\n\n            return initializeErrors[initializeMethodId];\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        },\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        },\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return false;\n                }\n\n                return !!isExecutingPaymentMethodCheckout;\n            },\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (\n    state: GiftCertificateState,\n) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\n                : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        },\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) =>\n            (instrumentId: string) => {\n                const cards = values(supportedInstruments);\n\n                return instruments.find(\n                    (instrument): instrument is CardInstrument =>\n                        instrument.bigpayToken === instrumentId &&\n                        instrument.type === 'card' &&\n                        cards.some((card) => isMatch(instrument, card)),\n                );\n            },\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        (getCardInstrument) => (instrumentId: string) => {\n            return guard(\n                getCardInstrument(instrumentId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\n            );\n        },\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\n                filter(\n                    instruments,\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                        return isMatch(instrument, supportedProvider);\n                    },\n                ),\n            );\n\n            return allSupportedInstruments;\n        },\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        },\n    );\n\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.shippingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.billingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) => () => formFields ? formFields.customerAccount : [],\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    function processField(\n        field: FormField,\n        countries: Country[],\n        selectedCountry?: Country,\n    ): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(\n        field: FormField,\n        countries: Country[] = [],\n        country?: Country,\n    ): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => () => paymentMethods,\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\n            return gatewayId\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\n                : find(paymentMethods, { id: methodId });\n        },\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\n            return guard(\n                getPaymentMethod(methodId, gatewayId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\n            );\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        },\n    );\n\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\ninterface InitiaizedQuery {\n    methodId: string;\n    gatewayId?: string;\n}\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(query: InitiaizedQuery): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (\n    state: PaymentStrategyState,\n) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        },\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        },\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (key?: string) => {\n            if (key && initializeMethodId !== key) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        (data) => (query: InitiaizedQuery) => {\n            const key = query.gatewayId ? `${query.methodId}.${query.gatewayId}` : query.methodId;\n\n            return !!(data[key] && data[key].isInitialized);\n        },\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        },\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport PaymentProviderCustomerState, { DEFAULT_STATE } from './payment-provider-customer-state';\n\nexport default interface PaymentProviderCustomerSelector {\n    getPaymentProviderCustomer(): PaymentProviderCustomer | undefined;\n    getPaymentProviderCustomerOrThrow(): PaymentProviderCustomer;\n}\n\nexport type PaymentProviderCustomerSelectorFactory = (\n    state: PaymentProviderCustomerState,\n) => PaymentProviderCustomerSelector;\n\nexport function createPaymentProviderCustomerSelectorFactory(): PaymentProviderCustomerSelectorFactory {\n    const getPaymentProviderCustomer = createSelector(\n        (state: PaymentProviderCustomerState) => state.data,\n        (data) => () => data,\n    );\n\n    const getPaymentProviderCustomerOrThrow = createSelector(\n        getPaymentProviderCustomer,\n        (getPaymentProviderCustomer) => () => {\n            return guard(\n                getPaymentProviderCustomer(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentProviderCustomer),\n            );\n        },\n    );\n\n    return memoizeOne(\n        (state: PaymentProviderCustomerState = DEFAULT_STATE): PaymentProviderCustomerSelector => {\n            return {\n                getPaymentProviderCustomer: getPaymentProviderCustomer(state),\n                getPaymentProviderCustomerOrThrow: getPaymentProviderCustomerOrThrow(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId,\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        (data) =>\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n                return data[methodId];\n            },\n    );\n\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n    getShippingAddresses(): Address[];\n    getShippingAddressesOrThrow(): Address[];\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignment = consignments?.find(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignment?.shippingAddress;\n        },\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        (getShippingAddress) => () => {\n            return guard(\n                getShippingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    const getShippingAddresses = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignments = consignments?.filter(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignments\n                ? shippingConsignments.map((consignment) => consignment.shippingAddress)\n                : [];\n        },\n    );\n\n    const getShippingAddressesOrThrow = createSelector(\n        getShippingAddresses,\n        (getShippingAddresses) => () => {\n            return guard(\n                getShippingAddresses(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n            getShippingAddresses: getShippingAddresses(state),\n            getShippingAddressesOrThrow: getShippingAddressesOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (\n    state: ShippingCountryState,\n) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        (status) => () => !!status,\n    );\n\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (\n    state: ShippingStrategyState,\n) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        },\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        },\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        },\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { AddressRequestBody, isAddressEqual } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector,\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => consignments,\n    );\n\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\n        return guard(\n            getConsignments(),\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\n        );\n    });\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        },\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, (consignment) =>\n                isAddressEqual(consignment.shippingAddress, address),\n            );\n        },\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        (error) => () => error,\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[],\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        (updateError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        },\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        (deleteError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        },\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\n            (address: AddressRequestBody) => {\n                const consignment = getConsignmentByAddress(address);\n\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\n            },\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        (updateShippingOptionError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        (isCreating) => () => isCreating === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        (isUpdating) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        },\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        (isDeleting) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        },\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        },\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        },\n    );\n\n    return memoizeOne(\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\n            return {\n                getConsignments: getConsignments(state),\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n                getConsignmentById: getConsignmentById(state),\n                getConsignmentByAddress: getConsignmentByAddress(state),\n                getShippingOption: getShippingOption(state),\n                getLoadError: getLoadError(state),\n                getCreateError: getCreateError(state),\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n                getUnassignedItems: getUnassignedItems(state, { cart }),\n                getUpdateError: getUpdateError(state),\n                getDeleteError: getDeleteError(state),\n                getItemAssignmentError: getItemAssignmentError(state),\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n                isLoading: isLoading(state),\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\n                isCreating: isCreating(state),\n                isUpdating: isUpdating(state),\n                isDeleting: isDeleting(state),\n                isAssigningItems: isAssigningItems(state),\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector,\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\n            billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\n            consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\n            giftCertificates.getGiftCertificates,\n        (\n                data,\n                getBillingAddress,\n                getCart,\n                getCustomer,\n                getConsignments,\n                getCoupons,\n                getGiftCertificates,\n            ) =>\n            () => {\n                const billingAddress = getBillingAddress();\n                const cart = getCart();\n                const customer = getCustomer();\n                const consignments = getConsignments() || [];\n                const coupons = getCoupons() || [];\n                const giftCertificates = getGiftCertificates() || [];\n\n                if (!data || !cart || !customer) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    cart,\n                    customer,\n                    consignments,\n                    coupons,\n                    giftCertificates,\n                };\n            },\n    );\n\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\n        return guard(\n            getCheckout(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\n        );\n    });\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        (getCheckout) => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit\n                ? Math.max(grandTotal - storeCredit, 0)\n                : checkout.outstandingBalance;\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        (isUpdating) => () => isUpdating === true,\n    );\n\n    return memoizeOne(\n        (\n            state: CheckoutState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            cart: CartSelector,\n            consignments: ConsignmentSelector,\n            coupons: CouponSelector,\n            customer: CustomerSelector,\n            giftCertificates: GiftCertificateSelector,\n        ): CheckoutSelector => {\n            return {\n                getCheckout: getCheckout(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getOutstandingBalance: getOutstandingBalance(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getLoadError: getLoadError(state),\n                getUpdateError: getUpdateError(state),\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\n                isLoading: isLoading(state),\n                isUpdating: isUpdating(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\nimport OrderBillingAddressSelector from '../order-billing-address/order-billing-address-selector';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: OrderBillingAddressSelector,\n    coupons: CouponSelector,\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: OrderBillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\n            billingAddress.getOrderBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) =>\n            () => {\n                if (!data || !billingAddress) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    coupons,\n                };\n            },\n    );\n\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n    });\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) =>\n            (methodId: string) => {\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n                return currentPayment?.paymentId;\n            },\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (\n            state: OrderState = DEFAULT_STATE,\n            billingAddress: OrderBillingAddressSelector,\n            coupons: CouponSelector,\n        ): OrderSelector => {\n            return {\n                getOrder: getOrder(state, { billingAddress, coupons }),\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n                getOrderMeta: getOrderMeta(state),\n                getLoadError: getLoadError(state),\n                getPaymentId: getPaymentId(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default interface OrderBillingAddressSelector {\n    getOrderBillingAddress(): OrderBillingAddress | undefined;\n}\n\nexport type OrderBillingAddressSelectorFactory = (\n    state: OrderBillingAddressState,\n) => OrderBillingAddressSelector;\n\nexport function createOrderBillingAddressSelectorFactory(): OrderBillingAddressSelectorFactory {\n    const getOrderBillingAddress = createSelector(\n        (state: OrderBillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    return memoizeOne(\n        (state: OrderBillingAddressState = DEFAULT_STATE): OrderBillingAddressSelector => {\n            return {\n                getOrderBillingAddress: getOrderBillingAddress(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector,\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        },\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        (getOrder) => () => {\n            const order = getOrder();\n\n            return find(\n                order && order.payments,\n                ({ providerId }) =>\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\n            ) as GatewayOrderPayment;\n        },\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        (getCheckout) => () => {\n            const checkout = getCheckout();\n\n            return find(\n                checkout && checkout.payments,\n                ({ providerType }) => providerType === HOSTED,\n            );\n        },\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        },\n    );\n\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\n        return guard(\n            getPaymentId(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\n        );\n    });\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        },\n    );\n\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\n        return guard(\n            getPaymentStatus(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\n        );\n    });\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        },\n    );\n\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\n        return guard(\n            getPaymentToken(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    });\n\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\n        const payment = getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    });\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        (getPaymentRedirectUrl) => () => {\n            return guard(\n                getPaymentRedirectUrl(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\n            );\n        },\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        (getOutstandingBalance) =>\n            (useStoreCredit = false) => {\n                const grandTotal = getOutstandingBalance(useStoreCredit);\n\n                return grandTotal ? grandTotal > 0 : false;\n            },\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        },\n    );\n\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        (signInEmail) => () => signInEmail,\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        (error) => () => error,\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { Extension, ExtensionRegion } from './extension';\nimport { DEFAULT_STATE, ExtensionState } from './extension-state';\n\nexport interface ExtensionSelector {\n    getExtensions(): Extension[] | undefined;\n    getExtensionByRegion(region: ExtensionRegion): Extension | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ExtensionSelectorFactory = (state: ExtensionState) => ExtensionSelector;\n\nexport function createExtensionSelectorFactory(): ExtensionSelectorFactory {\n    const getExtensions = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => () => data,\n    );\n\n    const getExtensionByRegion = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => (region: ExtensionRegion) => data?.find((e) => e.region === region),\n    );\n\n    const getLoadError = createSelector(\n        (state: ExtensionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ExtensionState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    return memoizeOne((state: ExtensionState = DEFAULT_STATE): ExtensionSelector => {\n        return {\n            getExtensions: getExtensions(state),\n            getExtensionByRegion: getExtensionByRegion(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions,\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(createCheckoutStoreReducer(), initialState, {\n        actionTransformer,\n        stateTransformer,\n        ...options,\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory,\n): (action: Subscribable<Action>) => Observable<Action> {\n    return (action$) =>\n        from(action$).pipe(\n            catchError<Action, never>((action) => {\n                if (action instanceof Error || action.payload instanceof Error) {\n                    throw action;\n                }\n\n                if (isResponse(action.payload)) {\n                    const message = action.payload.body && action.payload.body.detail;\n\n                    throw {\n                        ...action,\n                        payload: requestErrorFactory.createError(action.payload, message),\n                    };\n                }\n\n                throw action;\n            }),\n        );\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\n        Object.prototype.hasOwnProperty.call(object, key),\n    );\n}\n","import { PaymentMethodInvalidError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach((type) => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register(\n        'invalid_payment_provider',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n    factory.register(\n        'payment_config_not_found',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n\n    return factory;\n}\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { extensionReducer } from '../extension';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { orderBillingAddressReducer } from '../order-billing-address';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { paymentProviderCustomerReducer } from '../payment-provider-customer';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport {\n    consignmentReducer,\n    pickupOptionReducer,\n    shippingCountryReducer,\n    shippingStrategyReducer,\n} from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        extensions: extensionReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        orderBillingAddress: orderBillingAddressReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        paymentProviderCustomer: paymentProviderCustomerReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item: LineItem) => total + item.quantity, 0);\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import {\n    Cart,\n    Checkout,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void | Promise<void>) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n\n    /**\n     * Sets Amazon Pay button design.\n     */\n    design?: AmazonPayV2ButtonDesign;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport const amazonPayV2Regions: { [key: string]: string } = {\n    de: 'eu',\n    jp: 'fe',\n    uk: 'eu',\n    us: 'na',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport enum AmazonPayV2ButtonDesign {\n    C0001 = 'C0001',\n}\n\n// TODO: after migration AmazonPay strategies to integration package\n// <InternalCheckoutSelectors> should be removed\n// and replaced usage with <PaymentIntegrationService>\nexport interface InternalCheckoutSelectors {\n    cart: {\n        getCart: () => Cart | undefined;\n    };\n    checkout: {\n        getCheckout: () => Checkout | undefined;\n    };\n    config: {\n        getStoreConfigOrThrow: () => StoreConfig;\n    };\n    paymentMethods: {\n        getPaymentMethodOrThrow: <T>(methodId: string) => PaymentMethod<T>;\n    };\n}\n\nexport interface AmazonPayV2InitializeOptions {\n    buttonColor?: AmazonPayV2ButtonColor;\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n    checkoutSessionMethod?: 'GET' | 'POST';\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n    extractAmazonCheckoutSessionId?: string;\n    ledgerCurrency?: AmazonPayV2LedgerCurrency;\n    publicKeyId?: string;\n    region?: string;\n    isButtonMicroTextDisabled?: boolean;\n    paymentToken?: string;\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    buttonColor?: AmazonPayV2ButtonColor;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n    isButtonMicroTextDisabled?: boolean;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface AmazonPayAdditionalActionErrorBody {\n    status: string;\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n","import {\n    CheckoutSettings,\n    getShippableItemsCount,\n    guard,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonDesign,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    InternalCheckoutSelectors,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\nimport { isInternalCheckoutSelectors } from './isInternalCheckoutSelectors';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private amazonPayV2SDK?: AmazonPayV2SDK;\n    private buttonParentContainer?: HTMLDivElement;\n    private amazonPayV2Button?: AmazonPayV2Button;\n    private isBuyNowFlow?: boolean;\n\n    constructor(private amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<void> {\n        this.amazonPayV2SDK = await this.amazonPayV2ScriptLoader.load(paymentMethod);\n        this.buttonParentContainer =\n            this.buttonParentContainer || this.createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this.amazonPayV2Button = undefined;\n        this.buttonParentContainer?.remove();\n        this.buttonParentContainer = undefined;\n        this.amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this.getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this.amazonPayV2Button = this.getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this.prepareRequestConfig(createCheckoutSessionConfig);\n\n        this.getAmazonPayV2Button().onClick(() => {\n            this.getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<\n            | {\n                  createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n                  estimatedOrderAmount: AmazonPayV2Price;\n                  productType: AmazonPayV2PayOptions;\n              }\n            | undefined\n        >,\n    ) {\n        this.getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n\n            if (config) {\n                const requestConfig = this.prepareRequestConfig(\n                    config.createCheckoutSessionConfig,\n                    config.estimatedOrderAmount,\n                    config.productType,\n                );\n\n                this.getAmazonPayV2Button().initCheckout(requestConfig);\n            }\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this.amazonPayV2SDK) {\n            this.amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        buttonColor,\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n        isButtonMicroTextDisabled = false,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const { id: parentContainerId } = container.appendChild(this.getButtonParentContainer());\n\n        if (options && isButtonMicroTextDisabled) {\n            options.design = AmazonPayV2ButtonDesign.C0001;\n        }\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this.getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n                buttonColor,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this.getButtonParentContainer();\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow?: boolean) {\n        this.isBuyNowFlow = Boolean(isBuyNowFlow);\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this.isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private getAmazonPayV2ButtonOptions(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n        buttonColor = AmazonPayV2ButtonColor.Gold,\n    ): AmazonPayV2ButtonParameters {\n        const { getCart, getCheckout, getStoreConfigOrThrow, getPaymentMethodOrThrow } =\n            this.getCheckoutState(checkoutState);\n        const {\n            config: { merchantId, testMode },\n            initializationData,\n        } = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n\n        if (!initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            checkoutLanguage,\n            checkoutSessionMethod,\n            createCheckoutSessionConfig,\n            extractAmazonCheckoutSessionId,\n            ledgerCurrency,\n            publicKeyId = '',\n            isButtonMicroTextDisabled,\n        } = initializationData;\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor,\n            ...(isButtonMicroTextDisabled ? { design: AmazonPayV2ButtonDesign.C0001 } : {}),\n        };\n\n        if (this.isBuyNowFlow) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            if (!createCheckoutSessionConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this.isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this.getOrThrow(this.amazonPayV2SDK);\n    }\n\n    private getButtonParentContainer(): HTMLDivElement {\n        return this.getOrThrow(this.buttonParentContainer);\n    }\n\n    private getAmazonPayV2Button(): AmazonPayV2Button {\n        return this.getOrThrow(this.amazonPayV2Button);\n    }\n\n    private getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    // INFO: need this mapping while we have strategies in core and in integration package at the same time\n    private getCheckoutState(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n    ): Pick<\n        PaymentIntegrationSelectors,\n        'getCart' | 'getCheckout' | 'getStoreConfigOrThrow' | 'getPaymentMethodOrThrow'\n    > {\n        if (isInternalCheckoutSelectors(checkoutState)) {\n            return {\n                getCart: checkoutState.cart.getCart,\n                getCheckout: checkoutState.checkout.getCheckout,\n                getStoreConfigOrThrow: checkoutState.config.getStoreConfigOrThrow,\n                getPaymentMethodOrThrow: <T>(methodId: string) =>\n                    checkoutState.paymentMethods.getPaymentMethodOrThrow<T>(methodId),\n            };\n        }\n\n        return checkoutState;\n    }\n}\n","import { InternalCheckoutSelectors } from './amazon-pay-v2';\n\nexport function isInternalCheckoutSelectors(\n    checkoutSelectors: unknown,\n): checkoutSelectors is InternalCheckoutSelectors {\n    return (\n        typeof checkoutSelectors === 'object' &&\n        checkoutSelectors !== null &&\n        'cart' in checkoutSelectors &&\n        'checkout' in checkoutSelectors &&\n        'config' in checkoutSelectors &&\n        'paymentMethods' in checkoutSelectors\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2HostWindow,\n    AmazonPayV2InitializeOptions,\n    amazonPayV2Regions,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private windowWithAmazonPay: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<AmazonPayV2SDK> {\n        const { initializationData } = method;\n        const region = initializationData?.region || 'us';\n\n        const amazonPayV2Region = amazonPayV2Regions[region];\n\n        await this.scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this.windowWithAmazonPay.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.windowWithAmazonPay.amazon;\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during config creation process. Please try again later.',\n        );\n\n        this.name = 'AmazonPayV2ConfigCreationError';\n        this.type = 'amazon_pay_v2_config_creation_error';\n    }\n}\n","import { WithBuyNowFeature } from './amazon-pay-v2-button-options';\n\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\n    if (!(options instanceof Object)) {\n        return false;\n    }\n\n    return 'buyNowInitializeOptions' in options;\n}\n","import {\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    BuyNowCartCreationError,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    getShippableItemsCount,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    WithAmazonPayV2ButtonInitializeOptions,\n    WithBuyNowFeature,\n} from './amazon-pay-v2-button-options';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\nimport { isWithBuyNowFeatures } from './isWithBuyNowFeatures';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowInitializeOptions: WithBuyNowFeature['buyNowInitializeOptions'];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithAmazonPayV2ButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n        const { buttonColor } = amazonpay || {};\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n\n        const paymentMethod = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const { initializationData } = paymentMethod;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (!amazonpay) {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\n            ? undefined\n            : amazonpay;\n\n        if (\n            isWithBuyNowFeatures(amazonpay) &&\n            typeof amazonpay.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n        ) {\n            this._buyNowInitializeOptions = amazonpay.buyNowInitializeOptions;\n            this.amazonPayV2PaymentProcessor.updateBuyNowFlowFlag(true);\n        }\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId,\n            methodId,\n            options: initializeAmazonButtonOptions,\n            placement: AmazonPayV2Placement.Cart,\n            buttonColor,\n            isButtonMicroTextDisabled: initializationData?.isButtonMicroTextDisabled,\n        });\n\n        if (this._buyNowInitializeOptions) {\n            this.amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\n                this._getCheckoutCreationRequestConfig.bind(this),\n            );\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    private async _createBuyNowCartOrThrow() {\n        const buyNowCartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n        if (!buyNowCartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                buyNowCartRequestBody,\n            );\n\n            return buyNowCart;\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private async _createCheckoutConfig(\n        id: string,\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\n        try {\n            const {\n                body: { payload, public_key, ...rest },\n            } = await this.amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\n\n            return {\n                payloadJSON: payload,\n                publicKeyId: public_key,\n                ...rest,\n            };\n        } catch (error) {\n            throw new AmazonPayV2ConfigCreationError();\n        }\n    }\n\n    private async _getCheckoutCreationRequestConfig() {\n        const buyNowCart = await this._createBuyNowCartOrThrow();\n        const estimatedOrderAmount = {\n            amount: String(buyNowCart.baseAmount),\n            currencyCode: buyNowCart.currency.code,\n        };\n        const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\n\n        return {\n            createCheckoutSessionConfig,\n            estimatedOrderAmount,\n            productType:\n                getShippableItemsCount(buyNowCart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n        };\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface CheckoutConfig {\n    payload: string;\n    signature: string;\n    public_key: string;\n}\n\nexport default class AmazonPayV2RequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createCheckoutConfig(cartId: string): Promise<Response<CheckoutConfig>> {\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2ButtonStrategy from './amazon-pay-v2-button-strategy';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\n\nconst createAmazonPayV2ButtonStrategy: CheckoutButtonStrategyFactory<AmazonPayV2ButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\n    const amazonPayV2PaymentProcessor = createAmazonPayV2PaymentProcessor();\n\n    return new AmazonPayV2ButtonStrategy(\n        paymentIntegrationService,\n        amazonPayV2PaymentProcessor,\n        amazonPayV2RequestSender,\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2ButtonStrategy, [{ id: 'amazonpay' }]);\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","export const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n};\n","export enum ApplePayGatewayType {\n    BRAINTREE = 'braintree',\n    BRAINTREE_FASTLANE = 'braintreeacceleratedcheckout',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport ApplePayButtonInitializeOptions, {\n    WithApplePayButtonInitializeOptions,\n} from './apple-pay-button-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nexport enum ButtonStyleOption {\n    Black = 'black',\n    White = 'white',\n    WhiteBorder = 'white-border',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nconst getButtonStyle = (buttonStyle?: ButtonStyleOption): string => {\n    switch (buttonStyle) {\n        case ButtonStyleOption.White:\n            return 'white';\n\n        case ButtonStyleOption.WhiteBorder:\n            return 'white-outline';\n\n        case ButtonStyleOption.Black:\n        default:\n            return 'black';\n    }\n};\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _requiresShipping?: boolean;\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await this._applePayScriptLoader.loadSdk();\n\n        const { onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } = applepay;\n\n        this._requiresShipping = requiresShipping;\n\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        if (!buyNowInitializeOptions) {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const cart = state.getCart();\n\n        if (cart) {\n            await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n        }\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n\n        this._applePayButton = this._createButton(\n            containerId,\n            this._paymentMethod.initializationData?.styleOption,\n        );\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string, styleOption?: ButtonStyleOption): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement(styleOption);\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(styleOption?: ButtonStyleOption): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', getButtonStyle(styleOption));\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 40px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private async _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this._buyNowInitializeOptions &&\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const {\n                countryCode,\n                currencyCode,\n                merchantCapabilities,\n                supportedNetworks,\n                storeName,\n            } = this._paymentMethod.initializationData;\n\n            const request = this._getRequestWithEmptyTotal(\n                countryCode,\n                currencyCode,\n                supportedNetworks,\n                merchantCapabilities,\n            );\n\n            if (this._requiresShipping) {\n                request.requiredShippingContactFields?.push('postalAddress');\n            }\n\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\n\n            applePaySession.begin();\n        } else {\n            const state = this._paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const config = state.getStoreConfigOrThrow();\n            const checkout = state.getCheckoutOrThrow();\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(\n                applePaySession,\n                this._paymentMethod,\n                config.storeProfile.storeName,\n            );\n\n            applePaySession.begin();\n        }\n    }\n\n    private _getRequestWithEmptyTotal(\n        countryCode: string,\n        currencyCode: string,\n        supportedNetworks: string[],\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\n    ): ApplePayJS.ApplePayPaymentRequest {\n        return {\n            countryCode,\n            currencyCode,\n            supportedNetworks,\n            merchantCapabilities,\n            total: { label: '', amount: '0', type: 'pending' },\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n        };\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        storeName: string,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\n            applePaySession.onpaymentmethodselected = async () => {\n                await this._createBuyNowCart();\n                this._handlePaymentMethodSelected(applePaySession);\n            };\n        }\n\n        applePaySession.onshippingcontactselected = async (event) => {\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\n                await this._createBuyNowCart();\n            }\n\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.onshippingmethodselected = async (event) => {\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _createBuyNowCart() {\n        try {\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                cartRequestBody,\n            );\n\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\n\n            const state = this._paymentIntegrationService.getState();\n            const { shouldExecuteSpamCheck } = state.getCheckoutOrThrow();\n\n            if (shouldExecuteSpamCheck) {\n                await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n            }\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n\n        delete request.total.type;\n\n        applePaySession.completePaymentMethodSelection({\n            newTotal: request.total,\n            newLineItems: request.lineItems,\n        });\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { assertApplePayWindow } from './apple-pay-session-factory';\n\nexport default class ApplePayScriptLoader {\n    private sdkVersion = '1.latest';\n\n    constructor(private scriptLoader: ScriptLoader) {}\n\n    async loadSdk() {\n        await this.scriptLoader.loadScript(\n            `https://applepay.cdn-apple.com/jsapi/${this.sdkVersion}/apple-pay-sdk.js`,\n        );\n\n        assertApplePayWindow(window);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n// TODO: rename BigCommercePaymentsSDKFunding to PayPalSDKFunding\nexport interface BigCommercePaymentsSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * BigCommerce Payments SDK\n *\n */\n\nexport interface BigCommercePaymentsCardFieldsConfig {\n    inputEvents: {\n        onChange(data: BigCommercePaymentsCardFieldsState): void;\n        onFocus(data: BigCommercePaymentsCardFieldsState): void;\n        onBlur(data: BigCommercePaymentsCardFieldsState): void;\n        onInputSubmitRequest(data: BigCommercePaymentsCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: BigCommercePaymentsCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: BigCommercePaymentsHostedFieldsRenderOptions['styles'];\n    onApprove(data: BigCommercePaymentsCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface BigCommercePaymentsCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface BigCommercePaymentsCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype BigCommercePaymentsCardFieldsCard = BigCommercePaymentsHostedFieldsCard;\n\nexport interface BigCommercePaymentsCardFieldsState {\n    cards: BigCommercePaymentsCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: BigCommercePaymentsCardFieldsFieldData;\n        cardNumberField: BigCommercePaymentsCardFieldsFieldData;\n        cardNameField?: BigCommercePaymentsCardFieldsFieldData;\n        cardExpiryField: BigCommercePaymentsCardFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface BigCommercePaymentsFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsCardFields {\n    isEligible(): boolean;\n    CVVField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    ExpiryField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NameField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NumberField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    submit(config?: BigCommercePaymentsCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<BigCommercePaymentsCardFieldsState>;\n}\n\nexport interface BigCommercePaymentsCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (\n        data: BigCommercePaymentsCardFieldsConfig,\n    ) => Promise<BigCommercePaymentsCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: BigCommercePaymentsSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(\n            data: BigCommercePaymentsHostedFieldsRenderOptions,\n        ): Promise<BigCommercePaymentsHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n    Messages(options: BigCommercePaymentsMessagesOptions): BigCommercePaymentsMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\n/**\n *\n * BigCommerce Payments BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * BigCommerce Payments Hosted Fields\n *\n */\nexport interface BigCommercePaymentsHostedFieldsRenderOptions {\n    fields?: {\n        number?: BigCommercePaymentsHostedFieldOption;\n        cvv?: BigCommercePaymentsHostedFieldOption;\n        expirationDate?: BigCommercePaymentsHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface BigCommercePaymentsHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsHostedFields {\n    submit(\n        options?: BigCommercePaymentsHostedFieldsSubmitOptions,\n    ): Promise<BigCommercePaymentsHostedFieldsApprove>;\n    getState(): BigCommercePaymentsHostedFieldsState;\n    on(eventName: string, callback: (event: BigCommercePaymentsHostedFieldsState) => void): void;\n}\n\nexport interface BigCommercePaymentsHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface BigCommercePaymentsHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface BigCommercePaymentsHostedFieldsState {\n    cards: BigCommercePaymentsHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationDate?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationMonth?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationYear?: BigCommercePaymentsHostedFieldsFieldData;\n        cvv?: BigCommercePaymentsHostedFieldsFieldData;\n        postalCode?: BigCommercePaymentsHostedFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments Payment fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * BigCommercePayments Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: BigCommercePaymentsMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from './bigcommerce-payments-request-sender';\nimport BigCommercePaymentsScriptLoader from './bigcommerce-payments-script-loader';\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsScriptLoader: BigCommercePaymentsScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.paypalSdk = await this.bigCommercePaymentsScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.bigCommercePaymentsRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.bigCommercePaymentsRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.bigCommercePaymentsRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/bigcommerce_payments`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'bigcommerce_payments',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsHostWindow,\n    BigCommercePaymentsInitializationData,\n    BigCommercePaymentsScriptParams,\n    ComponentsScriptType,\n    FundingType,\n    PayPalSDK,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsScriptLoader {\n    private window: BigCommercePaymentsHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: BigCommercePaymentsScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<BigCommercePaymentsScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<BigCommercePaymentsScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): BigCommercePaymentsScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'bigcommerce_payments_creditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsIntegrationService,\n    BigCommercePaymentsRequestSender,\n    BigCommercePaymentsScriptLoader,\n} from './index';\n\nconst createBigCommercePaymentsIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        new BigCommercePaymentsScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createBigCommercePaymentsIntegrationService;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsButtonInitializeOptions, {\n    WithBigCommercePaymentsButtonInitializeOptions,\n} from './bigcommerce-payments-button-initialize-options';\n\nexport default class BigCommercePaymentsButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBigCommercePaymentsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(bigcommerce_payments?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !bigcommerce_payments.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof bigcommerce_payments.buyNowInitializeOptions?.getBuyNowCartRequestBody !==\n                'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? bigcommerce_payments.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsButtonStrategy from './bigcommerce-payments-button-strategy';\n\nconst createBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsButtonStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './bigcommerce-payments-types';\n\nexport default class PayPalSdkHelper {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane', 'three-domain-secure'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../bigcommerce-payments-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import {\n    BigCommercePaymentsInitializationData,\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalMessagesSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterButtonInitializeOptions, {\n    WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n} from './bigcommerce-payments-paylater-button-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private payPalSdkHelper: PayPalSdkHelper,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_paylater, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = bigcommerce_payments_paylater || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_paylater);\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this when data attributes will be removed from related cart banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const payPalSdkHelper = await this.payPalSdkHelper.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(payPalSdkHelper, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_paylater: BigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments_paylater;\n\n        const bigCommercePaymentsSdk =\n            this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_paylater',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [\n            bigCommercePaymentsSdk.FUNDING.PAYLATER,\n            bigCommercePaymentsSdk.FUNDING.CREDIT,\n        ];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n                    fundingSource,\n                    style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = bigCommercePaymentsSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterButtonStrategy from './bigcommerce-payments-paylater-button-strategy';\n\nconst createBigCommercePaymentsPayLaterButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsPayLaterButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterButtonStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalSdkHelper from './paypal-sdk-helper';\n\nexport default function createBigCommercePaymentsSdk(): PayPalSdkHelper {\n    return new PayPalSdkHelper(createScriptLoader());\n}\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsAlternativeMethodsButtonInitializeOptions, {\n    WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n} from './bigcommerce-payments-alternative-methods-button-initialize-options';\n\nexport default class BigCommercePaymentsAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_apms, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = bigcommerce_payments_apms || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_apms) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_apms);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            bigcommerce_payments_apms;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.bigcommerce_payments_apms.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments_apms'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: apm,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsAlternativeMethodsButtonStrategy from './bigcommerce-payments-alternative-methods-button-strategy';\n\nconst createBigCommercePaymentsAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsAlternativeMethodsButtonStrategy, [\n    { id: 'bigcommerce_payments_apms' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    StyleButtonColor,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoButtonInitializeOptions, {\n    WithBigCommercePaymentsVenmoButtonInitializeOptions,\n} from './bigcommerce-payments-venmo-button-initialize-options';\n\nexport default class BigCommercePaymentsVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_venmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            bigcommerce_payments_venmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_venmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = bigcommerce_payments_venmo;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle =\n            this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoButtonStrategy from './bigcommerce-payments-venmo-button-strategy';\n\nconst createBigCommercePaymentsVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoButtonStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    BuyNowCartRequestBody,\n    NonceInstrument,\n    PaymentMethod,\n    WithAccountCreation,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface BoltHostWindow extends Window {\n    BoltCheckout?: BoltCheckout;\n    BoltConnect?: BoltConnect;\n    Bolt?(publicKey: string): BoltEmbedded;\n}\n\nexport interface BoltCheckout {\n    configure(cart: BoltCart, hints: Record<string, never>, callbacks?: BoltCallbacks): BoltClient;\n    hasBoltAccount(email: string): Promise<boolean>;\n    getTransactionReference(): Promise<string | undefined>;\n    openCheckout(email: string, callbacks?: BoltOpenCheckoutCallbacks): Promise<void>;\n    setClientCustomCallbacks(callbacks: BoltCallbacks): void;\n    setOrderId(orderId: number): Promise<void>;\n}\n\nexport interface BoltConnect {\n    setupProductPageCheckout?(): void;\n}\n\nexport interface BoltOpenCheckoutCallbacks {\n    close?(): void;\n}\n\nexport interface BoltEmbeddedOptions {\n    styles: { backgroundColor: string };\n    renderSeparateFields?: boolean;\n}\n\nexport interface BoltEmbedded {\n    create(name: string, options?: BoltEmbeddedOptions): BoltEmbededField;\n}\n\nexport interface BoltEmbededField {\n    mount(element: string): void;\n    unmount(): void;\n    tokenize(): Promise<BoltEmbeddedTokenize | Error>;\n}\n\nexport interface BoltDeveloperModeParams {\n    developerMode: BoltDeveloperMode;\n    developerDomain: string;\n}\n\nexport enum BoltDeveloperMode {\n    SandboxMode = 'bolt_sandbox',\n    StagingMode = 'bolt_staging',\n    DevelopmentMode = 'bolt_development',\n}\n\nexport interface BoltClient {\n    open(): void;\n}\n\nexport interface BoltCart {\n    orderToken: string;\n}\n\nexport interface BoltCallbacks {\n    check?(): boolean;\n    onCheckoutStart?(): void;\n    onPaymentSubmit?(): void;\n    success(transaction: BoltTransaction, callback: () => void): void;\n    close?(): void;\n}\n\nexport interface BoltTransaction {\n    id: string;\n    type: string;\n    processor: string;\n    date: number;\n    reference: string;\n    status: string;\n    authorization: BoltAuthorization;\n}\n\nexport interface BoltAuthorization {\n    status: string;\n    reason: string;\n}\n\nexport interface BoltEmbeddedTokenize {\n    bin: string;\n    expiration: string;\n    last4: string;\n    postal_code?: string;\n    token: string;\n    token_type: string;\n}\n\nexport interface BoltPaymentMethod extends PaymentMethod {\n    initializationData?: BoltInitializationData;\n}\n\nexport interface BoltInitializationData {\n    publishableKey: string;\n    developerConfig: BoltDeveloperModeParams;\n    embeddedOneClickEnabled: boolean;\n}\n\nexport type BoltPaymentData = WithAccountCreation & NonceInstrument;\n\nexport interface BoltBuyNowInitializeOptions {\n    storefrontApiToken?: string;\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\nexport enum StyleButtonSize {\n    Small = 'small',\n    Medium = 'medium',\n    Large = 'large',\n}\n\nexport enum StyleButtonShape {\n    Pill = 'pill',\n    Rect = 'rect',\n}\n\nexport interface BoltButtonStyleOptions {\n    shape?: StyleButtonShape;\n    size?: StyleButtonSize;\n}\n","import { stringifyUrl } from 'query-string';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    NotImplementedError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltButtonStyleOptions,\n    BoltHostWindow,\n    BoltPaymentMethod,\n    StyleButtonShape,\n    StyleButtonSize,\n} from './bolt';\nimport { WithBoltButtonInitializeOptions } from './bolt-button-initialize-options';\nimport BoltScriptLoader from './bolt-script-loader';\n\nexport default class BoltButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private boltScriptLoader: BoltScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBoltButtonInitializeOptions,\n    ): Promise<void> {\n        const { bolt, containerId, methodId } = options;\n        const { buyNowInitializeOptions, style } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bolt) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bolt\" argument is not provided.`,\n            );\n        }\n\n        const isBuyNowFlow = Boolean(buyNowInitializeOptions);\n\n        if (!isBuyNowFlow) {\n            throw new NotImplementedError('Only buy now flow is implemented for Bolt button');\n        }\n\n        if (\n            !buyNowInitializeOptions?.storefrontApiToken ||\n            typeof buyNowInitializeOptions.storefrontApiToken !== 'string'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.storefrontApiToken\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod: BoltPaymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        await this.boltScriptLoader.loadBoltClient(\n            publishableKey,\n            config.testMode,\n            developerConfig,\n            'BigCommerce',\n            buyNowInitializeOptions.storefrontApiToken,\n        );\n\n        this.renderButton(containerId, paymentMethod, style);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        if (typeof this.boltHostWindow.BoltConnect?.setupProductPageCheckout !== 'function') {\n            return;\n        }\n\n        this.addButtonContainer(containerId, paymentMethod, style);\n        this.boltHostWindow.BoltConnect.setupProductPageCheckout();\n    }\n\n    private addButtonContainer(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            return;\n        }\n\n        const boltButtonContainer = document.createElement('div');\n        const boltButtonObject = document.createElement('object');\n\n        boltButtonContainer.setAttribute('id', 'product-page-checkout-wrapper');\n        boltButtonContainer.setAttribute('class', 'bolt-button-wrapper');\n        boltButtonContainer.setAttribute('style', 'display:none');\n        boltButtonContainer.setAttribute('data-tid', 'product-page-checkout-wrapper');\n\n        boltButtonObject.setAttribute('data', this.getBoltObjectData(paymentMethod, style));\n        boltButtonObject.setAttribute('class', 'bolt-product-checkout-button');\n\n        boltButtonContainer.append(boltButtonObject);\n        container.innerHTML = '';\n        container.append(boltButtonContainer);\n    }\n\n    private getBoltObjectData(\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): string {\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        const domainUrl = this.boltScriptLoader.getDomainURL(!!config.testMode, developerConfig);\n        const buttonHeight = this.getButtonHeight(style?.size);\n        const buttonBorderRadius = this.getButtonBorderRadius(style?.shape, buttonHeight);\n\n        return stringifyUrl({\n            url: `https://${domainUrl}/v1/checkout_button`,\n            query: {\n                publishable_key: publishableKey,\n                variant: 'ppc',\n                height: buttonHeight,\n                border_radius: buttonBorderRadius,\n            },\n        });\n    }\n\n    private getButtonHeight(buttonSize?: StyleButtonSize): number | undefined {\n        if (!buttonSize) {\n            return;\n        }\n\n        switch (buttonSize) {\n            case StyleButtonSize.Small:\n                return 25;\n\n            case StyleButtonSize.Large:\n                return 45;\n\n            case StyleButtonSize.Medium:\n            default:\n                return 40;\n        }\n    }\n\n    private getButtonBorderRadius(\n        buttonShape?: StyleButtonShape,\n        buttonHeight?: number,\n    ): number | undefined {\n        if (!buttonShape) {\n            return;\n        }\n\n        switch (buttonShape) {\n            case StyleButtonShape.Pill:\n                return buttonHeight ? Math.round(buttonHeight / 2) : undefined;\n\n            case StyleButtonShape.Rect:\n            default:\n                return 4;\n        }\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    InvalidArgumentError,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltCheckout,\n    BoltDeveloperMode,\n    BoltDeveloperModeParams,\n    BoltEmbedded,\n    BoltHostWindow,\n} from './bolt';\n\nexport default class BoltScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async loadBoltClient(\n        publishableKey?: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): Promise<BoltCheckout> {\n        if (this.boltHostWindow.BoltCheckout) {\n            return this.boltHostWindow.BoltCheckout;\n        }\n\n        if (!publishableKey) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"publishableKey\" argument is not provided.',\n            );\n        }\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/connect-bigcommerce.js`,\n            this.getScriptOptions('bolt-connect', publishableKey, cartId, storefrontApiToken),\n        );\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/track.js`,\n            this.getScriptOptions('bolt-track', publishableKey),\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this.boltHostWindow.BoltCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.BoltCheckout;\n    }\n\n    async loadBoltEmbedded(\n        publishableKey: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n    ): Promise<BoltEmbedded> {\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: {\n                id: 'bolt-embedded',\n            },\n        };\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/embed.js`,\n            options,\n        );\n\n        if (!this.boltHostWindow.Bolt) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.Bolt(publishableKey);\n    }\n\n    getDomainURL(testMode: boolean, developerModeParams?: BoltDeveloperModeParams): string {\n        if (!testMode) {\n            return 'connect.bolt.com';\n        }\n\n        if (developerModeParams) {\n            switch (developerModeParams.developerMode) {\n                case BoltDeveloperMode.StagingMode:\n                    return 'connect-staging.bolt.com';\n\n                case BoltDeveloperMode.DevelopmentMode:\n                    return `connect.${developerModeParams.developerDomain}`;\n            }\n        }\n\n        return 'connect-sandbox.bolt.com';\n    }\n\n    private getScriptOptions(\n        id: string,\n        publishableKey: string,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): LoadScriptOptions {\n        return {\n            async: true,\n            attributes: {\n                id,\n                'data-publishable-key': publishableKey,\n                ...(cartId && { 'data-shopping-cart-id': cartId }),\n                ...(storefrontApiToken && { 'data-storefront-api-token': storefrontApiToken }),\n            },\n        };\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BoltButtonStrategy from './bolt-button-strategy';\nimport BoltScriptLoader from './bolt-script-loader';\n\nconst createBoltButtonStrategy: CheckoutButtonStrategyFactory<BoltButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BoltButtonStrategy(\n        paymentIntegrationService,\n        new BoltScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createBoltButtonStrategy, [{ id: 'bolt' }]);\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","// the PayPal side of things uses uppercase keys instead of camel case\n\n/**\n *\n * PayPal constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\n/**\n *\n * PayPal interfaces\n *\n */\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    buyerCountry?: string;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport enum MessagingPlacements {\n    CART = 'cart',\n    HOME = 'homepage',\n    PAYMENT = 'payment',\n    PRODUCT = 'product',\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onClick?(): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number | string;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n    close(): void;\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<unknown>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n","import { supportsPopups } from '@braintree/browser-detection';\n\nimport {\n    Address,\n    CancellablePromise,\n    CreditCardInstrument,\n    LegacyAddress,\n    NonceInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodCancelledError,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeDataCollectors,\n    BraintreeEnv,\n    BraintreeError,\n    BraintreeFastlane,\n    BraintreeFastlaneStylesOption,\n    BraintreeHostWindow,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeRequestData,\n    BraintreeShippingAddressOverride,\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureOptions,\n    BraintreeTokenizationDetails,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig,\n    BraintreeVerifyPayload,\n    PAYPAL_COMPONENTS,\n    TokenizationPayload,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { isEmpty } from 'lodash';\nimport isCreditCardInstrumentLike from './utils/is-credit-card-instrument-like';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\n// Info: this class is deprecated and will be removed in a nearest future. Please, do not add anything here.\nexport default class BraintreeIntegrationService {\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private dataCollectors: BraintreeDataCollectors = {};\n    private paypalCheckout?: BraintreePaypalCheckout;\n    private braintreePaypal?: Promise<BraintreePaypal>;\n    private threeDSecureOptions?: BraintreeThreeDSecureOptions;\n    private threeDS?: Promise<BraintreeThreeDSecure>;\n    private venmoCheckout?: BraintreeVenmoCheckout;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private overlay?: Overlay,\n    ) {}\n\n    initialize(clientToken: string, threeDSecureOptions?: BraintreeThreeDSecureOptions) {\n        this.clientToken = clientToken;\n        this.threeDSecureOptions = threeDSecureOptions;\n    }\n\n    async getBraintreeFastlane(\n        cardId?: string,\n        isTestModeEnabled?: boolean,\n        styles?: BraintreeFastlaneStylesOption,\n    ): Promise<BraintreeFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('axoEnv', 'sandbox');\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n        }\n\n        if (!this.braintreeHostWindow.braintreeFastlane) {\n            const clientToken = this.getClientTokenOrThrow();\n            const client = await this.getClient();\n            const deviceData = await this.getSessionId(cardId);\n\n            const braintreeFastlaneCreator = await this.braintreeScriptLoader.loadFastlane();\n\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.braintreeHostWindow.braintreeFastlane = await braintreeFastlaneCreator.create({\n                authorization: clientToken,\n                client,\n                deviceData,\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.braintreeHostWindow.braintreeFastlane;\n    }\n\n    // Info: This method is deprecated. Use getClient method from BraintreeSdk class instead\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this.braintreePaypal) {\n            this.braintreePaypal = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.braintreePaypal;\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        const newWindowFlow = supportsPopups();\n\n        return this.getPaypal()\n            .then((paypal) => {\n                if (newWindowFlow) {\n                    this.overlay?.show({\n                        onClick: () => paypal.focusWindow(),\n                    });\n                }\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then((response) => {\n                this.overlay?.remove();\n\n                return response;\n            })\n            .catch((error) => {\n                this.overlay?.remove();\n\n                throw error;\n            });\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this.braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError | undefined,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n                components: PAYPAL_COMPONENTS.toString(),\n                intent: config.intent,\n                commit: config.commit ?? true,\n            };\n\n            if (!this.braintreeHostWindow.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this.paypalCheckout = await paypalCheckout.create(\n            paypalCheckoutConfig,\n            paypalCheckoutCallback,\n        );\n\n        return this.paypalCheckout;\n    }\n\n    async getDataCollector(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const cacheKey: keyof BraintreeDataCollectors = options?.paypal ? 'paypal' : 'default';\n\n        let cached = this.dataCollectors[cacheKey];\n\n        if (!cached) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                cached = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    cached = {\n                        deviceData: undefined,\n                        teardown: () => Promise.resolve(),\n                    };\n                } else {\n                    throw error;\n                }\n            }\n\n            this.dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getBraintreeEnv(isTestMode = false): BraintreeEnv {\n        return isTestMode ? BraintreeEnv.Sandbox : BraintreeEnv.Production;\n    }\n\n    mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n        return {\n            recipientName: `${address.firstName} ${address.lastName}`,\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n        };\n    }\n\n    mapToLegacyShippingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { email, phone, shippingAddress } = details;\n        const recipientName = shippingAddress?.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email,\n            first_name: firstName || '',\n            last_name: lastName || '',\n            phone_number: phone,\n            address_line_1: shippingAddress?.line1,\n            address_line_2: shippingAddress?.line2,\n            city: shippingAddress?.city,\n            state: shippingAddress?.state,\n            country_code: shippingAddress?.countryCode,\n            postal_code: shippingAddress?.postalCode,\n        };\n    }\n\n    mapToLegacyBillingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n        const address = billingAddress || shippingAddress;\n\n        return {\n            email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: phone,\n            address_line_1: address?.line1,\n            address_line_2: address?.line2,\n            city: address?.city,\n            state: address?.state,\n            country_code: address?.countryCode,\n            postal_code: address?.postalCode,\n        };\n    }\n\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    async getSessionId(cartId?: string): Promise<string | undefined> {\n        const { deviceData } = await this.getDataCollector({\n            riskCorrelationId: cartId,\n        });\n\n        return deviceData;\n    }\n\n    async teardown(): Promise<void> {\n        await this.teardownModule(this.dataCollectors.default);\n        await this.teardownModule(this.dataCollectors.paypal);\n        this.dataCollectors = {};\n\n        await this.teardownModule(this.paypalCheckout);\n        this.paypalCheckout = undefined;\n\n        // await this.teardownModule(this._venmoCheckout);\n        // this._venmoCheckout = undefined;\n\n        // await this.teardownModule(this._visaCheckout);\n        // this._visaCheckout = undefined;\n    }\n\n    async get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            this.threeDS = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]).then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }));\n        }\n\n        return this.threeDS;\n    }\n\n    async getVenmoCheckout(\n        venmoConfig?: BraintreeVenmoCreatorConfig,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this.venmoCheckout) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n                ...(venmoConfig || {}),\n            };\n\n            this.venmoCheckout = await new Promise<BraintreeVenmoCheckout>((resolve, reject) => {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                venmoCheckout.create(\n                    venmoCheckoutConfig,\n                    (error: BraintreeError, braintreeVenmoCheckout: BraintreeVenmoCheckout) => {\n                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                        if (error) {\n                            return reject(error);\n                        }\n\n                        if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                            return reject(new UnsupportedBrowserError());\n                        }\n\n                        resolve(braintreeVenmoCheckout);\n                    },\n                );\n            });\n        }\n\n        return this.venmoCheckout;\n    }\n\n    /*\n       Braintree Credit Card and Braintree Hosted Form\n   */\n    async verifyCard(\n        payment: Payment,\n        billingAddress: Address,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this.tokenizeCard(payment, billingAddress);\n\n        return this.challenge3DSVerification(tokenizationPayload, amount);\n    }\n\n    async tokenizeCard(payment: Payment, billingAddress: Address): Promise<TokenizationPayload> {\n        const { paymentData } = payment;\n\n        if (!isCreditCardInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const errors = this.getErrorsRequiredFields(paymentData);\n\n        if (!isEmpty(errors)) {\n            throw new PaymentInvalidFormError(errors);\n        }\n\n        const requestData = this.mapToCreditCard(paymentData, billingAddress);\n        const client = await this.getClient();\n        const { creditCards } = await client.request(requestData);\n\n        return {\n            nonce: creditCards[0].nonce,\n            bin: creditCards[0].details.bin,\n        };\n    }\n\n    async challenge3DSVerification(\n        tokenizationPayload: TokenizationPayload,\n        amount: number,\n    ): Promise<BraintreeVerifyPayload> {\n        const threeDSecure = await this.get3DS();\n\n        return this.present3DSChallenge(threeDSecure, amount, tokenizationPayload);\n    }\n\n    private teardownModule(module?: BraintreeModule) {\n        return module ? module.teardown() : Promise.resolve();\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private getErrorsRequiredFields(\n        paymentData: CreditCardInstrument,\n    ): PaymentInvalidFormErrorDetails {\n        const { ccNumber, ccExpiry } = paymentData;\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        if (!ccNumber) {\n            errors.ccNumber = [\n                {\n                    message: 'Credit card number is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!ccExpiry) {\n            errors.ccExpiry = [\n                {\n                    message: 'Expiration date is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        return errors;\n    }\n\n    private mapToCreditCard(\n        creditCard: CreditCardInstrument,\n        billingAddress?: Address,\n    ): BraintreeRequestData {\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: billingAddress && {\n                        countryCodeAlpha2: billingAddress.countryCode,\n                        locality: billingAddress.city,\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress: billingAddress.address2\n                            ? `${billingAddress.address1} ${billingAddress.address2}`\n                            : billingAddress.address1,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n\n    private present3DSChallenge(\n        threeDSecure: BraintreeThreeDSecure,\n        amount: number,\n        tokenizationPayload: TokenizationPayload,\n    ): Promise<BraintreeVerifyPayload> {\n        const { nonce, bin } = tokenizationPayload;\n\n        if (!this.threeDSecureOptions || !nonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            addFrame,\n            removeFrame,\n            challengeRequested = true,\n            additionalInformation,\n        } = this.threeDSecureOptions;\n        const cancelVerifyCard = async () => {\n            const response = await threeDSecure.cancelVerifyCard();\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            verification.cancel(new PaymentMethodCancelledError());\n\n            return response;\n        };\n\n        const roundedAmount = amount.toFixed(2);\n\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                addFrame: (error, iframe) => {\n                    if (addFrame) {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    }\n                },\n                amount: Number(roundedAmount),\n                bin,\n                challengeRequested,\n                nonce,\n                removeFrame,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n                collectDeviceData: true,\n                additionalInformation,\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import { CreditCardInstrument } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isCreditCardInstrumentLike(\n    instrument: unknown,\n): instrument is CreditCardInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const creditCardInstrument = instrument as Partial<Record<string, unknown>>;\n\n    return (\n        typeof creditCardInstrument.ccExpiry === 'object' &&\n        creditCardInstrument.ccExpiry !== null &&\n        typeof creditCardInstrument.ccNumber === 'string' &&\n        typeof creditCardInstrument.ccName === 'string'\n    );\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalStyleOptions } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function getValidButtonStyle(style?: PaypalStyleOptions): PaypalStyleOptions {\n    const { color, fundingicons, height = 40, layout, shape, size, tagline } = style || {};\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height: number | string): number {\n    const minHeight = 25;\n    const defaultHeight = 40;\n    const maxHeight = 55;\n\n    const currentHeight = Number(height);\n\n    if (!currentHeight || Number.isNaN(currentHeight)) {\n        return defaultHeight;\n    }\n\n    if (currentHeight > maxHeight) {\n        return maxHeight;\n    }\n\n    if (currentHeight < minHeight) {\n        return minHeight;\n    }\n\n    return currentHeight;\n}\n","import { BraintreeShippingAddressOverride } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalButtonInitializeOptions, {\n    WithBraintreePaypalButtonInitializeOptions,\n} from './braintree-paypal-button-initialize-options';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypal.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypal;\n        const { paypal } = this.braintreeHostWindow;\n\n        if (paypal) {\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                fundingSource: paypal.FUNDING.PAYPAL,\n                style: getValidButtonStyle(style),\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                onEligibilityFailure();\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypal;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount;\n            const currencyCode = buyNowCart\n                ? braintreepaypal.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalButtonStrategy from './braintree-paypal-button-strategy';\n\nconst createBraintreePaypalButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalButtonStrategy, [{ id: 'braintreepaypal' }]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    PayPalBNPLConfigurationItem,\n} from './braintree';\nimport { MessagesStyleOptions, MessagingPlacements } from './paypal';\n\nexport default class BraintreeMessages {\n    private braintreeHostWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    render(methodId: string, containerId: string, placement: MessagingPlacements): void {\n        const messagingContainer = containerId && document.getElementById(containerId);\n\n        if (this.braintreeHostWindow.paypal && messagingContainer) {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const billingAddress = state.getBillingAddressOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n            if (!paymentMethod.initializationData) {\n                return;\n            }\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData;\n\n            const bannedId = placement === MessagingPlacements.PAYMENT ? 'checkout' : placement;\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === bannedId);\n\n            if (!bannerConfiguration || !bannerConfiguration.status) {\n                return;\n            }\n\n            // TODO: remove this code when this data attributes will be removed from banner div container in content service\n            if (placement === MessagingPlacements.CART) {\n                messagingContainer.removeAttribute('data-pp-style-logo-type');\n                messagingContainer.removeAttribute('data-pp-style-logo-position');\n                messagingContainer.removeAttribute('data-pp-style-text-color');\n                messagingContainer.removeAttribute('data-pp-style-text-size');\n            }\n\n            this.braintreeHostWindow.paypal\n                .Messages({\n                    amount: cart.cartAmount,\n                    buyerCountry: billingAddress.countryCode,\n                    placement,\n                    style: this.getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n                })\n                .render(`#${containerId}`);\n        }\n    }\n\n    private getPaypalMessagesStylesFromBNPLConfig({\n        styles,\n    }: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n        const messagesStyles: MessagesStyleOptions = {};\n\n        if (styles.color) {\n            messagesStyles.color = styles.color;\n        }\n\n        if (styles.layout) {\n            messagesStyles.layout = styles.layout;\n        }\n\n        if (styles['logo-type'] || styles['logo-position']) {\n            messagesStyles.logo = {};\n\n            if (styles['logo-type']) {\n                messagesStyles.logo.type = styles['logo-type'];\n            }\n\n            if (styles['logo-position']) {\n                messagesStyles.logo.position = styles['logo-position'];\n            }\n        }\n\n        if (styles.ratio) {\n            messagesStyles.ratio = styles.ratio;\n        }\n\n        if (styles['text-color'] || styles['text-size']) {\n            messagesStyles.text = {};\n\n            if (styles['text-color']) {\n                messagesStyles.text.color = styles['text-color'];\n            }\n\n            if (styles['text-size']) {\n                messagesStyles.text.size = +styles['text-size'];\n            }\n        }\n\n        return messagesStyles;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    MessagingPlacements,\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalCreditButtonInitializeOptions, {\n    WithBraintreePaypalCreditButtonInitializeOptions,\n} from './braintree-paypal-credit-button-initialize-options';\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeMessages: BraintreeMessages,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk will be rolled out to 100%\n        const features = state.getStoreConfig()?.checkoutSettings.features ?? {};\n        const isBannerImplementationDisabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk',\n        );\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (!isBannerImplementationDisabled && braintreepaypalcredit.messagingContainerId) {\n                this.renderPayPalMessages(methodId, braintreepaypalcredit.messagingContainerId);\n            }\n\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalMessages(methodId: string, messagingContainerId: string): void {\n        this.braintreeMessages.render(methodId, messagingContainerId, MessagingPlacements.CART);\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? {\n                              label: PaypalButtonStyleLabelOption.CREDIT,\n                              ...getValidButtonStyle(style),\n                          }\n                        : getValidButtonStyle(style);\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    } else if (\n                        paypal.FUNDING.CREDIT &&\n                        onEligibilityFailure &&\n                        typeof onEligibilityFailure === 'function'\n                    ) {\n                        // the condition is related to paypal.FUNDING.CREDIT because when paypal.FUNDING.PAYLATER is not eligible then\n                        // CREDIT button should be configured and triggered to render with eligibility check\n                        // and if it is not eligible, then onEligibilityFailure callback should be called\n                        onEligibilityFailure();\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount; // state.getCheckoutOrThrow().outstandingBalance\n            const currencyCode = buyNowCart\n                ? braintreepaypalcredit.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditButtonStrategy from './braintree-paypal-credit-button-strategy';\n\nconst createBraintreePaypalCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalCreditButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n    const braintreeMessages = new BraintreeMessages(paymentIntegrationService);\n\n    return new BraintreePaypalCreditButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeMessages,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditButtonStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeVisaCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const { clientToken, initializationData, config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const {\n            currency: { code },\n            cartAmount,\n        } = state.getCartOrThrow();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: code,\n                subtotal: String(cartAmount),\n            },\n            settings: {\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        this.createSignInButton(containerId);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on('payment.success', async (payment) => {\n            await this.paymentSuccess(braintreeVisaCheckout, payment);\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private async paymentSuccess(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.toVisaCheckoutAddress(shipping),\n                billingAddress = this.toVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return this.insertVisaCheckoutButton(container);\n    }\n\n    private insertVisaCheckoutButton(container: Element): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.alignItems = 'flex-end';\n\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutButtonStrategy from './braintree-visa-checkout-button-strategy';\n\nconst createBraintreeVisaCheckoutButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVisaCheckoutButtonStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutButtonStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeSdk,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    mapToLegacyBillingAddress,\n    mapToLegacyShippingAddress,\n    PaypalButtonStyleColorOption,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isBraintreeError from '../is-braintree-error';\nimport { isUnsupportedBrowserError } from '../isUnsupportedBrowserError';\n\nimport { WithBraintreeVenmoInitializeOptions } from './braintree-venmo-initialize-options';\n\nconst getVenmoButtonStyle = (styles: PaypalStyleOptions): Record<string, string> => {\n    const { color, height } = styles;\n\n    const colorParser = (c: string) => {\n        if (c === PaypalButtonStyleColorOption.WHITE) {\n            return '#FFFFFF';\n        }\n\n        return '#3D95CE';\n    };\n\n    return {\n        backgroundColor: colorParser(color || ''),\n        backgroundPosition: '50% 50%',\n        backgroundSize: '80px auto',\n        backgroundImage: `url(\"/app/assets/img/payment-providers/venmo-logo-${\n            color === PaypalButtonStyleColorOption.WHITE\n                ? PaypalButtonStyleColorOption.BLUE\n                : PaypalButtonStyleColorOption.WHITE\n        }.svg\")`,\n        backgroundRepeat: 'no-repeat',\n        borderRadius: '4px',\n        cursor: 'pointer',\n        transition: '0.2s ease',\n        minHeight: `${height || 40}px`,\n        minWidth: '150px',\n        height: '100%',\n        width: '100%',\n        border: color === PaypalButtonStyleColorOption.WHITE ? '1px solid black' : 'none',\n    };\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreeVenmoInitializeOptions,\n    ): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { clientToken, initializationData }: PaymentMethod = paymentMethod;\n        const { paymentButtonStyles } = initializationData;\n        const { cartButtonStyles } = paymentButtonStyles || {};\n        const styles = braintreevenmo?.style || cartButtonStyles;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadDefaultCheckout();\n\n        this.onError = braintreevenmo?.onError || this.handleError;\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            const braintreeVenmoCheckout = await this.braintreeSdk.getVenmoCheckoutOrThrow();\n\n            this.renderVenmoButton(\n                braintreeVenmoCheckout,\n                containerId,\n                braintreevenmo?.buyNowInitializeOptions,\n                styles,\n            );\n        } catch (error) {\n            if (isBraintreeError(error) || isUnsupportedBrowserError(error)) {\n                this.handleInitializationVenmoError(error, containerId);\n            }\n        }\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private async createBuyNowCart(\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): Promise<Cart | undefined> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions?.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n\n        return undefined;\n    }\n\n    private handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this.removeVenmoContainer(containerId);\n\n        return this.onError(error);\n    }\n\n    private removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n        buttonStyles?: PaypalStyleOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n        const { color } = buttonStyles || {};\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, getVenmoButtonStyle(buttonStyles || {}));\n\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this.createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (\n                        error: BraintreeError | undefined,\n                        payload: BraintreeTokenizePayload,\n                    ) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            this.onError(error);\n                        }\n\n                        await this.handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        if (color === PaypalButtonStyleColorOption.BLUE) {\n            venmoButton.addEventListener('mouseenter', () => {\n                venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n            });\n\n            venmoButton.addEventListener('mouseleave', () => {\n                venmoButton.style.backgroundColor = getVenmoButtonStyle(\n                    buttonStyles || {},\n                ).backgroundColor;\n            });\n        }\n    }\n\n    private async handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { nonce, details } = payload;\n\n        this.formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: 'braintreevenmo',\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import { BraintreeError } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function isBraintreeError(\n    error: BraintreeError | Error | unknown,\n): error is BraintreeError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'name' in error &&\n        (error as BraintreeError).name === 'BraintreeError'\n    );\n}\n","import { UnsupportedBrowserError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport function isUnsupportedBrowserError(error: unknown): error is UnsupportedBrowserError {\n    return error instanceof UnsupportedBrowserError;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVenmoButtonStrategy from './braintree-venmo-button-strategy';\n\nconst createBraintreeVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVenmoButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const scriptLoader = getScriptLoader();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        scriptLoader,\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeVenmoButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVenmoButtonStrategy, [{ id: 'braintreevenmo' }]);\n","/**\n * A set of options that are required to initialize the GooglePay payment method\n *\n * If the customer chooses to pay with GooglePay, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n *\n * ```html\n * <!-- This is where the GooglePay button will be inserted -->\n * <div id=\"wallet-button\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     // Using GooglePay provided by Braintree as an example\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button'\n *     },\n * });\n * ```\n *\n * Additional event callbacks can be registered.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button',\n *         onError(error) {\n *             console.log(error);\n *         },\n *         onPaymentSelect() {\n *             console.log('Selected');\n *         },\n *     },\n * });\n * ```\n */\nexport default interface GooglePayPaymentInitializeOptions {\n    /**\n     * A container for loading spinner.\n     */\n    loadingContainerId?: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the GooglePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when GooglePay fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n\n/**\n * The recognized keys to pass the initialization options for Google Pay.\n */\nexport enum GooglePayKey {\n    ADYEN_V2 = 'googlepayadyenv2',\n    ADYEN_V3 = 'googlepayadyenv3',\n    AUTHORIZE_NET = 'googlepayauthorizenet',\n    BNZ = 'googlepaybnz',\n    BRAINTREE = 'googlepaybraintree',\n    PAYPAL_COMMERCE = 'googlepaypaypalcommerce',\n    BIGCOMMERCE_PAYMENTS = 'googlepay_bigcommerce_payments',\n    CHECKOUT_COM = 'googlepaycheckoutcom',\n    CYBERSOURCE_V2 = 'googlepaycybersourcev2',\n    ORBITAL = 'googlepayorbital',\n    STRIPE = 'googlepaystripe',\n    STRIPE_UPE = 'googlepaystripeupe',\n    STRIPE_OCS = 'googlepaystripeocs',\n    WORLDPAY_ACCESS = 'googlepayworldpayaccess',\n    TD_ONLINE_MART = 'googlepaytdonlinemart',\n}\n\n/**\n * The options that are required to initialize the GooglePay payment method.\n * They can be omitted unless you need to support GooglePay.\n */\nexport type WithGooglePayPaymentInitializeOptions = {\n    [k in GooglePayKey]?: GooglePayPaymentInitializeOptions;\n};\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { InvalidArgumentError } from '../errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(currencySettings: CurrencyConfig) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const { decimalPlaces, symbolLocation, symbol, thousandsSeparator, decimalSeparator } =\n            currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ? `-${formattedCurrency}` : formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [integerAmount, decimalAmount = ''] = this._toFixed(\n            positiveAmount,\n            this._decimalPlaces,\n        ).split('.');\n        const parsedIntegerAmount = integerAmount.replace(\n            /\\B(?=(\\d{3})+(?!\\d))/g,\n            this._thousandsSeparator,\n        );\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [parsedIntegerAmount, decimalAmount].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return this._symbolLocation.toLowerCase() === 'left'\n            ? `${this._symbol}${formattedNumber}`\n            : `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+`${Math.round(+`${value}e${precision}`)}e${-precision}`).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(private _storeConfig: StoreConfig) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { BigCommercePaymentsIntent } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    BrowserInfo,\n    BuyNowCartRequestBody,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { FundingType } from './google-pay-paypal-commerce/types';\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\nexport interface GooglePayGatewayBaseRequest {\n    apiVersion: 2;\n    apiVersionMinor: 0;\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\ntype GooglePayGatewayBaseResponse = GooglePayGatewayBaseRequest;\n\ninterface GooglePayPaymentMethod<T> {\n    type: string;\n    parameters: T;\n}\n\ntype GooglePayAuthMethod = 'PAN_ONLY' | 'CRYPTOGRAM_3DS';\n\nexport enum GooglePayCardNetwork {\n    AMEX = 'AMEX',\n    DISCOVER = 'DISCOVER',\n    INTERAC = 'INTERAC',\n    JCB = 'JCB',\n    MC = 'MASTERCARD',\n    VISA = 'VISA',\n}\n\nexport interface GooglePayCardParameters {\n    allowedAuthMethods: GooglePayAuthMethod[];\n    allowedCardNetworks: GooglePayCardNetwork[];\n    billingAddressRequired?: boolean;\n    billingAddressParameters?: {\n        format?: 'MIN' | 'FULL';\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface GooglePayBaseCardPaymentMethod\n    extends GooglePayPaymentMethod<GooglePayCardParameters> {\n    type: 'CARD';\n    parameters: GooglePayCardParameters;\n}\n\nexport interface GooglePayIsReadyToPayRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n}\n\ninterface GooglePayGatewayBaseParameters {\n    gateway: string;\n}\n\nexport interface GooglePayRegularGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId: string;\n}\n\nexport interface GooglePayStripeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'stripe:version'?: string;\n    'stripe:publishableKey'?: string;\n}\n\nexport interface GooglePayBraintreeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'braintree:apiVersion'?: string;\n    'braintree:authorizationFingerprint'?: string;\n    'braintree:merchantId'?: string;\n    'braintree:sdkVersion'?: string;\n}\n\nexport interface GooglePayPayPalCommerceGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId?: string;\n}\n\nexport type GooglePayGatewayParameters =\n    | GooglePayRegularGatewayParameters\n    | GooglePayStripeGatewayParameters\n    | GooglePayBraintreeGatewayParameters;\n\nexport interface GooglePayCardPaymentMethod extends GooglePayBaseCardPaymentMethod {\n    tokenizationSpecification: {\n        type: 'PAYMENT_GATEWAY';\n        parameters: GooglePayGatewayParameters;\n    };\n}\n\nexport interface GooglePayTransactionInfo {\n    /** [!] Required for EEA countries */\n    countryCode?: string;\n    currencyCode: string;\n    totalPriceStatus: TotalPriceStatusType;\n    totalPrice: string;\n}\n\nexport interface GooglePayMerchantInfo {\n    merchantName: string;\n    merchantId: string;\n    authJwt: string;\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport interface GooglePayPaymentDataRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayCardPaymentMethod];\n    transactionInfo: GooglePayTransactionInfo;\n    merchantInfo: GooglePayMerchantInfo;\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n    offerInfo: Offers;\n    shippingOptionRequired?: boolean;\n    callbackIntents?: CallbackIntentsType[];\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport interface ShippingOptionParameters {\n    defaultSelectedOptionId?: string;\n    shippingOptions?: GoogleShippingOption[];\n}\n\nexport interface NewShippingOptionParameters {\n    newShippingOptionParameters?: ShippingOptionParameters;\n}\n\nexport interface NewOfferInfo {\n    newOfferInfo?: Offers;\n}\n\nexport interface Offers {\n    offers: OfferInfoItem[];\n}\n\nexport interface GooglePayError {\n    message: string;\n    reason: ErrorReasonType;\n    intent: CallbackTriggerType;\n}\n\nexport enum ErrorReasonType {\n    OFFER_INVALID = 'OFFER_INVALID',\n    PAYMENT_DATA_INVALID = 'PAYMENT_DATA_INVALID',\n    SHIPPING_ADDRESS_INVALID = 'SHIPPING_ADDRESS_INVALID',\n    SHIPPING_ADDRESS_UNSERVICEABLE = 'SHIPPING_ADDRESS_UNSERVICEABLE',\n    SHIPPING_OPTION_INVALID = 'SHIPPING_OPTION_INVALID',\n    OTHER_ERROR = 'OTHER_ERROR',\n}\n\nexport interface OfferInfoItem {\n    redemptionCode: string;\n    description: string;\n}\n\nexport interface HandleCouponsOut {\n    newOfferInfo: GooglePayPaymentDataRequest['offerInfo'];\n    error?: GooglePayError;\n}\n\nexport interface GoogleShippingOption {\n    id: string;\n    label?: string;\n}\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n    shippingAddress: GooglePayFullBillingAddress;\n    shippingOptionData: GoogleShippingOption;\n    offerData: {\n        redemptionCodes: string[];\n    };\n}\n\nexport interface GooglePayPaymentOptions {\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): onPaymentDataChangedOut;\n    };\n}\n\nexport type onPaymentDataChangedOut = Promise<\n    | (NewTransactionInfo & NewShippingOptionParameters & NewOfferInfo & { error?: GooglePayError })\n    | void\n>;\n\nexport type GooglePayRequiredPaymentData = Pick<\n    GooglePayPaymentDataRequest,\n    | 'emailRequired'\n    | 'shippingAddressRequired'\n    | 'shippingAddressParameters'\n    | 'shippingOptionRequired'\n>;\n\ninterface GooglePayMinBillingAddress {\n    name: string;\n    postalCode: string;\n    countryCode: string;\n    phoneNumber?: string;\n}\n\nexport interface GooglePayFullBillingAddress extends GooglePayMinBillingAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    locality: string;\n    administrativeArea: string;\n    sortingCode: string;\n}\n\ninterface GooglePayCardInfo {\n    cardNetwork: GooglePayCardNetwork;\n    cardDetails: string;\n    billingAddress?: GooglePayFullBillingAddress;\n}\n\ninterface GooglePayPaymentMethodData<T> {\n    description: string;\n    tokenizationData: {\n        type: 'PAYMENT_GATEWAY';\n        token: string;\n    };\n    type: string;\n    info: T;\n}\n\ninterface GooglePayCardData extends GooglePayPaymentMethodData<GooglePayCardInfo> {\n    type: 'CARD';\n}\n\ninterface GooglePayPaymentDataResponse<T> extends GooglePayGatewayBaseResponse {\n    paymentMethodData: GooglePayPaymentMethodData<T>;\n    shippingAddress?: GooglePayFullBillingAddress;\n    email?: string;\n}\n\nexport interface GooglePayCardDataResponse extends GooglePayPaymentDataResponse<GooglePayCardInfo> {\n    paymentMethodData: GooglePayCardData;\n}\n\ninterface GooglePayIsReadyToPayResponse {\n    result: boolean;\n}\n\nexport interface GooglePayButtonOptions {\n    onClick: (event: MouseEvent) => Promise<void>;\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n    buttonColor?: GooglePayButtonColor;\n    buttonType?: GooglePayButtonType;\n}\n\nexport interface GooglePaymentsClient {\n    isReadyToPay(request: GooglePayIsReadyToPayRequest): Promise<GooglePayIsReadyToPayResponse>;\n    createButton(options: GooglePayButtonOptions): HTMLElement;\n    loadPaymentData(request: GooglePayPaymentDataRequest): Promise<GooglePayCardDataResponse>;\n    prefetchPaymentData(request: GooglePayPaymentDataRequest): void;\n}\n\ntype GooglePayEnvironment = 'TEST' | 'PRODUCTION';\n\nexport type GooglePaymentsClientConstructor = new (paymentOptions: {\n    environment: GooglePayEnvironment;\n}) => GooglePaymentsClient;\n\nexport interface GooglePayHostWindow extends Window {\n    google?: {\n        payments: {\n            api: {\n                PaymentsClient: GooglePaymentsClientConstructor;\n            };\n        };\n    };\n}\n\ninterface GooglePayBaseInitializationData {\n    card_information?: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    gateway: string;\n    gatewayMerchantId?: string;\n    googleMerchantId: string;\n    googleMerchantName: string;\n    isThreeDSecureEnabled: boolean;\n    nonce?: string;\n    platformToken: string;\n    storeCountry?: string;\n}\n\nexport interface GooglePayPayPalCommerceInitializationData extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayBigCommercePaymentsInitializationData\n    extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayAuthorizeNetInitializationData extends GooglePayBaseInitializationData {\n    paymentGatewayId: string;\n}\n\nexport interface GooglePayStripeInitializationData extends GooglePayBaseInitializationData {\n    stripeConnectedAccount: string;\n    stripePublishableKey: string;\n    stripeVersion: string;\n}\n\nexport interface GooglePayCheckoutComInitializationData extends GooglePayBaseInitializationData {\n    checkoutcomkey: string;\n}\n\nexport interface GooglePayAdyenV2InitializationData extends GooglePayBaseInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface GooglePayAdyenV3InitializationData extends GooglePayBaseInitializationData {\n    clientKey: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport type GooglePayInitializationData =\n    | GooglePayBaseInitializationData\n    | GooglePayAdyenV2InitializationData\n    | GooglePayAdyenV3InitializationData\n    | GooglePayAuthorizeNetInitializationData\n    | GooglePayStripeInitializationData\n    | GooglePayCheckoutComInitializationData\n    | GooglePayPayPalCommerceInitializationData\n    | GooglePayBigCommercePaymentsInitializationData;\n\nexport interface GooglePaySetExternalCheckoutData {\n    nonce: string;\n    card_information: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    cart_id?: string;\n}\n\nexport interface GooglePayAdditionalActionProcessable {\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void>;\n}\n\nexport interface GooglePayErrorObject {\n    errorCode?: number;\n    statusCode: 'CANCELED' | 'DEVELOPER_ERROR';\n    statusMessage?: string;\n}\n\nexport interface GooglePayTokenObject {\n    protocolVersion: string;\n    signature: string;\n    signedMessage: string;\n}\n\nexport interface GooglePayStripeTokenObject {\n    id: string;\n}\n\nexport interface GooglePayBraintreeTokenObject {\n    androidPayCards: [\n        {\n            nonce: string;\n            details: {\n                bin: string;\n                isNetworkTokenized?: boolean;\n            };\n        },\n    ];\n}\n\nexport interface GooglePayCheckoutComTokenObject {\n    token: string;\n}\n\nexport interface GooglePayThreeDSecureResult {\n    three_ds_result: {\n        acs_url: string;\n        code: string;\n    };\n}\n\nexport interface GooglePayBuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody;\n}\n\nexport interface ExtraPaymentData {\n    deviceSessionId?: string;\n    browser_info?: BrowserInfo;\n}\n\nexport type GooglePayButtonColor = 'default' | 'black' | 'white';\nexport type GooglePayButtonType =\n    | 'book'\n    | 'buy'\n    | 'checkout'\n    | 'donate'\n    | 'order'\n    | 'pay'\n    | 'plain'\n    | 'subscribe'\n    | 'long'\n    | 'short';\n\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n","import { GooglePayCardNetwork } from '../types';\n\nexport default function isGooglePayCardNetworkKey(\n    card: string,\n): card is keyof typeof GooglePayCardNetwork {\n    return card in GooglePayCardNetwork;\n}\n","import { round } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    createCurrencyService,\n    CurrencyService,\n    guard,\n    InvalidArgumentError,\n    itemsRequireShipping,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isGooglePayCardNetworkKey from '../guards/is-google-pay-card-network-key';\nimport {\n    CallbackIntentsType,\n    CallbackTriggerType,\n    ErrorReasonType,\n    ExtraPaymentData,\n    GooglePayCardDataResponse,\n    GooglePayCardNetwork,\n    GooglePayCardParameters,\n    GooglePayError,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePayMerchantInfo,\n    GooglePayPaymentDataRequest,\n    GooglePayRequiredPaymentData,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTransactionInfo,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from '../types';\n\nexport default class GooglePayGateway {\n    private _getPaymentMethodFn?: () => PaymentMethod<GooglePayInitializationData>;\n    private _isBuyNowFlow = false;\n    private _currencyCode?: string;\n    private _currencyService?: CurrencyService;\n\n    constructor(\n        private _gatewayIdentifier: string,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    mapToShippingAddressRequestBody({\n        shippingAddress,\n    }: GooglePayCardDataResponse): AddressRequestBody | undefined {\n        if (!shippingAddress) {\n            return;\n        }\n\n        const { company = '', phone = '' } =\n            this._paymentIntegrationService.getState().getShippingAddress() || {};\n\n        return this._mapToAddressRequestBody(shippingAddress, company, phone);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        const { billingAddress } = response.paymentMethodData.info;\n\n        if (!billingAddress) {\n            return;\n        }\n\n        const {\n            company = '',\n            phone = '',\n            email,\n            customFields = [],\n        } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        return {\n            ...this._mapToAddressRequestBody(billingAddress, company, phone, customFields),\n            email: email || response.email,\n        };\n    }\n\n    mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const {\n            paymentMethodData: {\n                tokenizationData: { token: nonce },\n                info: { cardNetwork: type, cardDetails: number },\n            },\n        } = response;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve({\n            nonce,\n            card_information: { type, number },\n            ...(this._isBuyNowFlow && {\n                cart_id: this._paymentIntegrationService.getState().getCart()?.id,\n            }),\n        });\n    }\n\n    async getRequiredData(): Promise<GooglePayRequiredPaymentData> {\n        const data: GooglePayRequiredPaymentData = { emailRequired: true };\n\n        if (!this._isShippingAddressRequired()) {\n            return data;\n        }\n\n        const state = await this._paymentIntegrationService.loadShippingCountries();\n        const allowedCountryCodes = state.getShippingCountries()?.map((country) => country.code);\n\n        return {\n            ...data,\n            shippingAddressRequired: true,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n                ...(allowedCountryCodes && { allowedCountryCodes }),\n            },\n            shippingOptionRequired: true,\n        };\n    }\n\n    getCallbackIntents(): CallbackIntentsType[] {\n        if (this._isShippingAddressRequired()) {\n            return [\n                CallbackIntentsType.OFFER,\n                CallbackIntentsType.SHIPPING_ADDRESS,\n                CallbackIntentsType.SHIPPING_OPTION,\n            ];\n        }\n\n        return [CallbackIntentsType.OFFER];\n    }\n\n    getCallbackTriggers(): { [key: string]: CallbackTriggerType[] } {\n        const state = this._paymentIntegrationService.getState();\n        // TODO remove this experiment usage after we make sure that coupons handling works fine\n        const isGooglePayCouponsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-2875.googlepay_coupons_handling'\n            ] || false;\n\n        const availableTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n            CallbackTriggerType.SHIPPING_OPTION,\n            ...(isGooglePayCouponsExperimentOn ? [CallbackTriggerType.OFFER] : []),\n        ];\n\n        const initializationTrigger = [CallbackTriggerType.INITIALIZE];\n        const addressChangeTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n        ];\n        const shippingOptionsChangeTriggers = [CallbackTriggerType.SHIPPING_OPTION];\n        const offerChangeTriggers = isGooglePayCouponsExperimentOn\n            ? [CallbackTriggerType.OFFER]\n            : [];\n\n        return {\n            availableTriggers,\n            initializationTrigger,\n            addressChangeTriggers,\n            shippingOptionsChangeTriggers,\n            offerChangeTriggers,\n        };\n    }\n\n    getNonce(methodId: string) {\n        const nonce = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(methodId)\n            .initializationData?.nonce;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve(nonce);\n    }\n\n    extraPaymentData(): Promise<undefined | ExtraPaymentData> {\n        return Promise.resolve(undefined);\n    }\n\n    getMerchantInfo(): GooglePayMerchantInfo {\n        const {\n            googleMerchantName: merchantName,\n            googleMerchantId: merchantId,\n            platformToken: authJwt,\n        } = this.getGooglePayInitializationData();\n\n        return { merchantName, merchantId, authJwt };\n    }\n\n    getTransactionInfo(): GooglePayTransactionInfo {\n        let currencyCode: string;\n\n        if (this._isBuyNowFlow) {\n            currencyCode = this._getCurrencyCodeOrThrow();\n        } else {\n            const { getCartOrThrow } = this._paymentIntegrationService.getState();\n\n            currencyCode = getCartOrThrow().currency.code;\n        }\n\n        const countryCode = this.getGooglePayInitializationData().storeCountry;\n\n        return {\n            ...(countryCode && { countryCode }),\n            currencyCode,\n            totalPriceStatus: TotalPriceStatusType.ESTIMATED,\n            totalPrice: '0',\n        };\n    }\n\n    getPaymentGatewayParameters():\n        | Promise<GooglePayGatewayParameters>\n        | GooglePayGatewayParameters {\n        const gatewayMerchantId = this.getGooglePayInitializationData().gatewayMerchantId;\n\n        if (!gatewayMerchantId) {\n            throw new InvalidArgumentError('Unable to proceed, gatewayMerchantId is missing.');\n        }\n\n        return {\n            gateway: this._gatewayIdentifier,\n            gatewayMerchantId,\n        };\n    }\n\n    getCardParameters(): GooglePayCardParameters {\n        const allowedCardNetworks = this.getPaymentMethod()\n            .supportedCards.filter(isGooglePayCardNetworkKey)\n            .map((key) => GooglePayCardNetwork[key]);\n\n        return {\n            allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n            allowedCardNetworks,\n            billingAddressRequired: true,\n            billingAddressParameters: {\n                format: 'FULL',\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._getPaymentMethodFn = getPaymentMethod;\n        this._isBuyNowFlow = Boolean(isBuyNowFlow);\n        this._currencyCode = currencyCode;\n\n        if (this._isBuyNowFlow) {\n            this._getCurrencyCodeOrThrow();\n        }\n\n        return Promise.resolve();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress?: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        if (shippingAddress) {\n            shippingAddress.name = shippingAddress.name || '';\n            shippingAddress.address1 = shippingAddress.address1 || '';\n        }\n\n        const mappedShippingAddress = this.mapToShippingAddressRequestBody({\n            shippingAddress,\n        } as GooglePayCardDataResponse);\n\n        if (mappedShippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(mappedShippingAddress);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            // Info: we can not return an empty data because shippingOptions should contain at least one element, it caused a developer exception\n            return;\n        }\n\n        const consignment = consignments[0];\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!this._currencyService) {\n            this._currencyService = createCurrencyService(storeConfig);\n        }\n\n        const availableShippingOptions = (consignment.availableShippingOptions || []).map(\n            this._getGooglePayShippingOption.bind(this),\n        );\n\n        const recommendedShippingOption = consignment.availableShippingOptions?.find(\n            (shippingOption) => shippingOption.isRecommended,\n        );\n\n        if (availableShippingOptions.length) {\n            const selectedShippingOptionId =\n                consignment.selectedShippingOption?.id ||\n                recommendedShippingOption?.id ||\n                availableShippingOptions[0]?.id;\n\n            if (!consignment.selectedShippingOption?.id && availableShippingOptions[0]) {\n                await this.handleShippingOptionChange(\n                    recommendedShippingOption?.id || availableShippingOptions[0].id,\n                );\n            }\n\n            return {\n                defaultSelectedOptionId: selectedShippingOptionId,\n                shippingOptions: availableShippingOptions,\n            };\n        }\n    }\n\n    async handleShippingOptionChange(optionId: string) {\n        if (optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    getTotalPrice(): string {\n        const { getCheckoutOrThrow, getCartOrThrow } = this._paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return totalPrice;\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        const { redemptionCodes: newCouponsState = [] } = offerData;\n        const { offers: appliedCoupons } = this.getAppliedCoupons();\n        let error;\n\n        await newCouponsState.reduce(async (promise, code) => {\n            await promise;\n\n            const exists = appliedCoupons.some(({ redemptionCode }) => redemptionCode === code);\n\n            if (exists) {\n                return;\n            }\n\n            const appliedCouponError = await this.applyCoupon(code);\n\n            if (appliedCouponError) {\n                error = appliedCouponError;\n            }\n        }, Promise.resolve());\n\n        await appliedCoupons.reduce(async (promise, coupon) => {\n            await promise;\n\n            const stillExists = newCouponsState.includes(coupon.redemptionCode);\n\n            if (!stillExists) {\n                await this._paymentIntegrationService.removeCoupon(coupon.redemptionCode);\n            }\n        }, Promise.resolve());\n\n        return {\n            newOfferInfo: this.getAppliedCoupons(),\n            error,\n        };\n    }\n\n    getAppliedCoupons(): GooglePayPaymentDataRequest['offerInfo'] {\n        const state = this._paymentIntegrationService.getState();\n        const { coupons } = state.getCheckout() || {};\n\n        const offers = (coupons || []).map((coupon) => {\n            const { displayName, code } = coupon;\n\n            return {\n                redemptionCode: code,\n                description: displayName,\n            };\n        });\n\n        return {\n            offers,\n        };\n    }\n\n    async applyCoupon(code: string): Promise<GooglePayError | void> {\n        let error: GooglePayError | undefined;\n\n        try {\n            await this._paymentIntegrationService.applyCoupon(code);\n        } catch (e) {\n            if (e instanceof Error) {\n                error = {\n                    reason: ErrorReasonType.OFFER_INVALID,\n                    message: e.message,\n                    intent: CallbackTriggerType.OFFER,\n                };\n            }\n\n            return error;\n        }\n    }\n\n    protected getGooglePayInitializationData(): GooglePayInitializationData {\n        return guard(\n            this.getPaymentMethod().initializationData,\n            () => new InvalidArgumentError('Missing initialization data.'),\n        );\n    }\n\n    protected getPaymentMethod(): PaymentMethod<GooglePayInitializationData> {\n        return guard(\n            this._getPaymentMethodFn,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        )();\n    }\n\n    protected getGatewayIdentifier(): string {\n        return this._gatewayIdentifier;\n    }\n\n    protected setGatewayIdentifier(gateway?: string) {\n        this._gatewayIdentifier = gateway || this.getGatewayIdentifier();\n    }\n\n    private _isShippingAddressRequired(): boolean {\n        const { getCartOrThrow, getStoreConfig, getShippingAddress } =\n            this._paymentIntegrationService.getState();\n\n        return (\n            getShippingAddress() === undefined &&\n            itemsRequireShipping(getCartOrThrow(), getStoreConfig())\n        );\n    }\n\n    private _mapToAddressRequestBody(\n        address: GooglePayFullBillingAddress,\n        company: string,\n        phone: string,\n        customFields?: AddressRequestBody['customFields'],\n    ): AddressRequestBody {\n        const {\n            name,\n            address1,\n            address2,\n            address3,\n            locality: city,\n            administrativeArea: stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phoneNumber,\n        } = address;\n        const [firstName, lastName] = this._getFirstAndLastName(name);\n\n        return {\n            firstName,\n            lastName,\n            company,\n            address1,\n            address2: `${address2} ${address3}`.trim(),\n            city: city || stateOrProvinceCode,\n            stateOrProvince: stateOrProvinceCode,\n            stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phone: phoneNumber || phone,\n            customFields: customFields || [],\n        };\n    }\n\n    private _getFirstAndLastName(fullName: string): [string, string] {\n        const nameParts = fullName.split(' ');\n\n        if (nameParts.length === 1) {\n            return [fullName, ''];\n        }\n\n        const firstName = nameParts.slice(0, -1).join(' ');\n        const lastName = nameParts[nameParts.length - 1];\n\n        return [firstName, lastName];\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n\n    private _getGooglePayShippingOption({\n        id,\n        cost,\n        description,\n        additionalDescription,\n    }: ShippingOption) {\n        const formattedCost = this._currencyService?.toCustomerCurrency(cost);\n        const state = this._paymentIntegrationService.getState();\n        const isNewShippingOptionsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-3540.googlepay_new_shipping_options_description'\n            ];\n\n        if (isNewShippingOptionsExperimentOn) {\n            return {\n                id,\n                label: `${formattedCost || cost} ${description}`,\n                description: additionalDescription,\n            };\n        }\n\n        return {\n            id,\n            label: description,\n            description: formattedCost || cost,\n        };\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * param config - The config object containing the currency configuration\n * returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(config: StoreConfig): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Cart } from '../cart';\nimport { StoreConfig } from '../config';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (config && cart.lineItems.customItems) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import {\n    BraintreeGooglePayment,\n    BraintreeGooglePayThreeDSecure,\n    BraintreeSdk,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CancellablePromise,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayKey } from '../google-pay-payment-initialize-options';\nimport assertIsGooglePayBraintreeTokenObject from '../guards/is-google-pay-braintree-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayBraintreeGateway extends GooglePayGateway {\n    private _braintreeGooglePayment?: BraintreeGooglePayment;\n    private _service: PaymentIntegrationService;\n    private _methodId = GooglePayKey.BRAINTREE;\n\n    constructor(service: PaymentIntegrationService, private _braintreeSdk: BraintreeSdk) {\n        super('braintree', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        let paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.clientToken) {\n            const state = await this._service.loadPaymentMethod(this._methodId);\n\n            paymentMethod = state.getPaymentMethodOrThrow(this._methodId);\n        }\n\n        if (!paymentMethod.clientToken || !paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSdk.initialize(paymentMethod.clientToken);\n        this._braintreeGooglePayment = await this._braintreeSdk.getBraintreeGooglePayment();\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n\n        const { clientToken, initializationData } = super.getPaymentMethod();\n\n        if (!clientToken || !initializationData || !initializationData.card_information?.bin) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            isThreeDSecureEnabled,\n            card_information: { bin, isNetworkTokenized },\n        } = initializationData;\n\n        if (isThreeDSecureEnabled && !isNetworkTokenized) {\n            const threeDSecure = await this._braintreeSdk.getBraintreeThreeDS();\n\n            const { orderAmount } = this._service.getState().getOrderOrThrow();\n\n            const verification = await this._braintreePresent3DSChallenge(\n                threeDSecure,\n                orderAmount,\n                nonce,\n                bin,\n            );\n\n            return verification.nonce;\n        }\n\n        return nonce;\n    }\n\n    async extraPaymentData() {\n        return {\n            deviceSessionId: await this._getBraintreeDeviceData(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayBraintreeTokenObject(token);\n\n        data.nonce = token.androidPayCards[0].nonce;\n        data.card_information.bin = token.androidPayCards[0].details.bin;\n        data.card_information.isNetworkTokenized =\n            token.androidPayCards[0].details.isNetworkTokenized;\n\n        return data;\n    }\n\n    getCardParameters() {\n        return super.getCardParameters();\n    }\n\n    async getPaymentGatewayParameters(): Promise<GooglePayGatewayParameters> {\n        const braintreeGooglePayment = this.getBraintreeGooglePayment();\n\n        const request = braintreeGooglePayment.createPaymentDataRequest({\n            merchantInfo: super.getMerchantInfo(),\n            transactionInfo: super.getTransactionInfo(),\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            ...(await super.getRequiredData()),\n        });\n\n        return request.paymentMethodTokenizationParameters.parameters;\n    }\n\n    private getBraintreeGooglePayment(): BraintreeGooglePayment {\n        if (!this._braintreeGooglePayment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._braintreeGooglePayment;\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n        return deviceData;\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n        bin: string,\n    ) {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                bin,\n                nonce,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayBraintreeTokenObject } from '../types';\n\nfunction isGooglePayBraintreeTokenObject(token: unknown): token is GooglePayBraintreeTokenObject {\n    return typeof token === 'object' && token !== null && 'androidPayCards' in token;\n}\n\nexport default function assertIsGooglePayBraintreeTokenObject(\n    token: unknown,\n): asserts token is GooglePayBraintreeTokenObject {\n    if (!isGooglePayBraintreeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import {\n    BuyNowCartCreationError,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithGooglePayButtonInitializeOptions } from './google-pay-button-initialize-option';\nimport GooglePayCustomerInitializeOptions from './google-pay-customer-initialize-options';\nimport { WithGooglePayPaymentInitializeOptions } from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayBuyNowInitializeOptions,\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n    private _buyNowCart?: Cart;\n    private _currencyCode?: string;\n    private _buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions;\n    private _countryCode?: string;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithGooglePayButtonInitializeOptions,\n    ): Promise<void> {\n        if (!options.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        if (!options.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" is not a valid key.',\n            );\n        }\n\n        const googlePayOptions = options[this._getMethodOrThrow()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { buyNowInitializeOptions, currencyCode, buttonColor, buttonType, onError } =\n            googlePayOptions;\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(\n                this._getMethodOrThrow(),\n            );\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        }\n\n        this._countryCode = paymentMethod.initializationData?.storeCountry;\n\n        if (buyNowInitializeOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._currencyCode = currencyCode;\n            this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n                !!buyNowInitializeOptions,\n                currencyCode,\n            );\n        } else {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n            );\n        }\n\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(options.containerId, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError),\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n    ): (event: MouseEvent) => Promise<void> {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            try {\n                if (this._buyNowInitializeOptions) {\n                    await this._createBuyNowCartOrThrow(this._buyNowInitializeOptions);\n                } else {\n                    await this._paymentIntegrationService.loadDefaultCheckout();\n                }\n\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && !this._buyNowCart?.lineItems.digitalItems.length) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodOrThrow(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getGooglePayClientOptions(): GooglePayPaymentOptions | undefined {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                    offerData,\n                }) => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                        offerChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._googlePayPaymentProcessor.handleCoupons(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    if (this._buyNowInitializeOptions) {\n                        return this._getBuyNowTransactionInfo(\n                            availableShippingOptions,\n                            newOfferInfo,\n                            error,\n                        );\n                    }\n\n                    return this._getTransactionInfo(availableShippingOptions, newOfferInfo, error);\n                },\n            },\n        };\n    }\n\n    private async _createBuyNowCartOrThrow(\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            try {\n                this._buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                await this._paymentIntegrationService.loadCheckout(this._buyNowCart.id);\n            } catch (error) {\n                if (typeof error === 'string') {\n                    throw new BuyNowCartCreationError(error);\n                }\n\n                throw error;\n            }\n        }\n    }\n\n    private _getBuyNowTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        if (!this._buyNowCart) {\n            return;\n        }\n\n        const { cartAmount } = this._buyNowCart;\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode: this._getCurrencyCodeOrThrow(),\n                totalPrice: totalPrice || String(cartAmount),\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private async _getTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        await this._paymentIntegrationService.loadCheckout();\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n        const { code: currencyCode } = this._paymentIntegrationService\n            .getState()\n            .getCartOrThrow().currency;\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private _getMethodOrThrow(): keyof WithGooglePayButtonInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n}\n","import { GooglePayKey } from '../google-pay-payment-initialize-options';\n\nexport default function isGooglePayKey(key: string): key is GooglePayKey {\n    return Object.values<string>(GooglePayKey).includes(key);\n}\n","import { GooglePayErrorObject } from '../types';\n\nexport default function isGooglePayErrorObject(error: unknown): error is GooglePayErrorObject {\n    return typeof error === 'object' && error !== null && 'statusCode' in error;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Omit,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from './gateways/google-pay-gateway';\nimport GooglePayScriptLoader from './google-pay-script-loader';\nimport isGooglePayAdditionalActionProcessable from './guards/is-google-pay-additional-action-processable';\nimport {\n    GooglePayBaseCardPaymentMethod,\n    GooglePayButtonOptions,\n    GooglePayCardDataResponse,\n    GooglePayCardPaymentMethod,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayBaseRequest,\n    GooglePayInitializationData,\n    GooglePayIsReadyToPayRequest,\n    GooglePaymentsClient,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n} from './types';\n\nexport default class GooglePayPaymentProcessor {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _baseRequest: GooglePayGatewayBaseRequest = { apiVersion: 2, apiVersionMinor: 0 };\n    private _baseCardPaymentMethod?: GooglePayBaseCardPaymentMethod;\n    private _cardPaymentMethod?: GooglePayCardPaymentMethod;\n    private _paymentDataRequest?: GooglePayPaymentDataRequest;\n    private _isReadyToPayRequest?: GooglePayIsReadyToPayRequest;\n\n    constructor(\n        private _scriptLoader: GooglePayScriptLoader,\n        private _gateway: GooglePayGateway,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        googlePayPaymentOptions?: GooglePayPaymentOptions,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._paymentsClient = await this._scriptLoader.getGooglePaymentsClient(\n            getPaymentMethod().config.testMode,\n            googlePayPaymentOptions,\n        );\n\n        await this._gateway.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        this._buildButtonPayloads();\n    }\n\n    async initializeWidget() {\n        await this._buildWidgetPayloads();\n\n        await this._determineReadinessToPay();\n\n        this._prefetchGooglePaymentData();\n    }\n\n    getNonce(methodId: string) {\n        return this._gateway.getNonce(methodId);\n    }\n\n    async extraPaymentData() {\n        return this._gateway.extraPaymentData();\n    }\n\n    addPaymentButton(\n        containerId: string,\n        options: Omit<GooglePayButtonOptions, 'allowedPaymentMethods'>,\n    ): HTMLElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const paymentButton = this._getPaymentsClient().createButton({\n            ...options,\n            allowedPaymentMethods: [this._getBaseCardPaymentMethod()],\n        });\n\n        return container.appendChild(paymentButton);\n    }\n\n    async showPaymentSheet(): Promise<GooglePayCardDataResponse> {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        return this._getPaymentsClient().loadPaymentData(paymentDataRequest);\n    }\n\n    async setExternalCheckoutXhr(\n        provider: string,\n        response: GooglePayCardDataResponse,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response);\n    }\n\n    async setExternalCheckoutForm(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        siteLink?: string,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response, true, siteLink);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        return this._gateway.mapToBillingAddressRequestBody(response);\n    }\n\n    mapToShippingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): AddressRequestBody | undefined {\n        return this._gateway.mapToShippingAddressRequestBody(response);\n    }\n\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void> {\n        return isGooglePayAdditionalActionProcessable(this._gateway)\n            ? this._gateway.processAdditionalAction(error, methodId)\n            : Promise.reject(error);\n    }\n\n    async signOut(providerId: string): Promise<void> {\n        await this._requestSender.get(`/remote-checkout/${providerId}/signout`);\n    }\n\n    getCallbackTriggers() {\n        return this._gateway.getCallbackTriggers();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        return this._gateway.handleShippingAddressChange(shippingAddress);\n    }\n\n    async handleShippingOptionChange(optionId: string): Promise<void> {\n        await this._gateway.handleShippingOptionChange(optionId);\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        return this._gateway.handleCoupons(offerData);\n    }\n\n    getTotalPrice(): string {\n        return this._gateway.getTotalPrice();\n    }\n\n    async _setExternalCheckout(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        useFormPoster = false,\n        siteLink?: string,\n    ): Promise<void> {\n        const url = '/checkout.php';\n        const body = {\n            action: 'set_external_checkout',\n            provider,\n            ...(await this._gateway.mapToExternalCheckoutData(response)),\n        };\n\n        if (useFormPoster) {\n            return new Promise((resolve) => {\n                this._formPoster.postForm(\n                    siteLink ? `${siteLink}/checkout` : url,\n                    {\n                        ...body,\n                        card_information: JSON.stringify(body.card_information),\n                    },\n                    resolve,\n                );\n            });\n        }\n\n        await this._requestSender.post(url, {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body,\n        });\n    }\n\n    private _prefetchGooglePaymentData(): void {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo = this._gateway.getTransactionInfo();\n\n        this._getPaymentsClient().prefetchPaymentData(paymentDataRequest);\n    }\n\n    private async _determineReadinessToPay(): Promise<void> {\n        try {\n            const { result } = await this._getPaymentsClient().isReadyToPay(\n                this._getIsReadyToPayRequest(),\n            );\n\n            if (result === false) {\n                throw new PaymentMethodFailedError(\n                    'Google Pay is not supported by the current device and browser, please try another payment method.',\n                );\n            }\n        } catch (error) {\n            if (error instanceof PaymentMethodFailedError) {\n                throw error;\n            }\n\n            throw new PaymentMethodFailedError();\n        }\n    }\n\n    private _buildButtonPayloads() {\n        this._baseCardPaymentMethod = {\n            type: 'CARD',\n            parameters: this._gateway.getCardParameters(),\n        };\n    }\n\n    private async _buildWidgetPayloads(): Promise<void> {\n        const baseCardPaymentMethod = this._getBaseCardPaymentMethod();\n\n        this._cardPaymentMethod = {\n            ...baseCardPaymentMethod,\n            tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: await this._gateway.getPaymentGatewayParameters(),\n            },\n        };\n        this._paymentDataRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [this._cardPaymentMethod],\n            transactionInfo: this._gateway.getTransactionInfo(),\n            merchantInfo: this._gateway.getMerchantInfo(),\n            ...(await this._gateway.getRequiredData()),\n            callbackIntents: this._gateway.getCallbackIntents(),\n            offerInfo: this._gateway.getAppliedCoupons(),\n        };\n        this._isReadyToPayRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [baseCardPaymentMethod],\n        };\n    }\n\n    private _getBaseCardPaymentMethod(): GooglePayBaseCardPaymentMethod {\n        return this._getOrThrow(this._baseCardPaymentMethod);\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequest {\n        return this._getOrThrow(this._paymentDataRequest);\n    }\n\n    private _getIsReadyToPayRequest(): GooglePayIsReadyToPayRequest {\n        return this._getOrThrow(this._isReadyToPayRequest);\n    }\n\n    private _getPaymentsClient(): GooglePaymentsClient {\n        return this._getOrThrow(this._paymentsClient);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import GooglePayGateway from '../gateways/google-pay-gateway';\nimport { GooglePayAdditionalActionProcessable } from '../types';\n\nexport default function isGooglePayAdditionalActionProcessable(\n    gateway: GooglePayGateway,\n): gateway is GooglePayGateway & GooglePayAdditionalActionProcessable {\n    return 'processAdditionalAction' in gateway;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayHostWindow, GooglePaymentsClient, GooglePayPaymentOptions } from './types';\n\nexport const GOOGLE_PAY_LIBRARY = 'https://pay.google.com/gp/p/js/pay.js';\n\nexport default class GooglePayScriptLoader {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _window: GooglePayHostWindow = window;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async getGooglePaymentsClient(\n        testMode = false,\n        options?: GooglePayPaymentOptions,\n    ): Promise<GooglePaymentsClient> {\n        await this._scriptLoader.loadScript(GOOGLE_PAY_LIBRARY);\n\n        if (!this._window.google) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (this._paymentsClient === undefined) {\n            this._paymentsClient = new this._window.google.payments.api.PaymentsClient({\n                environment: testMode ? 'TEST' : 'PRODUCTION',\n                ...(options ?? {}),\n            });\n        }\n\n        return this._paymentsClient;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport GooglePayScriptLoader from '../google-pay-script-loader';\n\nexport default function createGooglePayScriptLoader() {\n    return new GooglePayScriptLoader(getScriptLoader());\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreeButtonStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: [\n                    'fastlane',\n                    'buttons',\n                    'payment-fields',\n                    'hosted-fields',\n                    'three-domain-secure',\n                ],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nfunction isGooglePayPaypalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (data.initializationData) {\n        return (\n            'attributionId' in data.initializationData &&\n            'isVenmoEnabled' in data.initializationData &&\n            'isGooglePayEnabled' in data.initializationData &&\n            'isPayPalCreditAvailable' in data.initializationData\n        );\n    }\n\n    return false;\n}\n\nexport default function assertsIsGooglePayPayPalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): asserts data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (!isGooglePayPaypalCommercePaymentMethod(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport { GooglePayConfig } from './types';\n\nexport default class GooglePayPaypalCommerceGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalCommerceSdk: PayPalCommerceSdk) {\n        super('paypalsb', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\n\nconst createGooglePayPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceSdk(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceButtonStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayConfig,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nexport default class GooglePayBigCommercePaymentsGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalSdkHelper: PayPalSdkHelper) {\n        super('googlepay_bigcommerce_payments', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\n\nconst createGooglePayBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(\n                paymentIntegrationService,\n                new PayPalSdkHelper(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsButtonStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2ButtonStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3ButtonStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayAuthorizeNetInitializationData from '../guards/is-google-pay-authorizenet-initialization-data';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAuthorizeNetGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('authorizenet', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayAuthorizeNetInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.paymentGatewayId,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayAuthorizeNetInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayAuthorizeNetInitializationData {\n    return 'paymentGatewayId' in data;\n}\n\nexport default function assertsIsGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayAuthorizeNetInitializationData {\n    if (!isGooglePayAuthorizeNetInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetButtonStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCheckoutComInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayCheckoutComInitializationData {\n    return 'checkoutcomkey' in data;\n}\n\nexport default function assertIsGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayCheckoutComInitializationData {\n    if (!isGooglePayCheckoutComInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    InvalidArgumentError,\n    isRequestError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayCheckoutComInitializationData from '../guards/is-google-pay-checkoutcom-initialization-data';\nimport { isGooglePayThreeDSecureResult } from '../guards/is-google-pay-threedsecure-result';\nimport assertIsGooglePayTokenObject from '../guards/is-google-pay-token-object';\nimport {\n    GooglePayAdditionalActionProcessable,\n    GooglePayCardDataResponse,\n    GooglePayCheckoutComTokenObject,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTokenObject,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCheckoutComGateway\n    extends GooglePayGateway\n    implements GooglePayAdditionalActionProcessable\n{\n    constructor(service: PaymentIntegrationService, private _requestSender: RequestSender) {\n        super('checkoutltd', service);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            if (\n                isRequestError(error) &&\n                isGooglePayThreeDSecureResult(error.body) &&\n                error.body.three_ds_result.code === 'three_d_secure_required'\n            ) {\n                return window.location.assign(error.body.three_ds_result.acs_url);\n            }\n\n            reject(error);\n        });\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayTokenObject(token);\n\n        data.nonce = await this._tokenize(token);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.checkoutcomkey,\n        };\n    }\n\n    private async _tokenize(token_data: GooglePayTokenObject): Promise<string> {\n        const url = this.getPaymentMethod().config.testMode\n            ? 'https://api.sandbox.checkout.com/tokens'\n            : 'https://api.checkout.com/tokens';\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        const { body } = await this._requestSender.post<GooglePayCheckoutComTokenObject>(url, {\n            credentials: false,\n            body: {\n                type: 'googlepay',\n                token_data,\n            },\n            headers: {\n                Authorization: data.checkoutcomkey,\n                'Content-Type': ContentType.Json,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return body.token;\n    }\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayThreeDSecureResult } from '../types';\n\nexport function isGooglePayThreeDSecureResult(\n    body: RequestError['body'],\n): body is GooglePayThreeDSecureResult {\n    if (typeof body !== 'object' || body === null) {\n        return false;\n    }\n\n    const threeDSBody = body as Partial<GooglePayThreeDSecureResult>;\n\n    return (\n        typeof threeDSBody.three_ds_result?.acs_url === 'string' &&\n        typeof threeDSBody.three_ds_result.code === 'string'\n    );\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayTokenObject } from '../types';\n\nfunction isGooglePayTokenObject(token: unknown): token is GooglePayTokenObject {\n    return (\n        typeof token === 'object' &&\n        token !== null &&\n        'protocolVersion' in token &&\n        'signature' in token &&\n        'signedMessage' in token\n    );\n}\n\nexport default function assertIsGooglePayTokenObject(\n    token: unknown,\n): asserts token is GooglePayTokenObject {\n    if (!isGooglePayTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComButtonStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCybersourceGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('cybersource', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourceButtonStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayOrbitalGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('chase', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalButtonStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayStripeInitializationData } from '../types';\n\nfunction isGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayStripeInitializationData {\n    return (\n        'stripeConnectedAccount' in data &&\n        'stripePublishableKey' in data &&\n        'stripeVersion' in data\n    );\n}\n\nexport default function assertsIsGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayStripeInitializationData {\n    if (!isGooglePayStripeInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    isRequestError,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayStripeInitializationData from '../guards/is-google-pay-stripe-initialization-data';\nimport isGooglePayStripeRequestError from '../guards/is-google-pay-stripe-request-error';\nimport assertIsGooglePayStripeTokenObject from '../guards/is-google-pay-stripe-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePaySetExternalCheckoutData,\n    GooglePayStripeGatewayParameters,\n} from '../types';\n\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\nimport { StripeError, StripeUPEClient } from './types';\n\nexport default class GooglePayStripeGateway extends GooglePayGateway {\n    private stripeUPEClient?: StripeUPEClient;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeUPEScriptLoader,\n    ) {\n        super('stripe', paymentIntegrationService);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayStripeTokenObject(token);\n\n        data.nonce = token.id;\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayStripeGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayStripeInitializationData(data);\n\n        const { stripeVersion, stripePublishableKey, stripeConnectedAccount } = data;\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            'stripe:version': stripeVersion,\n            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n        };\n    }\n\n    async processAdditionalAction(\n        error: unknown,\n        methodId?: string,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!isRequestError(error) || !isGooglePayStripeRequestError(error.body)) {\n            throw error;\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const isStripeGooglePay3dsExperimentIsOn =\n            state.getStoreConfig()?.checkoutSettings.features[\n                'STRIPE-476.enable_stripe_googlepay_3ds'\n            ];\n        const shouldTrigger3DS =\n            some(error.body.errors, { code: 'three_d_secure_required' }) &&\n            isStripeGooglePay3dsExperimentIsOn;\n\n        if (shouldTrigger3DS) {\n            const data = this.getGooglePayInitializationData();\n\n            assertsIsGooglePayStripeInitializationData(data);\n\n            const { stripePublishableKey, stripeConnectedAccount } = data;\n\n            this.stripeUPEClient = await this.loadStripeJs(\n                stripePublishableKey,\n                stripeConnectedAccount,\n            );\n\n            const clientSecret = error.body.three_ds_result.token;\n            let result;\n            let catchedConfirmError = false;\n\n            try {\n                result = await this.stripeUPEClient.confirmCardPayment(clientSecret);\n            } catch (_) {\n                try {\n                    result = await this.stripeUPEClient.retrievePaymentIntent(clientSecret);\n                } catch (__) {\n                    catchedConfirmError = true;\n                }\n            }\n\n            if (result?.error) {\n                this._throwDisplayableStripeError(result.error);\n\n                if (this._isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                throw new PaymentMethodFailedError();\n            }\n\n            if (!result?.paymentIntent && !catchedConfirmError) {\n                throw new RequestError();\n            }\n\n            return this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce: result?.paymentIntent?.id || clientSecret },\n            });\n        }\n\n        throw error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeUPEClient> {\n        if (this.stripeUPEClient) {\n            return this.stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(stripePublishableKey, stripeConnectedAccount);\n    }\n\n    private _isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private _throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayStripeTokenObject } from '../types';\n\nfunction isGooglePayStripeTokenObject(token: unknown): token is GooglePayStripeTokenObject {\n    return typeof token === 'object' && token !== null && 'id' in token;\n}\n\nexport default function assertIsGooglePayStripeTokenObject(\n    token: unknown,\n): asserts token is GooglePayStripeTokenObject {\n    if (!isGooglePayStripeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","interface AdditionalActionError {\n    three_ds_result: { token: string };\n    errors: Array<{ code: string }>;\n}\n\nconst isGooglePayStripeRequestError = (body: unknown): body is AdditionalActionError => {\n    return (\n        typeof body === 'object' && body !== null && 'three_ds_result' in body && 'errors' in body\n    );\n};\n\nexport default isGooglePayStripeRequestError;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeUPEClient } from './types';\n\nexport default class StripeUPEScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeUPEClient> {\n        let stripeClient = this.stripeWindow.bcStripeClient;\n\n        if (!stripeClient) {\n            const stripe = await this.load();\n\n            stripeClient = stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: [\n                    'payment_element_beta_2',\n                    'alipay_pm_beta_1',\n                    'link_default_integration_beta_1',\n                    'shipping_address_element_beta_1',\n                    'address_element_beta_1',\n                ],\n                apiVersion: '2020-03-02;alipay_beta=v1;link_beta=v1',\n            });\n\n            Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n        }\n\n        return stripeClient;\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n        }\n\n        if (!this.stripeWindow.Stripe) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripeButtonStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayWorldpayAccessGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('worldpay', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessButtonStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { isTdOnlineMartAdditionalAction } from '../guards/is-google-pay-td-online-mart-additional-action';\nimport { ExtraPaymentData, TdOnlineMartThreeDSErrorBody } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayTdOnlineMartGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService, private formPoster: FormPoster) {\n        super('worldlinena', service);\n    }\n\n    async extraPaymentData(): Promise<ExtraPaymentData> {\n        return Promise.resolve({ browser_info: getBrowserInfo() });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from '../types';\n\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartButtonStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\n\nexport interface PayPalCommerceCardFieldsConfig {\n    inputEvents: {\n        onChange(data: PayPalCommerceCardFieldsState): void;\n        onFocus(data: PayPalCommerceCardFieldsState): void;\n        onBlur(data: PayPalCommerceCardFieldsState): void;\n        onInputSubmitRequest(data: PayPalCommerceCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: PayPalCommerceCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: PayPalCommerceHostedFieldsRenderOptions['styles'];\n    onApprove(data: PayPalCommerceCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface PayPalCommerceCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface PayPalCommerceCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype PayPalCommerceCardFieldsCard = PayPalCommerceHostedFieldsCard;\n\nexport interface PayPalCommerceCardFieldsState {\n    cards: PayPalCommerceCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: PayPalCommerceCardFieldsFieldData;\n        cardNumberField: PayPalCommerceCardFieldsFieldData;\n        cardNameField?: PayPalCommerceCardFieldsFieldData;\n        cardExpiryField: PayPalCommerceCardFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface PayPalCommerceFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceCardFields {\n    isEligible(): boolean;\n    CVVField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    ExpiryField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NameField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NumberField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    submit(config?: PayPalCommerceCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<PayPalCommerceCardFieldsState>;\n}\n\nexport interface PayPalCommerceCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (data: PayPalCommerceCardFieldsConfig) => Promise<PayPalCommerceCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Commerce BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(\n        options?: PayPalCommerceHostedFieldsSubmitOptions,\n    ): Promise<PayPalCommerceHostedFieldsApprove>;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n    fastlaneToken?: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from './paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from './paypal-commerce-script-loader';\nimport {\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceInitializationData,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.paypalCommerceRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.paypalCommerceRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'paypalcommerce',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    ComponentsScriptType,\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<PayPalCommerceScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<PayPalCommerceScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceIntegrationService,\n    PayPalCommerceRequestSender,\n    PayPalCommerceScriptLoader,\n} from './index';\n\nconst createPayPalCommerceIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createPayPalCommerceIntegrationService;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceButtonInitializeOptions, {\n    WithPayPalCommerceButtonInitializeOptions,\n} from './paypal-commerce-button-initialize-options';\n\nexport default class PayPalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(paypalcommerce?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !paypalcommerce.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof paypalcommerce.buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? paypalcommerce.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PayPalCommerceButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceButtonStrategy from './paypal-commerce-button-strategy';\n\nconst createPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceButtonStrategy, [{ id: 'paypalcommerce' }]);\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../paypal-commerce-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditButtonInitializeOptions, {\n    WithPayPalCommerceCreditButtonInitializeOptions,\n} from './paypal-commerce-credit-button-initialize-options';\n\nexport default class PayPalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = paypalcommercecredit || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercecredit);\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5557.Hide_ppc_banner_implementation will be rolled out to 100%\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isBannerImplementationDisabled =\n            features['PAYPAL-5557.Hide_ppc_banner_implementation'] ?? false;\n\n        if (isBannerImplementationDisabled) {\n            return;\n        }\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this code when data attributes will be removed from the banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const paypalSdk = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(paypalSdk, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PayPalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            paypalcommercecredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditButtonStrategy from './paypal-commerce-credit-button-strategy';\n\nconst createPayPalCommerceCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceCreditButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditButtonStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalCommerceSdk from './paypal-commerce-sdk';\n\nexport default function createPayPalCommerceSdk(): PayPalCommerceSdk {\n    return new PayPalCommerceSdk(createScriptLoader());\n}\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    StyleButtonColor,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoButtonInitializeOptions, {\n    WithPayPalCommerceVenmoButtonInitializeOptions,\n} from './paypal-commerce-venmo-button-initialize-options';\n\nexport default class PayPalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            paypalcommercevenmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle = this.paypalCommerceIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoButtonStrategy from './paypal-commerce-venmo-button-strategy';\n\nconst createPayPalCommerceVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoButtonStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsButtonOptions, {\n    WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n} from './paypal-commerce-alternative-methods-button-initialize-options';\n\nexport default class PayPalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = paypalcommercealternativemethods || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercealternativemethods: PayPalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            paypalcommercealternativemethods;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder(\n                    'paypalcommercealternativemethod',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: apm,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceAlternativeMethodsButtonStrategy from './paypal-commerce-alternative-methods-button-strategy';\n\nconst createPayPalCommerceAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsButtonStrategy, [\n    { id: 'paypalcommercealternativemethods' },\n]);\n","export interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithPaypalExpressButtonInitializeOptions } from './paypal-express-button-initialize-options';\nimport PaypalScriptLoader from './paypal-express-script-loader';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal-express-types';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalExpressScriptLoader: PaypalScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!options.paypal) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalSDK = await this.paypalExpressScriptLoader.loadPaypalSDK(\n            paymentMethod.config.merchantId,\n        );\n\n        this.renderButton(options, paypalSDK);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n        paypalSDK: PaypalSDK,\n    ) {\n        const { containerId, methodId, paypal } = options;\n        const { allowCredit, clientId, onPaymentError, shouldProcessPayment, style } = paypal;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const merchantId = paymentMethod.config.merchantId;\n        const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n        const clientToken: PaypalClientToken = { [env]: clientId };\n        const fundingCreditOption = paypalSDK.FUNDING.CREDIT || 'credit';\n        const allowedSources = allowCredit ? [fundingCreditOption] : [];\n        const disallowedSources = !allowCredit ? [fundingCreditOption] : [];\n\n        return paypalSDK.Button.render(\n            {\n                env,\n                client: clientToken,\n                commit: shouldProcessPayment,\n                funding: {\n                    allowed: allowedSources,\n                    disallowed: disallowedSources,\n                },\n                style: this.getStyle(style),\n                payment: (_, actions) => this.setupPayment(merchantId, actions, onPaymentError),\n                onAuthorize: (data, actions) =>\n                    this.tokenizePayment(data, methodId, actions, shouldProcessPayment),\n            },\n            containerId,\n        );\n    }\n\n    private getStyle(style?: Omit<PaypalStyleOptions, 'height'>): PaypalStyleOptions {\n        const { color, fundingicons, label, layout, shape, size, tagline } = style || {};\n\n        return {\n            color,\n            fundingicons,\n            label,\n            layout,\n            shape: shape || PaypalButtonStyleShapeOption.RECT,\n            size: size === 'small' ? PaypalButtonStyleSizeOption.RESPONSIVE : size,\n            tagline,\n        };\n    }\n\n    private async setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        try {\n            const state = await this.paymentIntegrationService.loadDefaultCheckout();\n            const { id: cartId } = state.getCartOrThrow();\n            const host = state.getHost() || '';\n\n            const paymentRequest = await actions.request.post(\n                `${host}/api/storefront/payment/paypalexpress`,\n                { merchantId, cartId },\n                {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                },\n            );\n\n            return paymentRequest.id;\n        } catch (error) {\n            if (onError && error instanceof StandardError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        data: PaypalAuthorizeData,\n        methodId: string,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n    ): Promise<void> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const getPaymentData = await actions.payment.get(data.paymentID);\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            provider: paymentMethod.id,\n            action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n            paymentId: data.paymentID,\n            payerId: data.payerID,\n            payerInfo: JSON.stringify(getPaymentData.payer.payer_info),\n        });\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-express-types';\n\nexport default class PaypalScriptLoader {\n    private window: PaypalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async loadPaypalSDK(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n            ...(merchantId && {\n                attributes: { 'data-merchant-id': merchantId },\n            }),\n        };\n\n        await this.scriptLoader.loadScript(scriptSrc, options);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalExpressButtonStrategy, PaypalExpressScriptLoader } from './index';\n\nconst createPaypalExpressButtonStrategy: CheckoutButtonStrategyFactory<\n    PaypalExpressButtonStrategy\n> = (paymentIntegrationService) => {\n    return new PaypalExpressButtonStrategy(\n        paymentIntegrationService,\n        new PaypalExpressScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createPaypalExpressButtonStrategy, [{ id: 'paypalexpress' }]);\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>,\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { isEqual } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize((store) => from(action(store)).pipe(shareReplay()), { isEqual });\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction, { isEqual });\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    LoadPaymentMethodAction,\n    LoadPaymentMethodsAction,\n    PaymentMethodActionType,\n} from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nimport { PaymentMethod } from '.';\n\nconst isPaymentMethod = (value: PaymentMethod | undefined): value is PaymentMethod => {\n    return !!value;\n};\n\nexport default class PaymentMethodActionCreator {\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\n\n    loadPaymentMethodsById(\n        methodIds: string[],\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n                Promise.all(\n                    methodIds.map(async (id) => {\n                        try {\n                            const response = await this._requestSender.loadPaymentMethod(id, {\n                                ...options,\n                                params,\n                            });\n\n                            return response.body;\n                        } catch (_e) {\n                            return undefined;\n                        }\n                    }),\n                )\n                    .then((response) => {\n                        const paymentMethods = response.filter(isPaymentMethod);\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                paymentMethods,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                        observer.complete();\n                    });\n            });\n    }\n\n    loadPaymentMethods(\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cart = state.cart.getCartOrThrow();\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n                this._requestSender\n                    .loadPaymentMethods({\n                        ...options,\n                        params: { ...options?.params, cartId: cart.id },\n                    })\n                    .then((response) => {\n                        const meta = {\n                            deviceSessionId: response.headers['x-device-session-id'],\n                            sessionHash: response.headers['x-session-hash'],\n                        };\n                        const methods = response.body;\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                methods,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    @cachableAction\n    loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions & ActionOptions,\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._requestSender\n                    .loadPaymentMethod(methodId, { ...options, params })\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\n                                response.body,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\n                                response,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\n        Response<PaymentMethod[]>\n    > {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(\n        methodId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","import { Action, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, Observable, of, throwError } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta,\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message || 'Unable to continue as a guest because the customer is already signed in.',\n        );\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { isEmpty } from 'lodash';\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport {\n    BillingAddressActionType,\n    ContinueAsGuestAction,\n    UpdateBillingAddressAction,\n} from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nimport { BillingAddressRequestSender } from '.';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            const hasBillingAddress = !isEmpty(billingAddress);\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            hasBillingAddress,\n                            options,\n                        );\n\n                        return createAction(\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\n                            body,\n                        );\n                    }),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\n                    ),\n                ),\n                this._updateCustomerConsent(credentials, options),\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n                const billingAddress = state.billingAddress.getBillingAddress();\n\n                const hasBillingAddress = !isEmpty(billingAddress);\n\n                // If email is not present in the address provided by the client, then\n                // fall back to the stored email as it could have been set separately\n                // using a convenience method. We can't rely on billingAddress having\n                // an ID to consider that there's a preexisting email, as billingAddress\n                // object from Order doesn't have an ID.\n                const billingAddressRequestBody = {\n                    ...address,\n                    email:\n                        typeof address.email === 'undefined' && billingAddress\n                            ? billingAddress.email\n                            : address.email,\n                };\n\n                if (billingAddress && billingAddress.id) {\n                    billingAddressRequestBody.id = billingAddress.id;\n                }\n\n                this._createOrUpdateBillingAddress(\n                    checkout.id,\n                    billingAddressRequestBody,\n                    hasBillingAddress,\n                    options,\n                )\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                BillingAddressActionType.UpdateBillingAddressFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _updateCustomerConsent(\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        if (\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\n        ) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions(\n            {\n                email,\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n            },\n            options,\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        hasBillingAddress: boolean,\n        options?: RequestOptions,\n    ): Promise<Response<Checkout>> {\n        if (!hasBillingAddress) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAddress(\n        checkoutId: string,\n        address: Partial<AddressRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: address,\n            params: DEFAULT_PARAMS,\n            headers,\n            timeout,\n        });\n    }\n\n    updateAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { BuyNowCartRequestBody, Cart } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class CartRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createBuyNowCart(\n        body: BuyNowCartRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return () => {\n            return concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig({\n                        useCache: true,\n                        timeout: options?.timeout,\n                        params: { checkoutId: id },\n                    }),\n                    this._formFieldsActionCreator.loadFormFields({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                ),\n                defer(() => {\n                    return this._checkoutRequestSender\n                        .loadCheckout(id, options)\n                        .then(({ body }) => {\n                            return createAction(\n                                CheckoutActionType.LoadCheckoutSucceeded,\n                                this._transformCustomerAddresses(body),\n                            );\n                        });\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n        };\n    }\n\n    loadDefaultCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                    this._formFieldsActionCreator.loadFormFields({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                ),\n                defer(async () => {\n                    const state = store.getState();\n                    const context = state.config.getContextConfig();\n\n                    if (!context || !context.checkoutId) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\n                        context.checkoutId,\n                        options,\n                    );\n\n                    return createAction(\n                        CheckoutActionType.LoadCheckoutSucceeded,\n                        this._transformCustomerAddresses(body),\n                    );\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n                this._checkoutRequestSender\n                    .updateCheckout(checkout.id, body, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\n                        );\n                    });\n            });\n    }\n\n    loadCurrentCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n\n    private _transformCustomerAddresses(body: Checkout): Checkout {\n        return {\n            ...body,\n            customer: {\n                ...body.customer,\n                addresses: body.customer.addresses.map((address) => ({\n                    ...address,\n                    shouldSaveAddress: false,\n                })),\n            },\n        };\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\n): string {\n    return Array.isArray(includeDictionaryOrList)\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean },\n): string {\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadCheckout(\n        id: string,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .get<Checkout>(url, {\n                params: {\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    updateCheckout(\n        id: string,\n        body: CheckoutRequestBody,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map((item) => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\n        super(\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\n        );\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport type ComparableCheckout = Pick<\n    Checkout,\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\n> & {\n    cart: Partial<Cart>;\n};\n\nexport default class CheckoutValidator {\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\n            const comparator = new CartComparator();\n\n            if (\n                checkout.outstandingBalance === response.body.outstandingBalance &&\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\n                this._compareGiftCertificates(\n                    checkout.giftCertificates,\n                    response.body.giftCertificates,\n                ) &&\n                comparator.isEqual(checkout.cart, response.body.cart)\n            ) {\n                return;\n            }\n\n            throw new CartChangedError(\n                this._getComparableCheckout(checkout),\n                this._getComparableCheckout(response.body),\n            );\n        });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(\n        giftCertificatesA: GiftCertificate[],\n        giftCertificatesB: GiftCertificate[],\n    ): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nimport { ConfigRequestSender } from '.';\n\nexport default class ConfigActionCreator {\n    constructor(private _configRequestSender: ConfigRequestSender) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender\n                .loadConfig(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender\n            .get<Config>(url, {\n                timeout,\n                headers: {\n                    Accept: ContentType.JsonV1,\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    ...SDK_VERSION_HEADERS,\n                },\n                params,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    ApplyCouponAction,\n    CouponAction,\n    CouponActionType,\n    RemoveCouponAction,\n} from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(private _couponRequestSender: CouponRequestSender) {}\n\n    applyCoupon(\n        code: string,\n        options?: RequestOptions,\n    ): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ApplyCouponAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n                this._couponRequestSender\n                    .applyCoupon(checkout.id, code, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CouponActionType.ApplyCouponFailed, response),\n                        );\n                    });\n            });\n    }\n\n    removeCoupon(\n        code: string,\n        options?: RequestOptions,\n    ): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<RemoveCouponAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n                this._couponRequestSender\n                    .removeCoupon(checkout.id, code, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CouponActionType.RemoveCouponFailed, response),\n                        );\n                    });\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES, CheckoutIncludes } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyCoupon(\n        checkoutId: string,\n        couponCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(\n        checkoutId: string,\n        couponCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { ExecuteSucceededAction, SpamProtectionAction } from './spam-protection-actions';\n\nexport default function isSpamProtectionExecuteSucceededAction(\n    action: SpamProtectionAction,\n): action is ExecuteSucceededAction {\n    const succeededAction = action as ExecuteSucceededAction;\n\n    return (\n        typeof succeededAction === 'object' &&\n        typeof succeededAction.payload === 'object' &&\n        typeof succeededAction.payload.token === 'string'\n    );\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CartSource } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    isSpamProtectionExecuteSucceededAction,\n    SpamProtectionActionCreator,\n} from '../spam-protection';\n\nimport CustomerAccountRequestBody, { CustomerAddressRequestBody } from './customer-account';\nimport {\n    CreateCustomerAction,\n    CreateCustomerAddressAction,\n    CustomerActionType,\n    SignInCustomerAction,\n    SignOutCustomerAction,\n} from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    createCustomer(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<CreateCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const config = state.config.getStoreConfigOrThrow();\n            const { isStorefrontSpamProtectionEnabled } = config.checkoutSettings;\n\n            const createCustomer = (token?: string) =>\n                from(\n                    this._customerRequestSender.createAccount(\n                        { ...customerAccount, token },\n                        options,\n                    ),\n                ).pipe(\n                    switchMap(() =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.CreateCustomerSucceeded)),\n                        ),\n                    ),\n                );\n\n            return concat(\n                of(createAction(CustomerActionType.CreateCustomerRequested)),\n                isStorefrontSpamProtectionEnabled\n                    ? from(this._spamProtectionActionCreator.execute()(store)).pipe(\n                          switchMap((action) =>\n                              isSpamProtectionExecuteSucceededAction(action)\n                                  ? concat(of(action), createCustomer(action.payload?.token))\n                                  : of(action),\n                          ),\n                      )\n                    : createCustomer(),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.CreateCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Observable<CreateCustomerAddressAction> {\n        return concat(\n            of(createAction(CustomerActionType.CreateCustomerAddressRequested)),\n            defer(async () => {\n                const { body } = await this._customerRequestSender.createAddress(\n                    customerAddress,\n                    options,\n                );\n\n                return createAction(CustomerActionType.CreateCustomerAddressSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(CustomerActionType.CreateCustomerAddressFailed, error),\n            ),\n        );\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckoutOrThrow();\n            const cartId = checkout.cart.source === CartSource.BuyNow ? checkout.id : undefined;\n\n            return concat(\n                of(createAction(CustomerActionType.SignInCustomerRequested)),\n                from(\n                    this._customerRequestSender.signInCustomer({ ...credentials, cartId }, options),\n                ).pipe(\n                    switchMap(({ body }) => {\n                        if (body.data.persistentCartRetrievalInformation) {\n                            return concat(\n                                this._checkoutActionCreator.loadCheckout(\n                                    body.data.persistentCartRetrievalInformation.id,\n                                    options,\n                                )(store),\n                                of(\n                                    createAction(\n                                        CustomerActionType.SignInCustomerSucceeded,\n                                        body.data,\n                                    ),\n                                ),\n                            );\n                        }\n\n                        return concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data)),\n                        );\n                    }),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignInCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    signOutCustomer(\n        options?: RequestOptions,\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckoutOrThrow();\n            const cartId = checkout.cart.source === CartSource.BuyNow ? checkout.id : undefined;\n\n            return concat(\n                of(createAction(CustomerActionType.SignOutCustomerRequested)),\n                from(this._customerRequestSender.signOutCustomer(options, cartId)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(\n                                createAction(\n                                    CustomerActionType.SignOutCustomerSucceeded,\n                                    body.data,\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignOutCustomerFailed, error),\n                ),\n            );\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Customer from './customer';\nimport { CustomerAccountInternalRequestBody, CustomerAddressRequestBody } from './customer-account';\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAccount(\n        customerAccount: CustomerAccountInternalRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<{}>> {\n        const url = '/api/storefront/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAccount,\n        });\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Customer>> {\n        const url = `/api/storefront/customer-address`;\n\n        return this._requestSender.post<Customer>(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAddress,\n        });\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: credentials,\n        });\n    }\n\n    signOutCustomer(\n        { timeout }: RequestOptions = {},\n        cartId?: string,\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            ...(cartId && { body: { cartId } }),\n        });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((response) =>\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent, TContext = undefined> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window, private _context?: TContext) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage({ ...event, context: this._context }, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n\n    setContext(context: TContext) {\n        this._context = context;\n    }\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { appendWww, parseUrl } from '../url';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<\n    TEventMap extends IframeEventMap<keyof TEventMap>,\n    TContext = undefined,\n> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap, TContext>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType], context?: TContext): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => (context ? listener(event, context) : listener(event)));\n    }\n\n    @bind\n    private _handleMessage(messageEvent: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(messageEvent.origin) === -1 ||\n            !isIframeEvent(messageEvent.data as TEventMap[keyof TEventMap], messageEvent.data.type)\n        ) {\n            return;\n        }\n\n        const { context, ...event } = messageEvent.data;\n\n        this.trigger(event, context);\n    }\n}\n\nexport type EventListeners<TEventMap, TContext = undefined> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key], context?: TContext) => void>;\n};\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n    StoredCardRequested = 'HOSTED_FIELD:STORED_CARD_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n    [HostedFieldEventType.StoredCardRequested]: HostedFieldStoredCardRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent\n    | HostedFieldStoredCardRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n\nexport interface HostedFieldStoredCardRequestEvent {\n    type: HostedFieldEventType.StoredCardRequested;\n    payload: {\n        data: StoredCardHostedFormData;\n        fields: StoredCardHostedFormInstrumentFields;\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentErrorData,\n    PaymentErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HostedFieldType from '../hosted-field-type';\nimport { HostedFormErrorsData } from '../hosted-form-options';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n    StoredCardSucceeded = 'HOSTED_INPUT:STORED_CARD_SUCCEEDED',\n    StoredCardFailed = 'HOSTED_INPUT:STORED_CARD_FAILED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n    [HostedInputEventType.StoredCardFailed]: HostedInputStoredCardErrorEvent;\n    [HostedInputEventType.StoredCardSucceeded]: HostedInputStoredCardSucceededEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent\n    | HostedInputStoredCardSucceededEvent\n    | HostedInputStoredCardErrorEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputStoredCardSucceededEvent {\n    type: HostedInputEventType.StoredCardSucceeded;\n}\n\nexport interface HostedInputStoredCardErrorEvent {\n    type: HostedInputEventType.StoredCardFailed;\n    payload?: {\n        errors?: string[];\n        error?: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n        errors?: HostedFormErrorsData;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport {\n    CardingProtectionChallengeNotCompletedError,\n    CardingProtectionFailedError,\n    SpamProtectionChallengeNotCompletedError,\n} from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\n\n    handle(error: any): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(\n        error: Error,\n    ): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(\n        id: string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha\n            .execute()\n            .pipe(take(1))\n            .pipe(\n                switchMap(async ({ error, token }) => {\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                        throw new CardingProtectionChallengeNotCompletedError();\n                    }\n\n                    if (error || !token) {\n                        throw new CardingProtectionFailedError();\n                    }\n\n                    return {\n                        type: 'recaptcha_v2_verification',\n                        data: {\n                            human_verification_token: token,\n                        },\n                    };\n                }),\n            )\n            .toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'recaptcha_v2_verification'\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport {\n    SpamProtectionChallengeNotCompletedError,\n    SpamProtectionFailedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (\n        recaptcha: ReCaptchaV2.ReCaptcha,\n        sitekey: string,\n        container: HTMLElement | null,\n    ) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory,\n    ) {\n        this._memoized = memoize(\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n                const event$ = new Subject<RecaptchaResult>();\n\n                if (!container) {\n                    throw new Error();\n                }\n\n                this._widgetId = recaptcha.render(container.id, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(this._widgetId),\n                        });\n                        recaptcha.reset(this._widgetId);\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                return event$;\n            },\n            { isEqual: (a, b) => a === b },\n        );\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader\n            .load()\n            .then((recaptcha) => {\n                if (recaptcha) {\n                    this._event$ = this._memoized(\n                        recaptcha,\n                        sitekey,\n                        document.getElementById(containerId),\n                    );\n                    this._recaptcha = recaptcha;\n                }\n            })\n            .catch((err) => {\n                throw err;\n            });\n    }\n\n    reset(containerId: string): void {\n        const element = document.getElementById(containerId);\n\n        element?.remove();\n        this._recaptcha?.reset(this._widgetId);\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            }).pipe(\n                retryWhen((errors) =>\n                    errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error),\n                        ),\n                    ),\n                ),\n                switchMap((element) => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute(this._widgetId);\n\n                    return event$;\n                }),\n                catchError((error) => of({ error })),\n            );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory\n            .create(() => {\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n                if (container.style.visibility === 'hidden') {\n                    event.next({\n                        error: new SpamProtectionChallengeNotCompletedError(),\n                    });\n                }\n            })\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window,\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch((error) => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory(),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _checkoutId?: string,\n        private _cardInstrument?: CardInstrument,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        const src = this._checkoutId\n            ? `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}&checkoutId=${this._checkoutId}`\n            : `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n\n        this._iframe.src = src;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                cardInstrument: this._cardInstrument,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async submitStoredCardForm(\n        fields: StoredCardHostedFormInstrumentFields,\n        data: StoredCardHostedFormData,\n    ): Promise<HostedInputStoredCardSucceededEvent> {\n        const promise = this._eventPoster.post<HostedInputStoredCardSucceededEvent>(\n            {\n                type: HostedFieldEventType.StoredCardRequested,\n                payload: { fields, data },\n            },\n            {\n                successType: HostedInputEventType.StoredCardSucceeded,\n                errorType: HostedInputEventType.StoredCardFailed,\n            },\n        );\n\n        return this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport LegacyHostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\ntype HostedFormEventCallbacks = Pick<\n    LegacyHostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalActionData),\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction),\n            );\n        }\n    }\n\n    async submitStoredCard(payload: {\n        fields: StoredCardHostedFormInstrumentFields;\n        data: StoredCardHostedFormData;\n    }): Promise<HostedInputStoredCardSucceededEvent | void> {\n        return this._getFirstField().submitStoredCardForm(payload.fields, payload.data);\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error instanceof Error && error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport {\n    HostedCreditCardInstrument,\n    isVaultedInstrument,\n    PaymentAdditionalAction,\n} from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    transform(\n        payload: OrderPaymentRequestBody,\n        additionalAction?: PaymentAdditionalAction,\n    ): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(\n            payload.paymentData,\n            'ccExpiry',\n            'ccName',\n            'ccNumber',\n            'ccCvv',\n        ) as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            payload.methodId,\n            payload.gatewayId,\n        );\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken =\n            instrumentMeta && payment && isVaultedInstrument(payment)\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport LegacyHostedFormOptions, {\n    HostedCardFieldOptionsMap,\n    HostedStoredCardFieldOptionsMap,\n} from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    create(host: string, options: LegacyHostedFormOptions, checkoutId?: string): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\n                HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    checkoutId,\n                    'instrumentId' in fieldOptions\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\n                        : undefined,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam check. Please try again.\");\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport {\n    FinalizeOrderAction,\n    LoadOrderAction,\n    LoadOrderPaymentsAction,\n    OrderActionType,\n    SubmitOrderAction,\n} from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\n                    );\n                });\n        });\n    }\n\n    loadCurrentOrder(\n        options?: RequestOptions,\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            defer(() => {\n                const orderId = this._getCurrentOrderId(store.getState());\n\n                if (!orderId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n                }\n\n                return this.loadOrder(orderId, options);\n            });\n    }\n\n    submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(OrderActionType.SubmitOrderRequested)),\n                defer(() => {\n                    const state = store.getState();\n                    const externalSource = state.config.getExternalSource();\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (checkout.shouldExecuteSpamCheck) {\n                        throw new SpamProtectionNotCompletedError();\n                    }\n\n                    return from(\n                        this._checkoutValidator.validate(checkout, options).then(() =>\n                            this._orderRequestSender.submitOrder(\n                                this._mapToOrderRequestBody(\n                                    payload ?? {},\n                                    checkout.id,\n                                    checkout.customerMessage,\n                                    externalSource,\n                                ),\n                                {\n                                    ...options,\n                                    headers: {\n                                        checkoutVariant: variantIdentificationToken,\n                                    },\n                                },\n                            ),\n                        ),\n                    ).pipe(\n                        switchMap((response) =>\n                            concat(\n                                // TODO: Remove once we can submit orders using storefront API\n                                this.loadOrder(response.body.data.order.orderId, options),\n                                of(\n                                    createAction(\n                                        OrderActionType.SubmitOrderSucceeded,\n                                        response.body.data,\n                                        { ...response.body.meta, token: response.headers.token },\n                                    ),\n                                ),\n                            ),\n                        ),\n                    );\n                }).pipe(\n                    catchError((error) =>\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\n                    ),\n                ),\n            );\n    }\n\n    finalizeOrder(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\n                switchMap((response) =>\n                    concat(\n                        this.loadOrder(orderId, options),\n                        of(\n                            createAction(\n                                OrderActionType.FinalizeOrderSucceeded,\n                                response.body.data,\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string,\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when the server detects inconsistency in cart data since it is last requested,\n * for example, product prices or eligible discounts have changed.\n */\nexport default class CartConsistencyError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because some details have changed. Please review your order and try again.',\n        );\n\n        this.name = 'CartConsistencyError';\n        this.type = 'cart_consistency';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class MissingShippingMethodError extends StandardError {\n    constructor(message: string) {\n        super(message);\n\n        this.name = 'MissingShippingMethodError';\n        this.type = 'missing_shipping_method';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidShippingAddressError extends StandardError {\n    constructor(message: string) {\n        super(message);\n\n        this.name = 'InvalidShippingAddressError';\n        this.type = 'invalid_shipping_address';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { CartConsistencyError } from '../cart/errors';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { MissingShippingMethodError, OrderTaxProviderUnavailableError } from './errors';\nimport InvalidShippingAddressError from './errors/invalid-shipping-address-error';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.physicalItems.categories',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n            'lineItems.digitalItems.categories',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes(include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(\n        body?: InternalOrderRequestBody,\n        { headers, timeout }: SubmitOrderRequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender\n            .post<InternalOrderResponseBody>(url, {\n                body,\n                headers: omitBy(\n                    {\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    isNil,\n                ),\n                timeout,\n            })\n            .catch((error) => {\n                if (error.body.type === 'tax_provider_unavailable') {\n                    throw new OrderTaxProviderUnavailableError();\n                }\n\n                if (error.body.type === 'cart_has_changed') {\n                    throw new CartConsistencyError();\n                }\n\n                if (error.body.type === 'missing_shipping_method') {\n                    throw new MissingShippingMethodError(error.body.detail);\n                }\n\n                if (error.body.type === 'invalid_shipping_address') {\n                    throw new InvalidShippingAddressError(error.body.detail);\n                }\n\n                throw error;\n            });\n    }\n\n    finalizeOrder(\n        orderId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, {\n    FormattedHostedInstrument,\n    FormattedPayload,\n    FormattedVaultedInstrument,\n} from './payment';\nimport {\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (\n    settings: InitializeOffsitePaymentSettings,\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\n                defer(async () => {\n                    try {\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\n                        );\n                    } catch (error) {\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\n                            error,\n                        );\n\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(\n                                { ...payment, additionalAction },\n                                store.getState(),\n                            ),\n                        );\n                    }\n                }).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._orderActionCreator.loadCurrentOrder()(store),\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\n                ),\n            );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return (store) => {\n            let paymentData:\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\n                | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform(\n                { gatewayId, methodId, paymentData },\n                store.getState(),\n            );\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race(\n                    [\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\n                        promise,\n                    ].filter(Boolean),\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\n                ),\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    GOOGLEPAY_WORLDPAYACCESS = \"googlepayworldpayaccess\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\"\n}\nexport default CheckoutButtonMethodType;\n\n","import { mapToInternalAddress } from '../address';\nimport { OrderBillingAddress } from '../order-billing-address/order-billing-address-state';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: OrderBillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { Observable, of } from 'rxjs';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport {\n    PaymentProviderCustomerAction,\n    PaymentProviderCustomerType,\n} from './payment-provider-customer-actions';\n\nexport default class PaymentProviderCustomerActionCreator {\n    updatePaymentProviderCustomer(\n        providerCustomerData: PaymentProviderCustomer,\n    ): Observable<PaymentProviderCustomerAction> {\n        return of(\n            createAction(\n                PaymentProviderCustomerType.UpdatePaymentProviderCustomer,\n                providerCustomerData,\n            ),\n        );\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\n\nimport { PaymentRequestOptions } from './payment-request-options';\nimport { PaymentStrategyActionType, PaymentStrategyWidgetAction } from './payment-strategy-actions';\n\nexport default class PaymentStrategyWidgetActionCreator {\n    widgetInteraction(\n        method: () => Promise<unknown>,\n        options?: PaymentRequestOptions,\n    ): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() =>\n                    createAction(\n                        PaymentStrategyActionType.WidgetInteractionFinished,\n                        undefined,\n                        meta,\n                    ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta),\n            ),\n        );\n    }\n}\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, {\n    InitializePaymentOptions,\n} from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n    ) {}\n\n    initializeBilling(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializeShipping(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(\n                    RemoteCheckoutActionType.InitializeRemoteShippingRequested,\n                    undefined,\n                    { methodId },\n                ),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(\n                        createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, {\n                            methodId,\n                        }),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.LoadRemoteSettingsFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .signOut(methodId, options)\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded,\n                            undefined,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(\n                createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested,\n                    undefined,\n                    { methodId },\n                ),\n            ),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded,\n                    undefined,\n                    { methodId },\n                );\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed,\n                    error,\n                    { methodId },\n                ),\n            ),\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(\n        methodId: K,\n        data: Partial<RemoteCheckoutStateData[K]>,\n    ): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    initializeBilling(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(\n        methodName: string,\n        params?: InitializePaymentOptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url =\n            '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport {\n    CheckoutIncludes,\n    CheckoutParams,\n    CheckoutRequestSender,\n    InternalCheckoutSelectors,\n    ReadableCheckoutStore,\n} from '../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender,\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart(),\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment(\n                {\n                    id: existingConsignment.id,\n                    address,\n                    lineItems,\n                },\n                options,\n            )(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment(\n                {\n                    id: existingConsignment && existingConsignment.id,\n                    address,\n                    lineItems: this._addLineItems(\n                        consignment.lineItems,\n                        existingConsignment,\n                        state.cart.getCart(),\n                    ),\n                },\n                options,\n            )(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const consignments = state.consignments.getConsignments();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!consignments || !consignments.length) {\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n                }\n\n                const consignmentUpdateBody = {\n                    id: consignments[0].id,\n                    shippingOptionId: id,\n                };\n\n                const consignmentMeta = {\n                    id: consignments[0].id,\n                };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    loadShippingOptions(\n        options?: RequestOptions,\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n                this._checkoutRequestSender\n                    .loadCheckout(checkout.id, {\n                        ...options,\n                        params: {\n                            include: [CheckoutIncludes.AvailableShippingOptions],\n                        },\n                    })\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.LoadShippingOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n                this._consignmentRequestSender\n                    .createConsignments(checkout.id, consignments, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.CreateConsignmentsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n                const consignmentMeta = { id: consignmentId };\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.DeleteConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .deleteConsignment(checkout.id, consignmentId, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.DeleteConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                const consignmentInMemory = store\n                    .getState()\n                    .consignments.getConsignmentById(consignment.id);\n\n                const alreadySelectedOptionId = consignmentInMemory?.selectedShippingOption?.id;\n\n                if (alreadySelectedOptionId === consignment.shippingOptionId) {\n                    observer.complete();\n\n                    return;\n                }\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore,\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\n            .map((existingItem) => {\n                const sharedItem = find(\n                    lineItems,\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\n                );\n\n                return {\n                    ...existingItem,\n                    quantity: sharedItem\n                        ? existingItem.quantity - sharedItem.quantity\n                        : existingItem.quantity,\n                };\n            })\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map((itemId) => {\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody,\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment:\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport CheckoutStore from '../checkout/checkout-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender,\n        private _store: CheckoutStore,\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        const { checkout } = this._store.getState();\n        const checkoutData = checkout.getCheckout();\n\n        const channelId = checkoutData ? checkoutData.channelId : null;\n\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender\n                .loadCountries(channelId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(\n                            ShippingCountryActionType.LoadShippingCountriesSucceeded,\n                            response.body.data,\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            ShippingCountryActionType.LoadShippingCountriesFailed,\n                            response,\n                        ),\n                    );\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(private _requestSender: RequestSender, private _config: { locale?: string }) {}\n\n    loadCountries(\n        channelId: number | null,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<CountryResponseBody>> {\n        const channelIdParam = channelId ? `?channel_id=${channelId}` : '';\n        const url = `/internalapi/v1/shipping/countries${channelIdParam}`;\n\n        const headers = {\n            'Accept-Language': this._config.locale,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport isSpamProtectionExecuteSucceededAction from './is-spam-protection-succeeded-action';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender,\n    ) {}\n\n    initialize(\n        options?: SpamProtectionOptions,\n    ): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) => {\n            return concat(\n                of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n                defer(async () => {\n                    const spamProtectionElementId = options\n                        ? options.containerId\n                        : 'spamProtectionContainer';\n\n                    const element = document.getElementById(spamProtectionElementId);\n\n                    if (element) {\n                        this._googleRecaptcha.reset(spamProtectionElementId);\n                    }\n\n                    if (!options && !document.getElementById(spamProtectionElementId)) {\n                        const spamProtectionElement = document.createElement('div');\n\n                        spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                        document.body.appendChild(spamProtectionElement);\n                    }\n\n                    const state = store.getState();\n                    const storeConfig = state.config.getStoreConfigOrThrow();\n                    const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                    await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                    return createAction(SpamProtectionActionType.InitializeSucceeded);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.InitializeFailed, error),\n                ),\n            );\n        };\n    }\n\n    verifyCheckoutSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return concat(\n                    of(createAction(SpamProtectionActionType.VerifyCheckoutRequested)),\n                    from(this.execute()(store)).pipe(\n                        switchMap((action) => {\n                            if (\n                                !isSpamProtectionExecuteSucceededAction(action) ||\n                                !action.payload\n                            ) {\n                                return of(action);\n                            }\n\n                            return from(\n                                this._requestSender.validate(checkout.id, action.payload.token),\n                            ).pipe(\n                                switchMap(({ body }) =>\n                                    concat(\n                                        of(action),\n                                        of(\n                                            createAction(\n                                                SpamProtectionActionType.VerifyCheckoutSucceeded,\n                                                body,\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            );\n                        }),\n                    ),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(SpamProtectionActionType.VerifyCheckoutFailed, error),\n                    ),\n                );\n            });\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested)),\n                this.initialize()(store),\n                this._googleRecaptcha\n                    .execute()\n                    .pipe(take(1))\n                    .pipe(\n                        switchMap(async ({ error, token }) => {\n                            if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                                throw error;\n                            }\n\n                            if (error || !token) {\n                                throw new SpamProtectionFailedError();\n                            }\n\n                            return createAction(SpamProtectionActionType.ExecuteSucceeded, {\n                                token,\n                            });\n                        }),\n                    ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.ExecuteFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    validate(\n        checkoutId: string,\n        token: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(private _storeCreditRequestSender: StoreCreditRequestSender) {}\n\n    applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n                defer(async () => {\n                    const state = store.getState();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    const { body } = await (useStoreCredit\n                        ? this._storeCreditRequestSender.applyStoreCredit(checkout.id, options)\n                        : this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                    return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    Subscriptions,\n    SubscriptionsActionType,\n    SubscriptionsRequestSender,\n    UpdateSubscriptionsAction,\n} from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\n                    subscriptions,\n                    options,\n                );\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\n                    new UpdateSubscriptionsError(error),\n                ),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>).reduce(\n            (result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }),\n            {},\n        ) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cloneResult as clone } from '../common/utility';\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow, getOutstandingBalance },\n    config: {\n        getContextConfig,\n        getHost,\n        getLocale,\n        getStoreConfig,\n        getStoreConfigOrThrow,\n        getConfig,\n    },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    countries: { getCountries },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: {\n        getCardInstrument,\n        getCardInstrumentOrThrow,\n        getInstruments,\n        getInstrumentsMeta,\n    },\n    order: { getOrder, getOrderOrThrow, getOrderMeta },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow, getPaymentMethodsMeta },\n    paymentProviderCustomer: { getPaymentProviderCustomer, getPaymentProviderCustomerOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: {\n        getShippingAddress,\n        getShippingAddressOrThrow,\n        getShippingAddresses,\n        getShippingAddressesOrThrow,\n    },\n    shippingCountries: { getShippingCountries },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getCountries: clone(getCountries),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConfig: clone(getConfig),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getContextConfig: clone(getContextConfig),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getInstruments: clone(getInstruments),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getOrderMeta: clone(getOrderMeta),\n        getInstrumentsMeta: clone(getInstrumentsMeta),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getPaymentMethodsMeta: clone(getPaymentMethodsMeta),\n        getPaymentProviderCustomer: clone(getPaymentProviderCustomer),\n        getPaymentProviderCustomerOrThrow: clone(getPaymentProviderCustomerOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        getShippingAddresses: clone(getShippingAddresses),\n        getShippingAddressesOrThrow: clone(getShippingAddressesOrThrow),\n        getShippingCountries: clone(getShippingCountries),\n        getOutstandingBalance: clone(getOutstandingBalance),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState>\n    extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState,\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<\n        TState | undefined,\n        SynchronizeAction<TState>,\n        TTransformedState\n    >(\n        (state, action) =>\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\n        store.getState(),\n        { stateTransformer },\n    );\n\n    store.subscribe(\n        (state) => {\n            projection.dispatch(\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\n            );\n        },\n        { initial: false },\n    );\n\n    return projection;\n}\n","import {\n    BillingAddressRequestBody,\n    BuyNowCartRequestBody,\n    Cart,\n    HostedForm,\n    HostedFormOptions,\n    InitializeOffsitePaymentConfig,\n    OrderRequestBody,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    RequestOptions,\n    ShippingAddressRequestBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport CouponActionCreator from '../coupon/coupon-action-creator';\nimport { CustomerActionCreator, CustomerCredentials } from '../customer';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport {\n    PaymentProviderCustomer,\n    PaymentProviderCustomerActionCreator,\n} from '../payment-provider-customer';\nimport PaymentActionCreator from '../payment/payment-action-creator';\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\nimport PaymentStrategyWidgetActionCreator from '../payment/payment-strategy-widget-action-creator';\nimport { RemoteCheckoutActionCreator } from '../remote-checkout';\nimport { InitializePaymentOptions } from '../remote-checkout/remote-checkout-request-sender';\nimport { ConsignmentActionCreator, ShippingCountryActionCreator } from '../shipping';\nimport { PaymentHumanVerificationHandler, SpamProtectionActionCreator } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\n\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _checkoutValidator: CheckoutValidator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n        private _customerActionCreator: CustomerActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _paymentProviderCustomerActionCreator: PaymentProviderCustomerActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _paymentStrategyWidgetActionCreator: PaymentStrategyWidgetActionCreator,\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\n    }\n\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\n        const checkoutId = this._storeProjection.getState().getCheckoutOrThrow().id;\n\n        return this._hostedFormFactory.create(host, options, checkoutId);\n    }\n\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async initializeOffsitePayment(\n        initializeOffsitePaymentConfig: InitializeOffsitePaymentConfig,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.initializeOffsitePayment(initializeOffsitePaymentConfig),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(id?: string): Promise<PaymentIntegrationSelectors> {\n        if (id) {\n            await this._store.dispatch(this._checkoutActionCreator.loadCheckout(id));\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethods(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethods(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signOutCustomer(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async createBuyNowCart(\n        buyNowCartRequestBody: BuyNowCartRequestBody,\n        options?: RequestOptions,\n    ): Promise<Cart> {\n        const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n            buyNowCartRequestBody,\n            options,\n        );\n\n        return buyNowCart;\n    }\n\n    async applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async applyCoupon(\n        coupon: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._couponActionCreator.applyCoupon(coupon, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async removeCoupon(\n        coupon: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._couponActionCreator.removeCoupon(coupon, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async verifyCheckoutSpamProtection(): Promise<PaymentIntegrationSelectors> {\n        const { checkout } = this._store.getState();\n        const { shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\n\n        if (shouldExecuteSpamCheck) {\n            await this._store.dispatch(\n                this._spamProtectionActionCreator.verifyCheckoutSpamProtection(),\n            );\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCurrentOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.loadCurrentOrder(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async updatePaymentProviderCustomer(\n        paymentProviderCustomer: PaymentProviderCustomer,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentProviderCustomerActionCreator.updatePaymentProviderCustomer(\n                paymentProviderCustomer,\n            ),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadShippingCountries(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._shippingCountryActionCreator.loadCountries(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.deleteConsignment(consignmentId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(methodId, params, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async forgetCheckout(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.forgetCheckout(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async remoteCheckoutSignOut(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._remoteCheckoutActionCreator.signOut(methodId, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async validateCheckout(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        await this._checkoutValidator.validate(checkout, options);\n    }\n\n    async handlePaymentHumanVerification(\n        errorOrId: Error | string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this._paymentHumanVerificationHandler.handle(errorOrId, key ?? '');\n        }\n\n        return this._paymentHumanVerificationHandler.handle(errorOrId);\n    }\n\n    async widgetInteraction(\n        callback: () => Promise<unknown>,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentStrategyWidgetActionCreator.widgetInteraction(callback),\n            { queueId: 'widgetInteraction' },\n        );\n\n        return this._storeProjection.getState();\n    }\n}\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors,\n        ) => PaymentIntegrationSelectors,\n    ) {}\n\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nconst getUniqId = (idPrefix?: string): string => {\n    const id = uniqueId(idPrefix);\n\n    return document.getElementById(id) ? getUniqId(idPrefix) : id;\n};\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(\n            `Unable to find any element with the specified selector: ${selector}`,\n        );\n    }\n\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\n        if (!container.id) {\n            container.id = getUniqId(idPrefix);\n        }\n\n        return container.id;\n    });\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap,\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if (\n                    (args.length === 0 || index === args.length - 1) &&\n                    isTerminalCacheKeyMap(map)\n                ) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\n        args: any[],\n    ): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CacheKeyResolver, isEqual, isPrivate } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            selectorMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe((state) => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            (state) => state.checkoutButton.getState(),\n            ...filters.map(\n                (filter) => (state: InternalCheckoutSelectors) =>\n                    filter(createCheckoutButtonSelectors(state)),\n            ),\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId)\n            ? [options.containerId]\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map((containerId) => {\n                const action = this._buttonStrategyActionCreator.initialize({\n                    ...options,\n                    containerId,\n                });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            }),\n        ).then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions,\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\n            ) {\n                return empty();\n            }\n\n            const paymentMethodRequestParams = options.currencyCode\n                ? { params: { currencyCode: options.currencyCode } }\n                : {};\n\n            const paymentMethodRequestOptions = {\n                ...paymentMethodRequestParams,\n                timeout: options.timeout,\n                useCache: true,\n            };\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    paymentMethodRequestOptions,\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions,\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta,\n                    ),\n                ),\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType,\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken,\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\n        }\n    }\n\n    getFactory(token: string): Factory<T> | undefined {\n        const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n        const factory = resolvedToken ? this._factories[resolvedToken] : undefined;\n\n        return factory;\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this.getFactory(token);\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n}\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window,\n    ) {}\n\n    async load({\n        useMasterpassSrc,\n        language,\n        testMode,\n        checkoutId,\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\n\n            const sourceUrl = [\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n                params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n        }\n\n        await this._scriptLoader.loadScript(\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\n        );\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n        };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: [\n        'en_us',\n        'en_gb',\n        'en_ca',\n        'en_es',\n        'en_fr',\n        'en_ie',\n        'en_sg',\n        'en_au',\n        'en_nz',\n        'en_my',\n        'en_hk',\n        'en_th',\n        'en_ae',\n        'en_sa',\n        'en_qa',\n        'en_kw',\n        'en_za',\n    ],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca'],\n};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: 'text' | 'flex';\n    logo?: {\n        type: 'none' | 'inline' | 'primary';\n    };\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onClick?(): void;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    Masterpass,\n    MasterpassCheckoutOptions,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalScriptLoader,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = '',\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n        ));\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader\n            .loadPaypal(paymentMethod.config.merchantId)\n            .then((paypal) => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render(\n                    {\n                        env,\n                        client: clientToken,\n                        commit: paypalOptions.shouldProcessPayment,\n                        funding: {\n                            allowed: allowedSources,\n                            disallowed: disallowedSources,\n                        },\n                        style: {\n                            shape: PaypalButtonStyleShapeOption.RECT,\n                            ...pick(\n                                paypalOptions.style,\n                                'layout',\n                                'color',\n                                'label',\n                                'shape',\n                                'tagline',\n                                'fundingicons',\n                            ),\n                            size:\n                                paymentMethod.id === 'paypalexpress' &&\n                                paypalOptions.style?.size === 'small'\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\n                                    : paypalOptions.style?.size,\n                        },\n                        payment: (_, actions) =>\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                        onAuthorize: (data, actions) =>\n                            this._tokenizePayment(\n                                data,\n                                actions,\n                                paypalOptions.shouldProcessPayment,\n                                paypalOptions.onAuthorizeError,\n                            ),\n                    },\n                    options.containerId,\n                );\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(\n                    `${this._host}/api/storefront/payment/paypalexpress`,\n                    { merchantId, cartId },\n                    {\n                        headers: {\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                            ...SDK_VERSION_HEADERS,\n                        },\n                    },\n                );\n            })\n            .then((res) => res.id)\n            .catch((error) => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then((payload) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n): module is ResolvableModule<TModule, TIdentifier> {\n    return module && 'resolveIds' in module;\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\ntype keys = 'log' | 'info' | 'warn' | 'error' | 'debug';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(private _console?: Console) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keys, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { getDefaultLogger } from '../log';\nimport { getEnvironment } from '../utility';\n\nimport Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor(private _useFallback = false) {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: this._useFallback,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    getFactory(resolveId: TToken): Factory<TType> | undefined {\n        try {\n            return this._registry.getFactory(this._encodeToken(resolveId));\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n\n        const results: Array<{ token: string; matches: number; default: boolean }> = [];\n\n        registeredTokens.forEach((registeredToken) => {\n            const resolverId = this._decodeToken(registeredToken);\n\n            const result = { token: registeredToken, matches: 0, default: false };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] !== value) {\n                    result.matches = 0;\n                    break;\n                }\n\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n\n                if (key === 'default' && value === true) {\n                    result.default = true;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matchedResults = results\n            .sort((a, b) => b.matches - a.matches)\n            .filter((result) => result.matches > 0);\n\n        if (matchedResults.length > 1 && matchedResults[0].matches === matchedResults[1].matches) {\n            if (getEnvironment() === 'development') {\n                getDefaultLogger().warn(\n                    'The provided query matches at least two strategies with the same specificity. This warning can be resolved by making their resolve ID more specific.',\n                );\n            }\n        }\n\n        const matched = matchedResults[0];\n\n        if (matched && matched.token) {\n            return matched.token;\n        }\n\n        if (this._useFallback) {\n            const defaultToken = results.find((result) => result.default)?.token;\n\n            if (defaultToken) {\n                return defaultToken;\n            }\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { ConfigState } from '../config';\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions,\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n\n    const config: ConfigState = {\n        meta: {\n            host: options?.host,\n            locale: options?.locale,\n        },\n        errors: {},\n        statuses: {},\n    };\n\n    const store = createCheckoutStore({ config });\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(\n        paymentIntegrationService,\n        defaultCheckoutButtonStrategyFactories,\n        // TODO: Replace once CHECKOUT-9450.lazy_load_payment_strategies experiment is rolled out\n        // process.env.ESSENTIAL_BUILD ? {} : defaultCheckoutButtonStrategyFactories,\n    );\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, locale, host),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        ),\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories,\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories,\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService),\n            );\n        }\n    }\n\n    return registry;\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport CouponActionCreator from '../coupon/coupon-action-creator';\nimport CouponRequestSender from '../coupon/coupon-request-sender';\nimport { CustomerActionCreator, CustomerRequestSender } from '../customer';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { PaymentProviderCustomerActionCreator } from '../payment-provider-customer';\nimport PaymentStrategyWidgetActionCreator from '../payment/payment-strategy-widget-action-creator';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport {\n    ConsignmentActionCreator,\n    ConsignmentRequestSender,\n    ShippingCountryActionCreator,\n    ShippingCountryRequestSender,\n} from '../shipping';\nimport {\n    createSpamProtection,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore,\n): PaymentIntegrationService {\n    const {\n        config: { getHost, getLocale },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors,\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const checkoutValidator = new CheckoutValidator(new CheckoutRequestSender(requestSender));\n\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(\n        createSpamProtection(createScriptLoader()),\n    );\n\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        new SpamProtectionActionCreator(\n            createSpamProtection(createScriptLoader()),\n            new SpamProtectionRequestSender(requestSender),\n        ),\n    );\n\n    const storeCreditActionCreator = new StoreCreditActionCreator(\n        new StoreCreditRequestSender(requestSender),\n    );\n\n    const applyCouponActionCreator = new CouponActionCreator(\n        new CouponRequestSender(requestSender),\n    );\n\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        spamProtection,\n        spamProtectionRequestSender,\n    );\n\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    const paymentProviderCustomerActionCreator = new PaymentProviderCustomerActionCreator();\n\n    const shippingCountryActionCreator = new ShippingCountryActionCreator(\n        new ShippingCountryRequestSender(requestSender, { locale: getLocale() }),\n        store,\n    );\n\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender),\n        checkoutActionCreator,\n    );\n\n    const paymentStrategyWidgetActionCreator = new PaymentStrategyWidgetActionCreator();\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        checkoutValidator,\n        hostedFormFactory,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator,\n        paymentHumanVerificationHandler,\n        customerActionCreator,\n        cartRequestSender,\n        storeCreditActionCreator,\n        applyCouponActionCreator,\n        spamProtectionActionCreator,\n        paymentProviderCustomerActionCreator,\n        shippingCountryActionCreator,\n        remoteCheckoutActionCreator,\n        paymentStrategyWidgetActionCreator,\n    );\n}\n","// / <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        (state) => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        (state) => state.config.getStoreConfig(),\n    );\n\n    return paymentClient;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string,\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.MASTERPASS,\n        () =>\n            new MasterpassButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALEXPRESS,\n        () =>\n            new PaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n                formPoster,\n                host,\n            ),\n    );\n\n    return registry;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","RequestError","response","errors","PaymentMethodInvalidError","UnrecoverableError","joinErrors","reduce","result","error","join","mapFromPaymentErrorResponse","Array","isArray","TimeoutError","RequestErrorFactory","_factoryMethods","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","ErrorActionType","SubscriptionsActionType","BillingAddressActionType","omitDeep","object","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","billingAddress","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","a","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","CheckoutButtonActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","ConfigActionType","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","OrderActionType","couponReducer","LoadOrderSucceeded","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerActionType","customerReducer","customer","CreateCustomerAddressSucceeded","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","CustomerStrategyActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeErrors","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","ExtensionActionType","extensionReducer","LoadExtensionsSucceeded","LoadExtensionsRequested","RenderExtensionRequested","RenderExtensionSucceeded","LoadExtensionsFailed","RenderExtensionFailed","FormFieldsActionType","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","CountryActionType","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","orderBillingAddressReducer","PaymentActionType","PaymentMethodActionType","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","derivedPredicate","pickBy","findIndex","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","PaymentStrategyActionType","paymentStrategyReducer","gatewayId","initializeError","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","PaymentProviderCustomerType","paymentProviderCustomerReducer","UpdatePaymentProviderCustomer","InstrumentActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","RemoteCheckoutActionType","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","objectWithSortedKeys","sort","previous","current","PickupOptionActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingCountryActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","ShippingStrategyActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","SignInEmailActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","StoreCreditActionType","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","subscriptionsReducer","SpamProtectionActionType","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingPaymentProviderCustomer","MissingShippingAddress","getErrorMessage","creator","args","combiner","pop","combinerArgs","guard","errorFactory","createFreezeProxy","target","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","trap","createProxy","provider","method","barclays","braintree","braintreepaypal","braintreeach","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","bluesnapv2","orbital","paymetric","bolt","moneris","cba_mpgs","worldpayaccess","squarev2","paypalcommercecreditcards","paypalcommerce","bigcommerce_payments_creditcards","bigcommerce_payments","tdonlinemart","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","createBillingAddressSelector","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","continueAsGuestError","getLoadError","loadError","isContinuingAsGuest","isLoading","memoizeOne","createBillingAddressSelectorFactory","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","getState","some","getInitializeError","find","values","getDeinitializeError","createCheckoutButtonSelectorFactory","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","formFields","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","getCoupons","getRemoveError","removeCouponError","getApplyError","applyCouponError","isApplying","isApplyingCoupon","isRemoving","isRemovingCoupon","createCouponSelectorFactory","createCustomerSelector","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","isCreating","getCreateAddressError","createAddressError","isCreatingCustomerAddress","isCreatingAddress","createCustomerSelectorFactory","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","shippingAddress","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","query","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createPaymentProviderCustomerSelector","getPaymentProviderCustomer","getPaymentProviderCustomerOrThrow","createPaymentProviderCustomerSelectorFactory","createRemoteCheckoutSelector","getCheckout","createRemoteCheckoutSelectorFactory","createShippingAddressSelector","getShippingAddress","shippingConsignment","consignment","selectedPickupOption","getShippingAddressOrThrow","getShippingAddresses","shippingConsignments","getShippingAddressesOrThrow","createShippingAddressSelectorFactory","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","isAddressEqual","addressA","addressB","isEqual","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","checkout","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderBillingAddress","getOrderOrThrow","getOrderMeta","getPaymentId","payments","currentPayment","providerId","paymentId","createOrderSelectorFactory","createOrderBillingAddressSelector","createOrderBillingAddressSelectorFactory","createPaymentSelector","getInternalPayment","getGatewayPayment","getHostedPayment","providerType","internalPayment","getPaymentIdOrThrow","MissingPaymentId","getPaymentStatus","step","getPaymentStatusOrThrow","MissingPaymentStatus","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","redirectUrl","getPaymentRedirectUrlOrThrow","MissingPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","nonce","createPaymentSelectorFactory","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","getEmail","signInEmail","getSendError","sendError","isSending","createSignInEmailSelectorFactory","createExtensionSelector","getExtensions","getExtensionByRegion","region","e","createExtensionSelectorFactory","checkoutButton","customerStrategies","extensions","form","orderBillingAddress","paymentProviderCustomer","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","config","shouldWarnMutation","createFreezeProxies","createCheckoutStore","initialState","actionTransformer","requestErrorFactory","factory","createRequestErrorFactory","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","NotInitializedErrorType","getShippableItemsCount","addedByPromotion","total","quantity","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","amazonPayV2Regions","de","jp","uk","us","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","AmazonPayV2ButtonDesign","AmazonPayV2PaymentProcessor","amazonPayV2ScriptLoader","initialize","amazonPayV2SDK","load","buttonParentContainer","createAmazonPayButtonParentContainer","deinitialize","amazonPayV2Button","remove","Promise","resolve","bindButton","buttonId","sessionId","changeAction","getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","prepareRequestConfig","getAmazonPayV2Button","onClick","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","estimatedOrderAmount","productType","signout","renderAmazonPayButton","buttonColor","checkoutState","decoupleCheckoutInitiation","placement","isButtonMicroTextDisabled","container","document","querySelector","parentContainerId","appendChild","getButtonParentContainer","design","C0001","amazonPayV2ButtonOptions","getAmazonPayV2ButtonOptions","updateBuyNowFlowFlag","isBuyNowFlow","isPh4Enabled","features","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","isEnvironmentSpecific","uid","random","substr","parentContainer","createElement","Gold","getCheckoutState","merchantId","testMode","initializationData","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","sandbox","PayOnly","PayAndShip","checkoutSettings","storeProfile","shopPath","amount","currencyCode","currency","buttonOptions","tmpConfig","createCheckoutSession","url","test","getOrThrow","checkoutSelectors","PaymentMethodClientUnavailableError","AmazonPayV2ScriptLoader","scriptLoader","windowWithAmazonPay","window","amazonPayV2Region","loadScript","amazon","toResolvableModule","module","resolveIds","InvalidArgumentError","BuyNowCartCreationError","AmazonPayV2ConfigCreationError","isWithBuyNowFeatures","AmazonPayV2ButtonStrategy","paymentIntegrationService","amazonPayV2PaymentProcessor","amazonPayV2ConfigRequestSender","amazonpay","loadDefaultCheckout","initializeAmazonButtonOptions","buyNowInitializeOptions","getBuyNowCartRequestBody","_buyNowInitializeOptions","Cart","_getCheckoutCreationRequestConfig","bind","_createBuyNowCartOrThrow","buyNowCartRequestBody","createBuyNowCart","_createCheckoutConfig","public_key","rest","payloadJSON","buyNowCart","String","baseAmount","INTERNAL_USE_ONLY","ContentType","SDK_VERSION_HEADERS","AmazonPayV2RequestSender","_requestSender","cartId","Json","post","requestSender","createRequestSender","amazonPayV2RequestSender","getScriptLoader","isExperimentEnabled","experimentName","fallbackValue","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BraintreeSDKVersionManager","braintreeWindow","getSDKVersion","getPreloadedSDKVersion","preloadedVersion","VERSION","UnsupportedBrowserError","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","isBraintreeError","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BraintreeSdk","braintreeScriptLoader","clientToken","setClientToken","teardownModule","dataCollector","getClient","client","getClientTokenOrThrow","clientCreator","loadClient","authorization","getDataCollectorOrThrow","emptyDataCollector","deviceData","teardown","loadDataCollector","dataCollectorConfig","kount","KountNotEnabled","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","all","loadGooglePayment","getBraintreeThreeDS","threeDS","threeDSecure","load3DS","version","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","loadLocalPayment","reject","getUsBankAccount","usBankAccount","loadUsBankAccount","getBraintreeVisaCheckout","visaCheckout","loadVisaCheckout","then","paypal","getVisaCheckoutSdk","visaCheckoutSDK","loadVisaCheckoutSdk","getVenmoCheckoutOrThrow","braintreeVenmo","venmoCheckout","loadVenmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","BRAINTREE_SDK_SCRIPTS_INTEGRITY","Client","PaypalCheckout","Paypal","LocalPayment","DataCollector","UsBankAccount","GooglePayment","ThreeDSecure","VisaCheckout","Venmo","HostedFields","Fastlane","ApplePayGatewayType","BraintreeScriptLoader","braintreeHostWindow","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadHostedFields","V","hash","async","attributes","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","moduleName","PaymentMethodCancelledError","DefaultLabels","ButtonStyleOption","ApplePayButtonStrategy","_paymentIntegrationService","_sessionFactory","_braintreeSdk","_applePayScriptLoader","_onAuthorizeCallback","noop","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","loadSdk","onPaymentAuthorize","requiresShipping","_requiresShipping","loadPaymentMethod","_paymentMethod","verifyCheckoutSpamProtection","BRAINTREE","_initializeBraintreeSdk","_applePayButton","_createButton","styleOption","addEventListener","_handleWalletButtonClick","getElementById","applePayButton","_createApplePayButtonElement","setAttribute","buttonStyle","White","WhiteBorder","Black","getButtonStyle","event","preventDefault","merchantCapabilities","supportedNetworks","storeName","request","_getRequestWithEmptyTotal","requiredShippingContactFields","applePaySession","_handleApplePayEvents","begin","_getBaseRequest","requiredBillingContactFields","decimalPlaces","toFixed","subtotal","taxes","tax","onvalidatemerchant","merchantSession","_onValidateMerchant","completeMerchantValidation","onpaymentmethodselected","_createBuyNowCart","_handlePaymentMethodSelected","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","loadCheckout","onpaymentauthorized","_onPaymentAuthorized","cartRequestBody","shouldExecuteSpamCheck","completePaymentMethodSelection","newTotal","newLineItems","_transformContactToAddress","shippingContact","updateShippingAddress","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","option","shippingOptions","description","cost","additionalDescription","identifier","isRecommended","completeShippingContactSelection","ApplePaySession","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","_getUpdatedLineItems","shippingMethod","completeShippingMethodSelection","shippingCostTotal","selectShippingOption","paymentData","validationURL","location","hostname","paymentsUrl","credentials","Accept","billingContact","deviceSessionId","_getBraintreeDeviceData","formattedPayload","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","phoneNumber","updateBillingAddress","email","submitOrder","submitPayment","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","locality","addressLines","administrativeArea","stateOrProvinceCode","braintreePaymentMethod","assertApplePayWindow","isApplePayWindow","ApplePaySessionFactory","ApplePayScriptLoader","sdkVersion","ScriptLoader","CartSource","LiabilityShiftEnum","BigCommercePaymentsIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","NonInstantAlternativePaymentMethods","PayPalOrderStatus","BigCommercePaymentsIntegrationService","formPoster","bigCommercePaymentsRequestSender","bigCommercePaymentsScriptLoader","loadPayPalSdk","providedCurrencyCode","initializesOnCheckoutPage","forceLoad","paypalSdk","getPayPalSDK","getPayPalSdkOrThrow","createBuyNowCartOrThrow","createOrder","requestBody","createOrderCardFields","setupToken","updateOrder","_error","getOrderStatus","tokenizePayment","postForm","payment_type","order_id","source","BuyNow","cart_id","vault_payment_instrument","set_as_default_stored_instrument","device_info","method_id","paypal_account","getShippingOptionOrThrow","selectedShippingOptionId","recommendedShippingOption","shippingOptionToSelect","getAddress","getBillingAddressFromOrderDetails","payer","given_name","surname","email_address","address_line_1","address_line_2","admin_area_2","country_code","postal_code","admin_area_1","phone_number","national_number","getShippingAddressFromOrderDetails","orderDetails","purchase_units","full_name","getValidButtonStyle","style","color","height","shape","validStyles","getValidHeight","isNil","removeElement","elementId","element","display","BigCommercePaymentsRequestSender","put","BigCommercePaymentsScriptLoader","paypalSdkScriptConfig","getPayPalSdkScriptConfigOrThrow","loadPayPalSDK","transformConfig","scriptSrc","URLSearchParams","clientId","intent","buyerCountry","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isPayPalCreditAvailable","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","isGooglePayEnabled","commit","shouldEnableCard","enableCardFunding","enableCreditFunding","shouldEnableAPMs","enableVenmoFunding","enableAPMsFunding","googlePayComponent","cardFieldsComponent","disableFunding","apm","includes","enableFunding","components","transformedConfig","createFormPoster","BigCommercePaymentsButtonStrategy","bigCommercePaymentsIntegrationService","onComplete","onEligibilityFailure","defaultCallbacks","onApprove","orderID","buyNowFlowCallbacks","handleClick","onCancel","hostedCheckoutCallbacks","onShippingAddressChange","onShippingOptionsChange","actions","onHostedCheckoutApprove","buttonRenderOptions","fundingSource","FUNDING","PAYPAL","paypalButton","Buttons","isEligible","render","params","shippingOption","PayPalSdkHelper","getPayPalFastlaneSdk","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","getPayPalGooglePaySdk","paypalGooglePay","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","scriptOptions","scriptAttributes","disableAPMsFunding","styles","messagesStyles","layout","logo","position","ratio","text","size","BigCommercePaymentsPayLaterButtonStrategy","payPalSdkHelper","bigcommerce_payments_paylater","messagingContainerId","messagingContainer","paypalBNPLConfiguration","bannerConfiguration","removeAttribute","renderMessages","bigCommercePaymentsSdk","fundingSources","PAYLATER","CREDIT","hasRenderedSmartButton","paypalMessagesSdk","paypalMessagesOptions","Messages","createScriptLoader","BigCommercePaymentsAlternativeMethodsButtonStrategy","bigcommerce_payments_apms","paypalButtonRender","BigCommercePaymentsVenmoButtonStrategy","bigcommerce_payments_venmo","VENMO","getValidVenmoButtonStyles","validButtonStyle","gold","NotImplementedError","BoltDeveloperMode","StyleButtonSize","BoltButtonStrategy","boltScriptLoader","boltHostWindow","storefrontApiToken","publishableKey","developerConfig","loadBoltClient","BoltConnect","setupProductPageCheckout","addButtonContainer","boltButtonContainer","boltButtonObject","getBoltObjectData","append","innerHTML","domainUrl","getDomainURL","buttonHeight","getButtonHeight","buttonBorderRadius","getButtonBorderRadius","stringifyUrl","publishable_key","variant","border_radius","buttonSize","Small","Large","Medium","buttonShape","Pill","round","Rect","BoltScriptLoader","developerModeParams","BoltCheckout","getScriptOptions","loadBoltEmbedded","Bolt","developerMode","StagingMode","DevelopmentMode","developerDomain","PaymentArgumentInvalidError","invalidFields","PaymentInvalidFormError","details","CancellablePromise","promise","cancellable","cancel","race","PAYPAL_COMPONENTS","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","MessagingPlacements","BraintreeIntegrationService","overlay","dataCollectors","threeDSecureOptions","getBraintreeFastlane","cardId","isTestModeEnabled","localStorage","setItem","braintreeFastlane","getSessionId","braintreeFastlaneCreator","defaultStyles","root","backgroundColorPrimary","getPaypal","braintreePaypal","shouldSaveInstrument","newWindowFlow","supportsPopups","show","focusWindow","tokenize","enableShippingAddress","flow","useraction","catch","getPaypalCheckout","onSuccess","onError","paypalCheckout","paypalCheckoutConfig","braintreePaypalCheckout","paypalSdkLoadConfig","isCreditEnabled","getDataCollector","cacheKey","cached","getBraintreeEnv","isTestMode","Sandbox","Production","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","mapToLegacyShippingAddress","first_name","last_name","mapToLegacyBillingAddress","riskCorrelationId","get3DS","getVenmoCheckout","venmoConfig","verifyCard","tokenizationPayload","tokenizeCard","challenge3DSVerification","creditCardInstrument","ccExpiry","ccNumber","ccName","isCreditCardInstrumentLike","getErrorsRequiredFields","isEmpty","requestData","mapToCreditCard","creditCards","bin","present3DSChallenge","creditCard","cardholderName","number","cvv","ccCvv","expirationDate","month","year","validate","countryCodeAlpha2","countryName","streetAddress","endpoint","addFrame","removeFrame","challengeRequested","additionalInformation","cancelVerifyCard","verification","roundedAmount","iframe","Number","onLookupComplete","_data","next","collectDeviceData","fundingicons","tagline","currentHeight","isNaN","BraintreePaypalButtonStrategy","braintreeIntegrationService","paypalCheckoutOptions","renderPayPalButton","handleError","shouldProcessPayment","onAuthorizeError","env","setupPayment","authorizeData","onPaymentError","buyNowCartId","cartAmount","addresses","shippingAddressOverride","createPayment","shippingAddressEditable","offerCredit","tokenizePayload","device_data","billing_address","shipping_address","buyNowCardRequestBody","buttonContainerId","onErrorCallback","BraintreeMessages","bannedId","PAYMENT","CART","getPaypalMessagesStylesFromBNPLConfig","BraintreePaypalCreditButtonStrategy","braintreeMessages","braintreepaypalcredit","isBannerImplementationDisabled","renderPayPalMessages","BraintreeVisaCheckoutButtonStrategy","braintreeSdk","braintreeVisaCheckout","visaCheckoutInstance","initOptions","createInitOptions","paymentRequest","settings","collectShipping","createSignInButton","init","on","paymentSuccess","toVisaCheckoutAddress","userData","cardInformation","userEmail","card_information","cardType","lastTwo","extendedAddress","insertVisaCheckoutButton","visaCheckoutButton","flexDirection","alignItems","hostWindow","getVenmoButtonStyle","backgroundColor","c","WHITE","backgroundPosition","backgroundSize","backgroundImage","BLUE","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","width","border","BraintreeVenmoButtonStrategy","braintreevenmo","paymentButtonStyles","cartButtonStyles","renderVenmoButton","isUnsupportedBrowserError","handleInitializationVenmoError","removeVenmoContainer","buttonContainer","buttonStyles","venmoButton","buyBowCart","handlePostForm","GooglePayKey","descriptor","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","set","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","integerAmount","decimalAmount","_toFixed","parsedIntegerAmount","toLowerCase","precision","CurrencyService","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","PayPalCommerceIntent","GooglePayCardNetwork","CallbackIntentsType","ErrorReasonType","CallbackTriggerType","isGooglePayCardNetworkKey","GooglePayGateway","_gatewayIdentifier","_isBuyNowFlow","mapToShippingAddressRequestBody","_mapToAddressRequestBody","mapToBillingAddressRequestBody","paymentMethodData","info","mapToExternalCheckoutData","tokenizationData","cardNetwork","cardDetails","getRequiredData","emailRequired","_isShippingAddressRequired","loadShippingCountries","allowedCountryCodes","shippingAddressRequired","shippingAddressParameters","phoneNumberRequired","shippingOptionRequired","getCallbackIntents","OFFER","SHIPPING_ADDRESS","SHIPPING_OPTION","getCallbackTriggers","isGooglePayCouponsExperimentOn","availableTriggers","INITIALIZE","initializationTrigger","addressChangeTriggers","shippingOptionsChangeTriggers","offerChangeTriggers","getNonce","extraPaymentData","getMerchantInfo","googleMerchantName","merchantName","googleMerchantId","platformToken","authJwt","getGooglePayInitializationData","getTransactionInfo","_getCurrencyCodeOrThrow","storeCountry","totalPriceStatus","ESTIMATED","totalPrice","getPaymentGatewayParameters","gatewayMerchantId","getCardParameters","allowedAuthMethods","allowedCardNetworks","supportedCards","billingAddressRequired","billingAddressParameters","_getPaymentMethodFn","_currencyCode","handleShippingAddressChange","mappedShippingAddress","_currencyService","_getGooglePayShippingOption","handleShippingOptionChange","defaultSelectedOptionId","getTotalPrice","handleCoupons","offerData","redemptionCodes","newCouponsState","offers","appliedCoupons","getAppliedCoupons","redemptionCode","appliedCouponError","applyCoupon","coupon","removeCoupon","newOfferInfo","displayName","reason","OFFER_INVALID","getGatewayIdentifier","setGatewayIdentifier","lineItem","isShippingRequired","customItems","address3","_getFirstAndLastName","trim","fullName","nameParts","slice","formattedCost","GooglePayBraintreeGateway","service","_methodId","_service","_braintreeGooglePayment","isThreeDSecureEnabled","isNetworkTokenized","orderAmount","_braintreePresent3DSChallenge","parse","isGooglePayBraintreeTokenObject","assertIsGooglePayBraintreeTokenObject","androidPayCards","createPaymentDataRequest","merchantInfo","transactionInfo","cardRequirements","billingAddressFormat","paymentMethodTokenizationParameters","parameters","PaymentMethodFailedError","GooglePayButtonStrategy","_googlePayPaymentProcessor","googlePayOptions","_getMethodOrThrow","buttonType","_e","_countryCode","_getGooglePayClientOptions","_paymentButton","addPaymentButton","_handleClick","initializeWidget","_interactWithPaymentSheet","err","isGooglePayErrorObject","statusCode","showPaymentSheet","siteLink","pathname","links","_buyNowCart","digitalItems","setExternalCheckoutForm","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","shippingOptionData","couponsError","_getBuyNowTransactionInfo","_getTransactionInfo","newTransactionInfo","FINAL","newShippingOptionParameters","GooglePayPaymentProcessor","_scriptLoader","_gateway","_formPoster","_baseRequest","apiVersion","apiVersionMinor","googlePayPaymentOptions","_paymentsClient","getGooglePaymentsClient","_buildButtonPayloads","_buildWidgetPayloads","_determineReadinessToPay","_prefetchGooglePaymentData","paymentButton","_getPaymentsClient","allowedPaymentMethods","_getBaseCardPaymentMethod","paymentDataRequest","_getPaymentDataRequest","loadPaymentData","setExternalCheckoutXhr","_setExternalCheckout","processAdditionalAction","signOut","useFormPoster","prefetchPaymentData","isReadyToPay","_getIsReadyToPayRequest","_baseCardPaymentMethod","baseCardPaymentMethod","_cardPaymentMethod","tokenizationSpecification","_paymentDataRequest","callbackIntents","offerInfo","_isReadyToPayRequest","_getOrThrow","GooglePayScriptLoader","_window","google","api","PaymentsClient","environment","createGooglePayScriptLoader","PayPalCommerceSdk","assertsIsGooglePayPayPalCommercePaymentMethod","isGooglePayPaypalCommercePaymentMethod","GooglePayPaypalCommerceGateway","payPalCommerceSdk","googlePaySdk","googlepayConfig","Googlepay","GooglePayBigCommercePaymentsGateway","GooglePayAuthorizeNetGateway","isGooglePayAuthorizeNetInitializationData","assertsIsGooglePayAuthorizeNetInitializationData","paymentGatewayId","assertIsGooglePayCheckoutComInitializationData","isGooglePayCheckoutComInitializationData","GooglePayCheckoutComGateway","_resolve","threeDSBody","three_ds_result","acs_url","isGooglePayThreeDSecureResult","isGooglePayTokenObject","assertIsGooglePayTokenObject","_tokenize","checkoutcomkey","token_data","Authorization","GooglePayCybersourceGateway","GooglePayOrbitalGateway","assertsIsGooglePayStripeInitializationData","isGooglePayStripeInitializationData","GooglePayStripeGateway","isGooglePayStripeTokenObject","assertIsGooglePayStripeTokenObject","stripeVersion","stripePublishableKey","stripeConnectedAccount","isStripeGooglePay3dsExperimentIsOn","stripeUPEClient","loadStripeJs","clientSecret","catchedConfirmError","confirmCardPayment","retrievePaymentIntent","__","_throwDisplayableStripeError","_isCancellationError","paymentIntent","getStripeClient","stripeError","payment_intent","last_payment_error","StripeUPEScriptLoader","stripeWindow","stripeAccount","stripeClient","bcStripeClient","betas","Stripe","GooglePayWorldpayAccessGateway","getBrowserInfo","navigator","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","screen_width","time_zone_offset","getTimezoneOffset","GooglePayTdOnlineMartGateway","browser_info","errorBody","isObject","isTdOnlineMartAdditionalAction","threeDSResult","formUrl","payer_auth_request","threeDSSessionData","merchant_data","creq","PayPalCommerceIntegrationService","paypalCommerceRequestSender","paypalCommerceScriptLoader","PayPalCommerceRequestSender","PayPalCommerceScriptLoader","PayPalCommerceButtonStrategy","paypalCommerceIntegrationService","PayPalCommerceCreditButtonStrategy","paypalCommerceSdk","paypalcommercecredit","PayPalCommerceVenmoButtonStrategy","paypalcommercevenmo","PayPalCommerceAlternativeMethodsButtonStrategy","paypalcommercealternativemethods","PaypalButtonStrategy","paypalExpressScriptLoader","paypalSDK","loadPaypalSDK","allowCredit","fundingCreditOption","allowedSources","disallowedSources","Button","funding","allowed","disallowed","getStyle","onAuthorize","RECT","RESPONSIVE","CheckoutButtonNotInitialized","paymentID","payerID","getPaymentData","payerId","payerInfo","payer_info","PaypalScriptLoader","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","lastArg","useCache","param","instanceMethods","fn","Observable","shareReplay","store","isPaymentMethod","PaymentMethodActionCreator","loadPaymentMethodsById","methodIds","observer","createAction","complete","loadPaymentMethods","sessionHash","methods","createErrorAction","PaymentMethodRequestSender","timeout","JsonV1","throwErrorAction","of","throwError","UnableToContinueAsGuestError","BillingAddressActionCreator","_subscriptionActionCreator","continueAsGuest","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","hasBillingAddress","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","DEFAULT_PARAMS","include","BillingAddressRequestSender","CartRequestSender","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadConfig","loadFormFields","_transformCustomerAddresses","updateCheckout","loadCurrentCheckout","shouldSaveAddress","joinIncludes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","additions","difference","mergeIncludes","CheckoutNotAvailableError","CheckoutRequestSender","CartComparator","cartA","cartB","_normalize","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","recipient","giftWrapping","CartChangedError","updated","CheckoutValidator","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","CheckoutIncludes","ConfigActionCreator","_configRequestSender","ConfigRequestSender","CouponActionCreator","_couponRequestSender","CouponRequestSender","couponCode","AvailableShippingOptions","delete","isSpamProtectionExecuteSucceededAction","succeededAction","CustomerActionCreator","_customerRequestSender","_checkoutActionCreator","_spamProtectionActionCreator","createCustomer","isStorefrontSpamProtectionEnabled","createAccount","switchMap","execute","customerAddress","signInCustomer","SignInCustomerRequested","persistentCartRetrievalInformation","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","FormFieldsActionCreator","_formFieldsRequestSender","loadFields","FormFieldsRequestSender","UnexpectedDetachmentError","DetachmentObserver","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","node","contains","observe","childList","subtree","output","disconnect","MutationObserverFactory","callback","MutationObserver","parseUrl","anchor","href","port","origin","protocol","search","isIframeEvent","IframeEventPoster","targetOrigin","_targetWindow","_context","_targetOrigin","targetWindow","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","setContext","IframeEventListener","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","messageEvent","SpamProtectionChallengeNotCompletedError","CardingProtectionChallengeNotCompletedError","CardingProtectionFailedError","HostedFieldEventType","HostedInputEventType","PaymentHumanVerificationHandler","_googleRecaptcha","handle","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","human_verification_token","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","parentNode","removeChild","SpamProtectionFailedError","SpamProtectionNotLoadedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","event$","Subject","_widgetId","getResponse","reset","_event$","_recaptcha","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","visibility","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","callbackName","grecaptcha","createSpamProtection","InvalidHostedFormConfigError","InvalidHostedFormError","InvalidHostedFormValueError","fieldErrors","HostedField","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_checkoutId","_cardInstrument","_iframe","src","overflow","getType","attach","contentWindow","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","AttachSucceeded","AttachFailed","detach","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","submitStoredCardForm","StoredCardRequested","StoredCardSucceeded","StoredCardFailed","validateForm","ValidateRequested","Validated","isValid","querySelectorAll","link","fontFamily","family","HostedForm","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","onEnter","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","BinChanged","_bin","getBin","getCardType","_getFirstField","otherFields","without","otherField","submit","additionalActionData","additionalAction","submitStoredCard","isVaultedInstrument","HostedFormOrderDataTransformer","_store","instrumentMeta","orderMeta","paymentMethodMeta","authToken","vaultAccessToken","HostedFormFactory","fieldOptions","_getCardInstrument","SpamProtectionNotCompletedError","OrderActionCreator","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","checkoutVariant","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","CartConsistencyError","OrderTaxProviderUnavailableError","MissingShippingMethodError","InvalidShippingAddressError","OrderRequestSender","PaymentActionCreator","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","initializeOffsitePayment","shouldSetAsDefaultInstrument","bigpay_token","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","SubmitPaymentRequested","SubmitPaymentFailed","PaymentRequestSender","_client","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","AmountTransformer","toInteger","couponTypes","mapToInternalCoupon","discount","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToDiscountNotifications","promotions","notifications","promotion","banners","banner","placeholders","messageHtml","mapToInternalLineItems","itemMap","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","sum","discountNotifications","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","taxSubtotal","taxTotal","handling","handlingCostTotal","CheckoutButtonMethodType","mapToInternalCustomer","customerId","customerGroupName","customerGroup","CardExpiryFormatter","trimmedMonth","trimmedYear","toObject","CardNumberFormatter","maxLength","creditCardType","lengths","unformattedValue","unformat","gaps","gapIndex","mapToInternalOrder","customerCanBeCreated","mapToInternalOrderPayment","mapToGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","image","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","selected","transitTime","PaymentRequestTransformer","_cardExpiryFormatter","_cardNumberFormatter","_mapShippingAddress","contextConfig","paymentMeta","internalCustomer","formattedInstrument","isFormattedVaultedInstrument","_transformPaymentMethod","quoteMeta","geoCountryCode","transformWithHostedFormData","_transformHostedInputValues","BRAINTREE_VENMO","BRAINTREE_PAYPAL","cardCodeVerification","cardNumberVerification","hostedFormNonce","cardCode","cardExpiry","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","PaymentProviderCustomerActionCreator","updatePaymentProviderCustomer","providerCustomerData","PaymentStrategyWidgetActionCreator","widgetInteraction","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","initializeBilling","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","initializeShipping","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","initializePayment","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","loadSettings","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","forgetCheckout","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","RemoteCheckoutRequestSender","methodName","generateToken","trackAuthorizationEvent","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","consignmentInMemory","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","ConsignmentRequestSender","ShippingCountryActionCreator","_shippingCountryRequestSender","loadCountries","checkoutData","channelId","ShippingCountryRequestSender","_config","SpamProtectionActionCreator","spamProtectionElementId","spamProtectionElement","googleRecaptchaSitekey","VerifyCheckoutRequested","VerifyCheckoutFailed","SpamProtectionRequestSender","StoreCreditActionCreator","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","StoreCreditRequestSender","UpdateSubscriptionsError","SubscriptionsActionCreator","_subscriptionsRequestSender","SubscriptionsRequestSender","cloneDeep","memoize","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","ProjectionActionType","DefaultPaymentIntegrationService","_storeProjectionFactory","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_customerActionCreator","_cartRequestSender","_storeCreditActionCreator","_couponActionCreator","_paymentProviderCustomerActionCreator","_shippingCountryActionCreator","_remoteCheckoutActionCreator","_paymentStrategyWidgetActionCreator","_storeProjection","createHostedForm","subscribe","subscriber","filters","initializeOffsitePaymentConfig","dispatch","remoteCheckoutSignOut","validateCheckout","handlePaymentHumanVerification","queueId","PaymentIntegrationStoreProjectionFactory","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","getUniqId","idPrefix","uniqueId","isTerminalCacheKeyMap","CacheKeyResolver","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","getKey","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","selectorDecorator","resolver","memoizedMethod","cachedValue","isPrivate","selectorMethodDecorator","CheckoutButtonErrorSelector","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonInitializer","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","containers","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","_registryV2","paymentMethodRequestParams","paymentMethodRequestOptions","_getStrategy","strategy","Registry","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","getFactory","resolvedToken","_hasFactory","_hasInstance","MasterpassScriptLoader","useMasterpassSrc","sourceUrl","masterpass","supportedLocales","es","en","pt","zu","ar","zh","ms","sv","hr","pl","nl","it","fr","formatLocale","localeLanguage","formattedLocale","countryLocales","MasterpassButtonStrategy","_masterpassScriptLoader","_locale","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","_createSignInButton","button","subdomain","_createMasterpassPayload","allowedCardTypes","_paypalScriptLoader","_host","paypalOptions","_setupPayment","_tokenizePayment","res","_onError","isResolvableModule","getEnvironment","ConsoleLogger","_console","log","messages","_logToConsole","warn","debug","NoopLogger","logger","isEnabled","console","createLogger","ResolveIdRegistry","_resolveToken","resolveId","_encodeToken","_decodeToken","atob","registeredTokens","results","registeredToken","resolverId","matches","entries","matchedResults","matched","createCheckoutButtonInitializer","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","storeProjectionFactory","checkoutActionCreator","checkoutValidator","hostedFormFactory","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","paymentClient","setHost","paymentSettings","bigpayBaseUrl","createPaymentClient","paymentHumanVerificationHandler","customerActionCreator","storeCreditActionCreator","applyCouponActionCreator","spamProtection","spamProtectionRequestSender","spamProtectionActionCreator","cartRequestSender","paymentProviderCustomerActionCreator","shippingCountryActionCreator","remoteCheckoutActionCreator","paymentStrategyWidgetActionCreator","createPaymentIntegrationService","checkoutRequestSender","MASTERPASS","PAYPALEXPRESS","createCheckoutButtonRegistry"],"sourceRoot":""}