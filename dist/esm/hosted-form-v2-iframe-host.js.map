{"version":3,"file":"hosted-form-v2-iframe-host.js","mappings":"kMAAe,MAAMA,EAIjB,WAAAC,CAAYC,GACR,MAAMC,EAAc,IAAIC,QAAW,CAACC,EAAGC,KACnCC,KAAKC,OAASF,IAGlBC,KAAKL,QAAUE,QAAQK,KAAK,CAACP,EAASC,GAC1C,ECFW,MAAeO,UAAsBC,MAIhD,WAAAV,CAAYW,GCZD,IAAqCC,EDa5CC,MAAMF,GAAW,qCAJrB,KAAAG,KAAO,gBACP,KAAAC,KAAO,WCVyCH,aDeZA,UCdhCI,OAAOC,eACPD,OAAOC,eDaQX,KCbeM,GDafN,KCXRY,UAAYN,EDaoB,mBAA5BF,MAAMS,kBACbT,MAAMS,kBAAkBb,iBAExBA,KAAKc,MAAQ,IAAIV,MAAMJ,KAAKK,SAASS,KAE7C,EEpBW,MAAMC,UAAkCZ,EACnD,WAAAT,CAAYW,GACRE,MACIF,GACI,0FAGRL,KAAKQ,KAAO,4BACZR,KAAKS,KAAO,uBAChB,ECNW,MAAMO,EACjB,WAAAtB,CAAoBuB,GAAA,KAAAA,kBAAAA,CAA6C,CAE3D,cAAAC,CAAkBC,EAAiBxB,G,qCACrC,MAAMC,EAAc,IAAIH,EAAmBE,GAErCyB,EAAWpB,KAAKiB,kBAAkBI,OAAQC,IAC5CA,EAAcC,QAASC,IAKW,IAJPC,MAAMC,KAAKF,EAASG,cAAcC,OAAQC,GAC7DV,EAAQW,KAAMC,GAAWF,IAASE,GAAUF,EAAKG,SAASD,KAG3CE,QAInBrC,EAAYK,OAAO,IAAIc,OAI/BK,EAASc,QAAQC,SAASC,KAAM,CAAEC,WAAW,EAAMC,SAAS,IAE5D,IACI,MAAMC,QAAe3C,EAAYD,QAIjC,OAFAyB,EAASoB,aAEFD,C,CACT,MAAOE,GAGL,MAFArB,EAASoB,aAEHC,C,CAEd,E,4RC7BG,MAAMC,EACT,WAAAhD,CAAoBiD,EAAkCC,QAAlC,KAAAD,QAAAA,CAAqE,CAEzF,MAAAtB,CAAOwB,GACH,OAAO,IAAI7C,KAAK2C,QAAQG,iBAAiBD,EAC7C,ECPW,MAAME,UAA6B5C,EAC9C,WAAAT,CAAYW,GACRE,MAAMF,GAAW,yCAEjBL,KAAKQ,KAAO,uBACZR,KAAKS,KAAO,kBAChB,ECTW,SAASuC,EAASC,GAC7B,IAAK,kBAAkBC,KAAKD,GACxB,MAAM,IAAIF,EAAqB,sCAInC,MAAMI,EAAShB,SAASiB,cAAc,KAEtCD,EAAOE,KAAOJ,EAId,MAAMK,EACFH,EAAOG,OAA8D,IAAtDL,EAAIM,QAAQ,GAAGJ,EAAOK,YAAYL,EAAOG,QAAiBH,EAAOG,KAAO,GAE3F,MAAO,CACHG,KAAMN,EAAOM,KACbD,SAAUL,EAAOK,SACjBH,KAAMF,EAAOE,KACbK,OAAQ,GAAGP,EAAOQ,aAAaR,EAAOK,WAAWF,EAAO,IAAIA,IAAS,KACrEM,SAAUT,EAAOS,SACjBN,OACAK,SAAUR,EAAOQ,SACjBE,OAAQV,EAAOU,OAEvB,CC3Be,SAASC,EACpBC,EACAtD,GAEA,OAAOsD,EAAOtD,OAASA,CAC3B,CCSe,MAAMuD,EAGjB,WAAAtE,CAAYuE,EAA8BC,EAAgCC,GAAhC,KAAAD,cAAAA,EAAgC,KAAAC,SAAAA,EACtEnE,KAAKoE,cAAiC,MAAjBH,EAAuB,IAAMjB,EAASiB,GAAcP,MAC7E,CAUA,IAAAW,CAIIC,EACAC,GAEA,MAAMC,EAAexE,KAAKkE,cAE1B,GAAItB,SAAW4B,EACX,OAGJ,IAAKA,EACD,MAAM,IAAIpE,MAAM,4DAGpB,MAAMqE,EACFF,GACAG,EAAwB9B,OAAQ,WAC3B+B,KACG/C,EACK0C,GACGA,EAAMZ,SAAW1D,KAAKoE,eACtBN,EAAcQ,EAAMM,KAAMN,EAAMM,KAAKnE,QAEhC,IADL,CAAC8D,EAAQM,YAAaN,EAAQO,WAAWvB,QAAQe,EAAMM,KAAKnE,OAGpE,EAAK6D,IACD,GAAIC,EAAQO,YAAcR,EAAMM,KAAKnE,KACjC,MAAM6D,EAAMM,KAGhB,OAAON,EAAMM,OAEjBG,EAAK,IAERC,YAIT,OAFAR,EAAaS,YAAY,OAAD,wBAAMX,GAAK,CAAEY,QAASlF,KAAKmE,WAAYnE,KAAKoE,eAE7DK,CACX,CAEA,SAAAU,CAAUvC,GACN5C,KAAKkE,cAAgBtB,CACzB,CAEA,UAAAwC,CAAWF,GACPlF,KAAKmE,SAAWe,CACpB,ECjCG,SAASG,EACZvF,EACAwF,EACAC,GAEA,GAAgC,mBAArBA,EAAWC,MAClB,OAAOD,EAGX,IAAIE,EAAYF,EAAWC,MAE3B,MAAO,CACH,GAAAE,GACI,MAAMC,EAAcF,EAAOG,KAAK5F,MAOhC,OALAU,OAAOmF,eAAe7F,KAAMsF,EAAK,OAAF,wBACxBC,GAAU,CACbC,MAAOG,KAGJA,CACX,EACA,GAAAG,CAAIN,GACAC,EAASD,CACb,EAER,CCpEe,MAAMO,EAQjB,WAAArG,CAAYsG,GCXD,IAAmB/C,EDY1BjD,KAAKiG,eAAiB,CAClBjD,EAASgD,GAActC,QCbDT,EDcZD,EAASgD,GCbpBhD,EAC6B,IAAhCC,EAAIO,SAASD,QAAQ,OACfN,EAAII,KACJJ,EAAII,KAAK6C,QAAQjD,EAAIO,SAAU,OAAOP,EAAIO,cDUVE,QAEtC1D,KAAKmG,cAAe,EACpBnG,KAAKoG,WAAa,CAAC,CACvB,CAEA,MAAAC,GACQrG,KAAKmG,eAITnG,KAAKmG,cAAe,EAEpBvD,OAAO0D,iBAAiB,UAAWtG,KAAKuG,gBAC5C,CAEA,UAAAC,GACSxG,KAAKmG,eAIVnG,KAAKmG,cAAe,EAEpBvD,OAAO6D,oBAAoB,UAAWzG,KAAKuG,gBAC/C,CAEA,WAAAG,CACIjG,EACAkG,GAEA,IAAIC,EAAY5G,KAAKoG,WAAW3F,GAE3BmG,IACD5G,KAAKoG,WAAW3F,GAAQmG,EAAY,KAGH,IAAjCA,EAAUrD,QAAQoD,IAClBC,EAAUC,KAAKF,EAEvB,CAEA,cAAAG,CACIrG,EACAkG,GAEA,MAAMC,EAAY5G,KAAKoG,WAAW3F,GAElC,IAAKmG,EACD,OAGJ,MAAMG,EAAQH,EAAUrD,QAAQoD,GAE5BI,GAAS,GACTH,EAAUI,OAAOD,EAAO,EAEhC,CAEA,OAAAE,CAAuC3C,EAAyBY,GAC5D,MAAM0B,EAAY5G,KAAKoG,WAAW9B,EAAM7D,MAEnCmG,GAILA,EAAUrF,QAASoF,GAAczB,EAAUyB,EAASrC,EAAOY,GAAWyB,EAASrC,GACnF,CAGQ,cAAAiC,CAAeW,GACnB,IAC0D,IAAtDlH,KAAKiG,eAAe1C,QAAQ2D,EAAaxD,UACxCI,EAAcoD,EAAatC,KAAoCsC,EAAatC,KAAKnE,MAElF,OAGJ,MAAM,EAAwByG,EAAatC,MAArC,QAAEM,GAAO,EAAKZ,E,yUAAK,GAAnB,aAENtE,KAAKiH,QAAQ3C,EAAOY,EACxB,G,0TAXA,ED3EJ,SAAuBnD,EAAauD,EAAWC,GAC3C,OAAKD,GAAQC,EAINF,EAAoBtD,EAAQuD,EAAKC,GASrC,SAA2DxD,GAC9D,MAAMoF,EAAkB,cAAcpF,IAgBtC,OAdArB,OAAO0G,oBAAoBrF,EAAOzB,WAAWiB,QAAS+D,IAClD,MAAMC,EAAa7E,OAAO2G,yBAAyBtF,EAAOzB,UAAWgF,GAEhEC,GAAsB,gBAARD,GAInB5E,OAAOmF,eACHsB,EAAgB7G,UAChBgF,EACAD,EAAoBtD,EAAOzB,UAAWgF,EAAKC,MAI5C4B,CACX,CA9BeG,CAAmBvF,EAIlC,G,mCGbA,MAAMwF,EAAmB,CACrBnF,KAAM,CAAC,EACPoF,QAAS,CAAC,EACVC,OAAQ,GAOG,MAAMC,UAAkCvH,EAMnD,WAAAT,CACIiI,GACA,QACItH,EAAO,OACPuH,GAIA,CAAC,GAEL,MAAM,KAAExF,EAAI,QAAEoF,EAAO,OAAEC,GAAWE,GAAYJ,EAE9ChH,MAAMF,GAAW,qCAEjBL,KAAKQ,KAAO,eACZR,KAAKS,KAAO,UACZT,KAAKoC,KAAOA,EACZpC,KAAKwH,QAAUA,EACfxH,KAAKyH,OAASA,EACdzH,KAAK4H,OAASA,GAAU,EAC5B,ECrBJ,SAASC,EAAWD,GAChB,GAAKnG,MAAMqG,QAAQF,GAInB,OAAOA,EACFG,OAAO,CAACtD,EAAkBhC,IACnBA,GAASA,EAAMpC,QACR,IAAIoE,EAAQhC,EAAMpC,SAGtBoE,EACR,IACFuD,KAAK,IACd,CC/Be,MAAMC,UAAqC9H,EACtD,WAAAT,CAAYW,GACRE,MACIF,GACI,wFAGRL,KAAKQ,KAAO,+BACZR,KAAKS,KAAO,4BAChB,ECTW,MAAMyH,UAA+B/H,EAChD,WAAAT,CAAYW,GACRE,MAAMF,GAAW,2EAEjBL,KAAKQ,KAAO,yBACZR,KAAKS,KAAO,qBAChB,ECHW,MAAM0H,UAAoChI,EACrD,WAAAT,CAAmBkI,GACfrH,MACI,CACI,wDACG6H,EAAQC,EAAOT,GAAUU,GACxBC,EAAID,EAAa,EAAGjI,aAAcA,KAExC2H,KAAK,OAPI,KAAAJ,OAAAA,EAUf5H,KAAKQ,KAAO,8BACZR,KAAKS,KAAO,2BAChB,ECTJ,IAAY+H,ECCAC,GDDZ,SAAYD,GACR,kDACA,qDACA,0EACA,sDACA,0DACH,CAND,CAAYA,IAAAA,EAAoB,KCChC,SAAYC,GACR,kDACA,4CACA,wCACA,iCACA,iCACA,mDACA,iCACA,iCACA,kDACA,4CACA,0EACA,oEACA,qCACA,2DACA,oDACH,CAhBD,CAAYA,IAAAA,EAAoB,K,sSC0BjB,MAAMC,EAGjB,WAAAhJ,CACYiJ,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GARA,KAAAR,MAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,QAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,eAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,SAAAA,EAERnJ,KAAKoJ,QAAUjH,SAASiB,cAAc,UAEtCpD,KAAKoJ,QAAQC,IAAMrJ,KAAKsJ,YAAYtJ,KAAKmJ,UACzCnJ,KAAKoJ,QAAQG,MAAMC,OAAS,OAC5BxJ,KAAKoJ,QAAQG,MAAME,OAAS,OAC5BzJ,KAAKoJ,QAAQG,MAAMG,SAAW,SAC9B1J,KAAKoJ,QAAQG,MAAMI,MAAQ,MAC/B,CAEQ,WAAAL,CAAYM,GAChB,YAA0B,IAAZA,EACR,mBAAmB5J,KAAKmJ,6CACxB,2DACV,CAEA,OAAAU,GACI,OAAO7J,KAAK2I,KAChB,CAEM,MAAAmB,G,wCACF,MAAMC,EAAY5H,SAAS6H,eAAehK,KAAK4I,cAE/C,IAAKmB,EACD,MAAM,IAAI9B,EACN,qEAIR8B,EAAUE,YAAYjK,KAAKoJ,SAC3BpJ,KAAKiJ,eAAe5C,SAEpB,MAAM1G,EAAU+E,EAAU1E,KAAKoJ,QAAS,QACnCzE,KACGuF,EAAU,EAASnI,YAAa,iCAC5B,MAAMoI,EAAgBpI,GAAWA,EAA6BoI,cAE9D,IAAKA,EACD,MAAM,IAAI/J,MAAM,wDAGpBJ,KAAKgJ,aAAa7D,UAAUgF,SAEtBnK,KAAKgJ,aAAa3E,KACpB,CACI5D,KAAM+H,EAAqB4B,gBAC3BC,QAAS,CACLC,mBAAoBtK,KAAK8I,oBACzByB,SAAUvK,KAAKwK,eACfC,YAAazK,KAAK6I,aAClB6B,OAAQ1K,KAAK+I,QACbrF,OAAQvB,SAASwI,SAASjH,OAC1BjD,KAAMT,KAAK2I,QAGnB,CACI9D,YAAa4D,EAAqBmC,gBAClC9F,UAAW2D,EAAqBoC,cAG5C,IACA9F,EAAK,IAERC,kBAEChF,KAAKkJ,oBAAoBhI,eAAe,CAAClB,KAAKoJ,SAAUzJ,EAClE,E,CAEA,MAAAmL,GACS9K,KAAKoJ,QAAQ2B,gBAIlB/K,KAAKoJ,QAAQ2B,cAAcC,YAAYhL,KAAKoJ,SAC5CpJ,KAAKiJ,eAAezC,aACxB,CAEM,UAAAyE,CACFC,EACAtG,G,wCAEA,IACI,MAAMjF,EAAUK,KAAKgJ,aAAa3E,KAC9B,CACI5D,KAAM+H,EAAqB2C,gBAC3Bd,QAAS,CAAEa,SAAQtG,SAEvB,CACIC,YAAa4D,EAAqB2C,gBAClCtG,UAAW2D,EAAqB4C,eAIxC,aAAarL,KAAKkJ,oBAAoBhI,eAAe,CAAClB,KAAKoJ,SAAUzJ,E,CACvE,MAAO2E,GACL,GAAItE,KAAKsL,oBAAoBhH,GAAQ,CACjC,GAAiC,sBAA7BA,EAAM+F,QAAQ5H,MAAM8I,KACpB,MAAM,IAAIrD,EAAuB5D,EAAM+F,QAAQ5H,MAAMpC,SAGzD,GAAIiE,EAAM+F,QAAQ1C,SACd,MNhJL,SACXA,GAGA,MAAM,KAAEvF,GAASuF,GACX,OAAEC,EAAS,IAAOxF,EAExB,OAAO,IAAIsF,EAAaC,EAAU,CAC9BtH,QAASwH,EAAWD,SMwIF4D,ENvIlB5D,UAER,CMqI0B4D,CAA4BlH,EAAM+F,QAAQ1C,UAGpD,MAAM,IAAIvH,MAAMkE,EAAM+F,QAAQ5H,MAAMpC,Q,CAGxC,MAAMiE,C,CAEd,E,CAEM,qBAAAmH,CACF7G,G,wCAEA,IACI,MAAMjF,EAAUK,KAAKgJ,aAAa3E,KAC9B,CACI5D,KAAM+H,EAAqBkD,2BAC3BrB,QAAS,CAAEzF,SAEf,CACIC,YAAa4D,EAAqBkD,2BAClC7G,UAAW2D,EAAqBmD,0BAIxC,aAAa5L,KAAKkJ,oBAAoBhI,eAAe,CAAClB,KAAKoJ,SAAUzJ,E,CACvE,MAAO2E,GACL,GAAItE,KAAK6L,+BAA+BvH,GAAQ,CAC5C,GAAiC,sBAA7BA,EAAM+F,QAAQ5H,MAAM8I,KACpB,MAAM,IAAIrD,EAAuB5D,EAAM+F,QAAQ5H,MAAMpC,SAGzD,GAAIiE,EAAM+F,QAAQ5H,MAAMpC,QACpB,MAAM,IAAID,MAAMkE,EAAM+F,QAAQ5H,MAAMpC,SAGxC,MAAM,IAAID,MAAMkE,EAAM+F,QAAQ5H,MAAM8I,K,CAGxC,MAAMjH,C,CAEd,E,CAEM,oBAAAwH,CACFZ,EACAtG,G,wCAEA,MAAMjF,EAAUK,KAAKgJ,aAAa3E,KAC9B,CACI5D,KAAM+H,EAAqBuD,oBAC3B1B,QAAS,CAAEa,SAAQtG,SAEvB,CACIC,YAAa4D,EAAqBuD,oBAClClH,UAAW2D,EAAqBwD,mBAIxC,OAAOjM,KAAKkJ,oBAAoBhI,eAAe,CAAClB,KAAKoJ,SAAUzJ,EACnE,E,CAEM,YAAAuM,G,wCACF,MAAMvM,EAAUK,KAAKgJ,aAAa3E,KAC9B,CACI5D,KAAM+H,EAAqB2D,mBAE/B,CACItH,YAAa4D,EAAqB2D,aAIpC,QAAE/B,SAAkBrK,KAAKkJ,oBAAoBhI,eAAe,CAAClB,KAAKoJ,SAAUzJ,GAElF,IAAK0K,EAAQgC,QACT,MAAM,IAAIlE,EAA4BkC,EAAQzC,OAEtD,E,CAEQ,YAAA4C,GACJ,MAAMhH,EAAW,uBACX8I,EAAQnK,SAASoK,iBAAiB,eAAe/I,yBAEvD,OAAO/B,MAAMnB,UAAUkM,MAClBC,KAAKH,GACL1K,OAAQ8K,GAAS1J,EAAS0J,EAAKrJ,MAAMG,WAAaA,GAClD5B,OAAQ8K,GACLrE,EAAOrI,KAAK+I,SACPR,IAAKgB,GAAUA,GAASA,EAAMoD,YAC9B/K,OAAQgL,GAA+C,iBAAXA,GAC5C9K,KAAM8K,GACHA,EACKC,MAAM,OACN/K,KAAMtB,IAAwD,IAA/CkM,EAAKrJ,KAAKE,QAAQ/C,EAAK0F,QAAQ,IAAK,SAGnEqC,IAAKmE,GAASA,EAAKrJ,KAC5B,CAEQ,8BAAAwI,CACJvH,GAEA,OAAMA,aAAiB5D,QAAqB,OAAV4D,GAAoB,SAAUA,GAIzDA,EAAM7D,OAASgI,EAAqBmD,uBAC/C,CAEQ,mBAAAN,CAAoBhH,GACxB,OAAOA,EAAM7D,OAASgI,EAAqB4C,YAC/C,E,IClQQyB,E,kSCsCG,MAAMC,EAIjB,WAAArN,CACYsN,EACA/D,EACAgE,GAFA,KAAAD,QAAAA,EACA,KAAA/D,eAAAA,EACA,KAAAgE,gBAAAA,EA0HJ,KAAAC,aAAgE,EAAS7C,aAAc,iCAC3F,UACUrK,KAAKmN,U,CACb,MAAO1K,GAGL,GAAIA,aAAiBrC,OAAwB,gCAAfqC,EAAMjC,KAChC,MAAMiC,C,CAId,MAAM,QAAE2K,EAAUC,GAASrN,KAAKiN,gBAEhCG,EAAQ/C,EACZ,GAtII,MAAM,OACFiD,EAASD,EAAI,iBACbE,EAAmBF,EAAI,QACvBG,EAAUH,EAAI,WACdI,EAAaJ,GACbrN,KAAKiN,gBAETjN,KAAKiJ,eAAevC,YAAY+B,EAAqBiF,QAAS,EAAGrD,aAC7DiD,EAAOjD,IAEXrK,KAAKiJ,eAAevC,YAAY+B,EAAqBkF,gBAAiB,EAAGtD,aACrEkD,EAAiBlD,IAErBrK,KAAKiJ,eAAevC,YAAY+B,EAAqBmF,QAAS,EAAGvD,aAC7DmD,EAAQnD,IAEZrK,KAAKiJ,eAAevC,YAAY+B,EAAqB2D,UAAW,EAAG/B,aAC/DoD,EAAWpD,IAEfrK,KAAKiJ,eAAevC,YAAY+B,EAAqBoF,QAAS7N,KAAKkN,cAEnElN,KAAKiJ,eAAevC,YAChB+B,EAAqBkF,gBACrB,EAAGtD,aAAerK,KAAK8N,UAAYzD,EAAQ0D,UAE/C/N,KAAKiJ,eAAevC,YAChB+B,EAAqBuF,WACrB,EAAG3D,aAAerK,KAAKiO,KAAO5D,EAAQ6D,IAE9C,CAEA,MAAAC,GACI,OAAOnO,KAAKiO,IAChB,CAEA,WAAAG,GACI,OAAOpO,KAAK8N,SAChB,CAEM,MAAAhE,G,wCACF9J,KAAKiJ,eAAe5C,SAEpB,MAAMgI,EAAQrO,KAAKsO,iBACbC,EAAcC,EAAQxO,KAAKgN,QAASqB,SAEpCA,EAAMvE,eACNjK,QAAQ4O,IAAIF,EAAYhG,IAAKmG,GAAeA,EAAW5E,UACjE,E,CAEA,MAAAgB,GACI9K,KAAKiJ,eAAezC,aAEpBxG,KAAKgN,QAAQzL,QAAS8M,IAClBA,EAAMvD,UAEd,CAEM,wBAAA6D,CAAyBtE,G,wCAG3B,OAAOrK,KAAKsO,iBAAiB7C,sBAAsBpB,EAAQzF,KAC/D,E,CAEM,gBAAAgK,CAAiBvE,G,wCAInB,OAAOrK,KAAKsO,iBAAiBxC,qBAAqBzB,EAAQa,OAAQb,EAAQzF,KAC9E,E,CAEM,MAAAiK,CACFxE,EACAyE,EACAC,EACAC,G,wCAEA,IAMI,aALuBhP,KAAKsO,iBAAiBrD,WACzCjL,KAAKgN,QAAQzE,IAAK8F,GAAUA,EAAMxE,WAClCkF,EAAmBE,UAAU5E,EAAS2E,G,CAI5C,MAAOvM,GACL,IAAIyM,EAEJ,KAAIzM,aAAiBrC,OAA0B,iBAAVqC,GAMjC,MAAM,IAAIrC,MAAM,yBAQpB,OAbI8O,QAAyBJ,EAA0BK,+BAC/C1M,SAOezC,KAAKsO,iBAAiBrD,WACzCjL,KAAKgN,QAAQzE,IAAK8F,GAAUA,EAAMxE,WAClCkF,EAAmBE,UAAU5E,EAAS6E,G,CAKlD,E,CAEM,QAAA/B,G,wCACF,OAAOnN,KAAKsO,iBAAiBpC,cACjC,E,CAEQ,cAAAoC,GACJ,MAAMD,EAAQrO,KAAKgN,QAAQ,GAE3B,IAAKqB,EACD,MAAM,IAAIpG,EACN,oEAIR,OAAOoG,CACX,EC9JW,MAAMe,EACjB,MAAA/N,CAAOgO,EAAc9K,GACjB,MACM2G,EADaxK,OAAO4O,KAAK/K,EAAQ2G,QACbnD,OAAsB,CAACtD,EAAQhE,KACrD,MACM8O,EADShL,EAAQ2G,OACKzK,GAE5B,OAAK8O,EAIE,IACA9K,EACH,IAAIiE,EACAjI,EACA8O,EAAaC,YACbD,EAAa9E,aAAe,GAC5B8E,EAAajF,oBAAsB,GACnC/F,EAAQmG,QAAU,CAAC,EACnB,IAAI1G,EAAkBqL,GACtB,IAAItJ,EAAoBsJ,GACxB,IAAIrO,EAAmB,IAAI0B,GAC3B6B,EAAQqF,UAdLnF,GAiBZ,IAEH,OAAO,IAAIsI,EACP7B,EACA,IAAInF,EAAoBsJ,GACxBI,EAAKlL,EAAS,SAAU,UAAW,UAAW,mBAAoB,cAE1E,GFvCJ,SAAYuI,GACR,mEACA,uDACA,qDACA,uDACA,kEACH,CAND,CAAYA,IAAAA,EAAuB,KAapB,MAAM4C,UAA4BvP,EAC7C,WAAAT,CAAmBiQ,GACfpP,MAOR,SAAyBE,GACrB,OAAQA,GACJ,KAAKqM,EAAwB8C,uBACzB,MAAO,oFAEX,KAAK9C,EAAwB+C,sBACzB,MAAO,mFAEX,KAAK/C,EAAwBgD,uBACzB,MAAO,oFAEX,KAAKhD,EAAwBiD,6BACzB,MAAO,mFAEX,QACI,MAAO,6EAEnB,CAxBcC,CAAgBL,IADP,KAAAA,QAAAA,EAGf3P,KAAKQ,KAAO,sBACZR,KAAKS,KAAO,iBAChB,EGdW,MAAMwP,EAEjB,WAAAvQ,CAAsBwQ,EAAyBC,GAAzB,KAAAD,MAAAA,EAAyB,KAAAC,mBAAAA,CAAwC,CAEvF,UAAAC,CAAW7L,GACP,MAAM8L,EAAOrQ,KAAKmQ,mBAAmB9O,OAAOrB,KAAKkQ,MAAO3L,GAExD,OAAO8L,EAAKvG,SAASwG,KAAK,KACtBtQ,KAAKuQ,YAAcF,GAE3B,CAEA,YAAAG,GACQxQ,KAAKuQ,cACLvQ,KAAKuQ,YAAYzF,SACjB9K,KAAKuQ,iBAAcE,EAE3B,CAEM,wBAAA9B,CACF/J,G,qCAEA,MAAMyL,EAAOrQ,KAAKuQ,YAElB,IAAKF,EACD,MAAM,IAAIX,EAAoB5C,EAAwB+C,uBAK1D,aAFMQ,EAAKlD,WAEJkD,EAAK1B,yBAAyB,CAAE/J,QAC3C,E,4RC5BG,SAAS8L,EAAwBrB,GACpC,OAAO,IAAIY,EAAkBZ,EAAM,IAAID,EAC3C,CCHe,MAAMuB,EAEjB,WAAAjR,CAAsBwQ,EAAyBC,GAAzB,KAAAD,MAAAA,EAAyB,KAAAC,mBAAAA,CAAwC,CAEjF,gBAAAvB,CACF1D,EACAtG,G,qCAEA,MAAMyL,EAAOrQ,KAAKuQ,YAElB,IAAKF,EACD,MAAM,IAAIX,EAAoB5C,EAAwB+C,6BAGpDQ,EAAKlD,WAAWmD,KAAK,IAAMD,EAAKzB,iBAAiB,CAAE1D,SAAQtG,SACrE,E,2RAEA,UAAAwL,CAAW7L,GACP,MAAM8L,EAAOrQ,KAAKmQ,mBAAmB9O,OAAOrB,KAAKkQ,MAAO3L,GAExD,OAAO8L,EAAKvG,SAASwG,KAAK,KACtBtQ,KAAKuQ,YAAcF,GAE3B,CAEA,YAAAG,GACQxQ,KAAKuQ,aACLvQ,KAAKuQ,YAAYzF,QAEzB,EC5BW,SAAS8F,EAAkCvB,GACtD,OAAO,IAAIsB,EAA4BtB,EAAM,IAAID,EACrD,Q","sources":["webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/utility/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/hosted-form-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/create-hosted-form-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/stored-card-hosted-form-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/create-hosted-form-stored-card-service.ts"],"sourcesContent":["export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { setPrototypeOf } from '../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { StandardError } from '../../errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent, TContext = undefined> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window, private _context?: TContext) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage({ ...event, context: this._context }, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n\n    setContext(context: TContext) {\n        this._context = context;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { appendWww, parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<\n    TEventMap extends IframeEventMap<keyof TEventMap>,\n    TContext = undefined,\n> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap, TContext>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType], context?: TContext): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => (context ? listener(event, context) : listener(event)));\n    }\n\n    @bind\n    private _handleMessage(messageEvent: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(messageEvent.origin) === -1 ||\n            !isIframeEvent(messageEvent.data as TEventMap[keyof TEventMap], messageEvent.data.type)\n        ) {\n            return;\n        }\n\n        const { context, ...event } = messageEvent.data;\n\n        this.trigger(event, context);\n    }\n}\n\ntype EventListeners<TEventMap, TContext = undefined> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key], context?: TContext) => void>;\n};\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { StandardError } from '../common/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../common/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../common/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import HostedFieldType from './hosted-field-type';\nimport HostedFormManualOrderData from './hosted-form-manual-order-data';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    SubmitManualOrderRequested = 'HOSTED_FIELD:SUBMIT_MANUAL_ORDER_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n    StoredCardRequested = 'HOSTED_FIELD:STORED_CARD_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitManualOrderRequested]: HostedFieldSubmitManualOrderRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n    [HostedFieldEventType.StoredCardRequested]: HostedFieldStoredCardRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldSubmitManualOrderRequestEvent\n    | HostedFieldValidateRequestEvent\n    | HostedFieldStoredCardRequestEvent;\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitManualOrderRequestEvent {\n    type: HostedFieldEventType.SubmitManualOrderRequested;\n    payload: {\n        data: HostedFormManualOrderData;\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n\nexport interface HostedFieldStoredCardRequestEvent {\n    type: HostedFieldEventType.StoredCardRequested;\n    payload: {\n        data: StoredCardHostedFormData;\n        fields: StoredCardHostedFormInstrumentFields;\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../errors';\nimport HostedFieldType from '../hosted-field-type';\nimport { HostedFormErrorsData } from '../hosted-form-options';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    SubmitManualOrderSucceeded = 'HOSTED_INPUT:SUBMIT_MANUAL_ORDER_SUCCEEDED',\n    SubmitManualOrderFailed = 'HOSTED_INPUT:SUBMIT_MANUAL_ORDER_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n    StoredCardSucceeded = 'HOSTED_INPUT:STORED_CARD_SUCCEEDED',\n    StoredCardFailed = 'HOSTED_INPUT:STORED_CARD_FAILED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitManualOrderSucceeded]: HostedInputSubmitManualOrderSuccessEvent;\n    [HostedInputEventType.SubmitManualOrderFailed]: HostedInputSubmitManualOrderErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n    [HostedInputEventType.StoredCardFailed]: HostedInputStoredCardErrorEvent;\n    [HostedInputEventType.StoredCardSucceeded]: HostedInputStoredCardSucceededEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitManualOrderSuccessEvent\n    | HostedInputSubmitManualOrderErrorEvent\n    | HostedInputValidateEvent\n    | HostedInputStoredCardSucceededEvent\n    | HostedInputStoredCardErrorEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n        errors?: HostedFormErrorsData;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\nexport interface HostedInputSubmitManualOrderSuccessEvent {\n    type: HostedInputEventType.SubmitManualOrderSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitManualOrderErrorEvent {\n    type: HostedInputEventType.SubmitManualOrderFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputStoredCardSucceededEvent {\n    type: HostedInputEventType.StoredCardSucceeded;\n}\n\nexport interface HostedInputStoredCardErrorEvent {\n    type: HostedInputEventType.StoredCardFailed;\n    payload?: {\n        errors?: string[];\n        error?: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from './common/dom';\nimport { mapFromPaymentErrorResponse } from './common/errors';\nimport { IframeEventListener, IframeEventPoster } from './common/iframe';\nimport { parseUrl } from './common/url';\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport HostedFormManualOrderData from './hosted-form-manual-order-data';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitManualOrderErrorEvent,\n    HostedInputSubmitManualOrderSuccessEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _orderId?: number,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = this.getFrameSrc(this._orderId);\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    private getFrameSrc(orderId?: number): string {\n        return typeof orderId !== 'undefined'\n            ? `/admin/payments/${this._orderId}/hosted-form-field?version=${LIBRARY_VERSION}`\n            : `/account/stored-instruments/hosted-fields?version=${LIBRARY_VERSION}`;\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async submitManualOrderForm(\n        data: HostedFormManualOrderData,\n    ): Promise<HostedInputSubmitManualOrderSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitManualOrderSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitManualOrderRequested,\n                    payload: { data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitManualOrderSucceeded,\n                    errorType: HostedInputEventType.SubmitManualOrderFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitManualOrderErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.error.message) {\n                    throw new Error(event.payload.error.message);\n                }\n\n                throw new Error(event.payload.error.code);\n            }\n\n            throw event;\n        }\n    }\n\n    async submitStoredCardForm(\n        fields: StoredCardHostedFormInstrumentFields,\n        data: StoredCardHostedFormData,\n    ): Promise<HostedInputStoredCardSucceededEvent> {\n        const promise = this._eventPoster.post<HostedInputStoredCardSucceededEvent>(\n            {\n                type: HostedFieldEventType.StoredCardRequested,\n                payload: { fields, data },\n            },\n            {\n                successType: HostedInputEventType.StoredCardSucceeded,\n                errorType: HostedInputEventType.StoredCardFailed,\n            },\n        );\n\n        return this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitManualOrderErrorEvent(\n        event: any,\n    ): event is HostedInputSubmitManualOrderErrorEvent {\n        if (!(event instanceof Object) || event === null || !('type' in event)) {\n            return false;\n        }\n\n        return event.type === HostedInputEventType.SubmitManualOrderFailed;\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport {\n    OrderPaymentRequestBody,\n    PaymentAdditionalAction,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from './common/iframe';\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormManualOrderData from './hosted-form-manual-order-data';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitManualOrderSuccessEvent,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\ntype HostedFormEventCallbacks = Pick<\n    HostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport interface HostedFormInterface {\n    attach(): Promise<void>;\n    detach(): void;\n    getBin(): string | undefined;\n    validate(): Promise<void>;\n    getCardType(): string | undefined;\n}\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _eventCallbacks: HostedFormEventCallbacks,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submitManualOrderPayment(payload: {\n        data: HostedFormManualOrderData;\n    }): Promise<HostedInputSubmitManualOrderSuccessEvent | void> {\n        return this._getFirstField().submitManualOrderForm(payload.data);\n    }\n\n    async submitStoredCard(payload: {\n        fields: StoredCardHostedFormInstrumentFields;\n        data: StoredCardHostedFormData;\n    }): Promise<HostedInputStoredCardSucceededEvent | void> {\n        return this._getFirstField().submitStoredCardForm(payload.fields, payload.data);\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        paymentIntegrationService: PaymentIntegrationService,\n        payloadTransformer: HostedFormOrderDataTransformer,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const response = await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                payloadTransformer.transform(payload, additionalActionData),\n            );\n\n            return response;\n        } catch (error) {\n            let additionalAction: PaymentAdditionalAction;\n\n            if (error instanceof Error || typeof error === 'string') {\n                additionalAction = await paymentIntegrationService.handlePaymentHumanVerification(\n                    error,\n                );\n            } else {\n                // Handle cases where error is not an instance of Error or string\n                throw new Error('Unexpected error type');\n            }\n\n            const response = await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                payloadTransformer.transform(payload, additionalAction),\n            );\n\n            return response;\n        }\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error instanceof Error && error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import { pick } from 'lodash';\n\nimport { DetachmentObserver, MutationObserverFactory } from './common/dom';\nimport { IframeEventListener, IframeEventPoster } from './common/iframe';\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions from './hosted-form-options';\n\nexport default class HostedFormFactory {\n    create(host: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    options.orderId,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n        );\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from './common/errors';\nimport HostedForm from './hosted-form';\nimport HostedFormFactory from './hosted-form-factory';\nimport HostedFormManualOrderData from './hosted-form-manual-order-data';\nimport HostedFormOptions from './hosted-form-options';\nimport { HostedInputSubmitManualOrderSuccessEvent } from './iframe-content';\n\nexport default class HostedFormService {\n    protected _hostedForm?: HostedForm;\n    constructor(protected _host: string, protected _hostedFormFactory: HostedFormFactory) {}\n\n    initialize(options: HostedFormOptions): Promise<void> {\n        const form = this._hostedFormFactory.create(this._host, options);\n\n        return form.attach().then(() => {\n            this._hostedForm = form;\n        });\n    }\n\n    deinitialize() {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n            this._hostedForm = undefined;\n        }\n    }\n\n    async submitManualOrderPayment(\n        data: HostedFormManualOrderData,\n    ): Promise<HostedInputSubmitManualOrderSuccessEvent | void> {\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await form.validate();\n\n        return form.submitManualOrderPayment({ data });\n    }\n}\n","import HostedFormFactory from './hosted-form-factory';\nimport HostedFormService from './hosted-form-service';\n\n/**\n * Creates an instance of `HostedFormService`.\n *\n *\n * @param host - Host url string parameter.\n * @returns An instance of `HostedFormService`.\n */\nexport function createHostedFormService(host: string) {\n    return new HostedFormService(host, new HostedFormFactory());\n}\n","import { NotInitializedError, NotInitializedErrorType } from './common/errors';\nimport HostedForm from './hosted-form';\nimport HostedFormFactory from './hosted-form-factory';\nimport LegacyHostedFormOptions from './hosted-form-options';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport default class StoredCardHostedFormService {\n    protected _hostedForm?: HostedForm;\n    constructor(protected _host: string, protected _hostedFormFactory: HostedFormFactory) {}\n\n    async submitStoredCard(\n        fields: StoredCardHostedFormInstrumentFields,\n        data: StoredCardHostedFormData,\n    ): Promise<void> {\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await form.validate().then(() => form.submitStoredCard({ fields, data }));\n    }\n\n    initialize(options: LegacyHostedFormOptions): Promise<void> {\n        const form = this._hostedFormFactory.create(this._host, options);\n\n        return form.attach().then(() => {\n            this._hostedForm = form;\n        });\n    }\n\n    deinitialize() {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n    }\n}\n","import HostedFormFactory from './hosted-form-factory';\nimport StoredCardHostedFormService from './stored-card-hosted-form-service';\n\n/**\n * Creates an instance of `StoredCardHostedFormService`.\n *\n *\n * @param host - Host url string parameter.\n * @returns An instance of `StoredCardHostedFormService`.\n */\nexport default function createStoredCardHostedFormService(host: string) {\n    return new StoredCardHostedFormService(host, new HostedFormFactory());\n}\n"],"names":["CancellablePromise","constructor","promise","cancellable","Promise","_","reject","this","cancel","race","StandardError","Error","message","prototype","super","name","type","Object","setPrototypeOf","__proto__","captureStackTrace","stack","UnexpectedDetachmentError","DetachmentObserver","_mutationObserver","ensurePresence","targets","observer","create","mutationsList","forEach","mutation","Array","from","removedNodes","filter","node","some","target","contains","length","observe","document","body","childList","subtree","output","disconnect","error","MutationObserverFactory","_window","window","callback","MutationObserver","InvalidArgumentError","parseUrl","url","test","anchor","createElement","href","port","indexOf","hostname","hash","origin","protocol","pathname","search","isIframeEvent","object","IframeEventPoster","targetOrigin","_targetWindow","_context","_targetOrigin","post","event","options","targetWindow","result","fromEvent","pipe","data","successType","errorType","take","toPromise","postMessage","context","setTarget","setContext","bindMethodDecorator","key","descriptor","value","method","get","boundMethod","bind","defineProperty","set","IframeEventListener","sourceOrigin","_sourceOrigins","replace","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","index","splice","trigger","messageEvent","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","DEFAULT_RESPONSE","headers","status","RequestError","response","errors","joinErrors","isArray","reduce","join","InvalidHostedFormConfigError","InvalidHostedFormError","InvalidHostedFormValueError","flatMap","values","fieldErrors","map","HostedFieldEventType","HostedInputEventType","HostedField","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_orderId","_iframe","src","getFrameSrc","style","border","height","overflow","width","orderId","getType","attach","container","getElementById","appendChild","switchMap","contentWindow","AttachRequested","payload","accessibilityLabel","fontUrls","_getFontUrls","placeholder","styles","location","AttachSucceeded","AttachFailed","detach","parentElement","removeChild","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","code","mapFromPaymentErrorResponse","submitManualOrderForm","SubmitManualOrderRequested","SubmitManualOrderSucceeded","SubmitManualOrderFailed","_isSubmitManualOrderErrorEvent","submitStoredCardForm","StoredCardRequested","StoredCardSucceeded","StoredCardFailed","validateForm","ValidateRequested","Validated","isValid","links","querySelectorAll","slice","call","link","fontFamily","family","split","NotInitializedErrorType","HostedForm","_fields","_eventCallbacks","_handleEnter","validate","onEnter","noop","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","cardType","BinChanged","_bin","bin","getBin","getCardType","field","_getFirstField","otherFields","without","all","otherField","submitManualOrderPayment","submitStoredCard","submit","paymentIntegrationService","payloadTransformer","additionalActionData","transform","additionalAction","handlePaymentHumanVerification","HostedFormFactory","host","keys","fieldOptions","containerId","pick","NotInitializedError","subtype","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","getErrorMessage","HostedFormService","_host","_hostedFormFactory","initialize","form","then","_hostedForm","deinitialize","undefined","createHostedFormService","StoredCardHostedFormService","createStoredCardHostedFormService"],"sourceRoot":""}