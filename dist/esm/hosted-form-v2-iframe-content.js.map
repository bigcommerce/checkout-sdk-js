{"version":3,"file":"hosted-form-v2-iframe-content.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/utility/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-input-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/get-hosted-input-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/hosted-field-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/payment/Instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/utils/isOfflinePaymentMethodId.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/payment/manual-order-payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/payment/storefront-stored-card-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/map-to-autocomplete-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-autocomplete-fieldset.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-input.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-card-expiry-input.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-card-number-input.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-input-aggregator.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-input-manual-order-payment-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-input-stored-card-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-input-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-input-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/map-to-accessibility-label.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/hosted-input-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/initialize-hosted-input.ts","webpack://@bigcommerce/checkout-sdk/./packages/hosted-form-v2/src/iframe-content/notify-initialize-error.ts"],"sourcesContent":["import { setPrototypeOf } from '../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { appendWww, parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<\n    TEventMap extends IframeEventMap<keyof TEventMap>,\n    TContext = undefined,\n> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap, TContext>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType], context?: TContext): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => (context ? listener(event, context) : listener(event)));\n    }\n\n    @bind\n    private _handleMessage(messageEvent: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(messageEvent.origin) === -1 ||\n            !isIframeEvent(messageEvent.data as TEventMap[keyof TEventMap], messageEvent.data.type)\n        ) {\n            return;\n        }\n\n        const { context, ...event } = messageEvent.data;\n\n        this.trigger(event, context);\n    }\n}\n\ntype EventListeners<TEventMap, TContext = undefined> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key], context?: TContext) => void>;\n};\n","export default class HostedInputStorage {\n    private _nonce?: string;\n\n    setNonce(nonce: string): void {\n        this._nonce = nonce;\n    }\n\n    getNonce(): string | undefined {\n        return this._nonce;\n    }\n}\n","import HostedInputStorage from './hosted-input-storage';\n\nlet storage: HostedInputStorage | null;\n\nexport default function getHostedInputStorage(): HostedInputStorage {\n    storage = storage || new HostedInputStorage();\n\n    return storage;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent, TContext = undefined> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window, private _context?: TContext) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage({ ...event, context: this._context }, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n\n    setContext(context: TContext) {\n        this._context = context;\n    }\n}\n","enum HostedFieldType {\n    CardCode = 'cardCode',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    Note = 'note',\n    Hidden = 'hidden',\n}\n\nexport default HostedFieldType;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export enum InstrumentType {\n    Card = 'card',\n    ManualPayment = 'manual_payment',\n}\n\nexport const manualPaymentMethod = 'bigcommerce.manual_payment';\n\nexport enum OfflinePaymentMethods {\n    BankDeposit = 'bigcommerce_offline.bank_deposit',\n    Cheque = 'bigcommerce_offline.cheque',\n    Cod = 'bigcommerce_offline.cod',\n    InStore = 'bigcommerce_offline.in_store',\n    MoneyOrder = 'bigcommerce_offline.money_order',\n}\n\nexport enum OfflinePaymentMethodTypes {\n    BankDeposit = 'bank_deposit',\n    Cheque = 'cheque',\n    Cod = 'cod',\n    InStore = 'in_store',\n    MoneyOrder = 'money_order',\n}\n\nexport const offlinePaymentMethodTypeMap: Record<OfflinePaymentMethods, OfflinePaymentMethodTypes> =\n    {\n        [OfflinePaymentMethods.BankDeposit]: OfflinePaymentMethodTypes.BankDeposit,\n        [OfflinePaymentMethods.Cheque]: OfflinePaymentMethodTypes.Cheque,\n        [OfflinePaymentMethods.Cod]: OfflinePaymentMethodTypes.Cod,\n        [OfflinePaymentMethods.InStore]: OfflinePaymentMethodTypes.InStore,\n        [OfflinePaymentMethods.MoneyOrder]: OfflinePaymentMethodTypes.MoneyOrder,\n    };\n\ninterface CardInstrument {\n    type: InstrumentType.Card;\n    name: string;\n    number: string;\n    expires: {\n        month: number;\n        year: number;\n    };\n    verification_value?: string;\n}\n\ninterface ManualPaymentInstrument {\n    type: InstrumentType.ManualPayment;\n    note: string;\n}\n\ninterface OfflinePaymentInstrument {\n    type: OfflinePaymentMethodTypes;\n}\n\nexport type Instrument = CardInstrument | ManualPaymentInstrument | OfflinePaymentInstrument;\n","import { OfflinePaymentMethods } from '../payment';\n\nexport const isOfflinePaymentMethodId = (id: string): id is OfflinePaymentMethods => {\n    return Object.values(OfflinePaymentMethods).includes(id as OfflinePaymentMethods);\n};\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport ContentType from '../common/http-request/content-type';\nimport HostedFormManualOrderData from '../hosted-form-manual-order-data';\nimport { HostedInputValues } from '../iframe-content';\nimport { isOfflinePaymentMethodId } from '../utils';\n\nimport {\n    Instrument,\n    InstrumentType,\n    manualPaymentMethod,\n    offlinePaymentMethodTypeMap,\n} from './Instrument';\n\nexport class ManualOrderPaymentRequestSender {\n    constructor(private _requestSender: RequestSender, private _paymentOrigin: string) {}\n\n    async submitPayment(\n        requestInitializationData: HostedFormManualOrderData,\n        instrumentFormData: HostedInputValues,\n        nonce?: string,\n    ): Promise<Response<unknown>> {\n        const { paymentMethodId, paymentSessionToken } = requestInitializationData;\n\n        let instrument: Instrument;\n\n        if (paymentMethodId === manualPaymentMethod) {\n            instrument = {\n                type: InstrumentType.ManualPayment,\n                note: instrumentFormData.note ?? '',\n            };\n        } else if (isOfflinePaymentMethodId(paymentMethodId)) {\n            instrument = {\n                type: offlinePaymentMethodTypeMap[paymentMethodId],\n            };\n        } else {\n            const [expiryMonth, expiryYear] = instrumentFormData.cardExpiry\n                ? instrumentFormData.cardExpiry.split('/')\n                : [];\n\n            instrument = {\n                type: InstrumentType.Card,\n                name: instrumentFormData.cardName ?? '',\n                number: instrumentFormData.cardNumber\n                    ? instrumentFormData.cardNumber.replace(/ /g, '')\n                    : '',\n                expires: {\n                    month: Number(expiryMonth.trim()),\n                    year: Number(`20${expiryYear.trim()}`),\n                },\n                verification_value: instrumentFormData.cardCode ?? undefined,\n            };\n        }\n\n        const options = {\n            headers: {\n                Accept: ContentType.Json,\n                'Content-Type': ContentType.Json,\n                'X-Payment-Session-Token': paymentSessionToken,\n            },\n            body: {\n                instrument,\n                payment_method_id: paymentMethodId,\n                form_nonce: nonce ?? undefined,\n            },\n        };\n\n        return this._requestSender.post<unknown>(`${this._paymentOrigin}/payments`, options);\n    }\n}\n","import HostedFieldType from './hosted-field-type';\nimport HostedFormManualOrderData from './hosted-form-manual-order-data';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    SubmitManualOrderRequested = 'HOSTED_FIELD:SUBMIT_MANUAL_ORDER_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n    StoredCardRequested = 'HOSTED_FIELD:STORED_CARD_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitManualOrderRequested]: HostedFieldSubmitManualOrderRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n    [HostedFieldEventType.StoredCardRequested]: HostedFieldStoredCardRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldSubmitManualOrderRequestEvent\n    | HostedFieldValidateRequestEvent\n    | HostedFieldStoredCardRequestEvent;\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitManualOrderRequestEvent {\n    type: HostedFieldEventType.SubmitManualOrderRequested;\n    payload: {\n        data: HostedFormManualOrderData;\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n\nexport interface HostedFieldStoredCardRequestEvent {\n    type: HostedFieldEventType.StoredCardRequested;\n    payload: {\n        data: StoredCardHostedFormData;\n        fields: StoredCardHostedFormInstrumentFields;\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../errors';\nimport HostedFieldType from '../hosted-field-type';\nimport { HostedFormErrorsData } from '../hosted-form-options';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    SubmitManualOrderSucceeded = 'HOSTED_INPUT:SUBMIT_MANUAL_ORDER_SUCCEEDED',\n    SubmitManualOrderFailed = 'HOSTED_INPUT:SUBMIT_MANUAL_ORDER_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n    StoredCardSucceeded = 'HOSTED_INPUT:STORED_CARD_SUCCEEDED',\n    StoredCardFailed = 'HOSTED_INPUT:STORED_CARD_FAILED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitManualOrderSucceeded]: HostedInputSubmitManualOrderSuccessEvent;\n    [HostedInputEventType.SubmitManualOrderFailed]: HostedInputSubmitManualOrderErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n    [HostedInputEventType.StoredCardFailed]: HostedInputStoredCardErrorEvent;\n    [HostedInputEventType.StoredCardSucceeded]: HostedInputStoredCardSucceededEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitManualOrderSuccessEvent\n    | HostedInputSubmitManualOrderErrorEvent\n    | HostedInputValidateEvent\n    | HostedInputStoredCardSucceededEvent\n    | HostedInputStoredCardErrorEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n        errors?: HostedFormErrorsData;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\nexport interface HostedInputSubmitManualOrderSuccessEvent {\n    type: HostedInputEventType.SubmitManualOrderSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitManualOrderErrorEvent {\n    type: HostedInputEventType.SubmitManualOrderFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputStoredCardSucceededEvent {\n    type: HostedInputEventType.StoredCardSucceeded;\n}\n\nexport interface HostedInputStoredCardErrorEvent {\n    type: HostedInputEventType.StoredCardFailed;\n    payload?: {\n        errors?: string[];\n        error?: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentForm,\n} from '../stored-card-hosted-form-type';\n\nexport default class StorefrontStoredCardRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    async submitPaymentInstrument(\n        requestInitializationData: StoredCardHostedFormData,\n        storeInstrumentFormData: StoredCardHostedFormInstrumentForm,\n    ): Promise<void> {\n        const { providerId, currencyCode, paymentsUrl, shopperId, storeHash, vaultToken } =\n            requestInitializationData;\n\n        const { billingAddress, instrument, defaultInstrument } = storeInstrumentFormData;\n        const url = `${paymentsUrl}/stores/${storeHash}/customers/${shopperId}/stored_instruments`;\n        const options = {\n            headers: {\n                Authorization: vaultToken,\n                Accept: 'application/vnd.bc.v1+json',\n                'Content-Type': 'application/vnd.bc.v1+json',\n            },\n            body: JSON.stringify({\n                instrument: {\n                    type: instrument.type,\n                    cardholder_name: instrument.cardholderName,\n                    number: instrument.number,\n                    expiry_month: instrument.expiryMonth,\n                    expiry_year: instrument.expiryYear,\n                    verification_value: instrument.verificationValue,\n                },\n                billing_address: {\n                    email: billingAddress.email,\n                    address1: billingAddress.address1,\n                    ...(billingAddress.address2 && { address2: billingAddress.address2 }),\n                    city: billingAddress.city,\n                    postal_code: billingAddress.postalCode,\n                    country_code: billingAddress.countryCode,\n                    ...(billingAddress.company && { company: billingAddress.company }),\n                    first_name: billingAddress.firstName,\n                    last_name: billingAddress.lastName,\n                    ...(billingAddress.phone && { phone: billingAddress.phone }),\n                    ...(billingAddress.stateOrProvinceCode && {\n                        state_or_province_code: billingAddress.stateOrProvinceCode,\n                    }),\n                },\n                provider_id: providerId,\n                default_instrument: defaultInstrument,\n                currency_code: currencyCode,\n            }),\n        };\n\n        await this._requestSender.post<void>(url, options);\n    }\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import HostedFieldType from '../hosted-field-type';\n\nexport default function mapToAutocompleteType(type: HostedFieldType): string {\n    switch (type) {\n        case HostedFieldType.CardCode:\n            return 'cc-csc';\n\n        case HostedFieldType.CardExpiry:\n            return 'cc-exp';\n\n        case HostedFieldType.CardName:\n            return 'cc-name';\n\n        case HostedFieldType.CardNumber:\n            return 'cc-number';\n\n        default:\n            return '';\n    }\n}\n","import { kebabCase } from 'lodash';\n\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport mapToAutocompleteType from './map-to-autocomplete-type';\n\nexport default class HostedAutocompleteFieldset {\n    private _inputs: HTMLInputElement[];\n\n    constructor(\n        private _form: HTMLFormElement,\n        private _fieldTypes: HostedFieldType[],\n        private _inputAggregator: HostedInputAggregator,\n    ) {\n        this._inputs = this._fieldTypes.map((type) => this._createInput(type));\n    }\n\n    attach(): void {\n        this._inputs.forEach((input) => this._form.appendChild(input));\n    }\n\n    detach(): void {\n        this._inputs.forEach((input) => {\n            if (!input.parentElement) {\n                return;\n            }\n\n            input.parentElement.removeChild(input);\n        });\n    }\n\n    private _createInput(type: HostedFieldType): HTMLInputElement {\n        const input = document.createElement('input');\n\n        input.autocomplete = mapToAutocompleteType(type);\n        input.id = this._getAutocompleteElementId(type);\n        input.tabIndex = -1;\n        input.style.position = 'absolute';\n        input.style.opacity = '0';\n        input.style.zIndex = '-1';\n\n        input.addEventListener('change', this._handleChange);\n\n        return input;\n    }\n\n    private _handleChange: (event: Event) => void = (event) => {\n        const targetInput = event.target as HTMLInputElement;\n\n        if (!targetInput) {\n            throw new Error('Unable to get a reference to the target of the change event.');\n        }\n\n        const targetHostedInput = this._inputAggregator\n            .getInputs()\n            .find((input) => this._getAutocompleteElementId(input.getType()) === targetInput.id);\n\n        if (!targetHostedInput) {\n            return;\n        }\n\n        targetHostedInput.setValue(targetInput.value);\n    };\n\n    private _getAutocompleteElementId(type: HostedFieldType): string {\n        return `autocomplete-${kebabCase(type)}`;\n    }\n}\n","import { kebabCase } from 'lodash';\n\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport {\n    HostedFieldEventMap,\n    HostedFieldEventType,\n    HostedFieldValidateRequestEvent,\n} from '../hosted-field-events';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputManualOrderPaymentHandler from './hosted-input-manual-order-payment-handler';\nimport HostedInputStoredCardHandler from './hosted-input-stored-card-handler';\nimport HostedInputStyles, { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\nimport HostedInputWindow from './hosted-input-window';\n\nexport default class HostedInput {\n    protected _input: HTMLInputElement;\n    protected _previousValue?: string;\n    private _fontLinks?: HTMLLinkElement[];\n    private _isTouched = false;\n\n    /**\n     * @internal\n     */\n    constructor(\n        protected _type: HostedFieldType,\n        protected _form: HTMLFormElement,\n        protected _placeholder: string,\n        protected _accessibilityLabel: string,\n        protected _autocomplete: string,\n        protected _styles: HostedInputStylesMap,\n        protected _fontUrls: string[],\n        protected _eventListener: IframeEventListener<HostedFieldEventMap>,\n        protected _eventPoster: IframeEventPoster<HostedInputEvent>,\n        protected _inputAggregator: HostedInputAggregator,\n        protected _inputValidator: HostedInputValidator,\n        protected _manualOrderPaymentHandler: HostedInputManualOrderPaymentHandler,\n        protected _storedCardHandler: HostedInputStoredCardHandler,\n    ) {\n        this._input = document.createElement('input');\n\n        this._input.addEventListener('input', this._handleInput);\n        this._input.addEventListener('blur', this._handleBlur);\n        this._input.addEventListener('focus', this._handleFocus);\n        this._eventListener.addListener(\n            HostedFieldEventType.ValidateRequested,\n            this._handleValidate,\n        );\n\n        this._eventListener.addListener(\n            HostedFieldEventType.SubmitManualOrderRequested,\n            this._manualOrderPaymentHandler.handle,\n        );\n\n        this._eventListener.addListener(\n            HostedFieldEventType.StoredCardRequested,\n            this._storedCardHandler.handle,\n        );\n\n        this._configureInput();\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    getValue(): string {\n        return this._input.value;\n    }\n\n    setValue(value: string): void {\n        this._processChange(value);\n    }\n\n    isTouched(): boolean {\n        return this._isTouched;\n    }\n\n    attach(): void {\n        this._form.appendChild(this._input);\n        this._form.addEventListener('submit', this._handleSubmit);\n\n        this._loadFonts();\n\n        this._eventPoster.setTarget(window.parent);\n        this._eventListener.listen();\n\n        // fixes the issue on Firefox/Safari where the input doesn't focus properly\n        window.addEventListener('focus', this._forceFocusToInput);\n\n        // Assign itself to the global so it can be accessed by its sibling frames\n        (window as unknown as HostedInputWindow).hostedInput = this;\n\n        this._eventPoster.post({ type: HostedInputEventType.AttachSucceeded });\n    }\n\n    detach(): void {\n        if (this._input.parentElement) {\n            this._input.parentElement.removeChild(this._input);\n        }\n\n        this._form.removeEventListener('submit', this._handleSubmit);\n        this._unloadFonts();\n\n        window.removeEventListener('focus', this._forceFocusToInput);\n\n        this._eventListener.stopListen();\n    }\n\n    protected _formatValue(value: string): void {\n        this._input.value = value;\n    }\n\n    protected _notifyChange(_value: string): void {\n        this._eventPoster.post({\n            type: HostedInputEventType.Changed,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    }\n\n    private _configureInput(): void {\n        this._input.style.backgroundColor = 'transparent';\n        this._input.style.border = '0';\n        this._input.style.display = 'block';\n        this._input.style.height = '100%';\n        this._input.style.margin = '0';\n        this._input.style.outline = 'none';\n        this._input.style.padding = '0';\n        this._input.style.width = '100%';\n        this._input.id = kebabCase(this._type);\n        this._input.placeholder = this._placeholder;\n        this._input.autocomplete = this._autocomplete;\n\n        this._input.setAttribute('aria-label', this._accessibilityLabel);\n\n        this._applyStyles(this._styles.default);\n\n        switch (this._input.id) {\n            case 'card-code':\n            case 'card-expiry':\n            case 'card-number':\n                this._input.type = 'text';\n                this._input.inputMode = 'numeric';\n                this._input.pattern = '[0-9]*';\n                break;\n\n            case 'card-name':\n            case 'note':\n            case 'hidden':\n                this._input.type = 'text';\n                this._input.inputMode = 'text';\n                break;\n        }\n    }\n\n    private _applyStyles(styles: HostedInputStyles = {}): void {\n        const allowedStyles: {\n            [key in keyof Required<HostedInputStyles>]: HostedInputStyles[key];\n        } = {\n            color: styles.color,\n            fontFamily: styles.fontFamily,\n            fontSize: styles.fontSize,\n            fontWeight: styles.fontWeight,\n        };\n        const styleKeys = Object.keys(allowedStyles) as Array<keyof HostedInputStyles>;\n\n        styleKeys.forEach((key) => {\n            if (!allowedStyles[key]) {\n                return;\n            }\n\n            this._input.style[key] = allowedStyles[key] || '';\n        });\n    }\n\n    private _loadFonts(): void {\n        if (this._fontLinks) {\n            return;\n        }\n\n        this._fontLinks = this._fontUrls\n            .filter((url) => parseUrl(url).hostname === 'fonts.googleapis.com')\n            .filter((url) => !document.querySelector(`link[href='${url}'][rel='stylesheet']`))\n            .map((url) => {\n                const link = document.createElement('link');\n\n                link.rel = 'stylesheet';\n                link.href = url;\n\n                document.head.appendChild(link);\n\n                return link;\n            });\n    }\n\n    private _unloadFonts(): void {\n        if (!this._fontLinks) {\n            return;\n        }\n\n        this._fontLinks.forEach((link) => {\n            if (!link.parentElement) {\n                return;\n            }\n\n            link.parentElement.removeChild(link);\n        });\n\n        this._fontLinks = undefined;\n    }\n\n    private async _validateForm(): Promise<void> {\n        const values = this._inputAggregator.getInputValues();\n        const results = await this._inputValidator.validate(values);\n\n        if (results.isValid) {\n            this._applyStyles(this._styles.default);\n        } else {\n            this._applyStyles(this._styles.error);\n        }\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Validated,\n            payload: results,\n        });\n    }\n\n    private _processChange(value: string): void {\n        if (value === this._previousValue) {\n            return;\n        }\n\n        this._isTouched = true;\n\n        this._formatValue(value);\n        this._validateForm();\n        this._notifyChange(value);\n\n        this._previousValue = value;\n    }\n\n    private _handleInput: (event: Event) => void = (event) => {\n        const input = event.target as HTMLInputElement;\n\n        this._processChange(input.value);\n    };\n\n    private _handleBlur: (event: Event) => void = () => {\n        this._applyStyles(this._styles.default);\n        this._validateForm();\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Blurred,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    };\n\n    private _handleFocus: (event: Event) => void = () => {\n        this._applyStyles(this._styles.focus);\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Focused,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    };\n\n    private _handleValidate: (event: HostedFieldValidateRequestEvent) => void = () => {\n        this._validateForm();\n    };\n\n    private _handleSubmit: (event: Event) => void = (event) => {\n        event.preventDefault();\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Entered,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    };\n\n    private _forceFocusToInput = (): void => {\n        if (document.activeElement === document.body) {\n            const browserName = navigator.userAgent.toLowerCase();\n\n            if (browserName.indexOf('safari') > -1) {\n                if (this._input.value === '') {\n                    this._input.setAttribute('value', ' ');\n                    this._input.setSelectionRange(0, 1);\n                    this._input.setAttribute('value', '');\n                }\n            } else {\n                this._input.focus();\n            }\n        }\n    };\n}\n","import { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { HostedFieldEventMap } from '../hosted-field-events';\nimport HostedFieldType from '../hosted-field-type';\n\nimport CardExpiryFormatter from './card-expiry-formatter';\nimport HostedInput from './hosted-input';\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent } from './hosted-input-events';\nimport HostedInputManualOrderPaymentHandler from './hosted-input-manual-order-payment-handler';\nimport HostedInputStoredCardHandler from './hosted-input-stored-card-handler';\nimport { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedCardExpiryInput extends HostedInput {\n    /**\n     * @internal\n     */\n    constructor(\n        form: HTMLFormElement,\n        placeholder: string,\n        accessibilityLabel: string,\n        autocomplete: string,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        eventListener: IframeEventListener<HostedFieldEventMap>,\n        eventPoster: IframeEventPoster<HostedInputEvent>,\n        inputAggregator: HostedInputAggregator,\n        inputValidator: HostedInputValidator,\n        manualOrderPaymentHandler: HostedInputManualOrderPaymentHandler,\n        storedCardHandler: HostedInputStoredCardHandler,\n        private _formatter: CardExpiryFormatter,\n    ) {\n        super(\n            HostedFieldType.CardExpiry,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            eventListener,\n            eventPoster,\n            inputAggregator,\n            inputValidator,\n            manualOrderPaymentHandler,\n            storedCardHandler,\n        );\n    }\n\n    protected _formatValue(value: string): void {\n        this._input.value = this._formatter.format(value);\n    }\n}\n","import { number } from 'card-validator';\nimport { get } from 'lodash';\n\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { HostedFieldEventMap } from '../hosted-field-events';\nimport HostedFieldType from '../hosted-field-type';\n\nimport CardNumberFormatter from './card-number-formatter';\nimport HostedAutocompleteFieldset from './hosted-autocomplete-fieldset';\nimport HostedInput from './hosted-input';\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputManualOrderPaymentHandler from './hosted-input-manual-order-payment-handler';\nimport HostedInputStoredCardHandler from './hosted-input-stored-card-handler';\nimport { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedCardNumberInput extends HostedInput {\n    /**\n     * @internal\n     */\n    constructor(\n        type: HostedFieldType,\n        form: HTMLFormElement,\n        placeholder: string,\n        accessibilityLabel: string,\n        autocomplete: string,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        eventListener: IframeEventListener<HostedFieldEventMap>,\n        eventPoster: IframeEventPoster<HostedInputEvent>,\n        inputAggregator: HostedInputAggregator,\n        inputValidator: HostedInputValidator,\n        manualOrderPaymentHandler: HostedInputManualOrderPaymentHandler,\n        storedCardHandler: HostedInputStoredCardHandler,\n        private _autocompleteFieldset: HostedAutocompleteFieldset,\n        private _formatter: CardNumberFormatter,\n    ) {\n        super(\n            type,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            eventListener,\n            eventPoster,\n            inputAggregator,\n            inputValidator,\n            manualOrderPaymentHandler,\n            storedCardHandler,\n        );\n    }\n\n    attach(): void {\n        super.attach();\n\n        this._autocompleteFieldset.attach();\n    }\n\n    protected _notifyChange(value: string): void {\n        const cardInfo = number(value).card;\n        const prevCardInfo = this._previousValue && number(this._previousValue).card;\n\n        if (get(prevCardInfo, 'type') !== get(cardInfo, 'type')) {\n            this._eventPoster.post({\n                type: HostedInputEventType.CardTypeChanged,\n                payload: {\n                    cardType: cardInfo ? cardInfo.type : undefined,\n                },\n            });\n        }\n\n        const unformattedValue = this._formatter.unformat(value);\n        const unformattedPreviousValue = this._previousValue\n            ? this._formatter.unformat(this._previousValue)\n            : '';\n\n        const bin =\n            unformattedValue.length >= 6 && number(unformattedValue).isPotentiallyValid\n                ? unformattedValue.substr(0, 6)\n                : '';\n        const prevBin =\n            unformattedPreviousValue.length >= 6 ? unformattedPreviousValue.substr(0, 6) : '';\n\n        if (bin !== prevBin) {\n            this._eventPoster.post({\n                type: HostedInputEventType.BinChanged,\n                payload: { bin },\n            });\n        }\n    }\n\n    protected _formatValue(value: string): void {\n        const selectionEnd = this._input.selectionEnd;\n        const formattedValue = this._formatter.format(value);\n\n        if (selectionEnd === value.length && value.length < formattedValue.length) {\n            this._input.setSelectionRange(formattedValue.length, formattedValue.length);\n        } else {\n            this._input.setSelectionRange(selectionEnd || 0, selectionEnd || 0);\n        }\n\n        this._input.value = formattedValue;\n    }\n}\n","import HostedInput from './hosted-input';\nimport HostedInputValues from './hosted-input-values';\nimport HostedInputWindow from './hosted-input-window';\n\nexport default class HostedInputAggregator {\n    constructor(private _parentWindow: Window) {}\n\n    getInputs(filter?: (field: HostedInput) => boolean): HostedInput[] {\n        return Array.prototype.slice\n            .call(this._parentWindow.frames)\n            .reduce((result: Window[], frame: Window) => {\n                try {\n                    const input = (frame as HostedInputWindow).hostedInput;\n\n                    if (!input || (filter && !filter(input))) {\n                        return result;\n                    }\n\n                    return [...result, input];\n                } catch (error) {\n                    if (error instanceof DOMException) {\n                        return result;\n                    }\n\n                    // IE11 doesn't throw `DOMException`\n                    if (error instanceof Error && error.message === 'Permission denied') {\n                        return result;\n                    }\n\n                    throw error;\n                }\n            }, []);\n    }\n\n    getInputValues(filter?: (field: HostedInput) => boolean): HostedInputValues {\n        return this.getInputs(filter).reduce((result, input) => {\n            return {\n                ...result,\n                [input.getType()]: input.getValue(),\n            };\n        }, {} as HostedInputValues);\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../common/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { get, isString, snakeCase } from 'lodash';\n\nimport { IframeEventPoster } from '../common/iframe';\nimport { InvalidHostedFormValueError, PaymentErrorResponseBody } from '../errors';\nimport { HostedFieldSubmitManualOrderRequestEvent } from '../hosted-field-events';\nimport { ManualOrderPaymentRequestSender } from '../payment';\nimport { isOfflinePaymentMethodId } from '../utils';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputStorage from './hosted-input-storage';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedInputManualOrderPaymentHandler {\n    constructor(\n        private _inputAggregator: HostedInputAggregator,\n        private _inputValidator: HostedInputValidator,\n        private _inputStorage: HostedInputStorage,\n        private _eventPoster: IframeEventPoster<HostedInputEvent>,\n        private _manualOrderPaymentRequestSender: ManualOrderPaymentRequestSender,\n    ) {}\n\n    handle: (event: HostedFieldSubmitManualOrderRequestEvent) => Promise<void> = async (event) => {\n        const {\n            payload: { data },\n        } = event;\n        const values = this._inputAggregator.getInputValues();\n        const results = await this._inputValidator.validate(values);\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Validated,\n            payload: results,\n        });\n\n        if (!results.isValid) {\n            const error = new InvalidHostedFormValueError(results.errors);\n\n            return this._eventPoster.post({\n                type: HostedInputEventType.SubmitManualOrderFailed,\n                payload: {\n                    error: { code: snakeCase(error.name), message: error.message },\n                },\n            });\n        }\n\n        try {\n            const response = await this._manualOrderPaymentRequestSender.submitPayment(\n                data,\n                values,\n                this._inputStorage.getNonce(),\n            );\n\n            const isFailure =\n                get(response.body, 'type') === 'failure' && isString(get(response.body, 'code'));\n            const isError = get(response.body, 'type') === 'error';\n\n            const isSuccessfulOfflineOrder =\n                isOfflinePaymentMethodId(data.paymentMethodId) &&\n                get(response.body, 'type') === 'continue' &&\n                get(response.body, 'code') === 'complete_offline';\n            const isSuccessfulAsyncOrder =\n                get(response.body, 'type') === 'continue' &&\n                get(response.body, 'code') === 'await_confirmation';\n            const isSuccess =\n                get(response.body, 'type') === 'success' ||\n                isSuccessfulOfflineOrder ||\n                isSuccessfulAsyncOrder;\n\n            if (isFailure) {\n                this._eventPoster.post({\n                    type: HostedInputEventType.SubmitManualOrderFailed,\n                    payload: {\n                        error: { code: get(response.body, 'code') },\n                    },\n                });\n            } else if (isError) {\n                this._eventPoster.post({\n                    type: HostedInputEventType.SubmitManualOrderFailed,\n                    payload: {\n                        error: { code: get(response.body, 'type') },\n                    },\n                });\n            } else if (isSuccess) {\n                this._eventPoster.post({\n                    type: HostedInputEventType.SubmitManualOrderSucceeded,\n                    payload: {\n                        response,\n                    },\n                });\n            }\n        } catch (error) {\n            if (this._isPaymentErrorResponse(error)) {\n                this._eventPoster.post({\n                    type: HostedInputEventType.SubmitManualOrderFailed,\n                    payload: { error: error.body.errors[0], response: error },\n                });\n            } else if (this._isErrorResponse(error)) {\n                this._eventPoster.post({\n                    type: HostedInputEventType.SubmitManualOrderFailed,\n                    payload: { error: { code: snakeCase(error.name), message: error.message } },\n                });\n            }\n        }\n    };\n\n    private _isPaymentErrorResponse(response: any): response is Response<PaymentErrorResponseBody> {\n        const { body: { errors = [] } = {} } = response || {};\n\n        return (\n            typeof (errors[0] && errors[0].code) === 'string' &&\n            typeof (errors[0] && errors[0].message) === 'string'\n        );\n    }\n\n    private _isErrorResponse(error: unknown): error is { name?: string; message?: string } {\n        return (\n            typeof error === 'object' &&\n            error !== null &&\n            (('name' in error && typeof (error as { name: unknown }).name === 'string') ||\n                !('name' in error)) &&\n            (('message' in error && typeof (error as { message: unknown }).message === 'string') ||\n                !('message' in error))\n        );\n    }\n}\n","import { IframeEventPoster } from '../common/iframe';\nimport { HostedFieldStoredCardRequestEvent } from '../hosted-field-events';\nimport { StorefrontStoredCardRequestSender } from '../payment';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedInputStoredCardHandler {\n    constructor(\n        private _inputAggregator: HostedInputAggregator,\n        private _inputValidator: HostedInputValidator,\n        private _eventPoster: IframeEventPoster<HostedInputEvent>,\n        private _storedCardRequestSender: StorefrontStoredCardRequestSender,\n    ) {}\n\n    handle: (event: HostedFieldStoredCardRequestEvent) => Promise<void> = async (event) => {\n        const {\n            payload: { data, fields },\n        } = event;\n        const values = this._inputAggregator.getInputValues();\n        const results = await this._inputValidator.validate(values);\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Validated,\n            payload: results,\n        });\n\n        if (!results.isValid) {\n            return this._eventPoster.post({\n                type: HostedInputEventType.StoredCardFailed,\n            });\n        }\n\n        const { defaultInstrument, ...billingAddress } = fields;\n\n        const [expiryMonth, expiryYear] = values.cardExpiry ? values.cardExpiry.split('/') : [];\n\n        try {\n            await this._storedCardRequestSender.submitPaymentInstrument(data, {\n                billingAddress,\n                instrument: {\n                    type: 'card',\n                    cardholderName: values.cardName || '',\n                    number: values.cardNumber ? values.cardNumber.replace(/ /g, '') : '',\n                    expiryMonth: Number(expiryMonth.trim()),\n                    expiryYear: Number(`20${expiryYear.trim()}`),\n                    verificationValue: values.cardCode ?? '',\n                },\n                defaultInstrument,\n            });\n\n            this._eventPoster.post({\n                type: HostedInputEventType.StoredCardSucceeded,\n            });\n        } catch (error) {\n            this._eventPoster.post({\n                type: HostedInputEventType.StoredCardFailed,\n            });\n        }\n    };\n}\n","import { creditCardType, cvv, expirationDate, number } from 'card-validator';\nimport { object, ObjectShape, string, StringSchema, ValidationError } from 'yup';\n\nimport { HostedInputValidateErrorDataMap } from './hosted-input-validate-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\nimport HostedInputValues from './hosted-input-values';\n\nexport default class HostedInputValidator {\n    private readonly _completeSchema: ObjectShape = {\n        cardCode: this._getCardCodeSchema(),\n        cardExpiry: this._getCardExpirySchema(),\n        cardName: this._getCardNameSchema(),\n        cardNumber: this._getCardNumberSchema(),\n        note: this._getNoteSchema(),\n    };\n\n    constructor() {\n        this._configureCardValidator();\n    }\n\n    async validate(values: HostedInputValues): Promise<HostedInputValidateResults> {\n        const schemas: ObjectShape = {};\n        const results: HostedInputValidateResults = {\n            errors: {},\n            isValid: true,\n        };\n\n        let requiredField: keyof HostedInputValues;\n\n        for (requiredField in values) {\n            if (Object.prototype.hasOwnProperty.call(values, requiredField)) {\n                schemas[requiredField] = this._completeSchema[requiredField];\n                results.errors[requiredField] = [];\n            }\n        }\n\n        try {\n            await object(schemas).validate(values, { abortEarly: false });\n\n            return results;\n        } catch (error) {\n            if (this._isValidationErrorType(error)) {\n                throw error;\n            }\n\n            return {\n                errors: (\n                    Object.keys(results.errors) as Array<keyof HostedInputValidateErrorDataMap>\n                ).reduce(\n                    (result, fieldType) => ({\n                        ...result,\n                        [fieldType]: (error as ValidationError).inner\n                            .filter((innerError) => innerError.path === fieldType)\n                            .map((innerError) => ({\n                                fieldType: innerError.path,\n                                message: innerError.errors.join(' '),\n                                type: innerError.type,\n                            })),\n                    }),\n                    {} as HostedInputValidateErrorDataMap,\n                ),\n                isValid: false,\n            };\n        }\n    }\n\n    private _configureCardValidator(): void {\n        const discoverInfo = creditCardType.getTypeInfo('discover');\n        const visaInfo = creditCardType.getTypeInfo('visa');\n\n        // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n        creditCardType.updateCard('visa', {\n            lengths: [13, ...(visaInfo.lengths || [])],\n        });\n\n        // Add support for 8-BIN Discover Cards.\n        creditCardType.updateCard('discover', {\n            patterns: [...(discoverInfo.patterns || []), [810, 817]],\n        });\n\n        creditCardType.addCard({\n            niceType: 'Mada',\n            type: 'mada',\n            patterns: [\n                400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817,\n                422818, 422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954,\n                440533, 440647, 440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865,\n                458456, 462220, 468540, 468541, 468542, 468543, 483010, 483011, 483012, 484783,\n                486094, 486095, 486096, 489317, 489318, 489319, 493428, 504300, 506968, 508160,\n                513213, 520058, 521076, 524130, 524514, 529415, 529741, 530060, 530906, 531095,\n                531196, 532013, 535825, 535989, 536023, 537767, 539931, 543085, 543357, 549760,\n                554180, 557606, 558848, 585265, 588845, 588846, 588847, 588848, 588849, 588850,\n                588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120, 968201, 968202,\n                968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n            ],\n            gaps: [4, 8, 12],\n            lengths: [16, 18, 19],\n            code: {\n                name: 'CVV',\n                size: 3,\n            },\n        });\n    }\n\n    private _getCardCodeSchema(): StringSchema {\n        return string()\n            .required('CVV is required')\n            .test({\n                message: 'CVV must be valid',\n                name: 'invalid_card_code',\n                test(value) {\n                    const { card } = number((this.parent as HostedInputValues).cardNumber || '');\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    private _getCardExpirySchema(): StringSchema {\n        return string()\n            .required('Expiration date is required')\n            .test({\n                message: 'Expiration date must be a valid future date in MM / YY format',\n                name: 'invalid_card_expiry',\n                test: (value) => expirationDate(value).isValid,\n            });\n    }\n\n    private _getCardNameSchema(): StringSchema {\n        return string()\n            .max(200)\n            .required('Full name is required')\n            .test({\n                message: 'Credit card name must be valid',\n                name: 'invalid_card_name',\n                test: (value) => {\n                    // Get all numbers from the input value after removing whitespaces\n                    const numbers = value.replace(/\\s/g, '').match(/[0-9]+/g);\n\n                    if (!numbers?.length) {\n                        return true;\n                    }\n\n                    for (const num of numbers) {\n                        if (number(num).isValid) {\n                            return false;\n                        }\n                    }\n\n                    return true;\n                },\n            });\n    }\n\n    private _getNoteSchema(): StringSchema {\n        return string()\n            .required('Manual payment description is required')\n            .max(128, 'Payment description cannot exceed 128 letters');\n    }\n\n    private _getCardNumberSchema(): StringSchema {\n        return string()\n            .required('Credit card number is required')\n            .test({\n                message: 'Credit card number must be valid',\n                name: 'invalid_card_number',\n                test: (value) => number(value).isValid,\n            });\n    }\n\n    private _isValidationErrorType(error: any): error is { name: string } {\n        return 'name' in error && error.name !== 'ValidationError';\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { appendWww, parseUrl } from '../common/url';\nimport HostedFieldType from '../hosted-field-type';\nimport { ManualOrderPaymentRequestSender, StorefrontStoredCardRequestSender } from '../payment';\n\nimport CardExpiryFormatter from './card-expiry-formatter';\nimport CardNumberFormatter from './card-number-formatter';\nimport getHostedInputStorage from './get-hosted-input-storage';\nimport HostedAutocompleteFieldset from './hosted-autocomplete-fieldset';\nimport HostedCardExpiryInput from './hosted-card-expiry-input';\nimport HostedCardNumberInput from './hosted-card-number-input';\nimport HostedInput from './hosted-input';\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport HostedInputManualOrderPaymentHandler from './hosted-input-manual-order-payment-handler';\nimport HostedInputStoredCardHandler from './hosted-input-stored-card-handler';\nimport { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\nimport mapToAccessibilityLabel from './map-to-accessibility-label';\nimport mapToAutocompleteType from './map-to-autocomplete-type';\n\nexport default class HostedInputFactory {\n    constructor(private _parentOrigin: string, private _paymentOrigin: string) {}\n\n    create(\n        form: HTMLFormElement,\n        type: HostedFieldType,\n        styles: HostedInputStylesMap = {},\n        fontUrls: string[] = [],\n        placeholder = '',\n        accessibilityLabel: string = mapToAccessibilityLabel(type),\n    ): HostedInput {\n        const autocomplete = mapToAutocompleteType(type);\n\n        if (type === HostedFieldType.CardNumber) {\n            return this._createNumberInput(\n                type,\n                form,\n                styles,\n                fontUrls,\n                placeholder,\n                accessibilityLabel,\n                autocomplete,\n            );\n        }\n\n        if (type === HostedFieldType.CardExpiry) {\n            return this._createExpiryInput(\n                form,\n                styles,\n                fontUrls,\n                placeholder,\n                accessibilityLabel,\n                autocomplete,\n            );\n        }\n\n        return this._createInput(\n            type,\n            form,\n            styles,\n            fontUrls,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n        );\n    }\n\n    normalizeParentOrigin(origin: string): void {\n        if (this._parentOrigin === origin) {\n            return;\n        }\n\n        if (\n            this._parentOrigin !== appendWww(parseUrl(origin)).origin &&\n            origin !== appendWww(parseUrl(this._parentOrigin)).origin\n        ) {\n            return;\n        }\n\n        this._parentOrigin = origin;\n    }\n\n    getParentOrigin(): string {\n        return this._parentOrigin;\n    }\n\n    private _createExpiryInput(\n        form: HTMLFormElement,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        placeholder: string,\n        accessibilityLabel = '',\n        autocomplete = '',\n    ): HostedCardExpiryInput {\n        return new HostedCardExpiryInput(\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            new IframeEventListener(this._parentOrigin),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(),\n            this._createManualOrderPaymentHandler(),\n            this._createStoredCardHandler(),\n            new CardExpiryFormatter(),\n        );\n    }\n\n    private _createNumberInput(\n        type: HostedFieldType,\n        form: HTMLFormElement,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        placeholder: string,\n        accessibilityLabel = '',\n        autocomplete = '',\n    ): HostedCardNumberInput {\n        return new HostedCardNumberInput(\n            type,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            new IframeEventListener(this._parentOrigin),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(),\n            this._createManualOrderPaymentHandler(),\n            this._createStoredCardHandler(),\n            new HostedAutocompleteFieldset(\n                form,\n                [HostedFieldType.CardCode, HostedFieldType.CardExpiry, HostedFieldType.CardName],\n                new HostedInputAggregator(window.parent),\n            ),\n            new CardNumberFormatter(),\n        );\n    }\n\n    private _createInput(\n        type: HostedFieldType,\n        form: HTMLFormElement,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        placeholder: string,\n        accessibilityLabel = '',\n        autocomplete = '',\n    ): HostedInput {\n        return new HostedInput(\n            type,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            new IframeEventListener(this._parentOrigin),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(),\n            this._createManualOrderPaymentHandler(),\n            this._createStoredCardHandler(),\n        );\n    }\n\n    private _createManualOrderPaymentHandler(): HostedInputManualOrderPaymentHandler {\n        return new HostedInputManualOrderPaymentHandler(\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(),\n            getHostedInputStorage(),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new ManualOrderPaymentRequestSender(createRequestSender(), this._paymentOrigin),\n        );\n    }\n\n    private _createStoredCardHandler(): HostedInputStoredCardHandler {\n        return new HostedInputStoredCardHandler(\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new StorefrontStoredCardRequestSender(createRequestSender()),\n        );\n    }\n}\n","import HostedFieldType from '../hosted-field-type';\n\nexport default function mapToAccessibilityLabel(type: HostedFieldType): string {\n    switch (type) {\n        case HostedFieldType.CardCode:\n            return 'CVC';\n\n        case HostedFieldType.CardExpiry:\n            return 'Expiration';\n\n        case HostedFieldType.CardName:\n            return 'Name on card';\n\n        case HostedFieldType.CardNumber:\n            return 'Credit card number';\n\n        case HostedFieldType.Note:\n            return 'Payment note';\n\n        case HostedFieldType.Hidden:\n            return 'Hidden field';\n    }\n}\n","import { StandardError } from '../common/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { fromEvent } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { InvalidHostedFormConfigError } from '../errors';\nimport {\n    HostedFieldAttachEvent,\n    HostedFieldEventMap,\n    HostedFieldEventType,\n} from '../hosted-field-events';\n\nimport HostedInput from './hosted-input';\nimport HostedInputFactory from './hosted-input-factory';\nimport HostedInputStorage from './hosted-input-storage';\n\ninterface EventTargetLike<TEvent> {\n    addListener(eventName: string, handler: (event: TEvent) => void): void;\n    removeListener(eventName: string, handler: (event: TEvent) => void): void;\n}\n\nexport default class HostedInputInitializer {\n    constructor(\n        private _factory: HostedInputFactory,\n        private _storage: HostedInputStorage,\n        private _eventListener: IframeEventListener<HostedFieldEventMap>,\n    ) {}\n\n    initialize(containerId: string, nonce?: string): Promise<HostedInput> {\n        if (nonce) {\n            this._storage.setNonce(nonce);\n        }\n\n        const form = this._createFormContainer(containerId);\n\n        this._resetPageStyles(containerId);\n        this._eventListener.listen();\n\n        return fromEvent<HostedFieldAttachEvent>(\n            this._eventListener as EventTargetLike<HostedFieldAttachEvent>,\n            HostedFieldEventType.AttachRequested,\n        )\n            .pipe(\n                map(({ payload }) => {\n                    const { accessibilityLabel, fontUrls, placeholder, styles, origin, type } =\n                        payload;\n\n                    if (origin) {\n                        this._factory.normalizeParentOrigin(origin);\n                    }\n\n                    const field = this._factory.create(\n                        form,\n                        type,\n                        styles,\n                        fontUrls,\n                        placeholder,\n                        accessibilityLabel,\n                    );\n\n                    field.attach();\n\n                    return field;\n                }),\n                take(1),\n            )\n            .toPromise();\n    }\n\n    private _resetPageStyles(containerId: string) {\n        const html = document.querySelector('html');\n        const body = document.querySelector('body');\n        const container = document.getElementById(containerId);\n\n        [html, body, container].forEach((node) => {\n            if (!node) {\n                return;\n            }\n\n            node.style.height = '100%';\n            node.style.width = '100%';\n            node.style.overflow = 'hidden';\n            node.style.padding = '0';\n            node.style.margin = '0';\n        });\n    }\n\n    private _createFormContainer(containerId: string): HTMLFormElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        const form = document.createElement('form');\n        const button = document.createElement('button');\n\n        form.noValidate = true;\n        form.style.height = '100%';\n        form.style.width = '100%';\n        button.style.display = 'none';\n\n        container.appendChild(form);\n        form.appendChild(button);\n\n        return form;\n    }\n}\n","import { IframeEventListener } from '../common/iframe';\nimport { HostedFieldEventMap } from '../hosted-field-events';\n\nimport getHostedInputStorage from './get-hosted-input-storage';\nimport HostedInput from './hosted-input';\nimport HostedInputFactory from './hosted-input-factory';\nimport HostedInputInitializer from './hosted-input-initializer';\nimport HostedInputOptions from './hosted-input-options';\n\nexport default function initializeHostedInput(options: HostedInputOptions): Promise<HostedInput> {\n    const { containerId, nonce, parentOrigin, paymentOrigin } = options;\n    const initializer = new HostedInputInitializer(\n        new HostedInputFactory(parentOrigin, paymentOrigin),\n        getHostedInputStorage(),\n        new IframeEventListener<HostedFieldEventMap>(parentOrigin),\n    );\n\n    return initializer.initialize(containerId, nonce);\n}\n","import { IframeEventPoster } from '../common/iframe';\n\nimport { HostedInputAttachErrorEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\n\nconst poster = new IframeEventPoster<HostedInputAttachErrorEvent>('*', window.parent);\n\nexport default function notifyInitializeError(error: HostedInputInitializeErrorData): void {\n    poster.post({\n        type: HostedInputEventType.AttachFailed,\n        payload: { error },\n    });\n}\n"],"names":["StandardError","Error","constructor","message","super","name","type","object","prototype","Object","setPrototypeOf","__proto__","this","captureStackTrace","stack","InvalidArgumentError","parseUrl","url","test","anchor","document","createElement","href","port","indexOf","hostname","hash","origin","protocol","pathname","search","appendWww","replace","bindMethodDecorator","_","key","descriptor","value","method","get","boundMethod","bind","defineProperty","set","isIframeEvent","IframeEventListener","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","window","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","index","splice","trigger","event","context","forEach","messageEvent","data","target","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","HostedInputStorage","setNonce","nonce","_nonce","getNonce","storage","getHostedInputStorage","IframeEventPoster","targetOrigin","_targetWindow","_context","_targetOrigin","post","options","targetWindow","result","fromEvent","pipe","filter","successType","errorType","map","take","toPromise","postMessage","setTarget","setContext","HostedFieldType","ContentType","InstrumentType","OfflinePaymentMethods","OfflinePaymentMethodTypes","offlinePaymentMethodTypeMap","BankDeposit","Cheque","Cod","InStore","MoneyOrder","isOfflinePaymentMethodId","id","values","includes","ManualOrderPaymentRequestSender","_requestSender","_paymentOrigin","submitPayment","requestInitializationData","instrumentFormData","paymentMethodId","paymentSessionToken","instrument","ManualPayment","note","expiryMonth","expiryYear","cardExpiry","split","Card","cardName","number","cardNumber","expires","month","Number","trim","year","verification_value","cardCode","undefined","headers","Accept","Json","body","payment_method_id","form_nonce","HostedFieldEventType","HostedInputEventType","StorefrontStoredCardRequestSender","submitPaymentInstrument","storeInstrumentFormData","providerId","currencyCode","paymentsUrl","shopperId","storeHash","vaultToken","billingAddress","defaultInstrument","Authorization","JSON","stringify","cardholder_name","cardholderName","expiry_month","expiry_year","verificationValue","billing_address","email","address1","address2","city","postal_code","postalCode","country_code","countryCode","company","first_name","firstName","last_name","lastName","phone","stateOrProvinceCode","state_or_province_code","provider_id","default_instrument","currency_code","CardExpiryFormatter","format","RegExp","trimmedMonth","slice","trimmedYear","length","toObject","CardNumberFormatter","card","maxLength","max","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","reduce","output","join","mapToAutocompleteType","CardCode","CardExpiry","CardName","CardNumber","HostedAutocompleteFieldset","_form","_fieldTypes","_inputAggregator","_handleChange","targetInput","targetHostedInput","getInputs","find","input","_getAutocompleteElementId","getType","setValue","_inputs","_createInput","attach","appendChild","detach","parentElement","removeChild","autocomplete","tabIndex","style","position","opacity","zIndex","kebabCase","HostedInput","_type","_placeholder","_accessibilityLabel","_autocomplete","_styles","_fontUrls","_eventListener","_eventPoster","_inputValidator","_manualOrderPaymentHandler","_storedCardHandler","_isTouched","_handleInput","_processChange","_handleBlur","_applyStyles","default","_validateForm","Blurred","payload","fieldType","_handleFocus","focus","Focused","_handleValidate","_handleSubmit","preventDefault","Entered","_forceFocusToInput","activeElement","navigator","userAgent","toLowerCase","_input","setAttribute","setSelectionRange","ValidateRequested","SubmitManualOrderRequested","handle","StoredCardRequested","_configureInput","getValue","isTouched","_loadFonts","parent","hostedInput","AttachSucceeded","_unloadFonts","_formatValue","_notifyChange","_value","Changed","backgroundColor","border","display","height","margin","outline","padding","width","placeholder","inputMode","pattern","styles","allowedStyles","color","fontFamily","fontSize","fontWeight","keys","_fontLinks","querySelector","link","rel","head","getInputValues","results","validate","isValid","error","Validated","_previousValue","HostedCardExpiryInput","form","accessibilityLabel","fontUrls","eventListener","eventPoster","inputAggregator","inputValidator","manualOrderPaymentHandler","storedCardHandler","_formatter","HostedCardNumberInput","_autocompleteFieldset","cardInfo","prevCardInfo","CardTypeChanged","cardType","unformattedPreviousValue","bin","isPotentiallyValid","substr","BinChanged","selectionEnd","formattedValue","HostedInputAggregator","_parentWindow","Array","call","frames","frame","DOMException","InvalidHostedFormValueError","errors","flatMap","fieldErrors","HostedInputManualOrderPaymentHandler","_inputStorage","_manualOrderPaymentRequestSender","SubmitManualOrderFailed","code","snakeCase","response","isFailure","isString","isError","isSuccessfulOfflineOrder","isSuccessfulAsyncOrder","isSuccess","SubmitManualOrderSucceeded","_isPaymentErrorResponse","_isErrorResponse","HostedInputStoredCardHandler","_storedCardRequestSender","fields","StoredCardFailed","StoredCardSucceeded","HostedInputValidator","_completeSchema","_getCardCodeSchema","_getCardExpirySchema","_getCardNameSchema","_getCardNumberSchema","_getNoteSchema","_configureCardValidator","schemas","requiredField","hasOwnProperty","abortEarly","_isValidationErrorType","inner","innerError","path","discoverInfo","getTypeInfo","visaInfo","updateCard","patterns","addCard","niceType","size","string","required","cvv","expirationDate","numbers","match","num","HostedInputFactory","_parentOrigin","create","Note","Hidden","mapToAccessibilityLabel","_createNumberInput","_createExpiryInput","normalizeParentOrigin","getParentOrigin","_createManualOrderPaymentHandler","_createStoredCardHandler","createRequestSender","InvalidHostedFormConfigError","HostedInputInitializer","_factory","_storage","initialize","containerId","_createFormContainer","_resetPageStyles","AttachRequested","field","getElementById","node","overflow","container","button","noValidate","initializeHostedInput","parentOrigin","paymentOrigin","poster","notifyInitializeError","AttachFailed"],"sourceRoot":""}