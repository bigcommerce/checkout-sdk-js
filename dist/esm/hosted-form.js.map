{"version":3,"file":"hosted-form.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/./packages/utility/src/bind-decorator/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/get-hosted-input-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/storefront-stored-card-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/map-to-autocomplete-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-autocomplete-fieldset.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-card-expiry-input.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-card-number-input.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-aggregator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-payment-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-stored-card-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/map-to-accessibility-label.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/initialize-hosted-input.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/notify-initialize-error.ts"],"sourcesContent":["/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { appendWww, parseUrl } from '../url';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<\n    TEventMap extends IframeEventMap<keyof TEventMap>,\n    TContext = undefined,\n> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap, TContext>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType], context?: TContext): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => (context ? listener(event, context) : listener(event)));\n    }\n\n    @bind\n    private _handleMessage(messageEvent: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(messageEvent.origin) === -1 ||\n            !isIframeEvent(messageEvent.data as TEventMap[keyof TEventMap], messageEvent.data.type)\n        ) {\n            return;\n        }\n\n        const { context, ...event } = messageEvent.data;\n\n        this.trigger(event, context);\n    }\n}\n\nexport type EventListeners<TEventMap, TContext = undefined> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key], context?: TContext) => void>;\n};\n","export default class HostedInputStorage {\n    private _nonce?: string;\n\n    setNonce(nonce: string): void {\n        this._nonce = nonce;\n    }\n\n    getNonce(): string | undefined {\n        return this._nonce;\n    }\n}\n","import HostedInputStorage from './hosted-input-storage';\n\nlet storage: HostedInputStorage | null;\n\nexport default function getHostedInputStorage(): HostedInputStorage {\n    storage = storage || new HostedInputStorage();\n\n    return storage;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent, TContext = undefined> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window, private _context?: TContext) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage({ ...event, context: this._context }, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n\n    setContext(context: TContext) {\n        this._context = context;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    GOOGLEPAY_WORLDPAYACCESS = \"googlepayworldpayaccess\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\"\n}\nexport default CheckoutButtonMethodType;\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentProviderCustomer,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingPaymentProviderCustomer:\n            return 'Unable to proceed because payment provider customer is unavailable.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { OrderBillingAddress } from '../order-billing-address/order-billing-address-state';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: OrderBillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","enum HostedFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport default HostedFieldType;\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentForm,\n} from '../hosted-form/stored-card-hosted-form-type';\n\nexport default class StorefrontStoredCardRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    async submitPaymentInstrument(\n        requestInitializationData: StoredCardHostedFormData,\n        storeInstrumentFormData: StoredCardHostedFormInstrumentForm,\n    ): Promise<void> {\n        const { providerId, currencyCode, paymentsUrl, shopperId, storeHash, vaultToken } =\n            requestInitializationData;\n\n        const { billingAddress, instrument, defaultInstrument } = storeInstrumentFormData;\n        const url = `${paymentsUrl}/stores/${storeHash}/customers/${shopperId}/stored_instruments`;\n        const options = {\n            headers: {\n                Authorization: vaultToken,\n                Accept: 'application/vnd.bc.v1+json',\n                'Content-Type': 'application/vnd.bc.v1+json',\n            },\n            body: JSON.stringify({\n                instrument: {\n                    type: instrument.type,\n                    cardholder_name: instrument.cardholderName,\n                    number: instrument.number,\n                    expiry_month: instrument.expiryMonth,\n                    expiry_year: instrument.expiryYear,\n                    verification_value: instrument.verificationValue,\n                },\n                billing_address: {\n                    email: billingAddress.email,\n                    address1: billingAddress.address1,\n                    ...(billingAddress.address2 && { address2: billingAddress.address2 }),\n                    city: billingAddress.city,\n                    postal_code: billingAddress.postalCode,\n                    country_code: billingAddress.countryCode,\n                    ...(billingAddress.company && { company: billingAddress.company }),\n                    first_name: billingAddress.firstName,\n                    last_name: billingAddress.lastName,\n                    ...(billingAddress.phone && { phone: billingAddress.phone }),\n                    ...(billingAddress.stateOrProvinceCode && {\n                        state_or_province_code: billingAddress.stateOrProvinceCode,\n                    }),\n                },\n                provider_id: providerId,\n                default_instrument: defaultInstrument,\n                currency_code: currencyCode,\n            }),\n        };\n\n        await this._requestSender.post<void>(url, options);\n    }\n}\n","import HostedFieldType from '../hosted-field-type';\n\nexport default function mapToAutocompleteType(type: HostedFieldType): string {\n    switch (type) {\n        case HostedFieldType.CardCode:\n            return 'cc-csc';\n\n        case HostedFieldType.CardExpiry:\n            return 'cc-exp';\n\n        case HostedFieldType.CardName:\n            return 'cc-name';\n\n        case HostedFieldType.CardNumber:\n            return 'cc-number';\n\n        default:\n            return '';\n    }\n}\n","import { kebabCase } from 'lodash';\n\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport mapToAutocompleteType from './map-to-autocomplete-type';\n\nexport default class HostedAutocompleteFieldset {\n    private _inputs: HTMLInputElement[];\n\n    constructor(\n        private _form: HTMLFormElement,\n        private _fieldTypes: HostedFieldType[],\n        private _inputAggregator: HostedInputAggregator,\n    ) {\n        this._inputs = this._fieldTypes.map((type) => this._createInput(type));\n    }\n\n    attach(): void {\n        this._inputs.forEach((input) => this._form.appendChild(input));\n    }\n\n    detach(): void {\n        this._inputs.forEach((input) => {\n            if (!input.parentElement) {\n                return;\n            }\n\n            input.parentElement.removeChild(input);\n        });\n    }\n\n    private _createInput(type: HostedFieldType): HTMLInputElement {\n        const input = document.createElement('input');\n\n        input.autocomplete = mapToAutocompleteType(type);\n        input.id = this._getAutocompleteElementId(type);\n        input.tabIndex = -1;\n        input.style.position = 'absolute';\n        input.style.opacity = '0';\n        input.style.zIndex = '-1';\n\n        input.addEventListener('change', this._handleChange);\n\n        return input;\n    }\n\n    private _handleChange: (event: Event) => void = (event) => {\n        const targetInput = event.target as HTMLInputElement;\n\n        if (!targetInput) {\n            throw new Error('Unable to get a reference to the target of the change event.');\n        }\n\n        const targetHostedInput = this._inputAggregator\n            .getInputs()\n            .find((input) => this._getAutocompleteElementId(input.getType()) === targetInput.id);\n\n        if (!targetHostedInput) {\n            return;\n        }\n\n        targetHostedInput.setValue(targetInput.value);\n    };\n\n    private _getAutocompleteElementId(type: HostedFieldType): string {\n        return `autocomplete-${kebabCase(type)}`;\n    }\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n    StoredCardRequested = 'HOSTED_FIELD:STORED_CARD_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n    [HostedFieldEventType.StoredCardRequested]: HostedFieldStoredCardRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent\n    | HostedFieldStoredCardRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n\nexport interface HostedFieldStoredCardRequestEvent {\n    type: HostedFieldEventType.StoredCardRequested;\n    payload: {\n        data: StoredCardHostedFormData;\n        fields: StoredCardHostedFormInstrumentFields;\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentErrorData,\n    PaymentErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HostedFieldType from '../hosted-field-type';\nimport { HostedFormErrorsData } from '../hosted-form-options';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n    StoredCardSucceeded = 'HOSTED_INPUT:STORED_CARD_SUCCEEDED',\n    StoredCardFailed = 'HOSTED_INPUT:STORED_CARD_FAILED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n    [HostedInputEventType.StoredCardFailed]: HostedInputStoredCardErrorEvent;\n    [HostedInputEventType.StoredCardSucceeded]: HostedInputStoredCardSucceededEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent\n    | HostedInputStoredCardSucceededEvent\n    | HostedInputStoredCardErrorEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputStoredCardSucceededEvent {\n    type: HostedInputEventType.StoredCardSucceeded;\n}\n\nexport interface HostedInputStoredCardErrorEvent {\n    type: HostedInputEventType.StoredCardFailed;\n    payload?: {\n        errors?: string[];\n        error?: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n        errors?: HostedFormErrorsData;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { kebabCase } from 'lodash';\n\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { parseUrl } from '../../common/url';\nimport {\n    HostedFieldEventMap,\n    HostedFieldEventType,\n    HostedFieldValidateRequestEvent,\n} from '../hosted-field-events';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputPaymentHandler from './hosted-input-payment-handler';\nimport HostedInputStoredCardHandler from './hosted-input-stored-card-handler';\nimport HostedInputStyles, { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\nimport HostedInputWindow from './hosted-input-window';\n\nexport default class HostedInput {\n    protected _input: HTMLInputElement;\n    protected _previousValue?: string;\n    private _fontLinks?: HTMLLinkElement[];\n    private _isTouched = false;\n\n    /**\n     * @internal\n     */\n    constructor(\n        protected _type: HostedFieldType,\n        protected _form: HTMLFormElement,\n        protected _placeholder: string,\n        protected _accessibilityLabel: string,\n        protected _autocomplete: string,\n        protected _styles: HostedInputStylesMap,\n        protected _fontUrls: string[],\n        protected _eventListener: IframeEventListener<HostedFieldEventMap>,\n        protected _eventPoster: IframeEventPoster<HostedInputEvent>,\n        protected _inputAggregator: HostedInputAggregator,\n        protected _inputValidator: HostedInputValidator,\n        protected _paymentHandler: HostedInputPaymentHandler,\n        protected _storedCardHandler: HostedInputStoredCardHandler,\n    ) {\n        this._input = document.createElement('input');\n\n        this._input.addEventListener('input', this._handleInput);\n        this._input.addEventListener('blur', this._handleBlur);\n        this._input.addEventListener('focus', this._handleFocus);\n        this._eventListener.addListener(\n            HostedFieldEventType.ValidateRequested,\n            this._handleValidate,\n        );\n        this._eventListener.addListener(\n            HostedFieldEventType.SubmitRequested,\n            this._paymentHandler.handle,\n        );\n        this._eventListener.addListener(\n            HostedFieldEventType.StoredCardRequested,\n            this._storedCardHandler.handle,\n        );\n\n        this._configureInput();\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    getValue(): string {\n        return this._input.value;\n    }\n\n    setValue(value: string): void {\n        this._processChange(value);\n    }\n\n    isTouched(): boolean {\n        return this._isTouched;\n    }\n\n    attach(): void {\n        this._form.appendChild(this._input);\n        this._form.addEventListener('submit', this._handleSubmit);\n\n        this._loadFonts();\n\n        this._eventPoster.setTarget(window.parent);\n        this._eventListener.listen();\n\n        // fixes the issue on Firefox/Safari where the input doesn't focus properly\n        window.addEventListener('focus', this._forceFocusToInput);\n\n        // Assign itself to the global so it can be accessed by its sibling frames\n        (window as unknown as HostedInputWindow).hostedInput = this;\n\n        this._eventPoster.post({ type: HostedInputEventType.AttachSucceeded });\n    }\n\n    detach(): void {\n        if (this._input.parentElement) {\n            this._input.parentElement.removeChild(this._input);\n        }\n\n        this._form.removeEventListener('submit', this._handleSubmit);\n        this._unloadFonts();\n\n        window.removeEventListener('focus', this._forceFocusToInput);\n\n        this._eventListener.stopListen();\n    }\n\n    protected _formatValue(value: string): void {\n        this._input.value = value;\n    }\n\n    protected _notifyChange(_value: string): void {\n        this._eventPoster.post({\n            type: HostedInputEventType.Changed,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    }\n\n    private _configureInput(): void {\n        this._input.style.backgroundColor = 'transparent';\n        this._input.style.border = '0';\n        this._input.style.display = 'block';\n        this._input.style.height = '100%';\n        this._input.style.margin = '0';\n        this._input.style.outline = 'none';\n        this._input.style.padding = '0';\n        this._input.style.width = '100%';\n        this._input.id = kebabCase(this._type);\n        this._input.placeholder = this._placeholder;\n        this._input.autocomplete = this._autocomplete;\n\n        this._input.setAttribute('aria-label', this._accessibilityLabel);\n\n        this._applyStyles(this._styles.default);\n\n        switch (this._input.id) {\n            case 'card-code':\n            case 'card-expiry':\n            case 'card-number':\n                this._input.type = 'text';\n                this._input.inputMode = 'numeric';\n                this._input.pattern = '[0-9]*';\n                break;\n\n            case 'card-name':\n                this._input.type = 'text';\n                this._input.inputMode = 'text';\n                break;\n        }\n    }\n\n    private _applyStyles(styles: HostedInputStyles = {}): void {\n        const allowedStyles: {\n            [key in keyof Required<HostedInputStyles>]: HostedInputStyles[key];\n        } = {\n            color: styles.color,\n            fontFamily: styles.fontFamily,\n            fontSize: styles.fontSize,\n            fontWeight: styles.fontWeight,\n        };\n        const styleKeys = Object.keys(allowedStyles) as Array<keyof HostedInputStyles>;\n\n        styleKeys.forEach((key) => {\n            if (!allowedStyles[key]) {\n                return;\n            }\n\n            this._input.style[key] = allowedStyles[key] || '';\n        });\n    }\n\n    private _loadFonts(): void {\n        if (this._fontLinks) {\n            return;\n        }\n\n        this._fontLinks = this._fontUrls\n            .filter((url) => parseUrl(url).hostname === 'fonts.googleapis.com')\n            .filter((url) => !document.querySelector(`link[href='${url}'][rel='stylesheet']`))\n            .map((url) => {\n                const link = document.createElement('link');\n\n                link.rel = 'stylesheet';\n                link.href = url;\n\n                document.head.appendChild(link);\n\n                return link;\n            });\n    }\n\n    private _unloadFonts(): void {\n        if (!this._fontLinks) {\n            return;\n        }\n\n        this._fontLinks.forEach((link) => {\n            if (!link.parentElement) {\n                return;\n            }\n\n            link.parentElement.removeChild(link);\n        });\n\n        this._fontLinks = undefined;\n    }\n\n    private async _validateForm(): Promise<void> {\n        const values = this._inputAggregator.getInputValues();\n        const results = await this._inputValidator.validate(values);\n\n        if (results.isValid) {\n            this._applyStyles(this._styles.default);\n        } else {\n            this._applyStyles(this._styles.error);\n        }\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Validated,\n            payload: results,\n        });\n    }\n\n    private _processChange(value: string): void {\n        if (value === this._previousValue) {\n            return;\n        }\n\n        this._isTouched = true;\n\n        this._formatValue(value);\n        this._validateForm();\n        this._notifyChange(value);\n\n        this._previousValue = value;\n    }\n\n    private _handleInput: (event: Event) => void = (event) => {\n        const input = event.target as HTMLInputElement;\n\n        this._processChange(input.value);\n    };\n\n    private _handleBlur: (event: Event) => void = () => {\n        this._applyStyles(this._styles.default);\n        this._validateForm();\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Blurred,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    };\n\n    private _handleFocus: (event: Event) => void = () => {\n        this._applyStyles(this._styles.focus);\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Focused,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    };\n\n    private _handleValidate: (event: HostedFieldValidateRequestEvent) => void = () => {\n        this._validateForm();\n    };\n\n    private _handleSubmit: (event: Event) => void = (event) => {\n        event.preventDefault();\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Entered,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    };\n\n    private _forceFocusToInput = (): void => {\n        if (document.activeElement === document.body) {\n            const browserName = navigator.userAgent.toLowerCase();\n\n            if (browserName.indexOf('safari') > -1) {\n                if (this._input.value === '') {\n                    this._input.setAttribute('value', ' ');\n                    this._input.setSelectionRange(0, 1);\n                    this._input.setAttribute('value', '');\n                }\n            } else {\n                this._input.focus();\n            }\n        }\n    };\n}\n","import { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { HostedFieldEventMap } from '../hosted-field-events';\nimport HostedFieldType from '../hosted-field-type';\n\nimport CardExpiryFormatter from './card-expiry-formatter';\nimport HostedInput from './hosted-input';\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent } from './hosted-input-events';\nimport HostedInputPaymentHandler from './hosted-input-payment-handler';\nimport HostedInputStoredCardHandler from './hosted-input-stored-card-handler';\nimport { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedCardExpiryInput extends HostedInput {\n    /**\n     * @internal\n     */\n    constructor(\n        form: HTMLFormElement,\n        placeholder: string,\n        accessibilityLabel: string,\n        autocomplete: string,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        eventListener: IframeEventListener<HostedFieldEventMap>,\n        eventPoster: IframeEventPoster<HostedInputEvent>,\n        inputAggregator: HostedInputAggregator,\n        inputValidator: HostedInputValidator,\n        paymentHandler: HostedInputPaymentHandler,\n        storedCardHandler: HostedInputStoredCardHandler,\n        private _formatter: CardExpiryFormatter,\n    ) {\n        super(\n            HostedFieldType.CardExpiry,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            eventListener,\n            eventPoster,\n            inputAggregator,\n            inputValidator,\n            paymentHandler,\n            storedCardHandler,\n        );\n    }\n\n    protected _formatValue(value: string): void {\n        this._input.value = this._formatter.format(value);\n    }\n}\n","import { number } from 'card-validator';\nimport { get } from 'lodash';\n\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { HostedFieldEventMap } from '../hosted-field-events';\nimport HostedFieldType from '../hosted-field-type';\n\nimport CardNumberFormatter from './card-number-formatter';\nimport HostedAutocompleteFieldset from './hosted-autocomplete-fieldset';\nimport HostedInput from './hosted-input';\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputPaymentHandler from './hosted-input-payment-handler';\nimport HostedInputStoredCardHandler from './hosted-input-stored-card-handler';\nimport { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedCardNumberInput extends HostedInput {\n    /**\n     * @internal\n     */\n    constructor(\n        type: HostedFieldType,\n        form: HTMLFormElement,\n        placeholder: string,\n        accessibilityLabel: string,\n        autocomplete: string,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        eventListener: IframeEventListener<HostedFieldEventMap>,\n        eventPoster: IframeEventPoster<HostedInputEvent>,\n        inputAggregator: HostedInputAggregator,\n        inputValidator: HostedInputValidator,\n        paymentHandler: HostedInputPaymentHandler,\n        storedCardHandler: HostedInputStoredCardHandler,\n        private _autocompleteFieldset: HostedAutocompleteFieldset,\n        private _formatter: CardNumberFormatter,\n    ) {\n        super(\n            type,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            eventListener,\n            eventPoster,\n            inputAggregator,\n            inputValidator,\n            paymentHandler,\n            storedCardHandler,\n        );\n    }\n\n    attach(): void {\n        super.attach();\n\n        this._autocompleteFieldset.attach();\n    }\n\n    protected _notifyChange(value: string): void {\n        const cardInfo = number(value).card;\n        const prevCardInfo = this._previousValue && number(this._previousValue).card;\n\n        if (get(prevCardInfo, 'type') !== get(cardInfo, 'type')) {\n            this._eventPoster.post({\n                type: HostedInputEventType.CardTypeChanged,\n                payload: {\n                    cardType: cardInfo ? cardInfo.type : undefined,\n                },\n            });\n        }\n\n        const unformattedValue = this._formatter.unformat(value);\n        const unformattedPreviousValue = this._previousValue\n            ? this._formatter.unformat(this._previousValue)\n            : '';\n\n        const bin =\n            unformattedValue.length >= 6 && number(unformattedValue).isPotentiallyValid\n                ? unformattedValue.substr(0, 6)\n                : '';\n        const prevBin =\n            unformattedPreviousValue.length >= 6 ? unformattedPreviousValue.substr(0, 6) : '';\n\n        if (bin !== prevBin) {\n            this._eventPoster.post({\n                type: HostedInputEventType.BinChanged,\n                payload: { bin },\n            });\n        }\n    }\n\n    protected _formatValue(value: string): void {\n        const selectionEnd = this._input.selectionEnd;\n        const formattedValue = this._formatter.format(value);\n\n        if (selectionEnd === value.length && value.length < formattedValue.length) {\n            this._input.setSelectionRange(formattedValue.length, formattedValue.length);\n        } else {\n            this._input.setSelectionRange(selectionEnd || 0, selectionEnd || 0);\n        }\n\n        this._input.value = formattedValue;\n    }\n}\n","import HostedInput from './hosted-input';\nimport HostedInputValues from './hosted-input-values';\nimport HostedInputWindow from './hosted-input-window';\n\nexport default class HostedInputAggregator {\n    constructor(private _parentWindow: Window) {}\n\n    getInputs(filter?: (field: HostedInput) => boolean): HostedInput[] {\n        return Array.prototype.slice\n            .call(this._parentWindow.frames)\n            .reduce((result: Window[], frame: Window) => {\n                try {\n                    const input = (frame as HostedInputWindow).hostedInput;\n\n                    if (!input || (filter && !filter(input))) {\n                        return result;\n                    }\n\n                    return [...result, input];\n                } catch (error) {\n                    if (error instanceof DOMException) {\n                        return result;\n                    }\n\n                    // IE11 doesn't throw `DOMException`\n                    if (error instanceof Error && error.message === 'Permission denied') {\n                        return result;\n                    }\n\n                    throw error;\n                }\n            }, []);\n    }\n\n    getInputValues(filter?: (field: HostedInput) => boolean): HostedInputValues {\n        return this.getInputs(filter).reduce((result, input) => {\n            return {\n                ...result,\n                [input.getType()]: input.getValue(),\n            };\n        }, {} as HostedInputValues);\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { snakeCase } from 'lodash';\n\nimport { PaymentErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventPoster } from '../../common/iframe';\nimport { PaymentRequestSender, PaymentRequestTransformer } from '../../payment';\nimport { InvalidHostedFormValueError } from '../errors';\nimport { HostedFieldSubmitRequestEvent } from '../hosted-field-events';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputStorage from './hosted-input-storage';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedInputPaymentHandler {\n    constructor(\n        private _inputAggregator: HostedInputAggregator,\n        private _inputValidator: HostedInputValidator,\n        private _inputStorage: HostedInputStorage,\n        private _eventPoster: IframeEventPoster<HostedInputEvent>,\n        private _paymentRequestSender: PaymentRequestSender,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n    ) {}\n\n    handle: (event: HostedFieldSubmitRequestEvent) => Promise<void> = async ({\n        payload: { data },\n    }) => {\n        const values = this._inputAggregator.getInputValues();\n        const results = await this._inputValidator.validate(values);\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Validated,\n            payload: results,\n        });\n\n        if (!results.isValid) {\n            const error = new InvalidHostedFormValueError(results.errors);\n\n            return this._eventPoster.post({\n                type: HostedInputEventType.SubmitFailed,\n                payload: {\n                    error: { code: snakeCase(error.name), message: error.message },\n                },\n            });\n        }\n\n        try {\n            const response = await this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transformWithHostedFormData(\n                    values,\n                    data,\n                    this._inputStorage.getNonce() || '',\n                ),\n            );\n\n            this._eventPoster.post({\n                type: HostedInputEventType.SubmitSucceeded,\n                payload: { response },\n            });\n        } catch (error) {\n            if (this._isPaymentErrorResponse(error)) {\n                this._eventPoster.post({\n                    type: HostedInputEventType.SubmitFailed,\n                    payload: { error: error.body.errors[0], response: error },\n                });\n            } else if (this._isErrorResponse(error)) {\n                this._eventPoster.post({\n                    type: HostedInputEventType.SubmitFailed,\n                    payload: { error: { code: snakeCase(error.name), message: error.message } },\n                });\n            }\n        }\n    };\n\n    private _isPaymentErrorResponse(response: any): response is Response<PaymentErrorResponseBody> {\n        const { body: { errors = [] } = {} } = response || {};\n\n        return (\n            typeof (errors[0] && errors[0].code) === 'string' &&\n            typeof (errors[0] && errors[0].message) === 'string'\n        );\n    }\n\n    private _isErrorResponse(error: unknown): error is { name?: string; message?: string } {\n        return (\n            typeof error === 'object' &&\n            error !== null &&\n            (('name' in error && typeof (error as { name: unknown }).name === 'string') ||\n                !('name' in error)) &&\n            (('message' in error && typeof (error as { message: unknown }).message === 'string') ||\n                !('message' in error))\n        );\n    }\n}\n","import { IframeEventPoster } from '../../common/iframe';\nimport { StorefrontStoredCardRequestSender } from '../../payment';\nimport { HostedFieldStoredCardRequestEvent } from '../hosted-field-events';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedInputStoredCardHandler {\n    constructor(\n        private _inputAggregator: HostedInputAggregator,\n        private _inputValidator: HostedInputValidator,\n        private _eventPoster: IframeEventPoster<HostedInputEvent>,\n        private _storedCardRequestSender: StorefrontStoredCardRequestSender,\n    ) {}\n\n    handle: (event: HostedFieldStoredCardRequestEvent) => Promise<void> = async (event) => {\n        const {\n            payload: { data, fields },\n        } = event;\n        const values = this._inputAggregator.getInputValues();\n        const results = await this._inputValidator.validate(values);\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Validated,\n            payload: results,\n        });\n\n        if (!results.isValid) {\n            return this._eventPoster.post({\n                type: HostedInputEventType.StoredCardFailed,\n            });\n        }\n\n        const { defaultInstrument, ...billingAddress } = fields;\n\n        const [expiryMonth, expiryYear] = values.cardExpiry ? values.cardExpiry.split('/') : [];\n\n        try {\n            await this._storedCardRequestSender.submitPaymentInstrument(data, {\n                billingAddress,\n                instrument: {\n                    type: 'card',\n                    cardholderName: values.cardName || '',\n                    number: values.cardNumber ? values.cardNumber.replace(/ /g, '') : '',\n                    expiryMonth: Number(expiryMonth.trim()),\n                    expiryYear: Number(`20${expiryYear.trim()}`),\n                    verificationValue: values.cardCode ?? '',\n                },\n                defaultInstrument,\n            });\n\n            this._eventPoster.post({\n                type: HostedInputEventType.StoredCardSucceeded,\n            });\n        } catch (error) {\n            this._eventPoster.post({\n                type: HostedInputEventType.StoredCardFailed,\n            });\n        }\n    };\n}\n","import { creditCardType, cvv, expirationDate, number } from 'card-validator';\nimport { object, ObjectShape, string, StringSchema, ValidationError } from 'yup';\n\nimport { CardInstrument } from '../../payment/instrument';\n\nimport { HostedInputValidateErrorDataMap } from './hosted-input-validate-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\nimport HostedInputValues from './hosted-input-values';\n\nexport default class HostedInputValidator {\n    private readonly _completeSchema: ObjectShape = {\n        cardCode: this._getCardCodeSchema(),\n        cardCodeVerification: this._getCardCodeVerificationSchema(),\n        cardExpiry: this._getCardExpirySchema(),\n        cardName: this._getCardNameSchema(),\n        cardNumber: this._getCardNumberSchema(),\n        cardNumberVerification: this._getCardNumberVerificationSchema(),\n    };\n\n    constructor(private _cardInstrument?: CardInstrument) {\n        this._configureCardValidator();\n    }\n\n    async validate(values: HostedInputValues): Promise<HostedInputValidateResults> {\n        const schemas: ObjectShape = {};\n        const results: HostedInputValidateResults = {\n            errors: {},\n            isValid: true,\n        };\n\n        let requiredField: keyof HostedInputValues;\n\n        for (requiredField in values) {\n            if (Object.prototype.hasOwnProperty.call(values, requiredField)) {\n                schemas[requiredField] = this._completeSchema[requiredField];\n                results.errors[requiredField] = [];\n            }\n        }\n\n        try {\n            await object(schemas).validate(values, { abortEarly: false });\n\n            return results;\n        } catch (error) {\n            if (this._isValidationErrorType(error)) {\n                throw error;\n            }\n\n            return {\n                errors: (\n                    Object.keys(results.errors) as Array<keyof HostedInputValidateErrorDataMap>\n                ).reduce(\n                    (result, fieldType) => ({\n                        ...result,\n                        [fieldType]: (error as ValidationError).inner\n                            .filter((innerError) => innerError.path === fieldType)\n                            .map((innerError) => ({\n                                fieldType: innerError.path,\n                                message: innerError.errors.join(' '),\n                                type: innerError.type,\n                            })),\n                    }),\n                    {} as HostedInputValidateErrorDataMap,\n                ),\n                isValid: false,\n            };\n        }\n    }\n\n    private _configureCardValidator(): void {\n        const discoverInfo = creditCardType.getTypeInfo('discover');\n        const jcbInfo = creditCardType.getTypeInfo('jcb');\n        const visaInfo = creditCardType.getTypeInfo('visa');\n\n        // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n        creditCardType.updateCard('visa', {\n            lengths: [13, ...(visaInfo.lengths || [])],\n        });\n\n        // Add support for 8-BIN Discover Cards.\n        creditCardType.updateCard('discover', {\n            patterns: [...(discoverInfo.patterns || []), [810, 817]],\n        });\n\n        creditCardType.addCard({\n            niceType: 'Mada',\n            type: 'mada',\n            patterns: [\n                400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817,\n                422818, 422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954,\n                440533, 440647, 440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865,\n                458456, 462220, 468540, 468541, 468542, 468543, 483010, 483011, 483012, 484783,\n                486094, 486095, 486096, 489317, 489318, 489319, 493428, 504300, 506968, 508160,\n                513213, 520058, 521076, 524130, 524514, 529415, 529741, 530060, 530906, 531095,\n                531196, 532013, 535825, 535989, 536023, 537767, 539931, 543085, 543357, 549760,\n                554180, 557606, 558848, 585265, 588845, 588846, 588847, 588848, 588849, 588850,\n                588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120, 968201, 968202,\n                968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n            ],\n            gaps: [4, 8, 12],\n            lengths: [16, 18, 19],\n            code: {\n                name: 'CVV',\n                size: 3,\n            },\n        });\n\n        // Add support WorldPayAccess and Authorize.net test cards\n        creditCardType.updateCard('jcb', {\n            patterns: [...(jcbInfo.patterns || []), 3088, 3337, 3338],\n        });\n    }\n\n    private _getCardCodeSchema(): StringSchema {\n        return string()\n            .required('CVV is required')\n            .test({\n                message: 'CVV must be valid',\n                name: 'invalid_card_code',\n                test(value) {\n                    const { card } = number((this.parent as HostedInputValues).cardNumber || '');\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    private _getCardCodeVerificationSchema(): StringSchema {\n        return string()\n            .required('CVV is required')\n            .test({\n                message: 'CVV must be valid',\n                name: 'invalid_card_code',\n                test: (value = '') => {\n                    const cardType =\n                        this._cardInstrument &&\n                        this._mapFromInstrumentCardType(this._cardInstrument.brand);\n                    const cardInfo = cardType && creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    private _getCardExpirySchema(): StringSchema {\n        return string()\n            .required('Expiration date is required')\n            .test({\n                message: 'Expiration date must be a valid future date in MM / YY format',\n                name: 'invalid_card_expiry',\n                test: (value) => expirationDate(value).isValid,\n            });\n    }\n\n    private _getCardNameSchema(): StringSchema {\n        return string()\n            .max(200)\n            .required('Full name is required')\n            .test({\n                message: 'Credit card name must be valid',\n                name: 'invalid_card_name',\n                test: (value) => {\n                    // Get all numbers from the input value after removing whitespaces\n                    const numbers = value.replace(/\\s/g, '').match(/[0-9]+/g);\n\n                    if (!numbers?.length) {\n                        return true;\n                    }\n\n                    for (const num of numbers) {\n                        if (number(num).isValid) {\n                            return false;\n                        }\n                    }\n\n                    return true;\n                },\n            });\n    }\n\n    private _getCardNumberSchema(): StringSchema {\n        return string()\n            .required('Credit card number is required')\n            .test({\n                message: 'Credit card number must be valid',\n                name: 'invalid_card_number',\n                test: (value) => number(value).isValid,\n            });\n    }\n\n    private _getCardNumberVerificationSchema(): StringSchema {\n        return string()\n            .required('Credit card number is required')\n            .test({\n                message: 'Credit card number must be valid',\n                name: 'invalid_card_number',\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: 'The card number entered does not match the card stored in your account',\n                name: 'mismatched_card_number',\n                test: (value = '') =>\n                    this._cardInstrument\n                        ? value.slice(-this._cardInstrument.last4.length) ===\n                          this._cardInstrument.last4\n                        : false,\n            });\n    }\n\n    private _mapFromInstrumentCardType(type: string): string {\n        switch (type) {\n            case 'amex':\n            case 'american_express':\n                return 'american-express';\n\n            case 'diners':\n                return 'diners-club';\n\n            default:\n                return type;\n        }\n    }\n\n    private _isValidationErrorType(error: any): error is { name: string } {\n        return 'name' in error && error.name !== 'ValidationError';\n    }\n}\n","import { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { appendWww, parseUrl } from '../../common/url';\nimport {\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n    StorefrontStoredCardRequestSender,\n} from '../../payment';\nimport { CardInstrument } from '../../payment/instrument';\nimport HostedFieldType from '../hosted-field-type';\n\nimport CardExpiryFormatter from './card-expiry-formatter';\nimport CardNumberFormatter from './card-number-formatter';\nimport getHostedInputStorage from './get-hosted-input-storage';\nimport HostedAutocompleteFieldset from './hosted-autocomplete-fieldset';\nimport HostedCardExpiryInput from './hosted-card-expiry-input';\nimport HostedCardNumberInput from './hosted-card-number-input';\nimport HostedInput from './hosted-input';\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport HostedInputPaymentHandler from './hosted-input-payment-handler';\nimport HostedInputStoredCardHandler from './hosted-input-stored-card-handler';\nimport { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\nimport mapToAccessibilityLabel from './map-to-accessibility-label';\nimport mapToAutocompleteType from './map-to-autocomplete-type';\n\nexport default class HostedInputFactory {\n    constructor(private _parentOrigin: string) {}\n\n    create(\n        form: HTMLFormElement,\n        type: HostedFieldType,\n        styles: HostedInputStylesMap = {},\n        fontUrls: string[] = [],\n        placeholder = '',\n        accessibilityLabel: string = mapToAccessibilityLabel(type),\n        cardInstrument?: CardInstrument,\n    ): HostedInput {\n        const autocomplete = mapToAutocompleteType(type);\n\n        if (type === HostedFieldType.CardNumber) {\n            return this._createNumberInput(\n                type,\n                form,\n                styles,\n                fontUrls,\n                placeholder,\n                accessibilityLabel,\n                autocomplete,\n            );\n        }\n\n        if (type === HostedFieldType.CardNumberVerification) {\n            return this._createNumberInput(\n                type,\n                form,\n                styles,\n                fontUrls,\n                placeholder,\n                accessibilityLabel,\n                autocomplete,\n                cardInstrument,\n            );\n        }\n\n        if (type === HostedFieldType.CardExpiry) {\n            return this._createExpiryInput(\n                form,\n                styles,\n                fontUrls,\n                placeholder,\n                accessibilityLabel,\n                autocomplete,\n            );\n        }\n\n        if (type === HostedFieldType.CardCodeVerification) {\n            return this._createInput(\n                type,\n                form,\n                styles,\n                fontUrls,\n                placeholder,\n                accessibilityLabel,\n                autocomplete,\n                cardInstrument,\n            );\n        }\n\n        return this._createInput(\n            type,\n            form,\n            styles,\n            fontUrls,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n        );\n    }\n\n    normalizeParentOrigin(origin: string): void {\n        if (this._parentOrigin === origin) {\n            return;\n        }\n\n        if (\n            this._parentOrigin !== appendWww(parseUrl(origin)).origin &&\n            origin !== appendWww(parseUrl(this._parentOrigin)).origin\n        ) {\n            return;\n        }\n\n        this._parentOrigin = origin;\n    }\n\n    getParentOrigin(): string {\n        return this._parentOrigin;\n    }\n\n    private _createExpiryInput(\n        form: HTMLFormElement,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        placeholder: string,\n        accessibilityLabel = '',\n        autocomplete = '',\n    ): HostedCardExpiryInput {\n        return new HostedCardExpiryInput(\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            new IframeEventListener(this._parentOrigin),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(),\n            this._createPaymentHandler(),\n            this._createStoredCardHandler(),\n            new CardExpiryFormatter(),\n        );\n    }\n\n    private _createNumberInput(\n        type: HostedFieldType,\n        form: HTMLFormElement,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        placeholder: string,\n        accessibilityLabel = '',\n        autocomplete = '',\n        cardInstrument?: CardInstrument,\n    ): HostedCardNumberInput {\n        return new HostedCardNumberInput(\n            type,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            new IframeEventListener(this._parentOrigin),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(cardInstrument),\n            this._createPaymentHandler(cardInstrument),\n            this._createStoredCardHandler(cardInstrument),\n            new HostedAutocompleteFieldset(\n                form,\n                [HostedFieldType.CardCode, HostedFieldType.CardExpiry, HostedFieldType.CardName],\n                new HostedInputAggregator(window.parent),\n            ),\n            new CardNumberFormatter(),\n        );\n    }\n\n    private _createInput(\n        type: HostedFieldType,\n        form: HTMLFormElement,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        placeholder: string,\n        accessibilityLabel = '',\n        autocomplete = '',\n        cardInstrument?: CardInstrument,\n    ): HostedInput {\n        return new HostedInput(\n            type,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            new IframeEventListener(this._parentOrigin),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(cardInstrument),\n            this._createPaymentHandler(cardInstrument),\n            this._createStoredCardHandler(cardInstrument),\n        );\n    }\n\n    private _createPaymentHandler(cardInstrument?: CardInstrument): HostedInputPaymentHandler {\n        return new HostedInputPaymentHandler(\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(cardInstrument),\n            getHostedInputStorage(),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new PaymentRequestSender(createBigpayClient()),\n            new PaymentRequestTransformer(),\n        );\n    }\n\n    private _createStoredCardHandler(\n        cardInstrument?: CardInstrument,\n    ): HostedInputStoredCardHandler {\n        return new HostedInputStoredCardHandler(\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(cardInstrument),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new StorefrontStoredCardRequestSender(createRequestSender()),\n        );\n    }\n}\n","import HostedFieldType from '../hosted-field-type';\n\nexport default function mapToAccessibilityLabel(type: HostedFieldType): string {\n    switch (type) {\n        case HostedFieldType.CardCode:\n        case HostedFieldType.CardCodeVerification:\n            return 'CVC';\n\n        case HostedFieldType.CardExpiry:\n            return 'Expiration';\n\n        case HostedFieldType.CardName:\n            return 'Name on card';\n\n        case HostedFieldType.CardNumber:\n        case HostedFieldType.CardNumberVerification:\n            return 'Credit card number';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { fromEvent } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nimport { IframeEventListener } from '../../common/iframe';\nimport { InvalidHostedFormConfigError } from '../errors';\nimport {\n    HostedFieldAttachEvent,\n    HostedFieldEventMap,\n    HostedFieldEventType,\n} from '../hosted-field-events';\n\nimport HostedInput from './hosted-input';\nimport HostedInputFactory from './hosted-input-factory';\nimport HostedInputStorage from './hosted-input-storage';\n\ninterface EventTargetLike<TEvent> {\n    addListener(eventName: string, handler: (event: TEvent) => void): void;\n    removeListener(eventName: string, handler: (event: TEvent) => void): void;\n}\n\nexport default class HostedInputInitializer {\n    constructor(\n        private _factory: HostedInputFactory,\n        private _storage: HostedInputStorage,\n        private _eventListener: IframeEventListener<HostedFieldEventMap>,\n    ) {}\n\n    initialize(containerId: string, nonce?: string): Promise<HostedInput> {\n        if (nonce) {\n            this._storage.setNonce(nonce);\n        }\n\n        const form = this._createFormContainer(containerId);\n\n        this._resetPageStyles(containerId);\n        this._eventListener.listen();\n\n        return fromEvent<HostedFieldAttachEvent>(\n            this._eventListener as EventTargetLike<HostedFieldAttachEvent>,\n            HostedFieldEventType.AttachRequested,\n        )\n            .pipe(\n                map(({ payload }) => {\n                    const {\n                        accessibilityLabel,\n                        cardInstrument,\n                        fontUrls,\n                        placeholder,\n                        styles,\n                        origin,\n                        type,\n                    } = payload;\n\n                    if (origin) {\n                        this._factory.normalizeParentOrigin(origin);\n                    }\n\n                    const field = this._factory.create(\n                        form,\n                        type,\n                        styles,\n                        fontUrls,\n                        placeholder,\n                        accessibilityLabel,\n                        cardInstrument,\n                    );\n\n                    field.attach();\n\n                    return field;\n                }),\n                take(1),\n            )\n            .toPromise();\n    }\n\n    private _resetPageStyles(containerId: string) {\n        const html = document.querySelector('html');\n        const body = document.querySelector('body');\n        const container = document.getElementById(containerId);\n\n        [html, body, container].forEach((node) => {\n            if (!node) {\n                return;\n            }\n\n            node.style.height = '100%';\n            node.style.width = '100%';\n            node.style.overflow = 'hidden';\n            node.style.padding = '0';\n            node.style.margin = '0';\n        });\n    }\n\n    private _createFormContainer(containerId: string): HTMLFormElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        const form = document.createElement('form');\n        const button = document.createElement('button');\n\n        form.noValidate = true;\n        form.style.height = '100%';\n        form.style.width = '100%';\n        button.style.display = 'none';\n\n        container.appendChild(form);\n        form.appendChild(button);\n\n        return form;\n    }\n}\n","import { IframeEventListener } from '../../common/iframe';\nimport { HostedFieldEventMap } from '../hosted-field-events';\n\nimport getHostedInputStorage from './get-hosted-input-storage';\nimport HostedInput from './hosted-input';\nimport HostedInputFactory from './hosted-input-factory';\nimport HostedInputInitializer from './hosted-input-initializer';\nimport HostedInputOptions from './hosted-input-options';\n\nexport default function initializeHostedInput(options: HostedInputOptions): Promise<HostedInput> {\n    const { containerId, nonce, parentOrigin } = options;\n    const initializer = new HostedInputInitializer(\n        new HostedInputFactory(parentOrigin),\n        getHostedInputStorage(),\n        new IframeEventListener<HostedFieldEventMap>(parentOrigin),\n    );\n\n    return initializer.initialize(containerId, nonce);\n}\n","import { IframeEventPoster } from '../../common/iframe';\n\nimport { HostedInputAttachErrorEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\n\nconst poster = new IframeEventPoster<HostedInputAttachErrorEvent>('*', window.parent);\n\nexport default function notifyInitializeError(error: HostedInputInitializeErrorData): void {\n    poster.post({\n        type: HostedInputEventType.AttachFailed,\n        payload: { error },\n    });\n}\n"],"names":["bindMethodDecorator","_","key","descriptor","value","method","get","boundMethod","bind","this","Object","defineProperty","set","StandardError","Error","constructor","message","super","name","type","object","prototype","setPrototypeOf","__proto__","captureStackTrace","stack","InvalidArgumentError","parseUrl","url","test","anchor","document","createElement","href","port","indexOf","hostname","hash","origin","protocol","pathname","search","appendWww","replace","isIframeEvent","IframeEventListener","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","window","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","index","splice","trigger","event","context","forEach","messageEvent","data","target","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","HostedInputStorage","setNonce","nonce","_nonce","getNonce","storage","getHostedInputStorage","IframeEventPoster","targetOrigin","_targetWindow","_context","_targetOrigin","post","options","targetWindow","result","fromEvent","pipe","filter","successType","errorType","map","take","toPromise","postMessage","setTarget","setContext","PaymentRequestSender","_client","submitPayment","payload","Promise","resolve","reject","error","response","_transformResponse","initializeOffsitePayment","headers","body","status","statusText","mapToInternalAddress","address","consignments","addressId","id","isBillingAddressLike","length","firstName","lastName","company","addressLine1","address1","addressLine2","address2","city","province","stateOrProvince","provinceCode","stateOrProvinceCode","postCode","postalCode","country","countryCode","phone","customFields","AmountTransformer","_decimalPlaces","toInteger","amount","Math","round","couponTypes","mapToInternalCoupon","coupon","code","discount","displayName","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToDiscountNotifications","promotions","notifications","promotion","banners","banner","placeholders","messageHtml","text","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","reduce","item","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","productId","option","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","checkout","cart","currency","items","lineItems","coupons","sum","discountNotifications","totalDiscountedAmount","giftCertificates","certificate","appliedGiftCertificates","keyBy","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","required","some","physicalItems","lineItem","isShippingRequired","subtotal","storeCredit","customer","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","grandTotal","CheckoutButtonMethodType","MissingDataErrorType","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingPaymentProviderCustomer","MissingShippingAddress","getErrorMessage","mapToInternalCustomer","billingAddress","addresses","customerId","isGuest","email","fullName","join","customerGroupName","customerGroup","CardExpiryFormatter","format","month","year","split","RegExp","trimmedMonth","slice","trimmedYear","toObject","CardNumberFormatter","card","number","maxLength","max","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","output","mapToInternalOrder","order","orderMeta","orderId","customerCanBeCreated","payment","mapToInternalOrderPayment","payments","baseAmount","token","orderToken","callbackUrl","mapToGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","find","providerId","detail","isDefaultOrderPayment","step","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","description","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","module","price","cost","selected","isRecommended","transitTime","PaymentRequestTransformer","_cardExpiryFormatter","_cardNumberFormatter","transform","checkoutState","getBillingAddress","getCheckout","getCustomer","getOrder","paymentMethod","paymentMethods","getPaymentMethod","methodId","gatewayId","shippingAddress","_mapShippingAddress","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","getOrderMeta","internalCustomer","authToken","paymentData","instrument","Boolean","instrumentId","formattedInstrument","formattedPayload","bigpay_token","isFormattedVaultedInstrument","getPaymentToken","vaultAccessToken","additionalAction","_transformPaymentMethod","quoteMeta","request","geoCountryCode","source","store","pick","storeProfile","transformWithHostedFormData","values","paymentMethodMeta","consignment","selectedShippingOption","_transformHostedInputValues","gateway","initializationData","BRAINTREE_VENMO","BRAINTREE_PAYPAL","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","every","selectedPickupOption","getShippingAddress","HostedFieldType","StorefrontStoredCardRequestSender","_requestSender","submitPaymentInstrument","requestInitializationData","storeInstrumentFormData","currencyCode","paymentsUrl","shopperId","storeHash","vaultToken","defaultInstrument","Authorization","Accept","JSON","stringify","cardholder_name","cardholderName","expiry_month","expiryMonth","expiry_year","expiryYear","verification_value","verificationValue","billing_address","postal_code","country_code","first_name","last_name","state_or_province_code","provider_id","default_instrument","currency_code","mapToAutocompleteType","CardCode","CardExpiry","CardName","CardNumber","HostedAutocompleteFieldset","_form","_fieldTypes","_inputAggregator","_handleChange","targetInput","targetHostedInput","getInputs","input","_getAutocompleteElementId","getType","setValue","_inputs","_createInput","attach","appendChild","detach","parentElement","removeChild","autocomplete","tabIndex","style","position","opacity","zIndex","kebabCase","HostedFieldEventType","HostedInputEventType","HostedInput","_type","_placeholder","_accessibilityLabel","_autocomplete","_styles","_fontUrls","_eventListener","_eventPoster","_inputValidator","_paymentHandler","_storedCardHandler","_isTouched","_handleInput","_processChange","_handleBlur","_applyStyles","default","_validateForm","Blurred","fieldType","_handleFocus","focus","Focused","_handleValidate","_handleSubmit","preventDefault","Entered","_forceFocusToInput","activeElement","navigator","userAgent","toLowerCase","_input","setAttribute","setSelectionRange","ValidateRequested","SubmitRequested","handle","StoredCardRequested","_configureInput","getValue","isTouched","_loadFonts","parent","hostedInput","AttachSucceeded","_unloadFonts","_formatValue","_notifyChange","_value","Changed","backgroundColor","border","display","height","margin","outline","padding","width","placeholder","inputMode","pattern","styles","allowedStyles","color","fontFamily","fontSize","fontWeight","_fontLinks","querySelector","rel","head","undefined","getInputValues","results","validate","isValid","Validated","_previousValue","HostedCardExpiryInput","form","accessibilityLabel","fontUrls","eventListener","eventPoster","inputAggregator","inputValidator","paymentHandler","storedCardHandler","_formatter","HostedCardNumberInput","_autocompleteFieldset","cardInfo","prevCardInfo","CardTypeChanged","cardType","unformattedPreviousValue","bin","isPotentiallyValid","substr","BinChanged","selectionEnd","formattedValue","HostedInputAggregator","_parentWindow","Array","call","frames","frame","DOMException","InvalidHostedFormValueError","errors","flatMap","fieldErrors","HostedInputPaymentHandler","_inputStorage","_paymentRequestSender","_paymentRequestTransformer","SubmitFailed","snakeCase","SubmitSucceeded","_isPaymentErrorResponse","_isErrorResponse","HostedInputStoredCardHandler","_storedCardRequestSender","fields","StoredCardFailed","Number","trim","StoredCardSucceeded","HostedInputValidator","_cardInstrument","_completeSchema","_getCardCodeSchema","_getCardCodeVerificationSchema","_getCardExpirySchema","_getCardNameSchema","_getCardNumberSchema","_getCardNumberVerificationSchema","_configureCardValidator","schemas","requiredField","hasOwnProperty","abortEarly","_isValidationErrorType","inner","innerError","path","discoverInfo","getTypeInfo","jcbInfo","visaInfo","updateCard","patterns","addCard","niceType","size","string","cvv","_mapFromInstrumentCardType","expirationDate","numbers","match","num","last4","HostedInputFactory","_parentOrigin","create","CardCodeVerification","CardNumberVerification","mapToAccessibilityLabel","cardInstrument","_createNumberInput","_createExpiryInput","normalizeParentOrigin","getParentOrigin","_createPaymentHandler","_createStoredCardHandler","createRequestSender","InvalidHostedFormConfigError","HostedInputInitializer","_factory","_storage","initialize","containerId","_createFormContainer","_resetPageStyles","AttachRequested","field","getElementById","node","overflow","container","button","noValidate","initializeHostedInput","parentOrigin","poster","notifyInitializeError","AttachFailed"],"sourceRoot":""}