{"version":3,"file":"integrations/moneris.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/moneris-integration/src/moneris-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/moneris-integration/src/create-moneris-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { isEmpty, map, omitBy } from 'lodash';\n\nimport {\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport MonerisStylingProps, {\n    MoneriesHostedFieldsQueryParams,\n    MonerisInitializationData,\n    MonerisResponseData,\n} from './moneris';\nimport MonerisPaymentInitializeOptions, {\n    WithMonerisPaymentInitializeOptions,\n} from './moneris-payment-initialize-options';\n\nconst IFRAME_NAME = 'moneris-payment-iframe';\nconst RESPONSE_SUCCESS_CODE = '001';\n\nexport default class MonerisPaymentStrategy {\n    private iframe?: HTMLIFrameElement;\n    private initializeOptions?: MonerisPaymentInitializeOptions;\n    private windowEventListener?: (response: MessageEvent) => void;\n\n    private hostedForm?: HostedForm;\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithMonerisPaymentInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n\n        const { moneris: monerisOptions, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (!monerisOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.moneris\" argument is not provided.',\n            );\n        }\n\n        this.initializeOptions = monerisOptions;\n\n        const { config, initializationData } =\n            state.getPaymentMethodOrThrow<MonerisInitializationData>(methodId);\n\n        if (!initializationData?.profileId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (monerisOptions.form && this.shouldShowTSVHostedForm(methodId)) {\n            this.hostedForm = await this.mountCardVerificationfields(monerisOptions.form);\n        }\n\n        if (!this.iframe) {\n            this.iframe = this.createIframe(\n                monerisOptions.containerId,\n                initializationData,\n                !!config.testMode,\n            );\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentInitializeOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        if (payment.paymentData && isVaultedInstrument(payment.paymentData)) {\n            await this.executeWithVaulted(payment);\n\n            return;\n        }\n\n        return this.executeWithCC(payment);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        if (this.windowEventListener) {\n            window.removeEventListener('message', this.windowEventListener);\n            this.windowEventListener = undefined;\n        }\n\n        if (this.iframe && this.iframe.parentNode) {\n            this.iframe.parentNode.removeChild(this.iframe);\n            this.iframe = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private async executeWithCC(payment: OrderPaymentRequestBody): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(payment.methodId);\n\n        const testMode = paymentMethod.config.testMode;\n        const paymentData = payment.paymentData || {};\n\n        const instrumentSettings = isHostedInstrumentLike(paymentData)\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = instrumentSettings;\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            if (!this.iframe) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const frameref: Window | null = this.iframe.contentWindow;\n\n            if (frameref === null) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            frameref.postMessage('tokenize', this.monerisURL(!!testMode));\n\n            this.windowEventListener = (response: MessageEvent) => {\n                if (\n                    typeof response.data !== 'string' ||\n                    response.origin !== `https://${testMode ? 'esqa' : 'www3'}.moneris.com`\n                ) {\n                    return;\n                }\n\n                try {\n                    resolve(this.handleMonerisResponse(response));\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            window.addEventListener('message', this.windowEventListener);\n        });\n\n        if (nonce !== undefined) {\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce, shouldSaveInstrument, shouldSetAsDefaultInstrument },\n            });\n        }\n    }\n\n    private async executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        if (this.hostedForm) {\n            const form = this.hostedForm;\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this.paymentIntegrationService.loadCurrentOrder();\n        }\n\n        return this.paymentIntegrationService.submitPayment(payment);\n    }\n\n    private shouldShowTSVHostedForm(methodId: string): boolean {\n        return this.isHostedPaymentFormEnabled(methodId) && this.isHostedFieldAvailable();\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string): boolean {\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(methodId);\n\n        return Boolean(paymentMethod.config.isHostedFormEnabled);\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n        const definedFields = omitBy(options.form?.fields, isEmpty);\n\n        return !isEmpty(definedFields);\n    }\n\n    private getInitializeOptions(): MonerisPaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private async mountCardVerificationfields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        const bigpayBaseUrl = this.paymentIntegrationService.getState().getStoreConfig()\n            ?.paymentSettings.bigpayBaseUrl;\n\n        if (!bigpayBaseUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const form = this.paymentIntegrationService.createHostedForm(bigpayBaseUrl, formOptions);\n\n        await form.attach();\n\n        return form;\n    }\n\n    private createIframe(\n        containerId: string,\n        initializationData: MonerisInitializationData,\n        testMode: boolean,\n        style?: MonerisStylingProps,\n    ): HTMLIFrameElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create iframe without valid container ID.');\n        }\n\n        const iframe: HTMLIFrameElement = document.createElement('iframe');\n        const monerisQueryParams: MoneriesHostedFieldsQueryParams = {\n            id: initializationData.profileId,\n            pmmsg: true,\n            display_labels: 1,\n            enable_exp: 1,\n            enable_cvd: 1,\n            css_body:\n                style?.cssBody ||\n                'font-family: Arial, Helvetica,sans-serif;background: transparent;',\n            css_textbox:\n                style?.cssTextbox ||\n                'border-radius:4px;border: 2px solid rgb(00,00,00);width: 100%;font-weight: 600;padding: 8px 8px;outline: 0;',\n            css_textbox_pan: style?.cssTextboxCardNumber || 'width: 240px;',\n            css_textbox_exp:\n                style?.cssTextboxExpiryDate || 'margin-bottom: 0;width: calc(30% - 12px);',\n            css_textbox_cvd: style?.cssTextboxCVV || 'margin-bottom: 0;width: calc(30% - 12px);',\n            css_input_label:\n                style?.cssInputLabel ||\n                'font-size: 10px;position: relative;top: 8px;left: 6px;background: rgb(255,255,255);padding: 3px 2px;color: rgb(66,66,66);font-weight: 600;z-index: 2;',\n            pan_label: initializationData.creditCardLabel || 'Credit Card Number',\n            exp_label: initializationData.expiryDateLabel || 'Expiration',\n            cvd_label: initializationData.cvdLabel || 'CVD',\n        };\n\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const queryString = map(monerisQueryParams, (value, key) => `${key}=${value}`).join('&');\n\n        iframe.width = '100%';\n        iframe.height = '100%';\n        iframe.name = IFRAME_NAME;\n        iframe.id = IFRAME_NAME;\n        iframe.style.border = 'none';\n        iframe.src = `${this.monerisURL(testMode)}?${queryString}`;\n        iframe.allow = 'payment';\n\n        container.appendChild(iframe);\n\n        return iframe;\n    }\n\n    private handleMonerisResponse(response: MessageEvent): string {\n        const monerisResponse: MonerisResponseData = JSON.parse(response.data);\n\n        if (monerisResponse.responseCode[0] !== RESPONSE_SUCCESS_CODE) {\n            throw new Error(monerisResponse.errorMessage);\n        }\n\n        return monerisResponse.dataKey;\n    }\n\n    private monerisURL(testMode: boolean): string {\n        return `https://${testMode ? 'esqa' : 'www3'}.moneris.com/HPPtoken/index.php`;\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport MonerisPaymentStrategy from './moneris-payment-strategy';\n\nconst createMonerisPaymentStrategy: PaymentStrategyFactory<MonerisPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new MonerisPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createMonerisPaymentStrategy, [{ id: 'moneris' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["MissingDataErrorType","NotInitializedErrorType","StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","PaymentArgumentInvalidError","invalidFields","join","OrderFinalizationNotRequiredError","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","IFRAME_NAME","MonerisPaymentStrategy","paymentIntegrationService","initialize","options","state","getState","moneris","monerisOptions","methodId","initializeOptions","config","initializationData","getPaymentMethodOrThrow","profileId","form","shouldShowTSVHostedForm","hostedForm","mountCardVerificationfields","iframe","createIframe","containerId","testMode","Promise","resolve","execute","payload","payment","order","isStoreCreditApplied","useStoreCredit","getCheckoutOrThrow","instrument","applyStoreCredit","submitOrder","paymentData","Boolean","instrumentId","executeWithCC","executeWithVaulted","finalize","reject","deinitialize","detach","windowEventListener","window","removeEventListener","undefined","parentNode","removeChild","instrumentSettings","shouldSaveInstrument","shouldSetAsDefaultInstrument","nonce","frameref","contentWindow","postMessage","monerisURL","response","data","origin","handleMonerisResponse","error","addEventListener","submitPayment","validate","submit","loadCurrentOrder","isHostedPaymentFormEnabled","isHostedFieldAvailable","paymentMethod","isHostedFormEnabled","getInitializeOptions","definedFields","omitBy","fields","isEmpty","formOptions","bigpayBaseUrl","getStoreConfig","paymentSettings","createHostedForm","attach","style","container","document","getElementById","createElement","monerisQueryParams","id","pmmsg","display_labels","enable_exp","enable_cvd","css_body","cssBody","css_textbox","cssTextbox","css_textbox_pan","cssTextboxCardNumber","css_textbox_exp","cssTextboxExpiryDate","css_textbox_cvd","cssTextboxCVV","css_input_label","cssInputLabel","pan_label","creditCardLabel","exp_label","expiryDateLabel","cvd_label","cvdLabel","queryString","map","value","key","width","height","border","src","allow","appendChild","monerisResponse","JSON","parse","responseCode","errorMessage","dataKey","module","resolveIds","assign"],"sourceRoot":""}