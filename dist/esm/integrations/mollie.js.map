{"version":3,"file":"integrations/mollie.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/mollie-integration/src/mollie-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/mollie-integration/src/mollie-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/mollie-integration/src/is-mollie-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/mollie-integration/src/create-mollie-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import { each, some } from 'lodash';\n\nimport {\n    getBrowserInfo,\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { MollieClient, MollieElement } from './mollie';\nimport MolliePaymentInitializeOptions, {\n    WithMolliePaymentInitializeOptions,\n} from './mollie-payment-initialize-options';\nimport MollieScriptLoader from './mollie-script-loader';\n\nexport enum MolliePaymentMethodType {\n    CREDIT_CARD = 'credit_card',\n}\n\nconst methodsNotAllowedWhenDigitalOrder = ['klarnapaylater', 'klarnasliceit'];\n\nexport default class MolliePaymentStrategy implements PaymentStrategy {\n    private initializeOptions?: MolliePaymentInitializeOptions;\n    private mollieClient?: MollieClient;\n    private cardHolderElement?: MollieElement;\n    private cardNumberElement?: MollieElement;\n    private verificationCodeElement?: MollieElement;\n    private expiryDateElement?: MollieElement;\n    private locale?: string;\n\n    private hostedForm?: HostedForm;\n\n    private unsubscribe?: () => void;\n\n    constructor(\n        private mollieScriptLoader: MollieScriptLoader,\n        private paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithMolliePaymentInitializeOptions,\n    ): Promise<void> {\n        const { mollie, methodId, gatewayId } = options;\n\n        if (!mollie) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.mollie\" argument is not provided.',\n            );\n        }\n\n        if (!methodId || !gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"methodId\" and/or \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        const controllers = document.querySelectorAll('.mollie-components-controller');\n\n        each(controllers, (controller) => controller.remove());\n\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        this.initializeOptions = mollie;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        const {\n            config: { merchantId, testMode },\n        } = paymentMethod;\n\n        this.locale = state.getLocale();\n\n        if (!merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this.isCreditCard(methodId) &&\n            mollie.form &&\n            this.shouldShowTSVHostedForm(methodId, gatewayId)\n        ) {\n            this.hostedForm = await this.mountCardVerificationfields(mollie.form);\n        } else if (this.isCreditCard(methodId)) {\n            this.mollieClient = await this.loadMollieJs(\n                merchantId,\n                storeConfig.storeProfile.storeLanguage,\n                testMode,\n            );\n            this.mountElements();\n        }\n\n        this.unsubscribe = () => {\n            if (\n                this.paymentIntegrationService.getState().isPaymentMethodInitialized({\n                    methodId: options.methodId,\n                    gatewayId: options.gatewayId,\n                })\n            ) {\n                const element = document.getElementById(`${gatewayId}-${methodId}-paragraph`);\n\n                if (element) {\n                    element.remove();\n                }\n\n                mollie.disableButton(false);\n\n                this.loadPaymentMethodsAllowed(mollie, methodId, gatewayId);\n            }\n        };\n\n        this.unsubscribe();\n\n        this.loadPaymentMethodsAllowed(mollie, methodId, gatewayId);\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !payment.gatewayId || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment', 'gatewayId', 'paymentData']);\n        }\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            if (isVaultedInstrument(paymentData)) {\n                return await this.executeWithVaulted(payment);\n            }\n\n            if (this.isCreditCard(payment.methodId)) {\n                return await this.executeWithCC(payment);\n            }\n\n            return await this.executeWithAPM(payment);\n        } catch (error) {\n            await this.processAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        if (options && options.methodId && options.gatewayId && !this.hostedForm) {\n            const element = document.getElementById(`${options.gatewayId}-${options.methodId}`);\n\n            if (element) {\n                element.remove();\n            }\n        } else if (options && options.methodId && this.isCreditCard(options.methodId)) {\n            if (\n                this.cardHolderElement &&\n                this.cardNumberElement &&\n                this.verificationCodeElement &&\n                this.expiryDateElement\n            ) {\n                this.cardHolderElement.unmount();\n                this.cardHolderElement = undefined;\n\n                this.cardNumberElement.unmount();\n                this.cardNumberElement = undefined;\n\n                this.verificationCodeElement.unmount();\n                this.verificationCodeElement = undefined;\n\n                this.expiryDateElement.unmount();\n                this.expiryDateElement = undefined;\n            }\n        }\n\n        this.mollieClient = undefined;\n\n        return Promise.resolve();\n    }\n\n    protected async executeWithCC(payment: OrderPaymentRequestBody): Promise<void> {\n        const paymentData = payment.paymentData;\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { token, error } = await this.getMollieClient().createToken();\n\n        /* eslint-disable */\n        if (error) {\n            return Promise.reject(error);\n        }\n\n        const formattedPayload = {\n            credit_card_token: {\n                token,\n            },\n            vault_payment_instrument: shouldSaveInstrument,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n            browser_info: getBrowserInfo(),\n            shopper_locale: this.getShopperLocale(),\n        };\n        /* eslint-enable */\n\n        await this.paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                formattedPayload,\n            },\n        });\n    }\n\n    protected async executeWithVaulted(payment: OrderPaymentRequestBody): Promise<void> {\n        if (this.isHostedPaymentFormEnabled(payment.methodId, payment.gatewayId)) {\n            const form = this.hostedForm;\n\n            if (!form) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            await this.paymentIntegrationService.loadCurrentOrder();\n        } else {\n            await this.paymentIntegrationService.submitPayment(payment);\n        }\n    }\n\n    protected async executeWithAPM(payment: OrderPaymentRequestBody): Promise<void> {\n        const paymentData = payment.paymentData;\n        const issuer = paymentData && 'issuer' in paymentData ? paymentData.issuer : '';\n\n        await this.paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                ...paymentData,\n                formattedPayload: {\n                    issuer,\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    shopper_locale: this.getShopperLocale(),\n                },\n            },\n        });\n    }\n\n    private isCreditCard(methodId: string): boolean {\n        return methodId === MolliePaymentMethodType.CREDIT_CARD;\n    }\n\n    private shouldShowTSVHostedForm(methodId: string, gatewayId: string): boolean {\n        return (\n            this.isHostedPaymentFormEnabled(methodId, gatewayId) && this.isHostedFieldAvailable()\n        );\n    }\n\n    private mountCardVerificationfields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        /* eslint-disable */\n        return new Promise(async (resolve, reject) => {\n            try {\n                const config = this.paymentIntegrationService.getState().getStoreConfig();\n                const bigpayBaseUrl = config?.paymentSettings.bigpayBaseUrl;\n\n                if (!bigpayBaseUrl) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const form = this.paymentIntegrationService.createHostedForm(\n                    bigpayBaseUrl,\n                    formOptions\n                );\n\n                await form.attach();\n\n                resolve(form);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string, gatewayId?: string): boolean {\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n\n        return !!options.form?.fields;\n    }\n\n    private processAdditionalAction(error: any): Promise<unknown> {\n        if (!isRequestError(error)) {\n            return Promise.reject(error);\n        }\n\n        if (some(error.body.errors, {code: 'additional_action_required'})) {\n            const { additional_action_required: { data : { redirect_url } } } = error.body;\n\n            return new Promise(() => window.location.replace(redirect_url));\n        }\n\n        return Promise.reject(error);\n    }\n\n    private getInitializeOptions(): MolliePaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private loadMollieJs(merchantId: string, locale: string, testmode = false): Promise<MollieClient> {\n        if (this.mollieClient) {\n            return Promise.resolve(this.mollieClient);\n        }\n\n        return this.mollieScriptLoader\n            .load(merchantId, locale, testmode);\n    }\n\n    private getMollieClient(): MollieClient {\n        if (!this.mollieClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.mollieClient;\n    }\n\n    private getShopperLocale(): string {\n        if (!this.locale) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.locale;\n    }\n\n    /**\n     * ContainerId is use in Mollie for determined either its showing or not the\n     * container, because when Mollie has Vaulted Instruments it gets hide,\n     * and shows an error because can't mount Provider Components\n     *\n     * We had to add a settimeout because Mollie sets de tab index after mounting\n     * each component, but without a setTimeOut Mollie is not able to find the\n     * components as they are hidden so we need to wait until they are shown\n     */\n    private mountElements() {\n        const { containerId, cardNumberId, cardCvcId, cardExpiryId, cardHolderId, styles } = this.getInitializeOptions();\n        let container: HTMLElement | null;\n\n        if (containerId) {\n            container = document.getElementById(containerId);\n        }\n\n        setTimeout(() => {\n            if (!containerId || container?.style.display !== 'none') {\n                const mollieClient = this.getMollieClient();\n\n                this.cardHolderElement = mollieClient.createComponent('cardHolder', { styles });\n                this.cardHolderElement.mount(`#${cardHolderId}`);\n\n                this.cardNumberElement = mollieClient.createComponent('cardNumber', { styles });\n                this.cardNumberElement.mount(`#${cardNumberId}`);\n\n                this.verificationCodeElement = mollieClient.createComponent('verificationCode', { styles });\n                this.verificationCodeElement.mount(`#${cardCvcId}`);\n\n                this.expiryDateElement = mollieClient.createComponent('expiryDate', { styles });\n                this.expiryDateElement.mount(`#${cardExpiryId}`);\n            }\n        }, 0);\n    }\n\n    private loadPaymentMethodsAllowed(mollie: MolliePaymentInitializeOptions, methodId: string, gatewayId: string){\n        if (methodsNotAllowedWhenDigitalOrder.includes(methodId)) {\n            const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n            const cartDigitalItems = cart.lineItems?.digitalItems;\n\n            if (cartDigitalItems && cartDigitalItems.length > 0) {\n                const { containerId } = this.getInitializeOptions();\n\n                if (containerId) {\n                    const container = document.getElementById(containerId);\n\n                    if (container) {\n                        const paragraph = document.createElement('p') ;\n                        paragraph.setAttribute(\"id\",`${gatewayId}-${methodId}-paragraph`)\n\n                        if (mollie.unsupportedMethodMessage) {\n                            paragraph.innerText = mollie.unsupportedMethodMessage;\n                            container.appendChild(paragraph);\n                            mollie.disableButton(true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isMollieWindow from './is-mollie-window';\nimport { MollieClient } from './mollie';\n\nexport default class MollieScriptLoader {\n    constructor(private scriptLoader: ScriptLoader, private mollieHostWindow: Window = window) {}\n\n    async load(merchantId: string, locale: string, testmode: boolean): Promise<MollieClient> {\n        await this.scriptLoader.loadScript('https://js.mollie.com/v1/mollie.js');\n\n        if (!isMollieWindow(this.mollieHostWindow)) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.mollieHostWindow.Mollie(merchantId, {\n            locale,\n            testmode,\n        });\n    }\n}\n","import { MollieHostWindow } from './mollie';\n\nexport default function isMollieWindow(window: Window): window is MollieHostWindow {\n    return 'Mollie' in window;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport MolliePaymentStrategy from './mollie-payment-strategy';\nimport MollieScriptLoader from './mollie-script-loader';\n\nconst createMolliePaymentStrategy: PaymentStrategyFactory<MolliePaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new MolliePaymentStrategy(\n        new MollieScriptLoader(getScriptLoader()),\n        paymentIntegrationService,\n    );\n};\n\nexport default toResolvableModule(createMolliePaymentStrategy, [\n    { gateway: 'mollie' },\n    { gateway: 'mollie', id: 'applepay' },\n]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["MissingDataErrorType","NotInitializedErrorType","StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","PaymentArgumentInvalidError","invalidFields","join","getBrowserInfo","navigator","window","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","Date","getTimezoneOffset","toString","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","MolliePaymentMethodType","methodsNotAllowedWhenDigitalOrder","MolliePaymentStrategy","mollieScriptLoader","paymentIntegrationService","initialize","options","mollie","methodId","gatewayId","controllers","document","querySelectorAll","each","controller","remove","state","getState","storeConfig","getStoreConfigOrThrow","initializeOptions","paymentMethod","getPaymentMethodOrThrow","config","merchantId","testMode","locale","getLocale","isCreditCard","form","shouldShowTSVHostedForm","hostedForm","mountCardVerificationfields","mollieClient","loadMollieJs","storeProfile","storeLanguage","mountElements","unsubscribe","isPaymentMethodInitialized","element","getElementById","disableButton","loadPaymentMethodsAllowed","Promise","resolve","execute","payload","payment","order","paymentData","submitOrder","Boolean","instrumentId","executeWithVaulted","executeWithCC","executeWithAPM","error","processAdditionalAction","finalize","deinitialize","detach","cardHolderElement","cardNumberElement","verificationCodeElement","expiryDateElement","unmount","undefined","shouldSaveInstrument","shouldSetAsDefaultInstrument","instrument","token","getMollieClient","createToken","reject","formattedPayload","credit_card_token","vault_payment_instrument","set_as_default_stored_instrument","browser_info","shopper_locale","getShopperLocale","submitPayment","isHostedPaymentFormEnabled","validate","submit","loadCurrentOrder","issuer","CREDIT_CARD","isHostedFieldAvailable","formOptions","getStoreConfig","bigpayBaseUrl","paymentSettings","createHostedForm","attach","isHostedFormEnabled","getInitializeOptions","fields","some","body","errors","code","additional_action_required","data","redirect_url","location","replace","testmode","load","containerId","cardNumberId","cardCvcId","cardExpiryId","cardHolderId","styles","container","setTimeout","style","display","createComponent","mount","includes","cartDigitalItems","getCartOrThrow","lineItems","digitalItems","length","paragraph","createElement","setAttribute","unsupportedMethodMessage","innerText","appendChild","PaymentMethodClientUnavailableError","MollieScriptLoader","scriptLoader","mollieHostWindow","loadScript","isMollieWindow","Mollie","module","getScriptLoader","resolveIds","gateway","id","assign"],"sourceRoot":""}