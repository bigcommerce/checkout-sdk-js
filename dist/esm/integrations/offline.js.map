{"version":3,"file":"integrations/offline.js","mappings":"AAOe,MAAeA,UAAsBC,MAIhD,WAAAC,CAAYC,GCXD,IAAqCC,EDY5CC,MAAMF,GAAW,qCAJrB,KAAAG,KAAO,gBACP,KAAAC,KAAO,WCTyCH,aDcZA,UCbhCI,OAAOC,eACPD,OAAOC,eDYQC,KCZeN,GDYfM,KCVRC,UAAYP,EDYoB,mBAA5BH,MAAMW,kBACbX,MAAMW,kBAAkBF,iBAExBA,KAAKG,MAAQ,IAAIZ,MAAMS,KAAKP,SAASU,KAE7C,EEfW,MAAMC,UAA0Cd,EAC3D,WAAAE,GACIG,MAAM,kEAENK,KAAKJ,KAAO,oCACZI,KAAKH,KAAO,iCAChB,ECJW,MAAMQ,EACjB,WAAAb,CAAoBc,GAAA,KAAAA,2BAAAA,CAAwD,CAEtE,OAAAC,CAAQC,EAA2BC,G,qCASrC,aARMT,KAAKM,2BAA2BI,YAAY,OAAD,wBAEtCF,GAAO,CACVG,QAASH,EAAQG,QAAU,CAAEC,SAAUJ,EAAQG,QAAQC,eAAaC,IAExEJ,GAGGK,QAAQC,SACnB,E,2RAEA,QAAAC,GACI,OAAOF,QAAQG,OAAO,IAAIb,EAC9B,CAEA,UAAAc,GACI,OAAOJ,QAAQC,SACnB,CAEA,YAAAI,GACI,OAAOL,QAAQC,SACnB,EC1BJ,MAIA,GCRIK,EDKAC,GACC,IAAIhB,EAAuBgB,GCL5BC,EDO4D,CAAC,CAAEzB,KAAM,yBCL9DC,OAAOyB,OAAOH,EAAQ,CAAEE,gBAJpB,IACXF,EACAE,S","sources":["webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/offline-integration/src/offline-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/offline-integration/src/create-offline-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n            },\n            options,\n        );\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OfflinePaymentStrategy from './offline-payment-strategy';\n\nconst createOfflinePaymentStrategy: PaymentStrategyFactory<OfflinePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OfflinePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOfflinePaymentStrategy, [{ type: 'PAYMENT_TYPE_OFFLINE' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","OrderFinalizationNotRequiredError","OfflinePaymentStrategy","_paymentIntegrationService","execute","payload","options","submitOrder","payment","methodId","undefined","Promise","resolve","finalize","reject","initialize","deinitialize","module","paymentIntegrationService","resolveIds","assign"],"sourceRoot":""}