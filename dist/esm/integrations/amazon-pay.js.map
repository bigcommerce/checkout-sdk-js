{"version":3,"file":"integrations/amazon-pay.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isInternalCheckoutSelectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/create-amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isAmazonPayAdditionalActionError.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/errors/amazon-pay-v2-config-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/isWithBuyNowFeatures.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-button-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item: LineItem) => total + item.quantity, 0);\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import {\n    Cart,\n    Checkout,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void | Promise<void>) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n\n    /**\n     * Sets Amazon Pay button design.\n     */\n    design?: AmazonPayV2ButtonDesign;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport const amazonPayV2Regions: { [key: string]: string } = {\n    de: 'eu',\n    jp: 'fe',\n    uk: 'eu',\n    us: 'na',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport enum AmazonPayV2ButtonDesign {\n    C0001 = 'C0001',\n}\n\n// TODO: after migration AmazonPay strategies to integration package\n// <InternalCheckoutSelectors> should be removed\n// and replaced usage with <PaymentIntegrationService>\nexport interface InternalCheckoutSelectors {\n    cart: {\n        getCart: () => Cart | undefined;\n    };\n    checkout: {\n        getCheckout: () => Checkout | undefined;\n    };\n    config: {\n        getStoreConfigOrThrow: () => StoreConfig;\n    };\n    paymentMethods: {\n        getPaymentMethodOrThrow: <T>(methodId: string) => PaymentMethod<T>;\n    };\n}\n\nexport interface AmazonPayV2InitializeOptions {\n    buttonColor?: AmazonPayV2ButtonColor;\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n    checkoutSessionMethod?: 'GET' | 'POST';\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n    extractAmazonCheckoutSessionId?: string;\n    ledgerCurrency?: AmazonPayV2LedgerCurrency;\n    publicKeyId?: string;\n    region?: string;\n    isButtonMicroTextDisabled?: boolean;\n    paymentToken?: string;\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    buttonColor?: AmazonPayV2ButtonColor;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n    isButtonMicroTextDisabled?: boolean;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface AmazonPayAdditionalActionErrorBody {\n    status: string;\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n","import {\n    CheckoutSettings,\n    getShippableItemsCount,\n    guard,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonDesign,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    InternalCheckoutSelectors,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\nimport { isInternalCheckoutSelectors } from './isInternalCheckoutSelectors';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private amazonPayV2SDK?: AmazonPayV2SDK;\n    private buttonParentContainer?: HTMLDivElement;\n    private amazonPayV2Button?: AmazonPayV2Button;\n    private isBuyNowFlow?: boolean;\n\n    constructor(private amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<void> {\n        this.amazonPayV2SDK = await this.amazonPayV2ScriptLoader.load(paymentMethod);\n        this.buttonParentContainer =\n            this.buttonParentContainer || this.createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this.amazonPayV2Button = undefined;\n        this.buttonParentContainer?.remove();\n        this.buttonParentContainer = undefined;\n        this.amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this.getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this.amazonPayV2Button = this.getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this.prepareRequestConfig(createCheckoutSessionConfig);\n\n        this.getAmazonPayV2Button().onClick(() => {\n            this.getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<\n            | {\n                  createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n                  estimatedOrderAmount: AmazonPayV2Price;\n                  productType: AmazonPayV2PayOptions;\n              }\n            | undefined\n        >,\n    ) {\n        this.getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n\n            if (config) {\n                const requestConfig = this.prepareRequestConfig(\n                    config.createCheckoutSessionConfig,\n                    config.estimatedOrderAmount,\n                    config.productType,\n                );\n\n                this.getAmazonPayV2Button().initCheckout(requestConfig);\n            }\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this.amazonPayV2SDK) {\n            this.amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        buttonColor,\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n        isButtonMicroTextDisabled = false,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const { id: parentContainerId } = container.appendChild(this.getButtonParentContainer());\n\n        if (options && isButtonMicroTextDisabled) {\n            options.design = AmazonPayV2ButtonDesign.C0001;\n        }\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this.getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n                buttonColor,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this.getButtonParentContainer();\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow?: boolean) {\n        this.isBuyNowFlow = Boolean(isBuyNowFlow);\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this.isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private getAmazonPayV2ButtonOptions(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n        buttonColor = AmazonPayV2ButtonColor.Gold,\n    ): AmazonPayV2ButtonParameters {\n        const { getCart, getCheckout, getStoreConfigOrThrow, getPaymentMethodOrThrow } =\n            this.getCheckoutState(checkoutState);\n        const {\n            config: { merchantId, testMode },\n            initializationData,\n        } = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n\n        if (!initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            checkoutLanguage,\n            checkoutSessionMethod,\n            createCheckoutSessionConfig,\n            extractAmazonCheckoutSessionId,\n            ledgerCurrency,\n            publicKeyId = '',\n            isButtonMicroTextDisabled,\n        } = initializationData;\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor,\n            ...(isButtonMicroTextDisabled ? { design: AmazonPayV2ButtonDesign.C0001 } : {}),\n        };\n\n        if (this.isBuyNowFlow) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            if (!createCheckoutSessionConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this.isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this.getOrThrow(this.amazonPayV2SDK);\n    }\n\n    private getButtonParentContainer(): HTMLDivElement {\n        return this.getOrThrow(this.buttonParentContainer);\n    }\n\n    private getAmazonPayV2Button(): AmazonPayV2Button {\n        return this.getOrThrow(this.amazonPayV2Button);\n    }\n\n    private getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    // INFO: need this mapping while we have strategies in core and in integration package at the same time\n    private getCheckoutState(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n    ): Pick<\n        PaymentIntegrationSelectors,\n        'getCart' | 'getCheckout' | 'getStoreConfigOrThrow' | 'getPaymentMethodOrThrow'\n    > {\n        if (isInternalCheckoutSelectors(checkoutState)) {\n            return {\n                getCart: checkoutState.cart.getCart,\n                getCheckout: checkoutState.checkout.getCheckout,\n                getStoreConfigOrThrow: checkoutState.config.getStoreConfigOrThrow,\n                getPaymentMethodOrThrow: <T>(methodId: string) =>\n                    checkoutState.paymentMethods.getPaymentMethodOrThrow<T>(methodId),\n            };\n        }\n\n        return checkoutState;\n    }\n}\n","import { InternalCheckoutSelectors } from './amazon-pay-v2';\n\nexport function isInternalCheckoutSelectors(\n    checkoutSelectors: unknown,\n): checkoutSelectors is InternalCheckoutSelectors {\n    return (\n        typeof checkoutSelectors === 'object' &&\n        checkoutSelectors !== null &&\n        'cart' in checkoutSelectors &&\n        'checkout' in checkoutSelectors &&\n        'config' in checkoutSelectors &&\n        'paymentMethods' in checkoutSelectors\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2HostWindow,\n    AmazonPayV2InitializeOptions,\n    amazonPayV2Regions,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private windowWithAmazonPay: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<AmazonPayV2SDK> {\n        const { initializationData } = method;\n        const region = initializationData?.region || 'us';\n\n        const amazonPayV2Region = amazonPayV2Regions[region];\n\n        await this.scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this.windowWithAmazonPay.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.windowWithAmazonPay.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    NotImplementedError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithAmazonPayV2CustomerInitializeOptions } from './amazon-pay-v2-customer-initialize-options';\n\nexport default class AmazonPayV2CustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithAmazonPayV2CustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId || !amazonpay?.container) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        let paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>;\n\n        try {\n            paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        }\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId: amazonpay.container,\n            methodId,\n            placement: AmazonPayV2Placement.Checkout,\n        });\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Amazon, the shopper must click on \"Amazon Pay\" button.',\n        );\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const payment = state.getPaymentId();\n\n        if (!payment) {\n            return;\n        }\n\n        await this.amazonPayV2PaymentProcessor.signout();\n        await this.paymentIntegrationService.remoteCheckoutSignOut(payment.providerId, options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n}\n","import { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2CustomerStrategy from './amazon-pay-v2-customer-strategy';\n\nconst createAmazonPayV2CustomerStrategy: CustomerStrategyFactory<AmazonPayV2CustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AmazonPayV2CustomerStrategy(\n        paymentIntegrationService,\n        createAmazonPayV2PaymentProcessor(),\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2CustomerStrategy, [{ id: 'amazonpay' }]);\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n    isAmazonPayAdditionalActionErrorBody,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutSettings,\n    guard,\n    InvalidArgumentError,\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithAmazonPayV2PaymentInitializeOptions } from './amazon-pay-v2-payment-initialize-options';\n\nexport default class AmazonPayV2PaymentStrategy implements PaymentStrategy {\n    private _amazonPayButton?: HTMLDivElement;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAmazonPayV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n        const paymentMethod = state.getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const initializationData = paymentMethod.initializationData || {};\n        const { paymentToken = '', region = '', isButtonMicroTextDisabled } = initializationData;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (this._isReadyToPay(paymentToken)) {\n            if (amazonpay?.editButtonId) {\n                this._bindEditButton(\n                    amazonpay.editButtonId,\n                    paymentToken,\n                    'changePayment',\n                    this._isModalFlow(region),\n                );\n            }\n        } else {\n            const { id: containerId } = this._createContainer();\n\n            this._amazonPayButton = this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n                checkoutState: state,\n                containerId,\n                decoupleCheckoutInitiation: this._isOneTimeTransaction(\n                    features,\n                    region.toUpperCase(),\n                ),\n                methodId,\n                placement: AmazonPayV2Placement.Checkout,\n                isButtonMicroTextDisabled,\n            });\n\n            if (!this._amazonPayButton) {\n                throw new InvalidArgumentError(\n                    'Unable to render the Amazon Pay button to an invalid HTML container element.',\n                );\n            }\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const state = this.paymentIntegrationService.getState();\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n        const paymentMethod = state.getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const initializationData = paymentMethod.initializationData || {};\n        const { paymentToken = '', region = '' } = initializationData;\n\n        if (\n            this._isReadyToPay(paymentToken) ||\n            this._isOneTimeTransaction(features, region.toUpperCase())\n        ) {\n            const paymentPayload = {\n                methodId,\n                paymentData: { nonce: paymentToken || 'apb' },\n            };\n\n            await this.paymentIntegrationService.submitOrder(payload, options);\n\n            try {\n                await this.paymentIntegrationService.submitPayment(paymentPayload);\n\n                return;\n            } catch (error) {\n                if (!isRequestError(error) || !isAmazonPayAdditionalActionErrorBody(error.body)) {\n                    throw error;\n                }\n\n                const { additional_action_required: additionalAction } = error.body;\n                const { redirect_url } = additionalAction.data;\n\n                if (paymentToken) {\n                    return new Promise(() => window.location.assign(redirect_url));\n                }\n\n                this.amazonPayV2PaymentProcessor.prepareCheckout(\n                    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                    JSON.parse(redirect_url) as Required<AmazonPayV2CheckoutSessionConfig>,\n                );\n            }\n        }\n\n        this._getAmazonPayButton().click();\n\n        // Focus of parent window used to try and detect the user cancelling the Amazon log in modal\n        // Should be refactored if/when Amazon add a modal close hook to their SDK\n        if (this._isModalFlow(region)) {\n            return new Promise((_, reject) => {\n                const onFocus = () => {\n                    window.removeEventListener('focus', onFocus);\n                    reject(\n                        new PaymentMethodCancelledError(\n                            'Shopper needs to login to Amazonpay to continue',\n                        ),\n                    );\n                };\n\n                window.addEventListener('focus', onFocus);\n            });\n        }\n\n        return new Promise<never>(noop);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.amazonPayV2PaymentProcessor.deinitialize();\n\n        this._amazonPayButton = undefined;\n    }\n\n    private _bindEditButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n        isModalFlow: boolean,\n    ): void {\n        const button = document.getElementById(buttonId);\n\n        if (!button || !button.parentNode) {\n            return;\n        }\n\n        if (!isModalFlow) {\n            const clone = button.cloneNode(true);\n\n            button.parentNode.replaceChild(clone, button);\n\n            clone.addEventListener('click', () => {\n                void this._showLoadingSpinner();\n            });\n        }\n\n        this.amazonPayV2PaymentProcessor.bindButton(buttonId, sessionId, changeAction);\n    }\n\n    private _isModalFlow(region: string) {\n        return region === 'us';\n    }\n\n    private async _showLoadingSpinner(): Promise<void> {\n        await this.paymentIntegrationService.widgetInteraction(() => new Promise(noop));\n    }\n\n    private _createContainer(): HTMLElement {\n        let container = document.getElementById('AmazonPayButton');\n\n        if (container) {\n            return container;\n        }\n\n        container = document.createElement('div');\n        container.id = 'AmazonPayButton';\n        container.style.display = 'none';\n\n        return document.body.appendChild(container);\n    }\n\n    private _getAmazonPayButton() {\n        return guard(\n            this._amazonPayButton,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _isOneTimeTransaction(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        return (\n            this.amazonPayV2PaymentProcessor.isPh4Enabled(features, storeCountryCode) &&\n            features['INT-6399.amazon_pay_apb']\n        );\n    }\n\n    private _isReadyToPay(paymentToken?: string): boolean {\n        return !!paymentToken;\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { AmazonPayAdditionalActionErrorBody } from './amazon-pay-v2';\n\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\nexport function isAmazonPayAdditionalActionErrorBody(\n    errorBody: unknown,\n): errorBody is AmazonPayAdditionalActionErrorBody {\n    return (\n        typeof errorBody === 'object' &&\n        errorBody !== null &&\n        'status' in errorBody &&\n        'additional_action_required' in errorBody &&\n        (errorBody as AmazonPayAdditionalActionErrorBody).status === 'additional_action_required' &&\n        'data' in (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required &&\n        'redirect_url' in\n            (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required.data &&\n        typeof (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required.data\n            .redirect_url === 'string'\n    );\n}\n/* eslint-enable @typescript-eslint/consistent-type-assertions */\n","import { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2PaymentStrategy from './amazon-pay-v2-payment-strategy';\n\nconst createAmazonPayV2PaymentStrategy: PaymentStrategyFactory<AmazonPayV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AmazonPayV2PaymentStrategy(\n        paymentIntegrationService,\n        createAmazonPayV2PaymentProcessor(),\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2PaymentStrategy, [{ id: 'amazonpay' }]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during config creation process. Please try again later.',\n        );\n\n        this.name = 'AmazonPayV2ConfigCreationError';\n        this.type = 'amazon_pay_v2_config_creation_error';\n    }\n}\n","import { WithBuyNowFeature } from './amazon-pay-v2-button-options';\n\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\n    if (!(options instanceof Object)) {\n        return false;\n    }\n\n    return 'buyNowInitializeOptions' in options;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import {\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    BuyNowCartCreationError,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    getShippableItemsCount,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    WithAmazonPayV2ButtonInitializeOptions,\n    WithBuyNowFeature,\n} from './amazon-pay-v2-button-options';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\nimport { isWithBuyNowFeatures } from './isWithBuyNowFeatures';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowInitializeOptions: WithBuyNowFeature['buyNowInitializeOptions'];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithAmazonPayV2ButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n        const { buttonColor } = amazonpay || {};\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n\n        const paymentMethod = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const { initializationData } = paymentMethod;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (!amazonpay) {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\n            ? undefined\n            : amazonpay;\n\n        if (\n            isWithBuyNowFeatures(amazonpay) &&\n            typeof amazonpay.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n        ) {\n            this._buyNowInitializeOptions = amazonpay.buyNowInitializeOptions;\n            this.amazonPayV2PaymentProcessor.updateBuyNowFlowFlag(true);\n        }\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId,\n            methodId,\n            options: initializeAmazonButtonOptions,\n            placement: AmazonPayV2Placement.Cart,\n            buttonColor,\n            isButtonMicroTextDisabled: initializationData?.isButtonMicroTextDisabled,\n        });\n\n        if (this._buyNowInitializeOptions) {\n            this.amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\n                this._getCheckoutCreationRequestConfig.bind(this),\n            );\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    private async _createBuyNowCartOrThrow() {\n        const buyNowCartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n        if (!buyNowCartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                buyNowCartRequestBody,\n            );\n\n            return buyNowCart;\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private async _createCheckoutConfig(\n        id: string,\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\n        try {\n            const {\n                body: { payload, public_key, ...rest },\n            } = await this.amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\n\n            return {\n                payloadJSON: payload,\n                publicKeyId: public_key,\n                ...rest,\n            };\n        } catch (error) {\n            throw new AmazonPayV2ConfigCreationError();\n        }\n    }\n\n    private async _getCheckoutCreationRequestConfig() {\n        const buyNowCart = await this._createBuyNowCartOrThrow();\n        const estimatedOrderAmount = {\n            amount: String(buyNowCart.baseAmount),\n            currencyCode: buyNowCart.currency.code,\n        };\n        const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\n\n        return {\n            createCheckoutSessionConfig,\n            estimatedOrderAmount,\n            productType:\n                getShippableItemsCount(buyNowCart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n        };\n    }\n}\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface CheckoutConfig {\n    payload: string;\n    signature: string;\n    public_key: string;\n}\n\nexport default class AmazonPayV2RequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createCheckoutConfig(cartId: string): Promise<Response<CheckoutConfig>> {\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2ButtonStrategy from './amazon-pay-v2-button-strategy';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\n\nconst createAmazonPayV2ButtonStrategy: CheckoutButtonStrategyFactory<AmazonPayV2ButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\n    const amazonPayV2PaymentProcessor = createAmazonPayV2PaymentProcessor();\n\n    return new AmazonPayV2ButtonStrategy(\n        paymentIntegrationService,\n        amazonPayV2PaymentProcessor,\n        amazonPayV2RequestSender,\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2ButtonStrategy, [{ id: 'amazonpay' }]);\n"],"names":["MissingDataErrorType","NotInitializedErrorType","StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","getShippableItemsCount","cart","lineItems","physicalItems","filter","item","addedByPromotion","reduce","total","quantity","guard","value","errorFactory","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","amazonPayV2Regions","de","jp","uk","us","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","AmazonPayV2ButtonDesign","AmazonPayV2PaymentProcessor","amazonPayV2ScriptLoader","initialize","paymentMethod","amazonPayV2SDK","load","buttonParentContainer","createAmazonPayButtonParentContainer","deinitialize","amazonPayV2Button","undefined","remove","Promise","resolve","bindButton","buttonId","sessionId","changeAction","getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","containerId","options","renderButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","prepareRequestConfig","getAmazonPayV2Button","onClick","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","config","estimatedOrderAmount","productType","signout","renderAmazonPayButton","buttonColor","checkoutState","decoupleCheckoutInitiation","methodId","placement","isButtonMicroTextDisabled","container","document","querySelector","id","parentContainerId","appendChild","getButtonParentContainer","design","C0001","amazonPayV2ButtonOptions","getAmazonPayV2ButtonOptions","updateBuyNowFlowFlag","isBuyNowFlow","Boolean","isPh4Enabled","features","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","isEnvironmentSpecific","uid","Math","random","toString","substr","parentContainer","createElement","Gold","getCart","getCheckout","getStoreConfigOrThrow","getPaymentMethodOrThrow","getCheckoutState","merchantId","testMode","initializationData","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","sandbox","PayOnly","PayAndShip","checkoutSettings","storeProfile","shopPath","amount","outstandingBalance","currencyCode","currency","code","buttonOptions","tmpConfig","createCheckoutSession","method","url","test","getOrThrow","checkoutSelectors","checkout","paymentMethods","PaymentMethodClientUnavailableError","AmazonPayV2ScriptLoader","scriptLoader","windowWithAmazonPay","window","region","amazonPayV2Region","loadScript","amazon","createAmazonPayV2PaymentProcessor","getScriptLoader","toResolvableModule","module","resolveIds","assign","InvalidArgumentError","NotImplementedError","AmazonPayV2CustomerStrategy","paymentIntegrationService","amazonPayV2PaymentProcessor","amazonpay","getState","_e","loadPaymentMethod","Checkout","signIn","signOut","payment","getPaymentId","remoteCheckoutSignOut","providerId","executePaymentMethodCheckout","continueWithCheckoutCallback","PaymentArgumentInvalidError","invalidFields","join","PaymentMethodCancelledError","OrderFinalizationNotRequiredError","AmazonPayV2PaymentStrategy","state","paymentToken","_isReadyToPay","editButtonId","_bindEditButton","_isModalFlow","_createContainer","_amazonPayButton","_isOneTimeTransaction","toUpperCase","execute","payload","paymentPayload","paymentData","nonce","submitOrder","submitPayment","error","errorBody","body","status","additional_action_required","data","redirect_url","additionalAction","location","JSON","parse","_getAmazonPayButton","click","_","reject","onFocus","removeEventListener","addEventListener","noop","finalize","isModalFlow","button","getElementById","parentNode","clone","cloneNode","replaceChild","_showLoadingSpinner","widgetInteraction","style","display","BuyNowCartCreationError","AmazonPayV2ConfigCreationError","isWithBuyNowFeatures","ContentType","AmazonPayV2ButtonStrategy","amazonPayV2ConfigRequestSender","loadDefaultCheckout","initializeAmazonButtonOptions","buyNowInitializeOptions","getBuyNowCartRequestBody","_buyNowInitializeOptions","Cart","_getCheckoutCreationRequestConfig","bind","_createBuyNowCartOrThrow","buyNowCartRequestBody","createBuyNowCart","_createCheckoutConfig","public_key","rest","payloadJSON","buyNowCart","String","baseAmount","SDK_VERSION_HEADERS","AmazonPayV2RequestSender","_requestSender","cartId","headers","Json","post","requestSender","createRequestSender","amazonPayV2RequestSender"],"sourceRoot":""}