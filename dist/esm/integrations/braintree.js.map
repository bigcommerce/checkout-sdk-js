{"version":3,"file":"integrations/braintree.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/paypal.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-credit-card-instrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/checkout-buttons/default-checkout-button-height.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/get-fastlane-styles.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/storage/src/cookie-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/create-braintree-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-us-bank-account-instrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-ach/braintree-ach-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-ach/create-braintree-ach-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/create-braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-messages.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/overlay/overlay.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/overlay/overlay-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-paypal-provider-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-local-payment-methods/braintree-local-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-local-payment-methods/create-braintree-local-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-accelerated-checkout-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/create-braintree-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/braintree-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/create-braintree-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-credit-card/braintree-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-payment-request-3ds-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-form-fields-map.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-hosted-form/braintree-hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-supported-card-brand.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-credit-card/create-braintree-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/isUnsupportedBrowserError.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/create-braintree-venmo-button-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION = '3.128.0';\nexport const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5809.braintree_hosted_fields_fix_version')) {\n            return BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","// the PayPal side of things uses uppercase keys instead of camel case\n\n/**\n *\n * PayPal constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\n/**\n *\n * PayPal interfaces\n *\n */\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    buyerCountry?: string;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport enum MessagingPlacements {\n    CART = 'cart',\n    HOME = 'homepage',\n    PAYMENT = 'payment',\n    PRODUCT = 'product',\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onClick?(): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number | string;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n    close(): void;\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<unknown>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n    nonce?: string;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    preventCursorJumps?: boolean;\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import { supportsPopups } from '@braintree/browser-detection';\n\nimport {\n    Address,\n    CancellablePromise,\n    CreditCardInstrument,\n    LegacyAddress,\n    NonceInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodCancelledError,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeDataCollectors,\n    BraintreeEnv,\n    BraintreeError,\n    BraintreeFastlane,\n    BraintreeFastlaneStylesOption,\n    BraintreeHostWindow,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeRequestData,\n    BraintreeShippingAddressOverride,\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureOptions,\n    BraintreeTokenizationDetails,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig,\n    BraintreeVerifyPayload,\n    PAYPAL_COMPONENTS,\n    TokenizationPayload,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { isEmpty } from 'lodash';\nimport isCreditCardInstrumentLike from './utils/is-credit-card-instrument-like';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\n// Info: this class is deprecated and will be removed in a nearest future. Please, do not add anything here.\nexport default class BraintreeIntegrationService {\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private dataCollectors: BraintreeDataCollectors = {};\n    private paypalCheckout?: BraintreePaypalCheckout;\n    private braintreePaypal?: Promise<BraintreePaypal>;\n    private threeDSecureOptions?: BraintreeThreeDSecureOptions;\n    private threeDS?: Promise<BraintreeThreeDSecure>;\n    private venmoCheckout?: BraintreeVenmoCheckout;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private overlay?: Overlay,\n    ) {}\n\n    initialize(clientToken: string, threeDSecureOptions?: BraintreeThreeDSecureOptions) {\n        this.clientToken = clientToken;\n        this.threeDSecureOptions = threeDSecureOptions;\n    }\n\n    async getBraintreeFastlane(\n        cardId?: string,\n        isTestModeEnabled?: boolean,\n        styles?: BraintreeFastlaneStylesOption,\n    ): Promise<BraintreeFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('axoEnv', 'sandbox');\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n        }\n\n        if (!this.braintreeHostWindow.braintreeFastlane) {\n            const clientToken = this.getClientTokenOrThrow();\n            const client = await this.getClient();\n            const deviceData = await this.getSessionId(cardId);\n\n            const braintreeFastlaneCreator = await this.braintreeScriptLoader.loadFastlane();\n\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.braintreeHostWindow.braintreeFastlane = await braintreeFastlaneCreator.create({\n                authorization: clientToken,\n                client,\n                deviceData,\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.braintreeHostWindow.braintreeFastlane;\n    }\n\n    // Info: This method is deprecated. Use getClient method from BraintreeSdk class instead\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this.braintreePaypal) {\n            this.braintreePaypal = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.braintreePaypal;\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        const newWindowFlow = supportsPopups();\n\n        return this.getPaypal()\n            .then((paypal) => {\n                if (newWindowFlow) {\n                    this.overlay?.show({\n                        onClick: () => paypal.focusWindow(),\n                    });\n                }\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then((response) => {\n                this.overlay?.remove();\n\n                return response;\n            })\n            .catch((error) => {\n                this.overlay?.remove();\n\n                throw error;\n            });\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this.braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError | undefined,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n                components: PAYPAL_COMPONENTS.toString(),\n                intent: config.intent,\n                commit: config.commit ?? true,\n            };\n\n            if (!this.braintreeHostWindow.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this.paypalCheckout = await paypalCheckout.create(\n            paypalCheckoutConfig,\n            paypalCheckoutCallback,\n        );\n\n        return this.paypalCheckout;\n    }\n\n    async getDataCollector(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const cacheKey: keyof BraintreeDataCollectors = options?.paypal ? 'paypal' : 'default';\n\n        let cached = this.dataCollectors[cacheKey];\n\n        if (!cached) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                cached = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    cached = {\n                        deviceData: undefined,\n                        teardown: () => Promise.resolve(),\n                    };\n                } else {\n                    throw error;\n                }\n            }\n\n            this.dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getBraintreeEnv(isTestMode = false): BraintreeEnv {\n        return isTestMode ? BraintreeEnv.Sandbox : BraintreeEnv.Production;\n    }\n\n    mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n        return {\n            recipientName: `${address.firstName} ${address.lastName}`,\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n        };\n    }\n\n    mapToLegacyShippingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { email, phone, shippingAddress } = details;\n        const recipientName = shippingAddress?.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email,\n            first_name: firstName || '',\n            last_name: lastName || '',\n            phone_number: phone,\n            address_line_1: shippingAddress?.line1,\n            address_line_2: shippingAddress?.line2,\n            city: shippingAddress?.city,\n            state: shippingAddress?.state,\n            country_code: shippingAddress?.countryCode,\n            postal_code: shippingAddress?.postalCode,\n        };\n    }\n\n    mapToLegacyBillingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n        const address = billingAddress || shippingAddress;\n\n        return {\n            email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: phone,\n            address_line_1: address?.line1,\n            address_line_2: address?.line2,\n            city: address?.city,\n            state: address?.state,\n            country_code: address?.countryCode,\n            postal_code: address?.postalCode,\n        };\n    }\n\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    async getSessionId(cartId?: string): Promise<string | undefined> {\n        const { deviceData } = await this.getDataCollector({\n            riskCorrelationId: cartId,\n        });\n\n        return deviceData;\n    }\n\n    async teardown(): Promise<void> {\n        await this.teardownModule(this.dataCollectors.default);\n        await this.teardownModule(this.dataCollectors.paypal);\n        this.dataCollectors = {};\n\n        await this.teardownModule(this.paypalCheckout);\n        this.paypalCheckout = undefined;\n\n        // await this.teardownModule(this._venmoCheckout);\n        // this._venmoCheckout = undefined;\n\n        // await this.teardownModule(this._visaCheckout);\n        // this._visaCheckout = undefined;\n    }\n\n    async get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            this.threeDS = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]).then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }));\n        }\n\n        return this.threeDS;\n    }\n\n    async getVenmoCheckout(\n        venmoConfig?: BraintreeVenmoCreatorConfig,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this.venmoCheckout) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n                ...(venmoConfig || {}),\n            };\n\n            this.venmoCheckout = await new Promise<BraintreeVenmoCheckout>((resolve, reject) => {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                venmoCheckout.create(\n                    venmoCheckoutConfig,\n                    (error: BraintreeError, braintreeVenmoCheckout: BraintreeVenmoCheckout) => {\n                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                        if (error) {\n                            return reject(error);\n                        }\n\n                        if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                            return reject(new UnsupportedBrowserError());\n                        }\n\n                        resolve(braintreeVenmoCheckout);\n                    },\n                );\n            });\n        }\n\n        return this.venmoCheckout;\n    }\n\n    /*\n       Braintree Credit Card and Braintree Hosted Form\n   */\n    async verifyCard(\n        payment: Payment,\n        billingAddress: Address,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this.tokenizeCard(payment, billingAddress);\n\n        return this.challenge3DSVerification(tokenizationPayload, amount);\n    }\n\n    async tokenizeCard(payment: Payment, billingAddress: Address): Promise<TokenizationPayload> {\n        const { paymentData } = payment;\n\n        if (!isCreditCardInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const errors = this.getErrorsRequiredFields(paymentData);\n\n        if (!isEmpty(errors)) {\n            throw new PaymentInvalidFormError(errors);\n        }\n\n        const requestData = this.mapToCreditCard(paymentData, billingAddress);\n        const client = await this.getClient();\n        const { creditCards } = await client.request(requestData);\n\n        return {\n            nonce: creditCards[0].nonce,\n            bin: creditCards[0].details.bin,\n        };\n    }\n\n    async challenge3DSVerification(\n        tokenizationPayload: TokenizationPayload,\n        amount: number,\n    ): Promise<BraintreeVerifyPayload> {\n        const threeDSecure = await this.get3DS();\n\n        return this.present3DSChallenge(threeDSecure, amount, tokenizationPayload);\n    }\n\n    private teardownModule(module?: BraintreeModule) {\n        return module ? module.teardown() : Promise.resolve();\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private getErrorsRequiredFields(\n        paymentData: CreditCardInstrument,\n    ): PaymentInvalidFormErrorDetails {\n        const { ccNumber, ccExpiry } = paymentData;\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        if (!ccNumber) {\n            errors.ccNumber = [\n                {\n                    message: 'Credit card number is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!ccExpiry) {\n            errors.ccExpiry = [\n                {\n                    message: 'Expiration date is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        return errors;\n    }\n\n    private mapToCreditCard(\n        creditCard: CreditCardInstrument,\n        billingAddress?: Address,\n    ): BraintreeRequestData {\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: billingAddress && {\n                        countryCodeAlpha2: billingAddress.countryCode,\n                        locality: billingAddress.city,\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress: billingAddress.address2\n                            ? `${billingAddress.address1} ${billingAddress.address2}`\n                            : billingAddress.address1,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n\n    private present3DSChallenge(\n        threeDSecure: BraintreeThreeDSecure,\n        amount: number,\n        tokenizationPayload: TokenizationPayload,\n    ): Promise<BraintreeVerifyPayload> {\n        const { nonce, bin } = tokenizationPayload;\n\n        if (!this.threeDSecureOptions || !nonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            addFrame,\n            removeFrame,\n            challengeRequested = true,\n            additionalInformation,\n        } = this.threeDSecureOptions;\n        const cancelVerifyCard = async () => {\n            const response = await threeDSecure.cancelVerifyCard();\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            verification.cancel(new PaymentMethodCancelledError());\n\n            return response;\n        };\n\n        const roundedAmount = amount.toFixed(2);\n\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                addFrame: (error, iframe) => {\n                    if (addFrame) {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    }\n                },\n                amount: Number(roundedAmount),\n                bin,\n                challengeRequested,\n                nonce,\n                removeFrame,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n                collectDeviceData: true,\n                additionalInformation,\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import { CreditCardInstrument } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isCreditCardInstrumentLike(\n    instrument: unknown,\n): instrument is CreditCardInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const creditCardInstrument = instrument as Partial<Record<string, unknown>>;\n\n    return (\n        typeof creditCardInstrument.ccExpiry === 'object' &&\n        creditCardInstrument.ccExpiry !== null &&\n        typeof creditCardInstrument.ccNumber === 'string' &&\n        typeof creditCardInstrument.ccName === 'string'\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n    [BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh',\n        [BraintreeModuleName.Paypal]:\n            'sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv',\n        [BraintreeModuleName.Venmo]:\n            'sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr',\n    },\n};\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCustomerInitializeOptions, {\n    WithBraintreePaypalCustomerInitializeOptions,\n} from './braintree-paypal-customer-initialize-options';\n\nexport default class BraintreePaypalCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreePaypalCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, methodId } = options;\n        const { container, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal.container\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<BraintreeInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n            if (!paymentMethod.clientToken) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n            }\n        } catch (_e) {\n            state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        const { clientToken, config, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n            commit: false,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                methodId,\n                Boolean(config.testMode),\n                checkoutTopButtonStyles,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, container, onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n        buttonStyles: PaypalStyleOptions,\n    ): void {\n        const { container, onClick = noop } = braintreepaypal;\n\n        const { paypal } = this.braintreeHostWindow;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const paypalButtonRender = paypal.Buttons({\n                env: this.braintreeIntegrationService.getBraintreeEnv(testMode),\n                fundingSource,\n                style: { ...buttonStyles, height: DefaultCheckoutButtonHeight },\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        braintreepaypal,\n                    ),\n                onClick,\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${container}`);\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(container);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        try {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            const state = this.paymentIntegrationService.getState();\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.getCartOrThrow().currency.code;\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","const DefaultCheckoutButtonHeight = 36;\n\nexport default DefaultCheckoutButtonHeight;\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCustomerStrategy from './braintree-paypal-customer-strategy';\n\nconst createBraintreePaypalCustomerStrategy: CustomerStrategyFactory<\n    BraintreePaypalCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCustomerStrategy, [\n    { id: 'braintreepaypal' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditCustomerInitializeOptions, {\n    WithBraintreePaypalCreditCustomerInitializeOptions,\n} from './braintree-paypal-credit-customer-initialize-options';\n\nexport default class BraintreePaypalCreditCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, methodId } = options;\n        const { container, onError } = braintreepaypalcredit || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit.container\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<BraintreeInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        const { clientToken, config, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n            commit: false,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                methodId,\n                Boolean(config.testMode),\n                { ...checkoutTopButtonStyles, height: DefaultCheckoutButtonHeight },\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, container, onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n        buttonStyles: PaypalStyleOptions,\n    ): void {\n        const { container, onClick = noop } = braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyles,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                braintreepaypalcredit,\n                            ),\n                        onClick,\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${container}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(container);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        try {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            const state = this.paymentIntegrationService.getState();\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.getCartOrThrow().currency.code;\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypalcredit;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypalcredit;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditCustomerStrategy from './braintree-paypal-credit-customer-strategy';\n\nconst createBraintreePaypalCreditCustomerStrategy: CustomerStrategyFactory<\n    BraintreePaypalCreditCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalCreditCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditCustomerStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","import { omitBy } from 'lodash';\n\nimport { BraintreeFastlaneStylesOption, FastlaneStylesSettings } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: BraintreeFastlaneStylesOption,\n): BraintreeFastlaneStylesOption | undefined {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: BraintreeFastlaneStylesOption,\n): BraintreeFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: BraintreeFastlaneStylesOption) {\n    const fastlaneStyles: BraintreeFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { HostedInstrument, NonceInstrument } from './payment';\n\ntype PaymentInstrument = CardInstrument | AccountInstrument | HostedInstrument | NonceInstrument;\n\nexport default PaymentInstrument;\n\nexport interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport interface CardInstrument extends BaseInstrument {\n    brand: string;\n    expiryMonth: string;\n    expiryYear: string;\n    iin: string;\n    last4: string;\n    type: 'card';\n    untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType;\n}\n\ninterface BaseAccountInstrument extends BaseInstrument {\n    method: string;\n    type: 'account' | 'bank';\n}\n\nexport interface PayPalInstrument extends BaseAccountInstrument {\n    externalId: string;\n    method: 'paypal';\n}\n\nexport interface AchInstrument extends BaseAccountInstrument {\n    issuer: string;\n    accountNumber: string;\n    type: 'bank';\n    method: 'ach' | 'ecp';\n}\n\nexport interface BankInstrument extends BaseAccountInstrument {\n    accountNumber: string;\n    issuer: string;\n    iban: string;\n    method: string;\n    type: 'bank';\n}\n\nexport type AccountInstrument = PayPalInstrument | BankInstrument | AchInstrument;\n\nexport interface VaultAccessToken {\n    vaultAccessToken: string;\n    vaultAccessExpiry: number;\n}\n\nexport interface SessionContext {\n    customerId: number;\n    storeId: string;\n    currencyCode?: string;\n}\n\nexport interface InstrumentRequestContext extends SessionContext {\n    authToken: string;\n}\n","import {\n    BraintreeInitializationData,\n    getFastlaneStyles,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeFastlaneCustomerInitializeOptions } from './braintree-fastlane-customer-initialize-options';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nexport default class BraintreeFastlaneCustomerStrategy implements CustomerStrategy {\n    private isAcceleratedCheckoutEnabled = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeFastlaneUtils: BraintreeFastlaneUtils,\n    ) {}\n\n    async initialize({\n        methodId,\n        braintreefastlane,\n    }: CustomerInitializeOptions & WithBraintreeFastlaneCustomerInitializeOptions): Promise<void> {\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const paymentMethod = await this.getValidPaymentMethodOrThrow(methodId);\n\n        const { isAcceleratedCheckoutEnabled, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        const paypalFastlaneStylesSettings = isFastlaneStylingEnabled\n            ? paymentMethod.initializationData?.fastlaneStyles\n            : undefined;\n\n        this.isAcceleratedCheckoutEnabled = !!isAcceleratedCheckoutEnabled;\n\n        try {\n            if (this.isAcceleratedCheckoutEnabled) {\n                const fastlaneStyles = getFastlaneStyles(\n                    paypalFastlaneStylesSettings,\n                    braintreefastlane?.styles,\n                );\n\n                await this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(\n                    paymentMethod.id,\n                    fastlaneStyles,\n                );\n            }\n        } catch (_) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback } = options || {};\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (this.isAcceleratedCheckoutEnabled && customer.isGuest) {\n            const shouldRunAuthenticationFlow = await this.shouldRunAuthenticationFlow();\n\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            if (shouldRunAuthenticationFlow) {\n                await this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow(\n                    undefined,\n                    true,\n                );\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    // TODO: remove this method after A/B testing finished\n    private async shouldRunAuthenticationFlow(): Promise<boolean> {\n        const primaryMethodId = 'braintreeacceleratedcheckout';\n\n        try {\n            // Info: we should load payment method each time to detect if the user\n            // should be in a test or in a control group\n            await this.paymentIntegrationService.loadPaymentMethod(primaryMethodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(primaryMethodId);\n\n            // Info: shouldRunAcceleratedCheckout is responsible for the flow of A/B testing purposes\n            // when shouldRunAcceleratedCheckout is true, the lookup PayPal Connect method should be called,\n            // otherwise AcceleratedCheckout should not be available for the customer\n            return paymentMethod.initializationData?.shouldRunAcceleratedCheckout || false;\n        } catch (_) {\n            return false;\n        }\n    }\n\n    private async getValidPaymentMethodOrThrow(\n        methodId: string,\n    ): Promise<PaymentMethod<BraintreeInitializationData>> {\n        let validPaymentMethodId = methodId;\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        } catch {\n            validPaymentMethodId =\n                methodId === 'braintree' ? 'braintreeacceleratedcheckout' : 'braintree';\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        }\n\n        return this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<BraintreeInitializationData>(validPaymentMethodId);\n    }\n}\n","interface CookieOptions {\n    expires?: Date;\n    path?: string;\n    domain?: string;\n    secure?: boolean;\n}\n\nexport default class CookieStorage {\n    static get(name: string): string | null {\n        const cookieKey = `${encodeURIComponent(`${name}`)}=`;\n        const cookie = document.cookie;\n\n        let value = null;\n\n        const firstIndex = cookie.indexOf(cookieKey);\n\n        if (firstIndex > -1) {\n            let lastIndex = cookie.indexOf(';', firstIndex);\n\n            if (lastIndex === -1) {\n                lastIndex = cookie.length;\n            }\n\n            value = decodeURIComponent(cookie.substring(firstIndex + cookieKey.length, lastIndex));\n        }\n\n        return value;\n    }\n\n    static set(name: string, value: string, options: CookieOptions = { secure: true }) {\n        let cookieText = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`;\n\n        const { expires, path, domain, secure } = options;\n\n        if (expires) {\n            cookieText += `; expires=${expires.toUTCString()}`;\n        } else {\n            const now = new Date();\n            // info: default cookie expiration time after setup\n            const minutes = 60;\n\n            now.setTime(now.getTime() + minutes * 60 * 1000);\n\n            cookieText += `; expires=${now.toUTCString()}`;\n        }\n\n        if (path) {\n            cookieText += `; path=${path}`;\n        }\n\n        if (domain) {\n            cookieText += `; domain=${domain}`;\n        }\n\n        if (secure) {\n            cookieText += '; secure';\n        }\n\n        document.cookie = cookieText;\n    }\n\n    static remove(name: string, options?: CookieOptions) {\n        CookieStorage.set(name, '', { expires: new Date(0), ...options });\n    }\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    BraintreeFastlane,\n    BraintreeFastlaneAddress,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneProfileData,\n    BraintreeFastlaneStylesOption,\n    BraintreeFastlaneVaultedInstrument,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CardInstrument,\n    CustomerAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nexport default class BraintreeFastlaneUtils {\n    private braintreeFastlane?: BraintreeFastlane;\n    private methodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async getDeviceSessionId(): Promise<string | undefined> {\n        const cart = this.paymentIntegrationService.getState().getCart();\n\n        return this.braintreeIntegrationService.getSessionId(cart?.id);\n    }\n\n    /**\n     *\n     * Initialization method\n     *\n     */\n    async initializeBraintreeFastlaneOrThrow(\n        methodId: string,\n        styles?: BraintreeFastlaneStylesOption,\n    ) {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCart();\n        const { clientToken, config } =\n            state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.methodId = methodId;\n\n        this.braintreeIntegrationService.initialize(clientToken);\n\n        this.braintreeFastlane = await this.braintreeIntegrationService.getBraintreeFastlane(\n            cart?.id,\n            config.testMode,\n            styles,\n        );\n    }\n\n    getBraintreeFastlaneOrThrow(): BraintreeFastlane {\n        if (!this.braintreeFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeFastlane;\n    }\n\n    getBraintreeFastlaneComponentOrThrow(): BraintreeFastlane['FastlaneCardComponent'] {\n        const braintreeFastlane = this.getBraintreeFastlaneOrThrow();\n\n        return braintreeFastlane.FastlaneCardComponent;\n    }\n\n    /**\n     *\n     * Authentication methods\n     *\n     * */\n    // Remove this rule disabling after method refactor\n    // eslint-disable-next-line complexity\n    async runPayPalAuthenticationFlowOrThrow(\n        email?: string,\n        shouldSetShippingOption?: boolean,\n    ): Promise<void> {\n        try {\n            const methodId = this.getMethodIdOrThrow();\n            const braintreeFastlane = this.getBraintreeFastlaneOrThrow();\n            const { lookupCustomerByEmail, triggerAuthenticationFlow } = braintreeFastlane.identity;\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId)\n                    .initializationData || {};\n\n            const customerEmail = email || customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } = await lookupCustomerByEmail(customerEmail);\n\n            if (!customerContextId) {\n                // Info: we should clean up previous experience with default data and related authenticationState\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState: BraintreeFastlaneAuthenticationState.UNRECOGNIZED,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.saveSessionIdToCookies(cart.id);\n\n                return;\n            }\n\n            const { authenticationState, profileData } = await triggerAuthenticationFlow(\n                customerContextId,\n            );\n\n            const phoneNumber = profileData?.shippingAddress?.phoneNumber || '';\n\n            if (authenticationState === BraintreeFastlaneAuthenticationState.CANCELED) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.removeSessionIdFromCookies();\n\n                return;\n            }\n\n            const shippingAddresses =\n                this.mapPayPalToBcAddress([profileData.shippingAddress], [phoneNumber]) || [];\n            const paypalBillingAddress = this.getPayPalBillingAddresses(profileData);\n            const billingAddresses = paypalBillingAddress\n                ? this.mapPayPalToBcAddress([paypalBillingAddress], [phoneNumber])\n                : [];\n            const instruments = profileData.card\n                ? this.mapPayPalToBcInstrument(methodId, [profileData.card])\n                : [];\n            const addresses = this.mergeShippingAndBillingAddresses(\n                shippingAddresses,\n                billingAddresses,\n            );\n\n            this.saveSessionIdToCookies(cart.id);\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            if (billingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateBillingAddress(billingAddresses[0]);\n            }\n\n            // Prefill billing form if only digital items in cart with billing data and firstName and lastName\n            // from shippingAddresses because there are empty in billing\n            if (\n                billingAddresses.length > 0 &&\n                cart.lineItems.digitalItems.length > 0 &&\n                cart.lineItems.physicalItems.length === 0\n            ) {\n                const { firstName, lastName } = addresses[0];\n                const digitalItemBilling = {\n                    ...billingAddresses[0],\n                    firstName,\n                    lastName,\n                };\n\n                await this.paymentIntegrationService.updateBillingAddress(digitalItemBilling);\n            }\n\n            if (shippingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddresses[0]);\n\n                if (shouldSetShippingOption && isFastlaneShippingOptionAutoSelectEnabled) {\n                    await this.setShippingOption();\n                }\n            }\n        } catch (error) {\n            // TODO: we should figure out what to do here\n            // TODO: because we should not to stop the flow if the error occurs on paypal side\n        }\n    }\n\n    /**\n     *\n     * Session id management\n     *\n     */\n    getSessionIdFromCookies(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    saveSessionIdToCookies(sessionId: string): void {\n        const expires = new Date();\n\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, {\n            expires,\n            secure: true,\n        });\n    }\n\n    removeSessionIdFromCookies(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    /**\n     *\n     * PayPal to BC data mappers\n     *\n     * */\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instruments?: BraintreeFastlaneVaultedInstrument[],\n    ): CardInstrument[] | undefined {\n        if (!instruments) {\n            return;\n        }\n\n        return instruments.map((instrument) => {\n            const { id, paymentSource } = instrument;\n            const { brand, expiry, lastDigits, binDetails } = paymentSource.card;\n\n            const [expiryYear, expiryMonth] = expiry.split('-');\n\n            return {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: binDetails?.bin || '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                type: 'card',\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n            };\n        });\n    }\n\n    private mapPayPalToBcAddress(\n        addresses?: BraintreeFastlaneAddress[],\n        phones?: string[],\n    ): CustomerAddress[] {\n        if (!addresses) {\n            return [];\n        }\n\n        const countries = this.paymentIntegrationService.getState().getCountries() || [];\n\n        const getCountryNameByCountryCode = (countryCode: string) => {\n            const matchedCountry = countries.find((country) => country.code === countryCode);\n\n            return matchedCountry?.name || '';\n        };\n\n        return addresses.map((address) => ({\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: address.firstName || '',\n            lastName: address.lastName || '',\n            company: address.company || '',\n            address1: address.streetAddress,\n            address2: address.extendedAddress || '',\n            city: address.locality,\n            stateOrProvince: address.region,\n            stateOrProvinceCode: address.region,\n            country: getCountryNameByCountryCode(address.countryCodeAlpha2),\n            countryCode: address.countryCodeAlpha2,\n            postalCode: address.postalCode,\n            phone: (phones && phones[0]) || '',\n            customFields: [],\n        }));\n    }\n\n    /**\n     *\n     * Get PayPal billing addresses from stored braintree instruments info\n     *\n     * */\n    private getPayPalBillingAddresses(\n        profileData?: BraintreeFastlaneProfileData,\n    ): BraintreeFastlaneAddress | undefined {\n        const { card, name } = profileData || {};\n\n        if (!card) {\n            return;\n        }\n\n        const { firstName, lastName } = card.paymentSource.card.billingAddress;\n        const { firstName: given_name, lastName: surname } = name || {};\n        const { shippingAddress } = profileData || {};\n        const address = {\n            ...card.paymentSource.card.billingAddress,\n            firstName: firstName || given_name,\n            lastName: lastName || surname,\n        };\n\n        const isAddressExist =\n            shippingAddress &&\n            isEqual(this.normalizeAddress(address), this.normalizeAddress(shippingAddress));\n\n        return isAddressExist ? shippingAddress : address;\n    }\n\n    private normalizeAddress(address: CustomerAddress | BraintreeFastlaneAddress) {\n        return omit(address, ['id']);\n    }\n\n    private mergeShippingAndBillingAddresses(\n        shippingAddresses: CustomerAddress[],\n        billingAddresses: CustomerAddress[],\n    ): CustomerAddress[] {\n        const filteredBillingAddresses = billingAddresses.filter(\n            (billingAddress: CustomerAddress) =>\n                !shippingAddresses.some((shippingAddress: CustomerAddress) => {\n                    return isEqual(\n                        this.normalizeAddress(shippingAddress),\n                        this.normalizeAddress(billingAddress),\n                    );\n                }),\n        );\n\n        return [...shippingAddresses, ...filteredBillingAddresses];\n    }\n\n    /**\n     *\n     * Other\n     *\n     * */\n    private getMethodIdOrThrow(): string {\n        if (!this.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        return this.methodId;\n    }\n\n    private async setShippingOption(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const consignments = state.getConsignments() || [];\n        const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        if (recommendedShippingOption || availableShippingOptions.length) {\n            const selectedOption = recommendedShippingOption || availableShippingOptions[0];\n\n            await this.paymentIntegrationService.selectShippingOption(selectedOption.id);\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeFastlaneCustomerStrategy from './braintree-fastlane-customer-strategy';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nconst createBraintreeFastlaneCustomerStrategy: CustomerStrategyFactory<\n    BraintreeFastlaneCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n    const braintreeFastlaneUtils = new BraintreeFastlaneUtils(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n\n    return new BraintreeFastlaneCustomerStrategy(paymentIntegrationService, braintreeFastlaneUtils);\n};\n\n// Info: braintree method id was added only for A/B testing purposes.\n// The main reason why we can't go in other way, because braintreeacceleratedcheckout\n// may be turned on only when BE knows customer's email address (to understand should we show the feature for the user or not).\n// So { id: 'braintree' }, should be removed after A/B testing\nexport default toResolvableModule(createBraintreeFastlaneCustomerStrategy, [\n    { id: 'braintreeacceleratedcheckout' },\n    { id: 'braintree' },\n]);\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeVisaCheckoutCustomerInitializeOptions } from './braintree-visa-customer-initialize-options';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private buttonClassName = 'visa-checkout-wrapper';\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreeVisaCheckoutCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const checkout = state.getCheckoutOrThrow();\n\n        const { clientToken, config } = state.getPaymentMethodOrThrow(methodId);\n\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const { container, onError } = visaCheckoutOptions;\n\n        this.onError = onError || noop;\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: storeConfig.currency.code,\n                subtotal: String(checkout.subtotal),\n            },\n            settings: {\n                locale: storeConfig.storeProfile.storeLanguage,\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        const signInButton = this.createSignInButton(container, this.buttonClassName);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on(\n            'payment.success',\n            (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                this.tokenizePayment(braintreeVisaCheckout, paymentSuccessPayload)\n                    .then(() => this.paymentIntegrationService.loadCheckout())\n                    .catch((error) => this.handleError(error)),\n        );\n\n        visaCheckoutInstance.on('payment.error', (_, error) => this.handleError(error));\n\n        signInButton.style.visibility = 'visible';\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.',\n        );\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private async tokenizePayment(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.mapToVisaCheckoutAddress(shipping),\n                billingAddress = this.mapToVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private mapToVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Unable to proceed because the provided container ID is not valid.');\n        }\n\n        return this.insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.style.width = 'max-content';\n\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n\n    private handleError(error: Error) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutCustomerStrategy from './braintree-visa-checkout-customer-strategy';\n\nconst createBraintreeVisaCheckoutCustomerStrategy: CustomerStrategyFactory<\n    BraintreeVisaCheckoutCustomerStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutCustomerStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import {\n    PaymentInstrumentPayload,\n    WithBankAccountInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isUsBankAccountInstrumentLike(\n    instrument?: PaymentInstrumentPayload,\n): instrument is WithBankAccountInstrument {\n    if (!instrument) {\n        return false;\n    }\n\n    return (\n        'accountNumber' in instrument &&\n        'routingNumber' in instrument &&\n        'ownershipType' in instrument &&\n        'accountType' in instrument\n    );\n}\n","import {\n    BraintreeInitializationData,\n    BraintreeSdk,\n    BraintreeUsBankAccount,\n    BraintreeUsBankAccountDetails,\n    isBraintreeError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    WithBankAccountInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isUsBankAccountInstrumentLike from '../is-us-bank-account-instrument-like';\n\nimport { WithBraintreeAchPaymentInitializeOptions } from './braintree-ach-initialize-options';\n\nexport default class BraintreeAchPaymentStrategy implements PaymentStrategy {\n    private usBankAccount?: BraintreeUsBankAccount;\n    private getMandateText?: () => string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeAchPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, braintreeach } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.getMandateText = braintreeach?.getMandateText;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            this.usBankAccount = await this.braintreeSdk.getUsBankAccount();\n        } catch (error) {\n            this.handleBraintreeError(error);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const isSubmittingWithVaultingInstrument = isVaultedInstrument(payment.paymentData || {});\n\n        const nonce = isSubmittingWithVaultingInstrument\n            ? await this.tokenizePaymentForVaultedInstrument(payment)\n            : await this.tokenizePayment(payment);\n\n        const submitPaymentPayload = isSubmittingWithVaultingInstrument\n            ? await this.preparePaymentDataForVaultedInstrument(nonce, payment)\n            : await this.preparePaymentData(nonce, payment);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private async tokenizePayment({ paymentData }: OrderPaymentRequestBody): Promise<string> {\n        const usBankAccount = this.getUsBankAccountOrThrow();\n\n        if (!isUsBankAccountInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const mandateText = isVaultedInstrument(paymentData)\n            ? 'The data are used for stored instrument verification'\n            : typeof this.getMandateText === 'function' && this.getMandateText();\n\n        if (!mandateText) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because getMandateText is not provided or returned undefined value.',\n            );\n        }\n\n        try {\n            const { nonce } = await usBankAccount.tokenize({\n                bankDetails: this.getBankDetails(paymentData),\n                mandateText,\n            });\n\n            return nonce;\n        } catch (error) {\n            this.handleBraintreeError(error);\n        }\n    }\n\n    private async tokenizePaymentForVaultedInstrument(\n        payment: OrderPaymentRequestBody,\n    ): Promise<string | null> {\n        const { methodId, paymentData = {} } = payment;\n\n        const state = this.paymentIntegrationService.getState();\n        const { config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!config.isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n            );\n        }\n\n        const shouldVerifyVaultingInstrument = isUsBankAccountInstrumentLike(paymentData);\n\n        return shouldVerifyVaultingInstrument ? this.tokenizePayment(payment) : null;\n    }\n\n    private async preparePaymentData(\n        nonce: string | null,\n        payment: OrderPaymentRequestBody,\n    ): Promise<Payment> {\n        const { methodId, paymentData = {} } = payment;\n\n        if (!isUsBankAccountInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument, routingNumber, accountNumber } =\n            paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId: deviceData,\n                shouldSetAsDefaultInstrument,\n                shouldSaveInstrument,\n                formattedPayload: {\n                    tokenized_bank_account: {\n                        issuer: routingNumber,\n                        masked_account_number: accountNumber.substr(-4),\n                        token: nonce,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentDataForVaultedInstrument(\n        nonce: string | null,\n        payment: OrderPaymentRequestBody,\n    ): Promise<Payment> {\n        const { methodId, paymentData = {} } = payment;\n\n        if (!isVaultedInstrument(paymentData) || !isHostedInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId: deviceData,\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                ...(nonce && { nonce }),\n            },\n        };\n    }\n\n    private getBankDetails(paymentData: WithBankAccountInstrument): BraintreeUsBankAccountDetails {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const ownershipType = paymentData.ownershipType.toLowerCase();\n        const accountType = paymentData.accountType.toLowerCase();\n\n        return {\n            accountNumber: paymentData.accountNumber,\n            routingNumber: paymentData.routingNumber,\n            ownershipType,\n            ...(ownershipType === 'personal'\n                ? {\n                      firstName: paymentData.firstName,\n                      lastName: paymentData.lastName,\n                  }\n                : {\n                      businessName: paymentData.businessName,\n                  }),\n            accountType,\n            billingAddress: {\n                streetAddress: billingAddress.address1,\n                extendedAddress: billingAddress.address2,\n                locality: billingAddress.city,\n                region: billingAddress.stateOrProvinceCode,\n                postalCode: billingAddress.postalCode,\n            },\n        };\n    }\n\n    private getUsBankAccountOrThrow(): BraintreeUsBankAccount {\n        if (!this.usBankAccount) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.usBankAccount;\n    }\n\n    private handleBraintreeError(error: unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n}\n","import { createBraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeAchPaymentStrategy from './braintree-ach-payment-strategy';\n\nconst createBraintreeAchPaymentStrategy: PaymentStrategyFactory<BraintreeAchPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BraintreeAchPaymentStrategy(\n        paymentIntegrationService,\n        createBraintreeSdk(paymentIntegrationService),\n    );\n};\n\nexport default toResolvableModule(createBraintreeAchPaymentStrategy, [{ id: 'braintreeach' }]);\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSdk from './braintree-sdk';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\n\nconst createBraintreeSdk = (paymentIntegrationService: PaymentIntegrationService) => {\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        window,\n        braintreeSDKVersionManager,\n    );\n\n    return new BraintreeSdk(braintreeScriptLoader);\n};\n\nexport default createBraintreeSdk;\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    PayPalBNPLConfigurationItem,\n} from './braintree';\nimport { MessagesStyleOptions, MessagingPlacements } from './paypal';\n\nexport default class BraintreeMessages {\n    private braintreeHostWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    render(methodId: string, containerId: string, placement: MessagingPlacements): void {\n        const messagingContainer = containerId && document.getElementById(containerId);\n\n        if (this.braintreeHostWindow.paypal && messagingContainer) {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const billingAddress = state.getBillingAddressOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n            if (!paymentMethod.initializationData) {\n                return;\n            }\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData;\n\n            const bannedId = placement === MessagingPlacements.PAYMENT ? 'checkout' : placement;\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === bannedId);\n\n            if (!bannerConfiguration || !bannerConfiguration.status) {\n                return;\n            }\n\n            // TODO: remove this code when this data attributes will be removed from banner div container in content service\n            if (placement === MessagingPlacements.CART) {\n                messagingContainer.removeAttribute('data-pp-style-logo-type');\n                messagingContainer.removeAttribute('data-pp-style-logo-position');\n                messagingContainer.removeAttribute('data-pp-style-text-color');\n                messagingContainer.removeAttribute('data-pp-style-text-size');\n            }\n\n            this.braintreeHostWindow.paypal\n                .Messages({\n                    amount: cart.cartAmount,\n                    buyerCountry: billingAddress.countryCode,\n                    placement,\n                    style: this.getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n                })\n                .render(`#${containerId}`);\n        }\n    }\n\n    private getPaypalMessagesStylesFromBNPLConfig({\n        styles,\n    }: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n        const messagesStyles: MessagesStyleOptions = {};\n\n        if (styles.color) {\n            messagesStyles.color = styles.color;\n        }\n\n        if (styles.layout) {\n            messagesStyles.layout = styles.layout;\n        }\n\n        if (styles['logo-type'] || styles['logo-position']) {\n            messagesStyles.logo = {};\n\n            if (styles['logo-type']) {\n                messagesStyles.logo.type = styles['logo-type'];\n            }\n\n            if (styles['logo-position']) {\n                messagesStyles.logo.position = styles['logo-position'];\n            }\n        }\n\n        if (styles.ratio) {\n            messagesStyles.ratio = styles.ratio;\n        }\n\n        if (styles['text-color'] || styles['text-size']) {\n            messagesStyles.text = {};\n\n            if (styles['text-color']) {\n                messagesStyles.text.color = styles['text-color'];\n            }\n\n            if (styles['text-size']) {\n                messagesStyles.text.size = +styles['text-size'];\n            }\n        }\n\n        return messagesStyles;\n    }\n}\n","import getOverlayStyle from './overlay-style';\n\nexport interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    hasCloseButton?: boolean;\n    innerHtml?: HTMLElement | DocumentFragment;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n    onClickClose?(event: MouseEvent): void;\n}\n\nexport interface Elements {\n    element: HTMLElement;\n    mainElement: HTMLElement;\n    closeElement?: HTMLElement;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _mainElement: HTMLElement;\n    private _closeElement?: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        const { element, closeElement, mainElement } = this._createElements(options);\n\n        this._element = element;\n        this._closeElement = closeElement;\n        this._mainElement = mainElement;\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._mainElement.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._mainElement);\n\n        // Fade In\n        setTimeout(() => (this._element.style.opacity = '1'));\n    }\n\n    remove(): void {\n        if (!this._mainElement.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => (this._element.style.opacity = '0'));\n    }\n\n    private _createElements(options?: OverlayOptions): Elements {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = 'checkoutOverlay',\n            transitionDuration = 400,\n            hasCloseButton = false,\n            innerHtml = null,\n        } = options || {};\n        let mainElement = element;\n        let closeElement: HTMLElement | undefined;\n        let classLayout: string | undefined;\n        let classClose: string | undefined;\n        let classOverlayText: string | undefined;\n\n        if (id) {\n            element.id = id;\n        }\n\n        if (innerHtml) {\n            const overlayText = document.createElement('div');\n\n            classOverlayText = `${id}--overlayText`;\n            overlayText.className = classOverlayText;\n            overlayText.appendChild(innerHtml);\n\n            element.appendChild(overlayText);\n        }\n\n        if (hasCloseButton) {\n            classClose = `${id}--close`;\n            closeElement = document.createElement('div');\n            closeElement.className = classClose;\n\n            classLayout = `${id}--layout`;\n            mainElement = document.createElement('div');\n            mainElement.className = classLayout;\n\n            mainElement.appendChild(element);\n            mainElement.appendChild(closeElement);\n        }\n\n        mainElement.appendChild(\n            getOverlayStyle({\n                id,\n                background,\n                transitionDuration,\n                classLayout,\n                classOverlayText,\n                classClose,\n            }),\n        );\n\n        return { element, closeElement, mainElement };\n    }\n\n    private _addEventListener(element?: HTMLElement, onClick?: (event: MouseEvent) => void): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.addEventListener('click', onClick);\n    }\n\n    private _removeEventListener(\n        element?: HTMLElement,\n        onClick?: (event: MouseEvent) => void,\n    ): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.removeEventListener('click', onClick);\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options) {\n            const { onClick, onClickClose } = options;\n\n            this._addEventListener(this._element, onClick);\n            this._addEventListener(this._closeElement, onClickClose);\n\n            this._unregisterClick = () => {\n                this._removeEventListener(this._element, onClick);\n                this._removeEventListener(this._closeElement, onClickClose);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handleTransition: (event: Event) => void = (event) => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._mainElement.parentElement) {\n                this._mainElement.remove();\n            }\n\n            this._element.removeEventListener('transitionend', handleTransition);\n        };\n\n        this._element.addEventListener('transitionend', handleTransition);\n    }\n}\n","interface OverlayStyleOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    classLayout?: string;\n    classOverlayText?: string;\n    classClose?: string;\n}\n\nexport default function getOverlayStyle(options: OverlayStyleOptions): HTMLElement {\n    const { id, background, transitionDuration, classLayout, classOverlayText, classClose } =\n        options;\n    const styles = document.createElement('style');\n    const addClassLayout = classLayout ? `, .${classLayout}` : '';\n\n    styles.id = `${id}--styles`;\n    styles.type = 'text/css';\n    styles.innerText = `\n        #${id}${addClassLayout} {\n            display: block;\n            height: 100%;\n            width: 100%;\n            left: 0;\n            top: 0;\n            position: fixed;\n            z-index: 2147483647;\n        }\n        #${id} {\n            transition: opacity ${transitionDuration}ms ease-out;\n            background: ${background};\n            opacity: 0;\n        }\n    `;\n\n    if (classOverlayText) {\n        styles.innerText += `\n             #${id} {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n             }\n             #${id} .${classOverlayText} {\n                color: white;\n                max-width: 330px;\n                font-size: 1.2em;\n                text-align: center;\n             }\n        `;\n    }\n\n    if (classClose) {\n        styles.innerText += `\n            #${id} {\n                opacity: 1;\n            }\n            .${classLayout} .${classClose} {\n                position: fixed;\n                right: 16px;\n                top: 16px;\n                width: 16px;\n                height: 16px;\n                opacity: 0.6;\n                cursor: pointer;\n                z-index: 3147483647;\n            }\n            .${classLayout} .${classClose}::after, .${classLayout} .${classClose}::before {\n                position: absolute;\n                left: 8px;\n                content: '';\n                height: 16px;\n                width: 2px;\n                background-color: #fff;\n            }\n            .${classLayout} .${classClose}::after {\n                transform: rotate(-45deg);\n            }\n            .${classLayout} .${classClose}::before {\n                transform: rotate(45deg);\n            }\n        `;\n    }\n\n    return styles;\n}\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import { BraintreeError } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function isBraintreeError(\n    error: BraintreeError | Error | unknown,\n): error is BraintreeError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'name' in error &&\n        (error as BraintreeError).name === 'BraintreeError'\n    );\n}\n","import { BraintreeShippingAddressOverride } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    MessagingPlacements,\n    PaypalAuthorizeData,\n    PaypalButtonRender,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    FormattedPayload,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isHostedVaultedInstrument,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    PaypalInstrument,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport isBraintreeError from '../is-braintree-error';\nimport isBraintreePaypalProviderError from '../is-braintree-paypal-provider-error';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport {\n    BraintreePaypalPaymentInitializeOptions,\n    WithBraintreePaypalPaymentInitializeOptions,\n} from './braintree-paypal-payment-initialize-options';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private paymentMethod?: PaymentMethod<BraintreeInitializationData>;\n    private braintreeHostWindow: BraintreeHostWindow = window;\n    private braintree?: BraintreePaypalPaymentInitializeOptions;\n    private braintreeTokenizePayload?: BraintreeTokenizePayload;\n    private paypalButtonRender?: PaypalButtonRender;\n    private loadingIndicatorContainer?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeMessages: BraintreeMessages,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreePaypalPaymentInitializeOptions,\n    ) {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this.braintree = braintreeOptions;\n\n        if (!this.paymentMethod || !this.paymentMethod.nonce) {\n            this.paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        }\n\n        if (this.paymentMethod.clientToken && braintreeOptions?.bannerContainerId) {\n            await this.loadPaypal();\n\n            return this.loadPaypalCheckoutInstance();\n        }\n\n        if (this.paymentMethod.clientToken) {\n            return this.loadPaypal();\n        }\n\n        const state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (braintreeOptions?.bannerContainerId) {\n            return this.loadPaypalCheckoutInstance();\n        }\n\n        if (!this.paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this.loadPaypal();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        const { onError } = this.braintree || {};\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const shouldHandleInstrumentDeclinedError =\n            features && features['PAYPAL-3521.handling_declined_error_braintree'];\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            const paymentData = await this.preparePaymentData(payment, order.useStoreCredit);\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentData);\n        } catch (error) {\n            if (this.isProviderError(error) && shouldHandleInstrumentDeclinedError) {\n                await this.loadPaypal();\n\n                this.paypalButtonRender?.close();\n\n                await this.loadPaypalCheckoutInstance();\n\n                await new Promise((_resolve, reject) => {\n                    if (onError && typeof onError === 'function') {\n                        onError(new Error('INSTRUMENT_DECLINED'));\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.braintreeTokenizePayload = undefined;\n\n        this.paypalButtonRender?.close();\n\n        return this.braintreeIntegrationService.teardown();\n    }\n\n    private async preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        useStoreCredit?: boolean,\n    ): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n\n        const grandTotal = state.getOutstandingBalance(useStoreCredit);\n        const config = state.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this.paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            currency,\n            storeProfile: { storeLanguage },\n        } = config;\n        const {\n            nonce,\n            config: { isVaultingEnabled },\n        } = this.paymentMethod;\n        const { methodId, paymentData = {} } = payment;\n\n        const token = this.braintreeTokenizePayload?.nonce || nonce;\n\n        if (token) {\n            const state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            this.paymentMethod = state.getPaymentMethod(methodId);\n\n            return {\n                ...payment,\n                paymentData: this.formattedPayload(token),\n            };\n        }\n\n        if (isVaultedInstrument(paymentData) || isHostedVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError(\n                    'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n                );\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (!isHostedInstrumentLike(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = paymentData;\n\n        if (shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but shouldSaveInstrument is set to true',\n            );\n        }\n\n        const shippingAddress = state.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress\n            ? mapToBraintreeShippingAddressOverride(shippingAddress)\n            : undefined;\n\n        return Promise.all([\n            this.braintreeIntegrationService.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this.paymentMethod.id === 'braintreepaypalcredit',\n                shippingAddressOverride,\n                shouldSaveInstrument: shouldSaveInstrument || false,\n                shippingAddressEditable: false,\n            }),\n            this.braintreeIntegrationService.getSessionId(),\n        ]).then(([{ nonce, details } = {} as any, sessionId]) => ({\n            ...payment,\n            paymentData: this.formattedPayload(\n                nonce,\n                details && details.email,\n                sessionId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            ),\n        }));\n    }\n\n    private formattedPayload(\n        token: string,\n        email?: string,\n        sessionId?: string,\n        vaultPaymentInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n\n    private async loadPaypalCheckoutInstance() {\n        const { clientToken, initializationData, id: paymentMethodId } = this.paymentMethod || {};\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n\n            const currencyCode = this.paymentIntegrationService.getState().getCartOrThrow()\n                .currency.code;\n\n            const paypalCheckoutConfig: Partial<BraintreePaypalSdkCreatorConfig> = {\n                currency: currencyCode,\n                intent: initializationData?.intent,\n                isCreditEnabled: initializationData?.isCreditEnabled,\n            };\n\n            const isBraintreePaypalCredit = paymentMethodId === 'braintreepaypalcredit';\n            const shouldShowPayPalCreditBanner =\n                isBraintreePaypalCredit || !initializationData?.isCreditEnabled;\n\n            await this.braintreeIntegrationService.getPaypalCheckout(\n                paypalCheckoutConfig,\n                (braintreePaypalCheckout) => {\n                    if (\n                        shouldShowPayPalCreditBanner &&\n                        paymentMethodId &&\n                        this.braintree?.bannerContainerId\n                    ) {\n                        this.renderPayPalMessages(\n                            paymentMethodId,\n                            this.braintree.bannerContainerId,\n                        );\n                    }\n\n                    this.renderPayPalButton(braintreePaypalCheckout);\n                },\n                this.handleError,\n            );\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private renderPayPalMessages(methodId: string, containerId: string) {\n        this.braintreeMessages.render(methodId, containerId, MessagingPlacements.PAYMENT);\n    }\n\n    private renderPayPalButton(braintreePaypalCheckout: BraintreePaypalCheckout) {\n        const { onPaymentError, submitForm, onRenderButton, containerId, onError } =\n            this.braintree || {};\n\n        if (!containerId) {\n            return;\n        }\n\n        if (!this.paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this.loadingIndicatorContainer = containerId.split('#')[1];\n\n        const {\n            id,\n            config: { testMode },\n        } = this.paymentMethod;\n\n        const { paypal } = this.braintreeHostWindow;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            this.paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                onClick: () => {\n                    this.toggleLoadingIndicator(true);\n                },\n                createOrder: () => this.setupPayment(braintreePaypalCheckout, id, onPaymentError),\n                onApprove: async (authorizeData: PaypalAuthorizeData) => {\n                    this.braintreeTokenizePayload = await this.tokenizePaymentOrThrow(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                    );\n\n                    if (submitForm && typeof submitForm === 'function') {\n                        submitForm();\n                    }\n                },\n                onCancel: () => {\n                    this.toggleLoadingIndicator(false);\n                },\n                onError: (error: Error) => {\n                    this.toggleLoadingIndicator(false);\n\n                    onError?.(error);\n                },\n            });\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            if (this.paypalButtonRender.isEligible()) {\n                this.paypalButtonRender.render(`${containerId}`);\n            }\n        } else {\n            this.removeElement(containerId.split('#')[1]);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        method: string,\n        onPaymentError: BraintreePaypalPaymentInitializeOptions['onPaymentError'],\n    ): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n\n        try {\n            const customer = state.getCustomer();\n\n            const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(method);\n\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode = state.getStoreConfigOrThrow().currency.code;\n\n            const shippingAddress = state.getShippingAddress();\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData.intent,\n            });\n        } catch (error) {\n            if (onPaymentError && (isBraintreeError(error) || error instanceof StandardError)) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePaymentOrThrow(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            return await braintreePaypalCheckout.tokenizePayment(authorizeData);\n        } catch (error) {\n            if (onError && (isBraintreeError(error) || error instanceof StandardError)) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async loadPaypal() {\n        const { clientToken, initializationData } = this.paymentMethod || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n\n            await this.braintreeIntegrationService.getPaypal();\n        } catch (error) {\n            this.handleError(error);\n        }\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError | Error | unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private isProviderError(error: unknown): boolean {\n        if (isBraintreePaypalProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === '2046';\n        }\n\n        return false;\n    }\n\n    private removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isBraintreePaypalProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator, Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../braintree-paypal-constants';\n\nimport BraintreePaypalPaymentStrategy from './braintree-paypal-payment-strategy';\n\nconst createBraintreePaypalPaymentStrategy: PaymentStrategyFactory<\n    BraintreePaypalPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const overlay = new Overlay();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n        overlay,\n    );\n    const braintreeMessages = new BraintreeMessages(paymentIntegrationService);\n\n    return new BraintreePaypalPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        braintreeMessages,\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalPaymentStrategy, [\n    { id: 'braintreepaypal' },\n    { id: 'braintreepaypalcredit' },\n]);\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BraintreeOrderStatusData } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async getOrderStatus(\n        methodId = 'braintreelocalmethods',\n        options?: RequestOptions,\n    ): Promise<BraintreeOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<BraintreeOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    BraintreeInitializationData,\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentConfig,\n    BraintreeLocalPaymentMethodRedirectAction,\n    BraintreeLocalPaymentsPayload,\n    BraintreeLPMPaymentStartData,\n    BraintreeLPMStartPaymentError,\n    BraintreeOrderSavedResponse,\n    BraintreeOrderStatus,\n    BraintreeRedirectError,\n    BraintreeSdk,\n    NonInstantLocalPaymentMethods,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentMeta,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestOptions,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport BraintreeRequestSender from '../braintree-request-sender';\n\nimport {\n    BraintreeLocalMethodsPaymentInitializeOptions,\n    WithBraintreeLocalMethodsPaymentInitializeOptions,\n} from './braintree-local-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BraintreeLocalMethodsPaymentStrategy implements PaymentStrategy {\n    private braintreelocalmethods?: BraintreeLocalMethodsPaymentInitializeOptions;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private gatewayId?: string;\n    private isLPMsUpdateExperimentEnabled = false;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeSdk: BraintreeSdk,\n        private braintreeRequestSender: BraintreeRequestSender,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeLocalMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, braintreelocalmethods } = options;\n\n        this.gatewayId = gatewayId;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreelocalmethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreelocalmethods\" argument is not provided.`,\n            );\n        }\n\n        this.braintreelocalmethods = braintreelocalmethods;\n        this.loadingIndicatorContainer = braintreelocalmethods.container.split('#')[1];\n\n        await this.paymentIntegrationService.loadPaymentMethod(gatewayId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(gatewayId);\n        const { clientToken, config, initializationData } = paymentMethod;\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5258.braintree_local_methods_polling',\n        );\n\n        this.isLPMsUpdateExperimentEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-4853.add_new_payment_flow_for_braintree_lpms',\n        );\n\n        if (!clientToken || !initializationData || !config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeSdk.initialize(clientToken);\n\n            if (!this.isNonInstantPaymentMethod(methodId)) {\n                this.braintreeLocalPayment = await this.braintreeSdk.getBraintreeLocalPayment(\n                    config.merchantId,\n                );\n            }\n        } catch (error: unknown) {\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.toggleLoadingIndicator(false);\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        this.toggleLoadingIndicator(true);\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            await this.executeWithNotInstantLPM(methodId);\n        } else {\n            await this.executeWithInstantLPM(methodId, order, options);\n        }\n    }\n\n    private async executeWithNotInstantLPM(methodId: string): Promise<void> {\n        try {\n            const basicPaymentData = await this.getLPMsBasicPaymentData();\n\n            await this.paymentIntegrationService.submitOrder();\n            await this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: {\n                    ...basicPaymentData,\n                    formattedPayload: {\n                        method: methodId,\n                    },\n                },\n            });\n        } catch (error: unknown) {\n            if (this.isBraintreeRedirectError(error)) {\n                const redirectUrl = error.body.additional_action_required.data.redirect_url;\n\n                return new Promise((_, reject) => {\n                    window.location.replace(redirectUrl);\n\n                    this.toggleLoadingIndicator(false);\n\n                    reject();\n                });\n            }\n\n            this.handleError(error);\n\n            return Promise.reject(error);\n        }\n    }\n\n    private async executeWithInstantLPM(\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        if (!this.braintreeLocalPayment) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await new Promise((resolve, reject): void => {\n            this.braintreeLocalPayment?.startPayment(\n                this.getInstantLPMConfig(methodId, order, options),\n                this.getInstantLPMCallback(resolve, reject, methodId, order, options),\n            );\n        });\n    }\n\n    private async getLPMsBasicPaymentData(): Promise<PaymentInstrumentMeta> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n\n        return { deviceSessionId: deviceData };\n    }\n\n    private getInstantLPMConfig(\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: RequestOptions,\n    ): BraintreeLocalPaymentConfig {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const billing = state.getBillingAddressOrThrow();\n        const { firstName, lastName, countryCode } = billing;\n        const { currency, email, lineItems } = cart;\n        const isShippingRequired = lineItems.physicalItems.length > 0;\n        const grandTotal = state.getCheckoutOrThrow().outstandingBalance;\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        return {\n            paymentType: methodId,\n            amount: grandTotal,\n            fallback: {\n                url: checkoutUrl,\n                buttonText: 'Complete Payment',\n            },\n            currencyCode: currency.code,\n            shippingAddressRequired: isShippingRequired,\n            email,\n            givenName: firstName,\n            surname: lastName,\n            address: {\n                countryCode,\n            },\n            onPaymentStart: async (data: BraintreeLPMPaymentStartData, start: () => void) => {\n                if (!this.isLPMsUpdateExperimentEnabled) {\n                    this.orderId = data.paymentId;\n\n                    start();\n\n                    return;\n                }\n\n                const basicPaymentData = await this.getLPMsBasicPaymentData();\n                const paymentData = {\n                    ...basicPaymentData,\n                    formattedPayload: {\n                        method: methodId,\n                        [`${methodId}_account`]: {\n                            order_id: data.paymentId,\n                        },\n                    },\n                };\n\n                try {\n                    // Submit order and payment should be performed to pass order_id to the backend\n                    await this.paymentIntegrationService.submitOrder(order, options);\n                    await this.paymentIntegrationService.submitPayment({\n                        methodId,\n                        paymentData,\n                    });\n                } catch (error: unknown) {\n                    if (\n                        this.isBraintreeOrderSavedResponse(error) &&\n                        error.body.additional_action_required.data.order_id_saved_successfully\n                    ) {\n                        // Start method call initiates the popup\n                        start();\n\n                        if (this.isPollingEnabled) {\n                            return new Promise((resolve, reject) => {\n                                void this.initializePollingMechanism(\n                                    methodId,\n                                    resolve,\n                                    reject,\n                                    this.gatewayId,\n                                );\n                            });\n                        }\n\n                        return;\n                    }\n\n                    throw error;\n                }\n            },\n        };\n    }\n\n    private getInstantLPMCallback(\n        resolve: (value: unknown) => void,\n        reject: (reason?: unknown) => void,\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: RequestOptions,\n    ) {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        return async (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payloadData: BraintreeLocalPaymentsPayload,\n        ) => {\n            if (startPaymentError) {\n                if (startPaymentError.code === 'LOCAL_PAYMENT_WINDOW_CLOSED') {\n                    this.toggleLoadingIndicator(false);\n                    this.resetPollingMechanism();\n\n                    return reject();\n                }\n\n                if (this.isPollingEnabled) {\n                    this.resetPollingMechanism();\n                }\n\n                this.toggleLoadingIndicator(false);\n\n                return reject(new PaymentMethodInvalidError());\n            }\n\n            const basicPaymentData = await this.getLPMsBasicPaymentData();\n            const paymentData = {\n                ...basicPaymentData,\n                formattedPayload: {\n                    method: methodId,\n                    [`${methodId}_account`]: {\n                        email: cart.email,\n                        token: payloadData.nonce,\n                        ...(!this.isLPMsUpdateExperimentEnabled ? { order_id: this.orderId } : {}),\n                    },\n                },\n            };\n\n            try {\n                if (!this.isLPMsUpdateExperimentEnabled) {\n                    await this.paymentIntegrationService.submitOrder(order, options);\n                }\n\n                await this.paymentIntegrationService.submitPayment({\n                    methodId,\n                    paymentData,\n                });\n\n                return resolve(undefined);\n            } catch (error: unknown) {\n                this.handleError(error);\n\n                return reject(error);\n            }\n        };\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.braintreelocalmethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantLocalPaymentMethods;\n    }\n\n    private isBraintreeRedirectError(error: unknown): error is BraintreeRedirectError {\n        if (typeof error !== 'object' || error === null) {\n            return false;\n        }\n\n        const { body }: Partial<BraintreeLocalPaymentMethodRedirectAction> = error;\n\n        if (!body) {\n            return false;\n        }\n\n        return !!body.additional_action_required?.data.redirect_url;\n    }\n\n    private isBraintreeOrderSavedResponse(\n        response: unknown,\n    ): response is BraintreeOrderSavedResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const { body }: Partial<BraintreeOrderSavedResponse> = response;\n\n        if (!body) {\n            return false;\n        }\n\n        return body.additional_action_required?.data.hasOwnProperty('order_id_saved_successfully');\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.braintreeRequestSender.getOrderStatus(gatewayId, {\n                params: {\n                    useMetadata: false,\n                },\n            });\n\n            const isOrderPending = orderStatus.status === BraintreeOrderStatus.Pending;\n            const isOrderApproved = orderStatus.status === BraintreeOrderStatus.Completed;\n            const isPollingError = orderStatus.status === BraintreeOrderStatus.Failed;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (\n                !isOrderApproved &&\n                isOrderPending &&\n                this.pollingTimer < this.maxPollingIntervalTime\n            ) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                braintreelocalmethods: this.braintreelocalmethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithBraintreeLocalMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeRequestSender from '../braintree-request-sender';\n\nimport BraintreeLocalMethodsPaymentStrategy from './braintree-local-methods-payment-strategy';\n\nconst createBraintreeLocalMethodsPaymentStrategy: PaymentStrategyFactory<\n    BraintreeLocalMethodsPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n    const requestSender = createRequestSender();\n    const braintreeRequestSender = new BraintreeRequestSender(requestSender);\n\n    return new BraintreeLocalMethodsPaymentStrategy(\n        paymentIntegrationService,\n        braintreeSdk,\n        braintreeRequestSender,\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n};\n\nexport default toResolvableModule(createBraintreeLocalMethodsPaymentStrategy, [\n    { gateway: 'braintreelocalmethods' },\n]);\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isBraintreeAcceleratedCheckoutCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    Braintree3DSVerifyCardError,\n    Braintree3DSVerifyCardPayload,\n    BraintreeFastlaneAddress,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneCardComponent,\n    BraintreeFastlaneCardComponentOptions,\n    BraintreeInitializationData,\n    BraintreeSdk,\n    getFastlaneStyles,\n    isBraintreeAcceleratedCheckoutCustomer,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CardInstrument,\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodClientUnavailableError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { WithBraintreeFastlanePaymentInitializeOptions } from './braintree-fastlane-payment-initialize-options';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nexport default class BraintreeFastlanePaymentStrategy implements PaymentStrategy {\n    private braintreeCardComponent?: BraintreeFastlaneCardComponent;\n    private is3DSEnabled?: boolean;\n    private onError?: (error: Error) => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeFastlaneUtils: BraintreeFastlaneUtils,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     */\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, braintreefastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreefastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane\" argument is not provided.',\n            );\n        }\n\n        if (!braintreefastlane.onInit || typeof braintreefastlane.onInit !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (!braintreefastlane.onChange || typeof braintreefastlane.onChange !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { initializationData, clientToken } = paymentMethod || {};\n        const { isFastlaneStylingEnabled } = initializationData || {};\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isThreeDSExperimentEnabled = isExperimentEnabled(\n            features,\n            'PROJECT-7080.braintree_fastlane_three_ds',\n        );\n\n        this.is3DSEnabled = paymentMethod.config.is3dsEnabled;\n\n        if (clientToken && isThreeDSExperimentEnabled) {\n            this.braintreeSdk.initialize(clientToken);\n        }\n\n        const paypalFastlaneStyleSettings = isFastlaneStylingEnabled\n            ? paymentMethod.initializationData?.fastlaneStyles\n            : undefined;\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyleSettings,\n            braintreefastlane.styles,\n        );\n\n        await this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(\n            methodId,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow();\n        }\n\n        await this.initializeCardComponent();\n\n        this.onError = braintreefastlane.onError;\n\n        braintreefastlane.onInit((container) => this.renderBraintreeCardComponent(container));\n        braintreefastlane.onChange(() => this.handleBraintreeStoredInstrumentChange(methodId));\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        const paymentPayload = await this.preparePaymentPayload(payment.methodId);\n\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n\n        this.braintreeFastlaneUtils.removeSessionIdFromCookies();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.braintreeCardComponent = undefined;\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Braintree Fastlane Component rendering method\n     *\n     */\n    private async initializeCardComponent() {\n        const state = this.paymentIntegrationService.getState();\n        const { phone, firstName, lastName } = state.getBillingAddressOrThrow();\n        const fullName = `${firstName} ${lastName}`;\n\n        const cardComponentOptions: BraintreeFastlaneCardComponentOptions = {\n            styles: {},\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        const paypalPaymentComponent =\n            this.braintreeFastlaneUtils.getBraintreeFastlaneComponentOrThrow();\n\n        this.braintreeCardComponent = await paypalPaymentComponent(cardComponentOptions);\n    }\n\n    private renderBraintreeCardComponent(container?: string) {\n        const braintreeCardComponent = this.getBraintreeCardComponentOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        braintreeCardComponent.render(container);\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async preparePaymentPayload(methodId: string): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`;\n\n        const paypalInstrument = this.getPayPalInstruments()[0];\n\n        const deviceSessionId = await this.braintreeFastlaneUtils.getDeviceSessionId();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isThreeDSExperimentEnabled = isExperimentEnabled(\n            features,\n            'PROJECT-7080.braintree_fastlane_three_ds',\n        );\n\n        if (paypalInstrument) {\n            const threeDSToken =\n                this.is3DSEnabled && isThreeDSExperimentEnabled\n                    ? await this.get3DS(paypalInstrument.bigpayToken, paypalInstrument?.iin || '')\n                    : undefined;\n\n            return {\n                methodId,\n                paymentData: {\n                    deviceSessionId,\n                    formattedPayload: {\n                        paypal_fastlane_token: {\n                            token: threeDSToken || paypalInstrument.bigpayToken,\n                        },\n                    },\n                },\n            };\n        }\n\n        const { getPaymentToken } = this.getBraintreeCardComponentOrThrow();\n\n        const paymentToken = await getPaymentToken({\n            name: { fullName },\n            billingAddress: this.mapToPayPalAddress(billingAddress),\n        });\n\n        const binGuest = paymentToken.paymentSource.card?.binDetails?.bin || '';\n        const threeDSToken =\n            this.is3DSEnabled && isThreeDSExperimentEnabled\n                ? await this.get3DS(paymentToken.id, binGuest)\n                : undefined;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId,\n                nonce: threeDSToken || paymentToken.id,\n            },\n        };\n    }\n\n    /**\n     * 3DS\n     */\n    private async get3DS(nonce: string, bin: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const threeDSecure = await this.braintreeSdk.getBraintreeThreeDS();\n        const order = state.getOrderOrThrow();\n\n        return new Promise<string>((resolve, reject) => {\n            void threeDSecure.verifyCard(\n                {\n                    amount: order?.orderAmount,\n                    nonce,\n                    bin,\n                    onLookupComplete: (_data, next) => {\n                        threeDSecure.on('customer-canceled', () => {\n                            if (typeof this.onError === 'function') {\n                                this.onError(new PaymentMethodCancelledError());\n                            }\n\n                            reject(new PaymentMethodCancelledError());\n                        });\n\n                        next();\n                    },\n                },\n                (\n                    verifyError: Braintree3DSVerifyCardError,\n                    payload: Braintree3DSVerifyCardPayload,\n                ) => {\n                    if (\n                        verifyError &&\n                        verifyError.code === 'THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT'\n                    ) {\n                        if (typeof this.onError === 'function') {\n                            this.onError(new PaymentMethodCancelledError());\n                        }\n\n                        reject(new PaymentMethodCancelledError());\n                    }\n\n                    return resolve(payload.nonce);\n                },\n            );\n        });\n    }\n\n    /**\n     *\n     * Mapper methods\n     *\n     */\n    private mapToPayPalAddress(address?: Address): BraintreeFastlaneAddress {\n        return {\n            streetAddress: address?.address1 || '',\n            locality: address?.city || '',\n            region: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            postalCode: address?.postalCode || '',\n            countryCodeAlpha2: address?.countryCode || '',\n        };\n    }\n\n    /**\n     *\n     * Other methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.braintreeFastlaneUtils.getSessionIdFromCookies();\n\n        if (\n            !customer.isGuest ||\n            braintreePaymentProviderCustomer?.authenticationState ===\n                BraintreeFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return (\n            !braintreePaymentProviderCustomer?.authenticationState &&\n            paypalFastlaneSessionId === cart.id\n        );\n    }\n\n    private getBraintreeCardComponentOrThrow() {\n        if (!this.braintreeCardComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeCardComponent;\n    }\n\n    private getPayPalInstruments(): CardInstrument[] {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return braintreePaymentProviderCustomer.instruments || [];\n    }\n\n    /**\n     *\n     * Braintree Fastlane instrument change\n     *\n     */\n    private async handleBraintreeStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.braintreeFastlaneUtils.getBraintreeFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const braintreeFastlaneCustomer = isBraintreeAcceleratedCheckoutCustomer(\n                paymentProviderCustomer,\n            )\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstruments = this.braintreeFastlaneUtils.mapPayPalToBcInstrument(\n                methodId,\n                [selectedCard],\n            );\n\n            if (selectedInstruments && selectedInstruments.length > 0) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    ...braintreeFastlaneCustomer,\n                    instruments: [...selectedInstruments],\n                });\n\n                return selectedInstruments[0];\n            }\n        }\n\n        return undefined;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeFastlanePaymentStrategy from './braintree-fastlane-payment-strategy';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nconst createBraintreeFastlanePaymentStrategy: PaymentStrategyFactory<\n    BraintreeFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    const braintreeFastlaneUtils = new BraintreeFastlaneUtils(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeFastlanePaymentStrategy(\n        paymentIntegrationService,\n        braintreeFastlaneUtils,\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeFastlanePaymentStrategy, [\n    { id: 'braintreeacceleratedcheckout' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeInitializationData,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeVisaCheckoutPaymentInitializeOptions } from './braintree-visa-checkout-payment-options';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private paymentMethod?: PaymentMethod<BraintreeInitializationData>;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeVisaCheckoutPaymentInitializeOptions,\n    ): Promise<void> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const checkout = state.getCheckoutOrThrow();\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        const { clientToken, config } = this.paymentMethod || {};\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { onError = noop, onPaymentSelect = noop } = visaCheckoutOptions;\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const visaCheckoutSdk = await this.braintreeSdk.getVisaCheckoutSdk(config?.testMode);\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            settings: {\n                locale: storeConfig.storeProfile.storeLanguage,\n                shipping: {\n                    collectShipping: false,\n                },\n            },\n            paymentRequest: {\n                currencyCode: storeConfig.currency.code,\n                subtotal: String(checkout.subtotal),\n            },\n        });\n\n        await visaCheckoutSdk.init(initOptions);\n\n        visaCheckoutSdk.on(\n            'payment.success',\n            (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                this.tokenizePayment(braintreeVisaCheckout, paymentSuccessPayload)\n                    .then(() =>\n                        Promise.all([\n                            this.paymentIntegrationService.loadCheckout(),\n                            this.paymentIntegrationService.loadPaymentMethod(methodId),\n                        ]),\n                    )\n                    .then(() => onPaymentSelect())\n                    .catch((error) => onError(error)),\n        );\n        visaCheckoutSdk.on('payment.error', (_, error) => onError(error));\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        if (!this.paymentMethod?.initializationData?.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this.paymentMethod.initializationData;\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: { nonce },\n            });\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<any> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n    }\n\n    private async tokenizePayment(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.mapToVisaCheckoutAddress(shipping),\n                billingAddress = this.mapToVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private mapToVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private handleError(error: unknown): never {\n        if (error instanceof Error && error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutPaymentStrategy from './braintree-visa-checkout-payment-strategy';\n\nconst createBraintreeVisaCheckoutPaymentStrategy: PaymentStrategyFactory<\n    BraintreeVisaCheckoutPaymentStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutPaymentStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutPaymentStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import {\n    BraintreeError,\n    BraintreeIntegrationService,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    isBraintreeError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    FormattedPayload,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n    PaypalInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\nimport BraintreeVenmoPaymentStrategyInitializeOptions, {\n    WithBraintreeVenmoInitializeOptions,\n} from './braintree-venmo-payment-strategy-initialize-options';\n\nexport default class BraintreeVenmoPaymentStrategy implements PaymentStrategy {\n    private braintreeVenmoCheckout?: BraintreeVenmoCheckout;\n    private venmoOptions?: BraintreeVenmoPaymentStrategyInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeVenmoInitializeOptions,\n    ): Promise<void> {\n        const { methodId } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        const state = this.paymentIntegrationService.getState();\n\n        this.venmoOptions = options.braintreevenmo;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        await this.initializeBraintreeVenmo(paymentMethod);\n    }\n\n    async execute(orderRequest: OrderRequestBody): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            const paymentData = await this.preparePaymentData(payment);\n            await this.paymentIntegrationService.submitOrder(order);\n            await this.paymentIntegrationService.submitPayment(paymentData);\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private async initializeBraintreeVenmo(paymentMethod: PaymentMethod): Promise<void> {\n        const { clientToken } = paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isBraintreeVenmoWebFallbackSupport = isExperimentEnabled(\n            features,\n            'PAYPAL-5406.braintree_venmo_web_fallback_support',\n        );\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n            this.braintreeVenmoCheckout = await this.braintreeIntegrationService.getVenmoCheckout({\n                ...(this.venmoOptions?.allowDesktop !== undefined\n                    ? { allowDesktop: this.venmoOptions.allowDesktop }\n                    : {}),\n                ...(isBraintreeVenmoWebFallbackSupport\n                    ? {\n                          mobileWebFallBack: isBraintreeVenmoWebFallbackSupport,\n                      }\n                    : {}),\n            });\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n        const { nonce } = state.getPaymentMethodOrThrow(payment.methodId);\n\n        if (nonce) {\n            return { ...payment, paymentData: this.formattedPayload(nonce) };\n        }\n        const tokenizeResult = await this.braintreeVenmoTokenize();\n        const sessionId = await this.braintreeIntegrationService.getSessionId();\n\n        return {\n            ...payment,\n            paymentData: this.formattedPayload(\n                tokenizeResult.nonce,\n                tokenizeResult.details.email,\n                sessionId,\n            ),\n        };\n    }\n\n    private formattedPayload(\n        token: string,\n        email?: string,\n        sessionId?: string,\n    ): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n\n    private braintreeVenmoTokenize(): Promise<BraintreeTokenizePayload> {\n        return new Promise((resolve, reject) => {\n            this.braintreeVenmoCheckout?.tokenize(\n                (error: BraintreeError | undefined, payload: BraintreeTokenizePayload) => {\n                    if (error) {\n                        return reject(error);\n                    }\n\n                    resolve(payload);\n                },\n            );\n        });\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport BraintreeVenmoPaymentStrategy from './braintree-venmo-payment-strategy';\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nconst createBraintreeVenmoPaymentStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVenmoPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const scriptLoader = getScriptLoader();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        scriptLoader,\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        braintreeScriptLoader,\n        braintreeHostWindow,\n    );\n\n    return new BraintreeVenmoPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVenmoPaymentStrategy, [{ id: 'braintreevenmo' }]);\n","import { some } from 'lodash';\n\nimport {\n    BraintreeIntegrationService,\n    BraintreeThreeDSecureOptions,\n    isBraintreeAcceleratedCheckoutCustomer,\n    isBraintreePaymentRequest3DSError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NonceInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentInstrumentMeta,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeHostedForm from '../braintree-hosted-form/braintree-hosted-form';\nimport isBraintreeError from '../is-braintree-error';\n\nimport { WithBraintreeCreditCardPaymentInitializeOptions } from './braintree-credit-card-payment-initialize-options';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private is3dsEnabled?: boolean;\n    private isHostedFormInitialized?: boolean;\n    private deviceSessionId?: string;\n    private paymentMethod?: PaymentMethod;\n    private threeDSecure?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostedForm: BraintreeHostedForm,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, gatewayId, braintree } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const { clientToken } = this.paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.threeDSecure = braintree?.threeDSecure;\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken, this.threeDSecure);\n\n            if (this.isHostedPaymentFormEnabled(methodId, gatewayId) && braintree?.form) {\n                await this.braintreeHostedForm.initialize(\n                    braintree.form,\n                    braintree.unsupportedCardBrands,\n                    clientToken,\n                );\n\n                this.isHostedFormInitialized = this.braintreeHostedForm.isInitialized();\n            }\n\n            this.is3dsEnabled = this.paymentMethod.config.is3dsEnabled;\n            this.deviceSessionId = await this.braintreeIntegrationService.getSessionId();\n\n            // TODO: Remove when BT AXO A/B testing is finished\n            if (this.shouldInitializeBraintreeFastlane()) {\n                await this.initializeBraintreeFastlaneOrThrow(methodId);\n            }\n        } catch (error) {\n            return this.handleError(error);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (this.isHostedFormInitialized) {\n            this.braintreeHostedForm.validate();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order);\n\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const orderAmount = state.getOrderOrThrow().orderAmount;\n\n        try {\n            const paymentData = this.isHostedFormInitialized\n                ? await this.prepareHostedPaymentData(payment, billingAddress, orderAmount)\n                : await this.preparePaymentData(payment, billingAddress, orderAmount);\n\n            await this.paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData,\n            });\n        } catch (error) {\n            return this.processAdditionalAction(error, payment, orderAmount);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.isHostedFormInitialized = false;\n\n        await Promise.all([\n            this.braintreeIntegrationService.teardown(),\n            this.braintreeHostedForm.deinitialize(),\n        ]);\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: unknown): never {\n        if (isBraintreeError(error)) {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private async preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const { paymentData } = payment;\n        const commonPaymentData = { deviceSessionId: this.deviceSessionId };\n\n        if (this.isSubmittingWithStoredCard(payment)) {\n            return {\n                ...commonPaymentData,\n                ...paymentData,\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { nonce } = this.shouldPerform3DSVerification(payment)\n            ? await this.braintreeIntegrationService.verifyCard(\n                  payment,\n                  billingAddress,\n                  orderAmount,\n              )\n            : await this.braintreeIntegrationService.tokenizeCard(payment, billingAddress);\n\n        return {\n            ...commonPaymentData,\n            nonce,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        };\n    }\n\n    private async prepareHostedPaymentData(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const { paymentData } = payment;\n        const commonPaymentData = { deviceSessionId: this.deviceSessionId };\n\n        if (this.isSubmittingWithStoredCard(payment)) {\n            const { nonce } = await this.braintreeHostedForm.tokenizeForStoredCardVerification();\n\n            return {\n                ...commonPaymentData,\n                ...paymentData,\n                nonce,\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { nonce } = this.shouldPerform3DSVerification(payment)\n            ? await this.verifyCardWithHostedForm(billingAddress, orderAmount)\n            : await this.braintreeHostedForm.tokenize(billingAddress);\n\n        return {\n            ...commonPaymentData,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n            nonce,\n        };\n    }\n\n    private async verifyCardWithHostedForm(\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this.braintreeHostedForm.tokenize(billingAddress);\n\n        return this.braintreeIntegrationService.challenge3DSVerification(\n            tokenizationPayload,\n            orderAmount,\n        );\n    }\n\n    private async processAdditionalAction(\n        error: unknown,\n        payment: OrderPaymentRequestBody,\n        orderAmount: number,\n    ): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'three_d_secure_required' })\n        ) {\n            return this.handleError(error);\n        }\n\n        try {\n            const { payer_auth_request: storedCreditCardNonce } =\n                (isBraintreePaymentRequest3DSError(error) && error.body.three_ds_result) || {};\n            const { paymentData } = payment;\n            const state = this.paymentIntegrationService.getState();\n\n            if (!paymentData || !isVaultedInstrument(paymentData)) {\n                throw new PaymentArgumentInvalidError(['instrumentId']);\n            }\n\n            const instrument = state.getCardInstrumentOrThrow(paymentData.instrumentId);\n            const { nonce } = await this.braintreeIntegrationService.challenge3DSVerification(\n                {\n                    nonce: storedCreditCardNonce || '',\n                    bin: instrument.iin,\n                },\n                orderAmount,\n            );\n\n            await this.paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    deviceSessionId: this.deviceSessionId,\n                    nonce,\n                },\n            });\n        } catch (error) {\n            return this.handleError(error);\n        }\n    }\n\n    private isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private isSubmittingWithStoredCard(payment: OrderPaymentRequestBody): boolean {\n        return !!(payment.paymentData && isVaultedInstrument(payment.paymentData));\n    }\n\n    private shouldPerform3DSVerification(payment: OrderPaymentRequestBody): boolean {\n        return !!(this.is3dsEnabled && !this.isSubmittingWithStoredCard(payment));\n    }\n\n    // TODO: Remove when BT AXO A/B testing is finished\n    private shouldInitializeBraintreeFastlane(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const braintreeCustomer = isBraintreeAcceleratedCheckoutCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n        const isFastlaneEnabled: boolean =\n            this.paymentMethod?.initializationData.isAcceleratedCheckoutEnabled;\n\n        return isFastlaneEnabled && !braintreeCustomer?.authenticationState;\n    }\n\n    // TODO: Remove when BT AXO A/B testing is finished\n    private async initializeBraintreeFastlaneOrThrow(methodId: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { clientToken, config } = paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeIntegrationService.initialize(clientToken, this.threeDSecure);\n\n        await this.braintreeIntegrationService.getBraintreeFastlane(cart.id, config.testMode);\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","export interface BraintreePayment3DSRequestErrors {\n    code: string;\n}\n\nexport interface BraintreePaymentRequest3DSError {\n    name: string;\n    body: {\n        status: string;\n        three_ds_result: {\n            payer_auth_request: string;\n        };\n        errors: BraintreePayment3DSRequestErrors[];\n    };\n}\n\nexport default function isBraintreePaymentRequest3DSError(\n    error: unknown,\n): error is BraintreePaymentRequest3DSError {\n    if (typeof error !== 'object' || error === null) {\n        return false;\n    }\n    /* eslint-disable @typescript-eslint/consistent-type-assertions */\n    return (\n        'name' in error &&\n        'body' in error &&\n        'status' in (error as BraintreePaymentRequest3DSError).body &&\n        'three_ds_result' in (error as BraintreePaymentRequest3DSError).body &&\n        'payer_auth_request' in (error as BraintreePaymentRequest3DSError).body.three_ds_result &&\n        'errors' in (error as BraintreePaymentRequest3DSError).body\n    );\n}\n","import { BraintreeFormFieldsMap, BraintreeStoredCardFieldsMap } from '../index';\n\nexport function isBraintreeFormFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n): fields is BraintreeFormFieldsMap {\n    return 'cardNumber' in fields;\n}\n\nexport function isBraintreeStoredCardFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n): fields is BraintreeStoredCardFieldsMap {\n    return !!(\n        Object.keys(fields).length > 0 &&\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        ((fields as BraintreeStoredCardFieldsMap).cardCodeVerification ||\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            (fields as BraintreeStoredCardFieldsMap).cardNumberVerification)\n    );\n}\n","import isBraintreeError from './is-braintree-error';\nimport { BraintreeHostedFormError } from '../types';\n\nfunction isValidInvalidFieldKeys(invalidFieldKeys: unknown): invalidFieldKeys is string[] {\n    return (\n        Array.isArray(invalidFieldKeys) && invalidFieldKeys.every((key) => typeof key === 'string')\n    );\n}\n\nexport default function isBraintreeHostedFormError(\n    error: unknown,\n): error is BraintreeHostedFormError {\n    if (!isBraintreeError(error)) {\n        return false;\n    }\n\n    const { details } = error;\n\n    return (\n        details === undefined ||\n        (typeof details === 'object' &&\n            details !== null &&\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            (details as { invalidFieldKeys?: unknown }).invalidFieldKeys === undefined) ||\n        isValidInvalidFieldKeys(details)\n    );\n}\n","import { Dictionary, isEmpty, isNil, omitBy } from 'lodash';\n\nimport {\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BraintreeBillingAddressRequestData,\n    BraintreeClient,\n    BraintreeFormErrorDataKeys,\n    BraintreeFormErrorsData,\n    BraintreeFormFieldsMap,\n    BraintreeFormFieldStyles,\n    BraintreeFormFieldStylesMap,\n    BraintreeFormFieldType,\n    BraintreeFormFieldValidateErrorData,\n    BraintreeFormFieldValidateEventData,\n    BraintreeFormOptions,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeHostedFieldsState,\n    BraintreeHostedFormError,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n    BraintreeStoredCardFieldsMap,\n    isBraintreeFormFieldsMap,\n    isBraintreeHostedFormError,\n    isBraintreeSupportedCardBrand,\n    TokenizationPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nenum BraintreeHostedFormType {\n    CreditCard,\n    StoredCardVerification,\n}\n\nexport default class BraintreeHostedForm {\n    private cardFields?: BraintreeHostedFields;\n    private formOptions?: BraintreeFormOptions;\n    private type?: BraintreeHostedFormType;\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private isInitializedHostedForm = false;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async initialize(\n        options: BraintreeFormOptions,\n        unsupportedCardBrands?: string[],\n        clientToken?: string,\n    ): Promise<void> {\n        this.clientToken = clientToken;\n        this.formOptions = options;\n        this.type = isBraintreeFormFieldsMap(options.fields)\n            ? BraintreeHostedFormType.CreditCard\n            : BraintreeHostedFormType.StoredCardVerification;\n\n        const fields = this.mapFieldOptions(options.fields, unsupportedCardBrands);\n\n        if (isEmpty(fields)) {\n            this.isInitializedHostedForm = false;\n\n            return;\n        }\n\n        this.cardFields = await this.createHostedFields({\n            fields,\n            styles: options.styles && this.mapStyleOptions(options.styles),\n        });\n\n        this.cardFields?.on('blur', this.handleBlur);\n        this.cardFields?.on('focus', this.handleFocus);\n        this.cardFields?.on('cardTypeChange', this.handleCardTypeChange);\n        this.cardFields?.on('validityChange', this.handleValidityChange);\n        this.cardFields?.on('inputSubmitRequest', this.handleInputSubmitRequest);\n\n        this.isInitializedHostedForm = true;\n    }\n\n    isInitialized(): boolean {\n        return !!this.isInitializedHostedForm;\n    }\n\n    async deinitialize(): Promise<void> {\n        if (this.isInitializedHostedForm) {\n            this.isInitializedHostedForm = false;\n            await this.cardFields?.teardown();\n        }\n    }\n\n    validate(): void {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this.cardFields.getState();\n\n        if (!this.isValidForm(state)) {\n            this.handleValidityChange(state);\n\n            const errors = this.mapValidationErrors(state.fields);\n\n            throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n        }\n    }\n\n    async tokenize(billingAddress: Address): Promise<TokenizationPayload> {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            const payload = await this.cardFields.tokenize(\n                omitBy(\n                    {\n                        billingAddress: billingAddress && this.mapBillingAddress(billingAddress),\n                    },\n                    isNil,\n                ),\n            );\n\n            this.formOptions?.onValidate?.({ isValid: true, errors: {} });\n\n            return {\n                nonce: payload.nonce,\n                bin: payload.details?.bin,\n            };\n        } catch (error) {\n            if (isBraintreeHostedFormError(error)) {\n                const errors = this.mapTokenizeError(error);\n\n                if (errors) {\n                    this.formOptions?.onValidate?.({ isValid: false, errors });\n                    throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    async tokenizeForStoredCardVerification(): Promise<TokenizationPayload> {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            const payload = await this.cardFields.tokenize();\n\n            this.formOptions?.onValidate?.({ isValid: true, errors: {} });\n\n            return {\n                nonce: payload.nonce,\n                bin: payload.details?.bin,\n            };\n        } catch (error) {\n            if (isBraintreeHostedFormError(error)) {\n                const errors = this.mapTokenizeError(error, true);\n\n                if (errors) {\n                    this.formOptions?.onValidate?.({ isValid: false, errors });\n                    throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\n    ): Promise<BraintreeHostedFields> {\n        const client = await this.getClient();\n        const hostedFields = await this.braintreeScriptLoader.loadHostedFields();\n\n        const currentSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n        const hostedFieldsOptions =\n            currentSdkVersion === BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION\n                ? { ...options, preventCursorJumps: true }\n                : options;\n\n        return hostedFields.create({ ...hostedFieldsOptions, client });\n    }\n\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this.client) {\n            const client = await this.braintreeScriptLoader.loadClient();\n\n            this.client = client.create({ authorization: this.clientToken });\n        }\n\n        return this.client;\n    }\n\n    private mapBillingAddress(billingAddress: Address): BraintreeBillingAddressRequestData {\n        return {\n            countryName: billingAddress.country,\n            postalCode: billingAddress.postalCode,\n            streetAddress: billingAddress.address2\n                ? `${billingAddress.address1} ${billingAddress.address2}`\n                : billingAddress.address1,\n        };\n    }\n\n    private mapFieldOptions(\n        fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n        unsupportedCardBrands?: string[],\n    ): BraintreeHostedFieldsCreatorConfig['fields'] {\n        if (isBraintreeFormFieldsMap(fields)) {\n            const supportedCardBrands: Partial<Record<string, boolean>> = {};\n\n            unsupportedCardBrands?.forEach((cardBrand) => {\n                if (isBraintreeSupportedCardBrand(cardBrand)) {\n                    supportedCardBrands[cardBrand] = false;\n                }\n            });\n\n            return omitBy(\n                {\n                    number: {\n                        container: `#${fields.cardNumber.containerId}`,\n                        placeholder: fields.cardNumber.placeholder,\n                        internalLabel: fields.cardNumber.accessibilityLabel,\n                        ...(Object.keys(supportedCardBrands).length > 0\n                            ? { supportedCardBrands }\n                            : {}),\n                    },\n                    expirationDate: {\n                        container: `#${fields.cardExpiry.containerId}`,\n                        placeholder: fields.cardExpiry.placeholder,\n                        internalLabel: fields.cardExpiry.accessibilityLabel,\n                    },\n                    cvv: fields.cardCode && {\n                        container: `#${fields.cardCode.containerId}`,\n                        placeholder: fields.cardCode.placeholder,\n                        internalLabel: fields.cardCode.accessibilityLabel,\n                    },\n                    cardholderName: {\n                        container: `#${fields.cardName.containerId}`,\n                        placeholder: fields.cardName.placeholder,\n                        internalLabel: fields.cardName.accessibilityLabel,\n                    },\n                },\n                isNil,\n            );\n        }\n\n        return omitBy(\n            {\n                number: fields.cardNumberVerification && {\n                    container: `#${fields.cardNumberVerification.containerId}`,\n                    placeholder: fields.cardNumberVerification.placeholder,\n                },\n                cvv: fields.cardCodeVerification && {\n                    container: `#${fields.cardCodeVerification.containerId}`,\n                    placeholder: fields.cardCodeVerification.placeholder,\n                },\n            },\n            isNil,\n        );\n    }\n\n    private mapStyleOptions(\n        options: BraintreeFormFieldStylesMap,\n    ): BraintreeHostedFieldsCreatorConfig['styles'] {\n        const mapStyles = (styles: BraintreeFormFieldStyles = {}) =>\n            omitBy(\n                {\n                    color: styles.color,\n                    'font-family': styles.fontFamily,\n                    'font-size': styles.fontSize,\n                    'font-weight': styles.fontWeight,\n                },\n                isNil,\n            ) as Dictionary<string>;\n\n        return {\n            input: mapStyles(options.default),\n            '.invalid': mapStyles(options.error),\n            ':focus': mapStyles(options.focus),\n        };\n    }\n\n    private mapFieldType(type: string): BraintreeFormFieldType {\n        switch (type) {\n            case 'number':\n                return this.type === BraintreeHostedFormType.StoredCardVerification\n                    ? BraintreeFormFieldType.CardNumberVerification\n                    : BraintreeFormFieldType.CardNumber;\n\n            case 'expirationDate':\n                return BraintreeFormFieldType.CardExpiry;\n\n            case 'cvv':\n                return this.type === BraintreeHostedFormType.StoredCardVerification\n                    ? BraintreeFormFieldType.CardCodeVerification\n                    : BraintreeFormFieldType.CardCode;\n\n            case 'cardholderName':\n                return BraintreeFormFieldType.CardName;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    private mapErrors(fields: BraintreeHostedFieldsState['fields']): BraintreeFormErrorsData {\n        const errors: BraintreeFormErrorsData = {};\n\n        if (fields) {\n            // eslint-disable-next-line no-restricted-syntax\n            for (const [key, value] of Object.entries(fields)) {\n                if (value && this.isValidParam(key)) {\n                    const { isValid, isEmpty, isPotentiallyValid } = value;\n\n                    errors[key] = {\n                        isValid,\n                        isEmpty,\n                        isPotentiallyValid,\n                    };\n                }\n            }\n        }\n\n        return errors;\n    }\n\n    private mapValidationErrors(\n        fields: BraintreeHostedFieldsState['fields'],\n    ): BraintreeFormFieldValidateEventData['errors'] {\n        return (Object.keys(fields) as Array<keyof BraintreeHostedFieldsState['fields']>).reduce(\n            (result, fieldKey) => ({\n                ...result,\n                [this.mapFieldType(fieldKey)]: fields[fieldKey]?.isValid\n                    ? undefined\n                    : [this.createInvalidError(this.mapFieldType(fieldKey))],\n            }),\n            {},\n        );\n    }\n\n    private mapTokenizeError(\n        error: BraintreeHostedFormError,\n        isStoredCard = false,\n    ): BraintreeFormFieldValidateEventData['errors'] | undefined {\n        if (error.code === 'HOSTED_FIELDS_FIELDS_EMPTY') {\n            const cvv = [this.createRequiredError(this.mapFieldType('cvv'))];\n\n            if (isStoredCard) {\n                return { [this.mapFieldType('cvv')]: cvv };\n            }\n\n            return {\n                [this.mapFieldType('cvv')]: cvv,\n                [this.mapFieldType('expirationDate')]: [\n                    this.createRequiredError(this.mapFieldType('expirationDate')),\n                ],\n                [this.mapFieldType('number')]: [\n                    this.createRequiredError(this.mapFieldType('number')),\n                ],\n                [this.mapFieldType('cardholderName')]: [\n                    this.createRequiredError(this.mapFieldType('cardholderName')),\n                ],\n            };\n        }\n\n        return error.details?.invalidFieldKeys?.reduce((result, key) => {\n            const type = this.mapFieldType(key);\n\n            return {\n                ...result,\n                [type]: [this.createInvalidError(type)],\n            };\n        }, {});\n    }\n\n    private createRequiredError(\n        fieldType: BraintreeFormFieldType,\n    ): BraintreeFormFieldValidateErrorData {\n        const messages = {\n            [BraintreeFormFieldType.CardCode]: 'CVV is required',\n            [BraintreeFormFieldType.CardCodeVerification]: 'CVV is required',\n            [BraintreeFormFieldType.CardNumber]: 'Credit card number is required',\n            [BraintreeFormFieldType.CardNumberVerification]: 'Credit card number is required',\n            [BraintreeFormFieldType.CardExpiry]: 'Expiration date is required',\n            [BraintreeFormFieldType.CardName]: 'Full name is required',\n        };\n\n        return {\n            fieldType,\n            message: messages[fieldType] ?? 'Field is required',\n            type: 'required',\n        };\n    }\n\n    private createInvalidError(\n        fieldType: BraintreeFormFieldType,\n    ): BraintreeFormFieldValidateErrorData {\n        const formFields = {\n            [BraintreeFormFieldType.CardCode]: {\n                message: 'Invalid card code',\n                type: 'invalid_card_code',\n            },\n            [BraintreeFormFieldType.CardCodeVerification]: {\n                message: 'Invalid card code',\n                type: 'invalid_card_code',\n            },\n            [BraintreeFormFieldType.CardNumber]: {\n                message: 'Invalid card number',\n                type: 'invalid_card_number',\n            },\n            [BraintreeFormFieldType.CardNumberVerification]: {\n                message: 'Invalid card number',\n                type: 'invalid_card_number',\n            },\n            [BraintreeFormFieldType.CardExpiry]: {\n                message: 'Invalid card expiry',\n                type: 'invalid_card_expiry',\n            },\n            [BraintreeFormFieldType.CardName]: {\n                message: 'Invalid card name',\n                type: 'invalid_card_name',\n            },\n        };\n\n        return {\n            fieldType,\n            message: formFields[fieldType]?.message ?? 'Invalid field',\n            type: formFields[fieldType]?.type ?? 'invalid',\n        };\n    }\n\n    private handleBlur = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onBlur?.({\n            fieldType: this.mapFieldType(event.emittedBy),\n            errors: this.mapErrors(event.fields),\n        });\n    };\n\n    private handleFocus = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onFocus?.({\n            fieldType: this.mapFieldType(event.emittedBy),\n        });\n    };\n\n    private handleCardTypeChange = (event: BraintreeHostedFieldsState): void => {\n        const cardType =\n            event.cards.length === 1\n                ? event.cards[0].type.replace(/^master-card$/, 'mastercard')\n                : undefined;\n\n        this.formOptions?.onCardTypeChange?.({ cardType });\n    };\n\n    private handleInputSubmitRequest = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onEnter?.({\n            fieldType: this.mapFieldType(event.emittedBy),\n        });\n    };\n\n    private handleValidityChange = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onValidate?.({\n            isValid: this.isValidForm(event),\n            errors: this.mapValidationErrors(event.fields),\n        });\n    };\n\n    private isValidForm(event: BraintreeHostedFieldsState): boolean {\n        return (\n            Object.keys(event.fields) as Array<keyof BraintreeHostedFieldsState['fields']>\n        ).every((key) => event.fields[key]?.isValid);\n    }\n\n    private isValidParam(key: string): key is BraintreeFormErrorDataKeys {\n        return [\n            'number',\n            'cvv',\n            'expirationDate',\n            'postalCode',\n            'cardholderName',\n            'cardType',\n        ].includes(key);\n    }\n}\n","import { BraintreeSupportedCardBrands } from '../types';\n\nexport const isBraintreeSupportedCardBrand = (\n    cardBrand: string,\n): cardBrand is BraintreeSupportedCardBrands => {\n    const supportedCardBrands = Object.values(BraintreeSupportedCardBrands);\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return supportedCardBrands.includes(cardBrand as BraintreeSupportedCardBrands);\n};\n\nexport default isBraintreeSupportedCardBrand;\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeCreditCardPaymentStrategy from './braintree-credit-card-payment-strategy';\nimport BraintreeHostedForm from '../braintree-hosted-form/braintree-hosted-form';\n\nconst createBraintreeCreditCardPaymentStrategy: PaymentStrategyFactory<\n    BraintreeCreditCardPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        braintreeScriptLoader,\n        braintreeHostWindow,\n    );\n\n    const braintreeHostedForm = new BraintreeHostedForm(\n        braintreeScriptLoader,\n        braintreeSDKVersionManager,\n    );\n\n    return new BraintreeCreditCardPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        braintreeHostedForm,\n    );\n};\n\nexport default toResolvableModule(createBraintreeCreditCardPaymentStrategy, [{ id: 'braintree' }]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalStyleOptions } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function getValidButtonStyle(style?: PaypalStyleOptions): PaypalStyleOptions {\n    const { color, fundingicons, height = 40, layout, shape, size, tagline } = style || {};\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height: number | string): number {\n    const minHeight = 25;\n    const defaultHeight = 40;\n    const maxHeight = 55;\n\n    const currentHeight = Number(height);\n\n    if (!currentHeight || Number.isNaN(currentHeight)) {\n        return defaultHeight;\n    }\n\n    if (currentHeight > maxHeight) {\n        return maxHeight;\n    }\n\n    if (currentHeight < minHeight) {\n        return minHeight;\n    }\n\n    return currentHeight;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalButtonInitializeOptions, {\n    WithBraintreePaypalButtonInitializeOptions,\n} from './braintree-paypal-button-initialize-options';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypal.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypal;\n        const { paypal } = this.braintreeHostWindow;\n\n        if (paypal) {\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                fundingSource: paypal.FUNDING.PAYPAL,\n                style: getValidButtonStyle(style),\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                onEligibilityFailure();\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypal;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount;\n            const currencyCode = buyNowCart\n                ? braintreepaypal.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalButtonStrategy from './braintree-paypal-button-strategy';\n\nconst createBraintreePaypalButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalButtonStrategy, [{ id: 'braintreepaypal' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    MessagingPlacements,\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalCreditButtonInitializeOptions, {\n    WithBraintreePaypalCreditButtonInitializeOptions,\n} from './braintree-paypal-credit-button-initialize-options';\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeMessages: BraintreeMessages,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk will be rolled out to 100%\n        const features = state.getStoreConfig()?.checkoutSettings.features ?? {};\n        const isBannerImplementationDisabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk',\n        );\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (!isBannerImplementationDisabled && braintreepaypalcredit.messagingContainerId) {\n                this.renderPayPalMessages(methodId, braintreepaypalcredit.messagingContainerId);\n            }\n\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalMessages(methodId: string, messagingContainerId: string): void {\n        this.braintreeMessages.render(methodId, messagingContainerId, MessagingPlacements.CART);\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? {\n                              label: PaypalButtonStyleLabelOption.CREDIT,\n                              ...getValidButtonStyle(style),\n                          }\n                        : getValidButtonStyle(style);\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    } else if (\n                        paypal.FUNDING.CREDIT &&\n                        onEligibilityFailure &&\n                        typeof onEligibilityFailure === 'function'\n                    ) {\n                        // the condition is related to paypal.FUNDING.CREDIT because when paypal.FUNDING.PAYLATER is not eligible then\n                        // CREDIT button should be configured and triggered to render with eligibility check\n                        // and if it is not eligible, then onEligibilityFailure callback should be called\n                        onEligibilityFailure();\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount; // state.getCheckoutOrThrow().outstandingBalance\n            const currencyCode = buyNowCart\n                ? braintreepaypalcredit.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditButtonStrategy from './braintree-paypal-credit-button-strategy';\n\nconst createBraintreePaypalCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalCreditButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n    const braintreeMessages = new BraintreeMessages(paymentIntegrationService);\n\n    return new BraintreePaypalCreditButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeMessages,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditButtonStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeVisaCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const { clientToken, initializationData, config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const {\n            currency: { code },\n            cartAmount,\n        } = state.getCartOrThrow();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: code,\n                subtotal: String(cartAmount),\n            },\n            settings: {\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        this.createSignInButton(containerId);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on('payment.success', async (payment) => {\n            await this.paymentSuccess(braintreeVisaCheckout, payment);\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private async paymentSuccess(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.toVisaCheckoutAddress(shipping),\n                billingAddress = this.toVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return this.insertVisaCheckoutButton(container);\n    }\n\n    private insertVisaCheckoutButton(container: Element): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.alignItems = 'flex-end';\n\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutButtonStrategy from './braintree-visa-checkout-button-strategy';\n\nconst createBraintreeVisaCheckoutButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVisaCheckoutButtonStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutButtonStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeSdk,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    mapToLegacyBillingAddress,\n    mapToLegacyShippingAddress,\n    PaypalButtonStyleColorOption,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isBraintreeError from '../is-braintree-error';\nimport { isUnsupportedBrowserError } from '../isUnsupportedBrowserError';\n\nimport { WithBraintreeVenmoInitializeOptions } from './braintree-venmo-initialize-options';\n\nconst getVenmoButtonStyle = (styles: PaypalStyleOptions): Record<string, string> => {\n    const { color, height } = styles;\n\n    const colorParser = (c: string) => {\n        if (c === PaypalButtonStyleColorOption.WHITE) {\n            return '#FFFFFF';\n        }\n\n        return '#3D95CE';\n    };\n\n    return {\n        backgroundColor: colorParser(color || ''),\n        backgroundPosition: '50% 50%',\n        backgroundSize: '80px auto',\n        backgroundImage: `url(\"/app/assets/img/payment-providers/venmo-logo-${\n            color === PaypalButtonStyleColorOption.WHITE\n                ? PaypalButtonStyleColorOption.BLUE\n                : PaypalButtonStyleColorOption.WHITE\n        }.svg\")`,\n        backgroundRepeat: 'no-repeat',\n        borderRadius: '4px',\n        cursor: 'pointer',\n        transition: '0.2s ease',\n        minHeight: `${height || 40}px`,\n        minWidth: '150px',\n        height: '100%',\n        width: '100%',\n        border: color === PaypalButtonStyleColorOption.WHITE ? '1px solid black' : 'none',\n    };\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreeVenmoInitializeOptions,\n    ): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { clientToken, initializationData }: PaymentMethod = paymentMethod;\n        const { paymentButtonStyles } = initializationData;\n        const { cartButtonStyles } = paymentButtonStyles || {};\n        const styles = braintreevenmo?.style || cartButtonStyles;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadDefaultCheckout();\n\n        this.onError = braintreevenmo?.onError || this.handleError;\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            const braintreeVenmoCheckout = await this.braintreeSdk.getVenmoCheckoutOrThrow();\n\n            this.renderVenmoButton(\n                braintreeVenmoCheckout,\n                containerId,\n                braintreevenmo?.buyNowInitializeOptions,\n                styles,\n            );\n        } catch (error) {\n            if (isBraintreeError(error) || isUnsupportedBrowserError(error)) {\n                this.handleInitializationVenmoError(error, containerId);\n            }\n        }\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private async createBuyNowCart(\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): Promise<Cart | undefined> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions?.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n\n        return undefined;\n    }\n\n    private handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this.removeVenmoContainer(containerId);\n\n        return this.onError(error);\n    }\n\n    private removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n        buttonStyles?: PaypalStyleOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n        const { color } = buttonStyles || {};\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, getVenmoButtonStyle(buttonStyles || {}));\n\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this.createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (\n                        error: BraintreeError | undefined,\n                        payload: BraintreeTokenizePayload,\n                    ) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            this.onError(error);\n                        }\n\n                        await this.handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        if (color === PaypalButtonStyleColorOption.BLUE) {\n            venmoButton.addEventListener('mouseenter', () => {\n                venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n            });\n\n            venmoButton.addEventListener('mouseleave', () => {\n                venmoButton.style.backgroundColor = getVenmoButtonStyle(\n                    buttonStyles || {},\n                ).backgroundColor;\n            });\n        }\n    }\n\n    private async handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { nonce, details } = payload;\n\n        this.formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: 'braintreevenmo',\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import { UnsupportedBrowserError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport function isUnsupportedBrowserError(error: unknown): error is UnsupportedBrowserError {\n    return error instanceof UnsupportedBrowserError;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVenmoButtonStrategy from './braintree-venmo-button-strategy';\n\nconst createBraintreeVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVenmoButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const scriptLoader = getScriptLoader();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        scriptLoader,\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeVenmoButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVenmoButtonStrategy, [{ id: 'braintreevenmo' }]);\n"],"names":["__webpack_require__","isExperimentEnabled","features","experimentName","fallbackValue","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BraintreeSDKVersionManager","constructor","paymentIntegrationService","braintreeWindow","window","getSDKVersion","storeConfig","this","getState","getStoreConfig","checkoutSettings","getPreloadedSDKVersion","braintree","preloadedVersion","find","values","module","VERSION","StandardError","Error","message","super","name","type","setPrototypeOf","__proto__","captureStackTrace","stack","UnsupportedBrowserError","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","PaymentInvalidFormError","details","NotInitializedErrorType","NotInitializedError","subtype","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","getErrorMessage","PaymentMethodCancelledError","CancellablePromise","promise","cancellable","Promise","_","reject","cancel","race","PAYPAL_COMPONENTS","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","MessagingPlacements","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","isBraintreeError","error","Boolean","BraintreeIntegrationService","braintreeScriptLoader","braintreeHostWindow","overlay","dataCollectors","initialize","clientToken","threeDSecureOptions","getBraintreeFastlane","cardId","isTestModeEnabled","styles","localStorage","setItem","braintreeFastlane","getClientTokenOrThrow","client","getClient","deviceData","getSessionId","braintreeFastlaneCreator","loadFastlane","defaultStyles","root","backgroundColorPrimary","create","authorization","clientCreator","loadClient","getPaypal","braintreePaypal","all","loadPaypal","then","paypal","shouldSaveInstrument","config","newWindowFlow","supportsPopups","show","onClick","focusWindow","tokenize","enableShippingAddress","flow","useraction","response","remove","catch","getPaypalCheckout","onSuccess","onError","paypalCheckout","loadPaypalCheckout","paypalCheckoutConfig","braintreePaypalCheckout","paypalSdkLoadConfig","currency","isCreditEnabled","components","toString","intent","commit","loadPayPalSDK","getDataCollector","options","cacheKey","cached","dataCollector","loadDataCollector","dataCollectorConfig","kount","code","undefined","teardown","resolve","getBraintreeEnv","isTestMode","Sandbox","Production","mapToBraintreeShippingAddressOverride","address","recipientName","firstName","lastName","line1","address1","line2","address2","city","state","stateOrProvinceCode","postalCode","countryCode","phone","mapToLegacyShippingAddress","email","shippingAddress","split","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","mapToLegacyBillingAddress","billingAddress","removeElement","elementId","element","document","getElementById","cartId","riskCorrelationId","teardownModule","default","get3DS","threeDS","load3DS","threeDSecure","version","getVenmoCheckout","venmoConfig","venmoCheckout","loadVenmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","verifyCard","payment","amount","tokenizationPayload","tokenizeCard","challenge3DSVerification","paymentData","instrument","creditCardInstrument","ccExpiry","ccNumber","ccName","isCreditCardInstrumentLike","errors","getErrorsRequiredFields","isEmpty","requestData","mapToCreditCard","creditCards","request","nonce","bin","present3DSChallenge","creditCard","data","cardholderName","number","cvv","ccCvv","expirationDate","month","year","validate","countryCodeAlpha2","locality","countryName","country","streetAddress","endpoint","method","addFrame","removeFrame","challengeRequested","additionalInformation","cancelVerifyCard","verification","roundedAmount","toFixed","iframe","Number","onLookupComplete","_data","next","collectDeviceData","PaymentMethodClientUnavailableError","BRAINTREE_SDK_SCRIPTS_INTEGRITY","Client","PaypalCheckout","Paypal","LocalPayment","DataCollector","UsBankAccount","GooglePayment","ThreeDSecure","VisaCheckout","Venmo","HostedFields","Fastlane","MissingDataErrorType","BraintreeScriptLoader","scriptLoader","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadLocalPayment","loadUsBankAccount","loadGooglePayment","loadVisaCheckout","loadHostedFields","loadVisaCheckoutSdk","testMode","V","hash","loadScript","async","attributes","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","moduleName","toResolvableModule","resolveIds","assign","MissingDataError","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","BraintreePaypalCustomerStrategy","formPoster","braintreeIntegrationService","braintreepaypal","methodId","container","paymentMethod","getPaymentMethodOrThrow","_e","loadPaymentMethod","initializationData","paymentButtonStyles","checkoutTopButtonStyles","paypalCheckoutOptions","getCartOrThrow","renderPayPalButton","handleError","deinitialize","signIn","credentials","signInCustomer","signOut","signOutCustomer","executePaymentMethodCheckout","continueWithCheckoutCallback","buttonStyles","noop","fundingSource","FUNDING","PAYPAL","paypalButtonRender","Buttons","env","style","height","createOrder","setupPayment","onApprove","authorizeData","tokenizePayment","isEligible","render","loadDefaultCheckout","getCheckoutOrThrow","outstandingBalance","customer","getCustomer","addresses","shippingAddressOverride","createPayment","shippingAddressEditable","offerCredit","tokenizePayload","postForm","payment_type","provider","action","device_data","billing_address","JSON","stringify","shipping_address","buttonContainerId","onErrorCallback","getScriptLoader","createFormPoster","id","BraintreePaypalCreditCustomerStrategy","braintreepaypalcredit","hasRenderedSmartButton","PAYLATER","CREDIT","forEach","isInvalidStyleOption","styleOption","getFastlaneStyles","styleSettings","uiStyles","fastlaneStyles","omitBy","input","toggle","textBody","text","body","textCaption","caption","branding","keys","length","cleanUpFastlaneStyles","fastlaneRootSettingsBackgroundColor","errorColor","fastlaneRootSettingsErrorColor","fontFamily","fastlaneRootSettingsFontFamily","fontSizeBase","fastlaneRootSettingsFontSize","padding","fastlaneRootSettingsPadding","primaryColor","fastlaneRootSettingsPrimaryColor","borderRadius","fastlaneInputSettingsBorderRadius","borderColor","fastlaneInputSettingsBorderColor","focusBorderColor","fastlaneInputSettingsFocusBorderBase","backgroundColor","fastlaneInputSettingsBackgroundColor","borderWidth","fastlaneInputSettingsBorderWidth","textColorBase","fastlaneInputSettingsTextColorBase","colorPrimary","fastlaneToggleSettingsColorPrimary","colorSecondary","fastlaneToggleSettingsColorSecondary","color","fastlaneTextBodySettingsColor","fontSize","fastlaneTextBodySettingsFontSize","fastlaneTextCaptionSettingsColor","fastlaneTextCaptionSettingsFontSize","fastlaneBrandingSettings","mergeFastlaneStyles","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","UntrustedShippingCardVerificationType","BraintreeFastlaneCustomerStrategy","braintreeFastlaneUtils","isAcceleratedCheckoutEnabled","braintreefastlane","getValidPaymentMethodOrThrow","isFastlaneStylingEnabled","paypalFastlaneStylesSettings","initializeBraintreeFastlaneOrThrow","checkoutPaymentMethodExecuted","getCustomerOrThrow","isGuest","shouldRunAuthenticationFlow","runPayPalAuthenticationFlowOrThrow","primaryMethodId","shouldRunAcceleratedCheckout","validPaymentMethodId","CookieStorage","cookieKey","encodeURIComponent","cookie","value","firstIndex","indexOf","lastIndex","decodeURIComponent","substring","set","secure","cookieText","expires","path","domain","toUTCString","now","Date","minutes","setTime","getTime","BraintreeFastlaneUtils","getDeviceSessionId","cart","getCart","getBraintreeFastlaneOrThrow","getBraintreeFastlaneComponentOrThrow","FastlaneCardComponent","shouldSetShippingOption","getMethodIdOrThrow","lookupCustomerByEmail","triggerAuthenticationFlow","identity","getBillingAddress","isFastlaneShippingOptionAutoSelectEnabled","customerEmail","customerContextId","updatePaymentProviderCustomer","authenticationState","UNRECOGNIZED","instruments","saveSessionIdToCookies","profileData","phoneNumber","CANCELED","removeSessionIdFromCookies","shippingAddresses","mapPayPalToBcAddress","paypalBillingAddress","getPayPalBillingAddresses","billingAddresses","card","mapPayPalToBcInstrument","mergeShippingAndBillingAddresses","lineItems","physicalItems","updateBillingAddress","digitalItems","digitalItemBilling","updateShippingAddress","setShippingOption","getSessionIdFromCookies","sessionId","setDate","getDate","map","paymentSource","brand","expiry","lastDigits","binDetails","expiryYear","expiryMonth","bigpayToken","defaultInstrument","iin","last4","trustedShippingAddress","untrustedShippingCardVerificationMode","PAN","phones","countries","getCountries","getCountryNameByCountryCode","matchedCountry","company","extendedAddress","stateOrProvince","region","customFields","given_name","surname","isEqual","normalizeAddress","omit","filteredBillingAddresses","filter","some","consignments","getConsignments","availableShippingOptions","recommendedShippingOption","option","isRecommended","selectedOption","selectShippingOption","BraintreeSdk","setClientToken","getDataCollectorOrThrow","emptyDataCollector","KountNotEnabled","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","getBraintreeThreeDS","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","getUsBankAccount","usBankAccount","getBraintreeVisaCheckout","visaCheckout","getVisaCheckoutSdk","visaCheckoutSDK","getVenmoCheckoutOrThrow","braintreeVenmo","NotImplementedError","BraintreeVisaCheckoutCustomerStrategy","braintreeSdk","buttonClassName","braintreevisacheckout","visaCheckoutOptions","checkout","getStoreConfigOrThrow","braintreeVisaCheckout","visaCheckoutInstance","initOptions","createInitOptions","paymentRequest","currencyCode","subtotal","String","settings","locale","storeProfile","storeLanguage","shipping","collectShipping","signInButton","createSignInButton","init","on","paymentSuccessPayload","loadCheckout","visibility","payload","getShippingAddress","billing","mapToVisaCheckoutAddress","userData","cardInformation","userEmail","card_information","cardType","lastTwo","getAddress","containerId","buttonClass","querySelector","insertVisaCheckoutButton","visaCheckoutButton","createElement","display","flexDirection","width","className","innerHTML","appendChild","hostWindow","isVaultedInstrument","instrumentId","OrderFinalizationNotRequiredError","isHostedInstrumentLike","shouldSetAsDefaultInstrument","PaymentMethodFailedError","isUsBankAccountInstrumentLike","BraintreeAchPaymentStrategy","braintreeach","getMandateText","handleBraintreeError","execute","orderRequest","order","isSubmittingWithVaultingInstrument","tokenizePaymentForVaultedInstrument","submitPaymentPayload","preparePaymentDataForVaultedInstrument","preparePaymentData","submitOrder","submitPayment","finalize","getUsBankAccountOrThrow","mandateText","bankDetails","getBankDetails","isVaultingEnabled","routingNumber","accountNumber","deviceSessionId","formattedPayload","tokenized_bank_account","issuer","masked_account_number","substr","token","getBillingAddressOrThrow","ownershipType","toLowerCase","accountType","businessName","BraintreeMessages","placement","messagingContainer","paypalBNPLConfiguration","bannedId","PAYMENT","bannerConfiguration","status","CART","removeAttribute","Messages","cartAmount","buyerCountry","getPaypalMessagesStylesFromBNPLConfig","messagesStyles","layout","logo","position","ratio","size","Overlay","closeElement","mainElement","_createElements","_element","_closeElement","_mainElement","parentElement","_registerClick","setTimeout","opacity","_unregisterClick","_removeAfterTransition","background","transitionDuration","hasCloseButton","innerHtml","classLayout","classClose","classOverlayText","overlayText","addClassLayout","innerText","getOverlayStyle","_addEventListener","addEventListener","_removeEventListener","removeEventListener","onClickClose","handleTransition","event","propertyName","DEFAULT_STYLES","ROTATION_ANIMATION","LoadingIndicator","containerStyles","defineAnimation","buildContainer","indicator","buildIndicator","parentId","parent","hide","handleTransitionEnd","bottom","left","right","top","transition","setStyleAttribute","border","margin","transform","transformStyle","animation","attrs","k","setProperty","head","sheet","CSSStyleSheet","insertRule","LOADING_INDICATOR_STYLES","BraintreePaypalPaymentStrategy","braintreeMessages","loadingIndicator","braintreeOptions","bannerContainerId","loadPaypalCheckoutInstance","shouldHandleInstrumentDeclinedError","useStoreCredit","isProviderError","close","_resolve","braintreeTokenizePayload","grandTotal","getOutstandingBalance","getPaymentMethod","vaultPaymentInstrument","vault_payment_instrument","set_as_default_stored_instrument","device_info","paypal_account","paymentMethodId","shouldShowPayPalCreditBanner","renderPayPalMessages","onPaymentError","submitForm","onRenderButton","loadingIndicatorContainer","toggleLoadingIndicator","tokenizePaymentOrThrow","onCancel","isBraintreePaypalProviderError","e","provider_error","isLoading","ContentType","SDK_VERSION_HEADERS","BraintreeRequestSender","requestSender","getOrderStatus","url","headers","Json","DEFAULT_RESPONSE","RequestError","PaymentMethodInvalidError","TimeoutError","BraintreeLocalMethodsPaymentStrategy","braintreeRequestSender","pollingInterval","maxPollingIntervalTime","isLPMsUpdateExperimentEnabled","pollingTimer","stopPolling","isPollingEnabled","gatewayId","braintreelocalmethods","merchantId","isNonInstantPaymentMethod","executeWithNotInstantLPM","executeWithInstantLPM","basicPaymentData","getLPMsBasicPaymentData","isBraintreeRedirectError","redirectUrl","additional_action_required","redirect_url","location","replace","startPayment","getInstantLPMConfig","getInstantLPMCallback","isShippingRequired","checkoutUrl","links","checkoutLink","paymentType","fallback","buttonText","shippingAddressRequired","givenName","onPaymentStart","start","orderId","paymentId","order_id","isBraintreeOrderSavedResponse","order_id_saved_successfully","initializePollingMechanism","startPaymentError","payloadData","resetPollingMechanism","toUpperCase","resolvePromise","rejectPromise","timeout","clearTimeout","orderStatus","params","useMetadata","isOrderPending","Pending","isOrderApproved","Completed","isPollingError","Failed","deinitializePollingMechanism","reinitializeStrategy","createRequestSender","gateway","isBraintreeAcceleratedCheckoutCustomer","BraintreeFastlanePaymentStrategy","onInit","onChange","isThreeDSExperimentEnabled","is3DSEnabled","is3dsEnabled","initializeCardComponent","renderBraintreeCardComponent","handleBraintreeStoredInstrumentChange","paymentPayload","preparePaymentPayload","braintreeCardComponent","fullName","cardComponentOptions","fields","prefill","enabled","paypalPaymentComponent","getBraintreeCardComponentOrThrow","paypalInstrument","getPayPalInstruments","threeDSToken","paypal_fastlane_token","getPaymentToken","paymentToken","mapToPayPalAddress","binGuest","getOrderOrThrow","orderAmount","verifyError","paymentProviderCustomer","getPaymentProviderCustomer","braintreePaymentProviderCustomer","paypalFastlaneSessionId","getPaymentProviderCustomerOrThrow","paypalAxoSdk","selectionChanged","selectedCard","profile","showCardSelector","braintreeFastlaneCustomer","selectedInstruments","BraintreeVisaCheckoutPaymentStrategy","onPaymentSelect","visaCheckoutSdk","BraintreeVenmoPaymentStrategy","venmoOptions","braintreevenmo","initializeBraintreeVenmo","isBraintreeVenmoWebFallbackSupport","mobileWebFallBack","tokenizeResult","braintreeVenmoTokenize","BraintreeCreditCardPaymentStrategy","braintreeHostedForm","isHostedPaymentFormEnabled","form","unsupportedCardBrands","isHostedFormInitialized","isInitialized","shouldInitializeBraintreeFastlane","prepareHostedPaymentData","processAdditionalAction","commonPaymentData","isSubmittingWithStoredCard","shouldPerform3DSVerification","tokenizeForStoredCardVerification","verifyCardWithHostedForm","payer_auth_request","storedCreditCardNonce","three_ds_result","isBraintreePaymentRequest3DSError","getCardInstrumentOrThrow","isHostedFormEnabled","braintreeCustomer","isBraintreeFormFieldsMap","isBraintreeHostedFormError","invalidFieldKeys","Array","isArray","every","BraintreeHostedFormType","BraintreeHostedForm","isInitializedHostedForm","handleBlur","formOptions","onBlur","fieldType","mapFieldType","emittedBy","mapErrors","handleFocus","onFocus","handleCardTypeChange","cards","onCardTypeChange","handleInputSubmitRequest","onEnter","handleValidityChange","onValidate","isValid","isValidForm","mapValidationErrors","CreditCard","StoredCardVerification","mapFieldOptions","cardFields","createHostedFields","mapStyleOptions","mapBillingAddress","isNil","mapTokenizeError","hostedFields","hostedFieldsOptions","preventCursorJumps","supportedCardBrands","cardBrand","includes","cardNumber","placeholder","internalLabel","accessibilityLabel","cardExpiry","cardCode","cardName","cardNumberVerification","cardCodeVerification","mapStyles","fontWeight","focus","CardNumberVerification","CardNumber","CardExpiry","CardCodeVerification","CardCode","CardName","entries","isValidParam","isPotentiallyValid","reduce","result","fieldKey","createInvalidError","isStoredCard","createRequiredError","formFields","BuyNowCartCreationError","getValidButtonStyle","fundingicons","shape","tagline","validStyles","getValidHeight","currentHeight","isNaN","BraintreePaypalButtonStrategy","buyNowInitializeOptions","shouldProcessPayment","onAuthorizeError","onEligibilityFailure","buyNowCart","getBuyNowCartRequestBody","createBuyNowCart","buyNowCartId","cart_id","buyNowCardRequestBody","BraintreePaypalCreditButtonStrategy","isBannerImplementationDisabled","messagingContainerId","buttonStyle","label","BraintreeVisaCheckoutButtonStrategy","paymentSuccess","toVisaCheckoutAddress","alignItems","getVenmoButtonStyle","c","WHITE","backgroundPosition","backgroundSize","backgroundImage","BLUE","backgroundRepeat","cursor","minHeight","minWidth","BraintreeVenmoButtonStrategy","cartButtonStyles","renderVenmoButton","isUnsupportedBrowserError","handleInitializationVenmoError","cartRequestBody","removeVenmoContainer","buttonContainer","venmoButton","setAttribute","buyBowCart","handlePostForm"],"sourceRoot":""}