{"version":3,"file":"integrations/braintree.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-us-bank-account-instrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-ach/braintree-ach-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-ach/create-braintree-ach-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/create-braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/paypal.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-credit-card-instrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-messages.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/overlay/overlay.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/overlay/overlay-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-paypal-provider-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-local-payment-methods/braintree-local-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-local-payment-methods/create-braintree-local-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/get-fastlane-styles.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-accelerated-checkout-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/storage/src/cookie-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/create-braintree-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/braintree-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/create-braintree-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-credit-card/braintree-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-payment-request-3ds-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-form-fields-map.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-hosted-form/braintree-hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-supported-card-brand.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-credit-card/create-braintree-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/checkout-buttons/default-checkout-button-height.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/create-braintree-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/isUnsupportedBrowserError.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/create-braintree-venmo-button-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    preventCursorJumps?: boolean;\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","export const BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION = '3.128.0';\nexport const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n    [BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh',\n        [BraintreeModuleName.Paypal]:\n            'sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv',\n        [BraintreeModuleName.Venmo]:\n            'sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr',\n    },\n};\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5809.braintree_hosted_fields_fix_version')) {\n            return BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import {\n    PaymentInstrumentPayload,\n    WithBankAccountInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isUsBankAccountInstrumentLike(\n    instrument?: PaymentInstrumentPayload,\n): instrument is WithBankAccountInstrument {\n    if (!instrument) {\n        return false;\n    }\n\n    return (\n        'accountNumber' in instrument &&\n        'routingNumber' in instrument &&\n        'ownershipType' in instrument &&\n        'accountType' in instrument\n    );\n}\n","import {\n    BraintreeInitializationData,\n    BraintreeSdk,\n    BraintreeUsBankAccount,\n    BraintreeUsBankAccountDetails,\n    isBraintreeError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    WithBankAccountInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isUsBankAccountInstrumentLike from '../is-us-bank-account-instrument-like';\n\nimport { WithBraintreeAchPaymentInitializeOptions } from './braintree-ach-initialize-options';\n\nexport default class BraintreeAchPaymentStrategy implements PaymentStrategy {\n    private usBankAccount?: BraintreeUsBankAccount;\n    private getMandateText?: () => string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeAchPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, braintreeach } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.getMandateText = braintreeach?.getMandateText;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            this.usBankAccount = await this.braintreeSdk.getUsBankAccount();\n        } catch (error) {\n            this.handleBraintreeError(error);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const isSubmittingWithVaultingInstrument = isVaultedInstrument(payment.paymentData || {});\n\n        const nonce = isSubmittingWithVaultingInstrument\n            ? await this.tokenizePaymentForVaultedInstrument(payment)\n            : await this.tokenizePayment(payment);\n\n        const submitPaymentPayload = isSubmittingWithVaultingInstrument\n            ? await this.preparePaymentDataForVaultedInstrument(nonce, payment)\n            : await this.preparePaymentData(nonce, payment);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private async tokenizePayment({ paymentData }: OrderPaymentRequestBody): Promise<string> {\n        const usBankAccount = this.getUsBankAccountOrThrow();\n\n        if (!isUsBankAccountInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const mandateText = isVaultedInstrument(paymentData)\n            ? 'The data are used for stored instrument verification'\n            : typeof this.getMandateText === 'function' && this.getMandateText();\n\n        if (!mandateText) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because getMandateText is not provided or returned undefined value.',\n            );\n        }\n\n        try {\n            const { nonce } = await usBankAccount.tokenize({\n                bankDetails: this.getBankDetails(paymentData),\n                mandateText,\n            });\n\n            return nonce;\n        } catch (error) {\n            this.handleBraintreeError(error);\n        }\n    }\n\n    private async tokenizePaymentForVaultedInstrument(\n        payment: OrderPaymentRequestBody,\n    ): Promise<string | null> {\n        const { methodId, paymentData = {} } = payment;\n\n        const state = this.paymentIntegrationService.getState();\n        const { config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!config.isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n            );\n        }\n\n        const shouldVerifyVaultingInstrument = isUsBankAccountInstrumentLike(paymentData);\n\n        return shouldVerifyVaultingInstrument ? this.tokenizePayment(payment) : null;\n    }\n\n    private async preparePaymentData(\n        nonce: string | null,\n        payment: OrderPaymentRequestBody,\n    ): Promise<Payment> {\n        const { methodId, paymentData = {} } = payment;\n\n        if (!isUsBankAccountInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument, routingNumber, accountNumber } =\n            paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId: deviceData,\n                shouldSetAsDefaultInstrument,\n                shouldSaveInstrument,\n                formattedPayload: {\n                    tokenized_bank_account: {\n                        issuer: routingNumber,\n                        masked_account_number: accountNumber.substr(-4),\n                        token: nonce,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentDataForVaultedInstrument(\n        nonce: string | null,\n        payment: OrderPaymentRequestBody,\n    ): Promise<Payment> {\n        const { methodId, paymentData = {} } = payment;\n\n        if (!isVaultedInstrument(paymentData) || !isHostedInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId: deviceData,\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                ...(nonce && { nonce }),\n            },\n        };\n    }\n\n    private getBankDetails(paymentData: WithBankAccountInstrument): BraintreeUsBankAccountDetails {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const ownershipType = paymentData.ownershipType.toLowerCase();\n        const accountType = paymentData.accountType.toLowerCase();\n\n        return {\n            accountNumber: paymentData.accountNumber,\n            routingNumber: paymentData.routingNumber,\n            ownershipType,\n            ...(ownershipType === 'personal'\n                ? {\n                      firstName: paymentData.firstName,\n                      lastName: paymentData.lastName,\n                  }\n                : {\n                      businessName: paymentData.businessName,\n                  }),\n            accountType,\n            billingAddress: {\n                streetAddress: billingAddress.address1,\n                extendedAddress: billingAddress.address2,\n                locality: billingAddress.city,\n                region: billingAddress.stateOrProvinceCode,\n                postalCode: billingAddress.postalCode,\n            },\n        };\n    }\n\n    private getUsBankAccountOrThrow(): BraintreeUsBankAccount {\n        if (!this.usBankAccount) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.usBankAccount;\n    }\n\n    private handleBraintreeError(error: unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n}\n","import { createBraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeAchPaymentStrategy from './braintree-ach-payment-strategy';\n\nconst createBraintreeAchPaymentStrategy: PaymentStrategyFactory<BraintreeAchPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BraintreeAchPaymentStrategy(\n        paymentIntegrationService,\n        createBraintreeSdk(paymentIntegrationService),\n    );\n};\n\nexport default toResolvableModule(createBraintreeAchPaymentStrategy, [{ id: 'braintreeach' }]);\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSdk from './braintree-sdk';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\n\nconst createBraintreeSdk = (paymentIntegrationService: PaymentIntegrationService) => {\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        window,\n        braintreeSDKVersionManager,\n    );\n\n    return new BraintreeSdk(braintreeScriptLoader);\n};\n\nexport default createBraintreeSdk;\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","// the PayPal side of things uses uppercase keys instead of camel case\n\n/**\n *\n * PayPal constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\n/**\n *\n * PayPal interfaces\n *\n */\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    buyerCountry?: string;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport enum MessagingPlacements {\n    CART = 'cart',\n    HOME = 'homepage',\n    PAYMENT = 'payment',\n    PRODUCT = 'product',\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onClick?(): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number | string;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n    close(): void;\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<unknown>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n","import { supportsPopups } from '@braintree/browser-detection';\n\nimport {\n    Address,\n    CancellablePromise,\n    CreditCardInstrument,\n    LegacyAddress,\n    NonceInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodCancelledError,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeDataCollectors,\n    BraintreeEnv,\n    BraintreeError,\n    BraintreeFastlane,\n    BraintreeFastlaneStylesOption,\n    BraintreeHostWindow,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeRequestData,\n    BraintreeShippingAddressOverride,\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureOptions,\n    BraintreeTokenizationDetails,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig,\n    BraintreeVerifyPayload,\n    PAYPAL_COMPONENTS,\n    TokenizationPayload,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { isEmpty } from 'lodash';\nimport isCreditCardInstrumentLike from './utils/is-credit-card-instrument-like';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\n// Info: this class is deprecated and will be removed in a nearest future. Please, do not add anything here.\nexport default class BraintreeIntegrationService {\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private dataCollectors: BraintreeDataCollectors = {};\n    private paypalCheckout?: BraintreePaypalCheckout;\n    private braintreePaypal?: Promise<BraintreePaypal>;\n    private threeDSecureOptions?: BraintreeThreeDSecureOptions;\n    private threeDS?: Promise<BraintreeThreeDSecure>;\n    private venmoCheckout?: BraintreeVenmoCheckout;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private overlay?: Overlay,\n    ) {}\n\n    initialize(clientToken: string, threeDSecureOptions?: BraintreeThreeDSecureOptions) {\n        this.clientToken = clientToken;\n        this.threeDSecureOptions = threeDSecureOptions;\n    }\n\n    async getBraintreeFastlane(\n        cardId?: string,\n        isTestModeEnabled?: boolean,\n        styles?: BraintreeFastlaneStylesOption,\n    ): Promise<BraintreeFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('axoEnv', 'sandbox');\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n        }\n\n        if (!this.braintreeHostWindow.braintreeFastlane) {\n            const clientToken = this.getClientTokenOrThrow();\n            const client = await this.getClient();\n            const deviceData = await this.getSessionId(cardId);\n\n            const braintreeFastlaneCreator = await this.braintreeScriptLoader.loadFastlane();\n\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.braintreeHostWindow.braintreeFastlane = await braintreeFastlaneCreator.create({\n                authorization: clientToken,\n                client,\n                deviceData,\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.braintreeHostWindow.braintreeFastlane;\n    }\n\n    // Info: This method is deprecated. Use getClient method from BraintreeSdk class instead\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this.braintreePaypal) {\n            this.braintreePaypal = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.braintreePaypal;\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        const newWindowFlow = supportsPopups();\n\n        return this.getPaypal()\n            .then((paypal) => {\n                if (newWindowFlow) {\n                    this.overlay?.show({\n                        onClick: () => paypal.focusWindow(),\n                    });\n                }\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then((response) => {\n                this.overlay?.remove();\n\n                return response;\n            })\n            .catch((error) => {\n                this.overlay?.remove();\n\n                throw error;\n            });\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this.braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError | undefined,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n                components: PAYPAL_COMPONENTS.toString(),\n                intent: config.intent,\n                commit: config.commit ?? true,\n            };\n\n            if (!this.braintreeHostWindow.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this.paypalCheckout = await paypalCheckout.create(\n            paypalCheckoutConfig,\n            paypalCheckoutCallback,\n        );\n\n        return this.paypalCheckout;\n    }\n\n    async getDataCollector(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const cacheKey: keyof BraintreeDataCollectors = options?.paypal ? 'paypal' : 'default';\n\n        let cached = this.dataCollectors[cacheKey];\n\n        if (!cached) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                cached = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    cached = {\n                        deviceData: undefined,\n                        teardown: () => Promise.resolve(),\n                    };\n                } else {\n                    throw error;\n                }\n            }\n\n            this.dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getBraintreeEnv(isTestMode = false): BraintreeEnv {\n        return isTestMode ? BraintreeEnv.Sandbox : BraintreeEnv.Production;\n    }\n\n    mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n        return {\n            recipientName: `${address.firstName} ${address.lastName}`,\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n        };\n    }\n\n    mapToLegacyShippingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { email, phone, shippingAddress } = details;\n        const recipientName = shippingAddress?.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email,\n            first_name: firstName || '',\n            last_name: lastName || '',\n            phone_number: phone,\n            address_line_1: shippingAddress?.line1,\n            address_line_2: shippingAddress?.line2,\n            city: shippingAddress?.city,\n            state: shippingAddress?.state,\n            country_code: shippingAddress?.countryCode,\n            postal_code: shippingAddress?.postalCode,\n        };\n    }\n\n    mapToLegacyBillingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n        const address = billingAddress || shippingAddress;\n\n        return {\n            email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: phone,\n            address_line_1: address?.line1,\n            address_line_2: address?.line2,\n            city: address?.city,\n            state: address?.state,\n            country_code: address?.countryCode,\n            postal_code: address?.postalCode,\n        };\n    }\n\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    async getSessionId(cartId?: string): Promise<string | undefined> {\n        const { deviceData } = await this.getDataCollector({\n            riskCorrelationId: cartId,\n        });\n\n        return deviceData;\n    }\n\n    async teardown(): Promise<void> {\n        await this.teardownModule(this.dataCollectors.default);\n        await this.teardownModule(this.dataCollectors.paypal);\n        this.dataCollectors = {};\n\n        await this.teardownModule(this.paypalCheckout);\n        this.paypalCheckout = undefined;\n\n        // await this.teardownModule(this._venmoCheckout);\n        // this._venmoCheckout = undefined;\n\n        // await this.teardownModule(this._visaCheckout);\n        // this._visaCheckout = undefined;\n    }\n\n    async get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            this.threeDS = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]).then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }));\n        }\n\n        return this.threeDS;\n    }\n\n    async getVenmoCheckout(\n        venmoConfig?: BraintreeVenmoCreatorConfig,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this.venmoCheckout) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n                ...(venmoConfig || {}),\n            };\n\n            this.venmoCheckout = await new Promise<BraintreeVenmoCheckout>((resolve, reject) => {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                venmoCheckout.create(\n                    venmoCheckoutConfig,\n                    (error: BraintreeError, braintreeVenmoCheckout: BraintreeVenmoCheckout) => {\n                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                        if (error) {\n                            return reject(error);\n                        }\n\n                        if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                            return reject(new UnsupportedBrowserError());\n                        }\n\n                        resolve(braintreeVenmoCheckout);\n                    },\n                );\n            });\n        }\n\n        return this.venmoCheckout;\n    }\n\n    /*\n       Braintree Credit Card and Braintree Hosted Form\n   */\n    async verifyCard(\n        payment: Payment,\n        billingAddress: Address,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this.tokenizeCard(payment, billingAddress);\n\n        return this.challenge3DSVerification(tokenizationPayload, amount);\n    }\n\n    async tokenizeCard(payment: Payment, billingAddress: Address): Promise<TokenizationPayload> {\n        const { paymentData } = payment;\n\n        if (!isCreditCardInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const errors = this.getErrorsRequiredFields(paymentData);\n\n        if (!isEmpty(errors)) {\n            throw new PaymentInvalidFormError(errors);\n        }\n\n        const requestData = this.mapToCreditCard(paymentData, billingAddress);\n        const client = await this.getClient();\n        const { creditCards } = await client.request(requestData);\n\n        return {\n            nonce: creditCards[0].nonce,\n            bin: creditCards[0].details.bin,\n        };\n    }\n\n    async challenge3DSVerification(\n        tokenizationPayload: TokenizationPayload,\n        amount: number,\n    ): Promise<BraintreeVerifyPayload> {\n        const threeDSecure = await this.get3DS();\n\n        return this.present3DSChallenge(threeDSecure, amount, tokenizationPayload);\n    }\n\n    private teardownModule(module?: BraintreeModule) {\n        return module ? module.teardown() : Promise.resolve();\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private getErrorsRequiredFields(\n        paymentData: CreditCardInstrument,\n    ): PaymentInvalidFormErrorDetails {\n        const { ccNumber, ccExpiry } = paymentData;\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        if (!ccNumber) {\n            errors.ccNumber = [\n                {\n                    message: 'Credit card number is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!ccExpiry) {\n            errors.ccExpiry = [\n                {\n                    message: 'Expiration date is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        return errors;\n    }\n\n    private mapToCreditCard(\n        creditCard: CreditCardInstrument,\n        billingAddress?: Address,\n    ): BraintreeRequestData {\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: billingAddress && {\n                        countryCodeAlpha2: billingAddress.countryCode,\n                        locality: billingAddress.city,\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress: billingAddress.address2\n                            ? `${billingAddress.address1} ${billingAddress.address2}`\n                            : billingAddress.address1,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n\n    private present3DSChallenge(\n        threeDSecure: BraintreeThreeDSecure,\n        amount: number,\n        tokenizationPayload: TokenizationPayload,\n    ): Promise<BraintreeVerifyPayload> {\n        const { nonce, bin } = tokenizationPayload;\n\n        if (!this.threeDSecureOptions || !nonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            addFrame,\n            removeFrame,\n            challengeRequested = true,\n            additionalInformation,\n        } = this.threeDSecureOptions;\n        const cancelVerifyCard = async () => {\n            const response = await threeDSecure.cancelVerifyCard();\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            verification.cancel(new PaymentMethodCancelledError());\n\n            return response;\n        };\n\n        const roundedAmount = amount.toFixed(2);\n\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                addFrame: (error, iframe) => {\n                    if (addFrame) {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    }\n                },\n                amount: Number(roundedAmount),\n                bin,\n                challengeRequested,\n                nonce,\n                removeFrame,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n                collectDeviceData: true,\n                additionalInformation,\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import { CreditCardInstrument } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isCreditCardInstrumentLike(\n    instrument: unknown,\n): instrument is CreditCardInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const creditCardInstrument = instrument as Partial<Record<string, unknown>>;\n\n    return (\n        typeof creditCardInstrument.ccExpiry === 'object' &&\n        creditCardInstrument.ccExpiry !== null &&\n        typeof creditCardInstrument.ccNumber === 'string' &&\n        typeof creditCardInstrument.ccName === 'string'\n    );\n}\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    PayPalBNPLConfigurationItem,\n} from './braintree';\nimport { MessagesStyleOptions, MessagingPlacements } from './paypal';\n\nexport default class BraintreeMessages {\n    private braintreeHostWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    render(methodId: string, containerId: string, placement: MessagingPlacements): void {\n        const messagingContainer = containerId && document.getElementById(containerId);\n\n        if (this.braintreeHostWindow.paypal && messagingContainer) {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const billingAddress = state.getBillingAddressOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n            if (!paymentMethod.initializationData) {\n                return;\n            }\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData;\n\n            const bannedId = placement === MessagingPlacements.PAYMENT ? 'checkout' : placement;\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === bannedId);\n\n            if (!bannerConfiguration || !bannerConfiguration.status) {\n                return;\n            }\n\n            // TODO: remove this code when this data attributes will be removed from banner div container in content service\n            if (placement === MessagingPlacements.CART) {\n                messagingContainer.removeAttribute('data-pp-style-logo-type');\n                messagingContainer.removeAttribute('data-pp-style-logo-position');\n                messagingContainer.removeAttribute('data-pp-style-text-color');\n                messagingContainer.removeAttribute('data-pp-style-text-size');\n            }\n\n            this.braintreeHostWindow.paypal\n                .Messages({\n                    amount: cart.cartAmount,\n                    buyerCountry: billingAddress.countryCode,\n                    placement,\n                    style: this.getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n                })\n                .render(`#${containerId}`);\n        }\n    }\n\n    private getPaypalMessagesStylesFromBNPLConfig({\n        styles,\n    }: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n        const messagesStyles: MessagesStyleOptions = {};\n\n        if (styles.color) {\n            messagesStyles.color = styles.color;\n        }\n\n        if (styles.layout) {\n            messagesStyles.layout = styles.layout;\n        }\n\n        if (styles['logo-type'] || styles['logo-position']) {\n            messagesStyles.logo = {};\n\n            if (styles['logo-type']) {\n                messagesStyles.logo.type = styles['logo-type'];\n            }\n\n            if (styles['logo-position']) {\n                messagesStyles.logo.position = styles['logo-position'];\n            }\n        }\n\n        if (styles.ratio) {\n            messagesStyles.ratio = styles.ratio;\n        }\n\n        if (styles['text-color'] || styles['text-size']) {\n            messagesStyles.text = {};\n\n            if (styles['text-color']) {\n                messagesStyles.text.color = styles['text-color'];\n            }\n\n            if (styles['text-size']) {\n                messagesStyles.text.size = +styles['text-size'];\n            }\n        }\n\n        return messagesStyles;\n    }\n}\n","import getOverlayStyle from './overlay-style';\n\nexport interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    hasCloseButton?: boolean;\n    innerHtml?: HTMLElement | DocumentFragment;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n    onClickClose?(event: MouseEvent): void;\n}\n\nexport interface Elements {\n    element: HTMLElement;\n    mainElement: HTMLElement;\n    closeElement?: HTMLElement;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _mainElement: HTMLElement;\n    private _closeElement?: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        const { element, closeElement, mainElement } = this._createElements(options);\n\n        this._element = element;\n        this._closeElement = closeElement;\n        this._mainElement = mainElement;\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._mainElement.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._mainElement);\n\n        // Fade In\n        setTimeout(() => (this._element.style.opacity = '1'));\n    }\n\n    remove(): void {\n        if (!this._mainElement.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => (this._element.style.opacity = '0'));\n    }\n\n    private _createElements(options?: OverlayOptions): Elements {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = 'checkoutOverlay',\n            transitionDuration = 400,\n            hasCloseButton = false,\n            innerHtml = null,\n        } = options || {};\n        let mainElement = element;\n        let closeElement: HTMLElement | undefined;\n        let classLayout: string | undefined;\n        let classClose: string | undefined;\n        let classOverlayText: string | undefined;\n\n        if (id) {\n            element.id = id;\n        }\n\n        if (innerHtml) {\n            const overlayText = document.createElement('div');\n\n            classOverlayText = `${id}--overlayText`;\n            overlayText.className = classOverlayText;\n            overlayText.appendChild(innerHtml);\n\n            element.appendChild(overlayText);\n        }\n\n        if (hasCloseButton) {\n            classClose = `${id}--close`;\n            closeElement = document.createElement('div');\n            closeElement.className = classClose;\n\n            classLayout = `${id}--layout`;\n            mainElement = document.createElement('div');\n            mainElement.className = classLayout;\n\n            mainElement.appendChild(element);\n            mainElement.appendChild(closeElement);\n        }\n\n        mainElement.appendChild(\n            getOverlayStyle({\n                id,\n                background,\n                transitionDuration,\n                classLayout,\n                classOverlayText,\n                classClose,\n            }),\n        );\n\n        return { element, closeElement, mainElement };\n    }\n\n    private _addEventListener(element?: HTMLElement, onClick?: (event: MouseEvent) => void): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.addEventListener('click', onClick);\n    }\n\n    private _removeEventListener(\n        element?: HTMLElement,\n        onClick?: (event: MouseEvent) => void,\n    ): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.removeEventListener('click', onClick);\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options) {\n            const { onClick, onClickClose } = options;\n\n            this._addEventListener(this._element, onClick);\n            this._addEventListener(this._closeElement, onClickClose);\n\n            this._unregisterClick = () => {\n                this._removeEventListener(this._element, onClick);\n                this._removeEventListener(this._closeElement, onClickClose);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handleTransition: (event: Event) => void = (event) => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._mainElement.parentElement) {\n                this._mainElement.remove();\n            }\n\n            this._element.removeEventListener('transitionend', handleTransition);\n        };\n\n        this._element.addEventListener('transitionend', handleTransition);\n    }\n}\n","interface OverlayStyleOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    classLayout?: string;\n    classOverlayText?: string;\n    classClose?: string;\n}\n\nexport default function getOverlayStyle(options: OverlayStyleOptions): HTMLElement {\n    const { id, background, transitionDuration, classLayout, classOverlayText, classClose } =\n        options;\n    const styles = document.createElement('style');\n    const addClassLayout = classLayout ? `, .${classLayout}` : '';\n\n    styles.id = `${id}--styles`;\n    styles.type = 'text/css';\n    styles.innerText = `\n        #${id}${addClassLayout} {\n            display: block;\n            height: 100%;\n            width: 100%;\n            left: 0;\n            top: 0;\n            position: fixed;\n            z-index: 2147483647;\n        }\n        #${id} {\n            transition: opacity ${transitionDuration}ms ease-out;\n            background: ${background};\n            opacity: 0;\n        }\n    `;\n\n    if (classOverlayText) {\n        styles.innerText += `\n             #${id} {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n             }\n             #${id} .${classOverlayText} {\n                color: white;\n                max-width: 330px;\n                font-size: 1.2em;\n                text-align: center;\n             }\n        `;\n    }\n\n    if (classClose) {\n        styles.innerText += `\n            #${id} {\n                opacity: 1;\n            }\n            .${classLayout} .${classClose} {\n                position: fixed;\n                right: 16px;\n                top: 16px;\n                width: 16px;\n                height: 16px;\n                opacity: 0.6;\n                cursor: pointer;\n                z-index: 3147483647;\n            }\n            .${classLayout} .${classClose}::after, .${classLayout} .${classClose}::before {\n                position: absolute;\n                left: 8px;\n                content: '';\n                height: 16px;\n                width: 2px;\n                background-color: #fff;\n            }\n            .${classLayout} .${classClose}::after {\n                transform: rotate(-45deg);\n            }\n            .${classLayout} .${classClose}::before {\n                transform: rotate(45deg);\n            }\n        `;\n    }\n\n    return styles;\n}\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import { BraintreeError } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function isBraintreeError(\n    error: BraintreeError | Error | unknown,\n): error is BraintreeError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'name' in error &&\n        (error as BraintreeError).name === 'BraintreeError'\n    );\n}\n","import { BraintreeShippingAddressOverride } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    MessagingPlacements,\n    PaypalAuthorizeData,\n    PaypalButtonRender,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    FormattedPayload,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isHostedVaultedInstrument,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    PaypalInstrument,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport isBraintreeError from '../is-braintree-error';\nimport isBraintreePaypalProviderError from '../is-braintree-paypal-provider-error';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport {\n    BraintreePaypalPaymentInitializeOptions,\n    WithBraintreePaypalPaymentInitializeOptions,\n} from './braintree-paypal-payment-initialize-options';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private paymentMethod?: PaymentMethod<BraintreeInitializationData>;\n    private braintreeHostWindow: BraintreeHostWindow = window;\n    private braintree?: BraintreePaypalPaymentInitializeOptions;\n    private braintreeTokenizePayload?: BraintreeTokenizePayload;\n    private paypalButtonRender?: PaypalButtonRender;\n    private loadingIndicatorContainer?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeMessages: BraintreeMessages,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreePaypalPaymentInitializeOptions,\n    ) {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this.braintree = braintreeOptions;\n\n        if (!this.paymentMethod || !this.paymentMethod.nonce) {\n            this.paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        }\n\n        if (this.paymentMethod.clientToken && braintreeOptions?.bannerContainerId) {\n            await this.loadPaypal();\n\n            return this.loadPaypalCheckoutInstance();\n        }\n\n        if (this.paymentMethod.clientToken) {\n            return this.loadPaypal();\n        }\n\n        const state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (braintreeOptions?.bannerContainerId) {\n            return this.loadPaypalCheckoutInstance();\n        }\n\n        if (!this.paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this.loadPaypal();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        const { onError } = this.braintree || {};\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const shouldHandleInstrumentDeclinedError =\n            features && features['PAYPAL-3521.handling_declined_error_braintree'];\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            const paymentData = await this.preparePaymentData(payment, order.useStoreCredit);\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentData);\n        } catch (error) {\n            if (this.isProviderError(error) && shouldHandleInstrumentDeclinedError) {\n                await this.loadPaypal();\n\n                this.paypalButtonRender?.close();\n\n                await this.loadPaypalCheckoutInstance();\n\n                await new Promise((_resolve, reject) => {\n                    if (onError && typeof onError === 'function') {\n                        onError(new Error('INSTRUMENT_DECLINED'));\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.braintreeTokenizePayload = undefined;\n\n        this.paypalButtonRender?.close();\n\n        return this.braintreeIntegrationService.teardown();\n    }\n\n    private async preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        useStoreCredit?: boolean,\n    ): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n\n        const grandTotal = state.getOutstandingBalance(useStoreCredit);\n        const config = state.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this.paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            currency,\n            storeProfile: { storeLanguage },\n        } = config;\n        const {\n            nonce,\n            config: { isVaultingEnabled },\n        } = this.paymentMethod;\n        const { methodId, paymentData = {} } = payment;\n\n        const token = this.braintreeTokenizePayload?.nonce || nonce;\n\n        if (token) {\n            const state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            this.paymentMethod = state.getPaymentMethod(methodId);\n\n            return {\n                ...payment,\n                paymentData: this.formattedPayload(token),\n            };\n        }\n\n        if (isVaultedInstrument(paymentData) || isHostedVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError(\n                    'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n                );\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (!isHostedInstrumentLike(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = paymentData;\n\n        if (shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but shouldSaveInstrument is set to true',\n            );\n        }\n\n        const shippingAddress = state.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress\n            ? mapToBraintreeShippingAddressOverride(shippingAddress)\n            : undefined;\n\n        return Promise.all([\n            this.braintreeIntegrationService.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this.paymentMethod.id === 'braintreepaypalcredit',\n                shippingAddressOverride,\n                shouldSaveInstrument: shouldSaveInstrument || false,\n                shippingAddressEditable: false,\n            }),\n            this.braintreeIntegrationService.getSessionId(),\n        ]).then(([{ nonce, details } = {} as any, sessionId]) => ({\n            ...payment,\n            paymentData: this.formattedPayload(\n                nonce,\n                details && details.email,\n                sessionId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            ),\n        }));\n    }\n\n    private formattedPayload(\n        token: string,\n        email?: string,\n        sessionId?: string,\n        vaultPaymentInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n\n    private async loadPaypalCheckoutInstance() {\n        const { clientToken, initializationData, id: paymentMethodId } = this.paymentMethod || {};\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n\n            const currencyCode = this.paymentIntegrationService.getState().getCartOrThrow()\n                .currency.code;\n\n            const paypalCheckoutConfig: Partial<BraintreePaypalSdkCreatorConfig> = {\n                currency: currencyCode,\n                intent: initializationData?.intent,\n                isCreditEnabled: initializationData?.isCreditEnabled,\n            };\n\n            const isBraintreePaypalCredit = paymentMethodId === 'braintreepaypalcredit';\n            const shouldShowPayPalCreditBanner =\n                isBraintreePaypalCredit || !initializationData?.isCreditEnabled;\n\n            await this.braintreeIntegrationService.getPaypalCheckout(\n                paypalCheckoutConfig,\n                (braintreePaypalCheckout) => {\n                    if (\n                        shouldShowPayPalCreditBanner &&\n                        paymentMethodId &&\n                        this.braintree?.bannerContainerId\n                    ) {\n                        this.renderPayPalMessages(\n                            paymentMethodId,\n                            this.braintree.bannerContainerId,\n                        );\n                    }\n\n                    this.renderPayPalButton(braintreePaypalCheckout);\n                },\n                this.handleError,\n            );\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private renderPayPalMessages(methodId: string, containerId: string) {\n        this.braintreeMessages.render(methodId, containerId, MessagingPlacements.PAYMENT);\n    }\n\n    private renderPayPalButton(braintreePaypalCheckout: BraintreePaypalCheckout) {\n        const { onPaymentError, submitForm, onRenderButton, containerId, onError } =\n            this.braintree || {};\n\n        if (!containerId) {\n            return;\n        }\n\n        if (!this.paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this.loadingIndicatorContainer = containerId.split('#')[1];\n\n        const {\n            id,\n            config: { testMode },\n        } = this.paymentMethod;\n\n        const { paypal } = this.braintreeHostWindow;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            this.paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                onClick: () => {\n                    this.toggleLoadingIndicator(true);\n                },\n                createOrder: () => this.setupPayment(braintreePaypalCheckout, id, onPaymentError),\n                onApprove: async (authorizeData: PaypalAuthorizeData) => {\n                    this.braintreeTokenizePayload = await this.tokenizePaymentOrThrow(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                    );\n\n                    if (submitForm && typeof submitForm === 'function') {\n                        submitForm();\n                    }\n                },\n                onCancel: () => {\n                    this.toggleLoadingIndicator(false);\n                },\n                onError: (error: Error) => {\n                    this.toggleLoadingIndicator(false);\n\n                    onError?.(error);\n                },\n            });\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            if (this.paypalButtonRender.isEligible()) {\n                this.paypalButtonRender.render(`${containerId}`);\n            }\n        } else {\n            this.removeElement(containerId.split('#')[1]);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        method: string,\n        onPaymentError: BraintreePaypalPaymentInitializeOptions['onPaymentError'],\n    ): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n\n        try {\n            const customer = state.getCustomer();\n\n            const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(method);\n\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode = state.getStoreConfigOrThrow().currency.code;\n\n            const shippingAddress = state.getShippingAddress();\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData.intent,\n            });\n        } catch (error) {\n            if (onPaymentError && (isBraintreeError(error) || error instanceof StandardError)) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePaymentOrThrow(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            return await braintreePaypalCheckout.tokenizePayment(authorizeData);\n        } catch (error) {\n            if (onError && (isBraintreeError(error) || error instanceof StandardError)) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async loadPaypal() {\n        const { clientToken, initializationData } = this.paymentMethod || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n\n            await this.braintreeIntegrationService.getPaypal();\n        } catch (error) {\n            this.handleError(error);\n        }\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError | Error | unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private isProviderError(error: unknown): boolean {\n        if (isBraintreePaypalProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === '2046';\n        }\n\n        return false;\n    }\n\n    private removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isBraintreePaypalProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator, Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../braintree-paypal-constants';\n\nimport BraintreePaypalPaymentStrategy from './braintree-paypal-payment-strategy';\n\nconst createBraintreePaypalPaymentStrategy: PaymentStrategyFactory<\n    BraintreePaypalPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const overlay = new Overlay();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n        overlay,\n    );\n    const braintreeMessages = new BraintreeMessages(paymentIntegrationService);\n\n    return new BraintreePaypalPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        braintreeMessages,\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalPaymentStrategy, [\n    { id: 'braintreepaypal' },\n    { id: 'braintreepaypalcredit' },\n]);\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BraintreeOrderStatusData } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async getOrderStatus(\n        methodId = 'braintreelocalmethods',\n        options?: RequestOptions,\n    ): Promise<BraintreeOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<BraintreeOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    BraintreeInitializationData,\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentConfig,\n    BraintreeLocalPaymentMethodRedirectAction,\n    BraintreeLocalPaymentsPayload,\n    BraintreeLPMPaymentStartData,\n    BraintreeLPMStartPaymentError,\n    BraintreeOrderSavedResponse,\n    BraintreeOrderStatus,\n    BraintreeRedirectError,\n    BraintreeSdk,\n    NonInstantLocalPaymentMethods,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentMeta,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestOptions,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport BraintreeRequestSender from '../braintree-request-sender';\n\nimport {\n    BraintreeLocalMethodsPaymentInitializeOptions,\n    WithBraintreeLocalMethodsPaymentInitializeOptions,\n} from './braintree-local-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BraintreeLocalMethodsPaymentStrategy implements PaymentStrategy {\n    private braintreelocalmethods?: BraintreeLocalMethodsPaymentInitializeOptions;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private gatewayId?: string;\n    private isLPMsUpdateExperimentEnabled = false;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeSdk: BraintreeSdk,\n        private braintreeRequestSender: BraintreeRequestSender,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeLocalMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, braintreelocalmethods } = options;\n\n        this.gatewayId = gatewayId;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreelocalmethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreelocalmethods\" argument is not provided.`,\n            );\n        }\n\n        this.braintreelocalmethods = braintreelocalmethods;\n        this.loadingIndicatorContainer = braintreelocalmethods.container.split('#')[1];\n\n        await this.paymentIntegrationService.loadPaymentMethod(gatewayId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(gatewayId);\n        const { clientToken, config, initializationData } = paymentMethod;\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5258.braintree_local_methods_polling',\n        );\n\n        this.isLPMsUpdateExperimentEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-4853.add_new_payment_flow_for_braintree_lpms',\n        );\n\n        if (!clientToken || !initializationData || !config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeSdk.initialize(clientToken);\n\n            if (!this.isNonInstantPaymentMethod(methodId)) {\n                this.braintreeLocalPayment = await this.braintreeSdk.getBraintreeLocalPayment(\n                    config.merchantId,\n                );\n            }\n        } catch (error: unknown) {\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.toggleLoadingIndicator(false);\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        this.toggleLoadingIndicator(true);\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            await this.executeWithNotInstantLPM(methodId);\n        } else {\n            await this.executeWithInstantLPM(methodId, order, options);\n        }\n    }\n\n    private async executeWithNotInstantLPM(methodId: string): Promise<void> {\n        try {\n            const basicPaymentData = await this.getLPMsBasicPaymentData();\n\n            await this.paymentIntegrationService.submitOrder();\n            await this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: {\n                    ...basicPaymentData,\n                    formattedPayload: {\n                        method: methodId,\n                    },\n                },\n            });\n        } catch (error: unknown) {\n            if (this.isBraintreeRedirectError(error)) {\n                const redirectUrl = error.body.additional_action_required.data.redirect_url;\n\n                return new Promise((_, reject) => {\n                    window.location.replace(redirectUrl);\n\n                    this.toggleLoadingIndicator(false);\n\n                    reject();\n                });\n            }\n\n            this.handleError(error);\n\n            return Promise.reject(error);\n        }\n    }\n\n    private async executeWithInstantLPM(\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        if (!this.braintreeLocalPayment) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await new Promise((resolve, reject): void => {\n            this.braintreeLocalPayment?.startPayment(\n                this.getInstantLPMConfig(methodId, order, options),\n                this.getInstantLPMCallback(resolve, reject, methodId, order, options),\n            );\n        });\n    }\n\n    private async getLPMsBasicPaymentData(): Promise<PaymentInstrumentMeta> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n\n        return { deviceSessionId: deviceData };\n    }\n\n    private getInstantLPMConfig(\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: RequestOptions,\n    ): BraintreeLocalPaymentConfig {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const billing = state.getBillingAddressOrThrow();\n        const { firstName, lastName, countryCode } = billing;\n        const { currency, email, lineItems } = cart;\n        const isShippingRequired = lineItems.physicalItems.length > 0;\n        const grandTotal = state.getCheckoutOrThrow().outstandingBalance;\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        return {\n            paymentType: methodId,\n            amount: grandTotal,\n            fallback: {\n                url: checkoutUrl,\n                buttonText: 'Complete Payment',\n            },\n            currencyCode: currency.code,\n            shippingAddressRequired: isShippingRequired,\n            email,\n            givenName: firstName,\n            surname: lastName,\n            address: {\n                countryCode,\n            },\n            onPaymentStart: async (data: BraintreeLPMPaymentStartData, start: () => void) => {\n                if (!this.isLPMsUpdateExperimentEnabled) {\n                    this.orderId = data.paymentId;\n\n                    start();\n\n                    return;\n                }\n\n                const basicPaymentData = await this.getLPMsBasicPaymentData();\n                const paymentData = {\n                    ...basicPaymentData,\n                    formattedPayload: {\n                        method: methodId,\n                        [`${methodId}_account`]: {\n                            order_id: data.paymentId,\n                        },\n                    },\n                };\n\n                try {\n                    // Submit order and payment should be performed to pass order_id to the backend\n                    await this.paymentIntegrationService.submitOrder(order, options);\n                    await this.paymentIntegrationService.submitPayment({\n                        methodId,\n                        paymentData,\n                    });\n                } catch (error: unknown) {\n                    if (\n                        this.isBraintreeOrderSavedResponse(error) &&\n                        error.body.additional_action_required.data.order_id_saved_successfully\n                    ) {\n                        // Start method call initiates the popup\n                        start();\n\n                        if (this.isPollingEnabled) {\n                            return new Promise((resolve, reject) => {\n                                void this.initializePollingMechanism(\n                                    methodId,\n                                    resolve,\n                                    reject,\n                                    this.gatewayId,\n                                );\n                            });\n                        }\n\n                        return;\n                    }\n\n                    throw error;\n                }\n            },\n        };\n    }\n\n    private getInstantLPMCallback(\n        resolve: (value: unknown) => void,\n        reject: (reason?: unknown) => void,\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: RequestOptions,\n    ) {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        return async (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payloadData: BraintreeLocalPaymentsPayload,\n        ) => {\n            if (startPaymentError) {\n                if (startPaymentError.code === 'LOCAL_PAYMENT_WINDOW_CLOSED') {\n                    this.toggleLoadingIndicator(false);\n                    this.resetPollingMechanism();\n\n                    return reject();\n                }\n\n                if (this.isPollingEnabled) {\n                    this.resetPollingMechanism();\n                }\n\n                this.toggleLoadingIndicator(false);\n\n                return reject(new PaymentMethodInvalidError());\n            }\n\n            const basicPaymentData = await this.getLPMsBasicPaymentData();\n            const paymentData = {\n                ...basicPaymentData,\n                formattedPayload: {\n                    method: methodId,\n                    [`${methodId}_account`]: {\n                        email: cart.email,\n                        token: payloadData.nonce,\n                        ...(!this.isLPMsUpdateExperimentEnabled ? { order_id: this.orderId } : {}),\n                    },\n                },\n            };\n\n            try {\n                if (!this.isLPMsUpdateExperimentEnabled) {\n                    await this.paymentIntegrationService.submitOrder(order, options);\n                }\n\n                await this.paymentIntegrationService.submitPayment({\n                    methodId,\n                    paymentData,\n                });\n\n                return resolve(undefined);\n            } catch (error: unknown) {\n                this.handleError(error);\n\n                return reject(error);\n            }\n        };\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.braintreelocalmethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantLocalPaymentMethods;\n    }\n\n    private isBraintreeRedirectError(error: unknown): error is BraintreeRedirectError {\n        if (typeof error !== 'object' || error === null) {\n            return false;\n        }\n\n        const { body }: Partial<BraintreeLocalPaymentMethodRedirectAction> = error;\n\n        if (!body) {\n            return false;\n        }\n\n        return !!body.additional_action_required?.data.redirect_url;\n    }\n\n    private isBraintreeOrderSavedResponse(\n        response: unknown,\n    ): response is BraintreeOrderSavedResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const { body }: Partial<BraintreeOrderSavedResponse> = response;\n\n        if (!body) {\n            return false;\n        }\n\n        return body.additional_action_required?.data.hasOwnProperty('order_id_saved_successfully');\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.braintreeRequestSender.getOrderStatus(gatewayId, {\n                params: {\n                    useMetadata: false,\n                },\n            });\n\n            const isOrderPending = orderStatus.status === BraintreeOrderStatus.Pending;\n            const isOrderApproved = orderStatus.status === BraintreeOrderStatus.Completed;\n            const isPollingError = orderStatus.status === BraintreeOrderStatus.Failed;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (\n                !isOrderApproved &&\n                isOrderPending &&\n                this.pollingTimer < this.maxPollingIntervalTime\n            ) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                braintreelocalmethods: this.braintreelocalmethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithBraintreeLocalMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeRequestSender from '../braintree-request-sender';\n\nimport BraintreeLocalMethodsPaymentStrategy from './braintree-local-methods-payment-strategy';\n\nconst createBraintreeLocalMethodsPaymentStrategy: PaymentStrategyFactory<\n    BraintreeLocalMethodsPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n    const requestSender = createRequestSender();\n    const braintreeRequestSender = new BraintreeRequestSender(requestSender);\n\n    return new BraintreeLocalMethodsPaymentStrategy(\n        paymentIntegrationService,\n        braintreeSdk,\n        braintreeRequestSender,\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n};\n\nexport default toResolvableModule(createBraintreeLocalMethodsPaymentStrategy, [\n    { gateway: 'braintreelocalmethods' },\n]);\n","import { omitBy } from 'lodash';\n\nimport { BraintreeFastlaneStylesOption, FastlaneStylesSettings } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: BraintreeFastlaneStylesOption,\n): BraintreeFastlaneStylesOption | undefined {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: BraintreeFastlaneStylesOption,\n): BraintreeFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: BraintreeFastlaneStylesOption) {\n    const fastlaneStyles: BraintreeFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isBraintreeAcceleratedCheckoutCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import { HostedInstrument, NonceInstrument } from './payment';\n\ntype PaymentInstrument = CardInstrument | AccountInstrument | HostedInstrument | NonceInstrument;\n\nexport default PaymentInstrument;\n\nexport interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport interface CardInstrument extends BaseInstrument {\n    brand: string;\n    expiryMonth: string;\n    expiryYear: string;\n    iin: string;\n    last4: string;\n    type: 'card';\n    untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType;\n}\n\ninterface BaseAccountInstrument extends BaseInstrument {\n    method: string;\n    type: 'account' | 'bank';\n}\n\nexport interface PayPalInstrument extends BaseAccountInstrument {\n    externalId: string;\n    method: 'paypal';\n}\n\nexport interface AchInstrument extends BaseAccountInstrument {\n    issuer: string;\n    accountNumber: string;\n    type: 'bank';\n    method: 'ach' | 'ecp';\n}\n\nexport interface BankInstrument extends BaseAccountInstrument {\n    accountNumber: string;\n    issuer: string;\n    iban: string;\n    method: string;\n    type: 'bank';\n}\n\nexport type AccountInstrument = PayPalInstrument | BankInstrument | AchInstrument;\n\nexport interface VaultAccessToken {\n    vaultAccessToken: string;\n    vaultAccessExpiry: number;\n}\n\nexport interface SessionContext {\n    customerId: number;\n    storeId: string;\n    currencyCode?: string;\n}\n\nexport interface InstrumentRequestContext extends SessionContext {\n    authToken: string;\n}\n","import {\n    Braintree3DSVerifyCardError,\n    Braintree3DSVerifyCardPayload,\n    BraintreeFastlaneAddress,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneCardComponent,\n    BraintreeFastlaneCardComponentOptions,\n    BraintreeInitializationData,\n    BraintreeSdk,\n    getFastlaneStyles,\n    isBraintreeAcceleratedCheckoutCustomer,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CardInstrument,\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodClientUnavailableError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { WithBraintreeFastlanePaymentInitializeOptions } from './braintree-fastlane-payment-initialize-options';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nexport default class BraintreeFastlanePaymentStrategy implements PaymentStrategy {\n    private braintreeCardComponent?: BraintreeFastlaneCardComponent;\n    private is3DSEnabled?: boolean;\n    private onError?: (error: Error) => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeFastlaneUtils: BraintreeFastlaneUtils,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     */\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, braintreefastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreefastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane\" argument is not provided.',\n            );\n        }\n\n        if (!braintreefastlane.onInit || typeof braintreefastlane.onInit !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (!braintreefastlane.onChange || typeof braintreefastlane.onChange !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { initializationData, clientToken } = paymentMethod || {};\n        const { isFastlaneStylingEnabled } = initializationData || {};\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isThreeDSExperimentEnabled = isExperimentEnabled(\n            features,\n            'PROJECT-7080.braintree_fastlane_three_ds',\n        );\n\n        this.is3DSEnabled = paymentMethod.config.is3dsEnabled;\n\n        if (clientToken && isThreeDSExperimentEnabled) {\n            this.braintreeSdk.initialize(clientToken);\n        }\n\n        const paypalFastlaneStyleSettings = isFastlaneStylingEnabled\n            ? paymentMethod.initializationData?.fastlaneStyles\n            : undefined;\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyleSettings,\n            braintreefastlane.styles,\n        );\n\n        await this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(\n            methodId,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow();\n        }\n\n        await this.initializeCardComponent();\n\n        this.onError = braintreefastlane.onError;\n\n        braintreefastlane.onInit((container) => this.renderBraintreeCardComponent(container));\n        braintreefastlane.onChange(() => this.handleBraintreeStoredInstrumentChange(methodId));\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        const paymentPayload = await this.preparePaymentPayload(payment.methodId);\n\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n\n        this.braintreeFastlaneUtils.removeSessionIdFromCookies();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.braintreeCardComponent = undefined;\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Braintree Fastlane Component rendering method\n     *\n     */\n    private async initializeCardComponent() {\n        const state = this.paymentIntegrationService.getState();\n        const { phone, firstName, lastName } = state.getBillingAddressOrThrow();\n        const fullName = `${firstName} ${lastName}`;\n\n        const cardComponentOptions: BraintreeFastlaneCardComponentOptions = {\n            styles: {},\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        const paypalPaymentComponent =\n            this.braintreeFastlaneUtils.getBraintreeFastlaneComponentOrThrow();\n\n        this.braintreeCardComponent = await paypalPaymentComponent(cardComponentOptions);\n    }\n\n    private renderBraintreeCardComponent(container?: string) {\n        const braintreeCardComponent = this.getBraintreeCardComponentOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        braintreeCardComponent.render(container);\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async preparePaymentPayload(methodId: string): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`;\n\n        const paypalInstrument = this.getPayPalInstruments()[0];\n\n        const deviceSessionId = await this.braintreeFastlaneUtils.getDeviceSessionId();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isThreeDSExperimentEnabled = isExperimentEnabled(\n            features,\n            'PROJECT-7080.braintree_fastlane_three_ds',\n        );\n\n        if (paypalInstrument) {\n            const threeDSToken =\n                this.is3DSEnabled && isThreeDSExperimentEnabled\n                    ? await this.get3DS(paypalInstrument.bigpayToken, paypalInstrument?.iin || '')\n                    : undefined;\n\n            return {\n                methodId,\n                paymentData: {\n                    deviceSessionId,\n                    formattedPayload: {\n                        paypal_fastlane_token: {\n                            token: threeDSToken || paypalInstrument.bigpayToken,\n                        },\n                    },\n                },\n            };\n        }\n\n        const { getPaymentToken } = this.getBraintreeCardComponentOrThrow();\n\n        const paymentToken = await getPaymentToken({\n            name: { fullName },\n            billingAddress: this.mapToPayPalAddress(billingAddress),\n        });\n\n        const binGuest = paymentToken.paymentSource.card?.binDetails?.bin || '';\n        const threeDSToken =\n            this.is3DSEnabled && isThreeDSExperimentEnabled\n                ? await this.get3DS(paymentToken.id, binGuest)\n                : undefined;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId,\n                nonce: threeDSToken || paymentToken.id,\n            },\n        };\n    }\n\n    /**\n     * 3DS\n     */\n    private async get3DS(nonce: string, bin: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const threeDSecure = await this.braintreeSdk.getBraintreeThreeDS();\n        const order = state.getOrderOrThrow();\n\n        return new Promise<string>((resolve, reject) => {\n            void threeDSecure.verifyCard(\n                {\n                    amount: order?.orderAmount,\n                    nonce,\n                    bin,\n                    onLookupComplete: (_data, next) => {\n                        threeDSecure.on('customer-canceled', () => {\n                            if (typeof this.onError === 'function') {\n                                this.onError(new PaymentMethodCancelledError());\n                            }\n\n                            reject(new PaymentMethodCancelledError());\n                        });\n\n                        next();\n                    },\n                },\n                (\n                    verifyError: Braintree3DSVerifyCardError,\n                    payload: Braintree3DSVerifyCardPayload,\n                ) => {\n                    if (\n                        verifyError &&\n                        verifyError.code === 'THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT'\n                    ) {\n                        if (typeof this.onError === 'function') {\n                            this.onError(new PaymentMethodCancelledError());\n                        }\n\n                        reject(new PaymentMethodCancelledError());\n                    }\n\n                    return resolve(payload.nonce);\n                },\n            );\n        });\n    }\n\n    /**\n     *\n     * Mapper methods\n     *\n     */\n    private mapToPayPalAddress(address?: Address): BraintreeFastlaneAddress {\n        return {\n            streetAddress: address?.address1 || '',\n            locality: address?.city || '',\n            region: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            postalCode: address?.postalCode || '',\n            countryCodeAlpha2: address?.countryCode || '',\n        };\n    }\n\n    /**\n     *\n     * Other methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.braintreeFastlaneUtils.getSessionIdFromCookies();\n\n        if (\n            !customer.isGuest ||\n            braintreePaymentProviderCustomer?.authenticationState ===\n                BraintreeFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return (\n            !braintreePaymentProviderCustomer?.authenticationState &&\n            paypalFastlaneSessionId === cart.id\n        );\n    }\n\n    private getBraintreeCardComponentOrThrow() {\n        if (!this.braintreeCardComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeCardComponent;\n    }\n\n    private getPayPalInstruments(): CardInstrument[] {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return braintreePaymentProviderCustomer.instruments || [];\n    }\n\n    /**\n     *\n     * Braintree Fastlane instrument change\n     *\n     */\n    private async handleBraintreeStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.braintreeFastlaneUtils.getBraintreeFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const braintreeFastlaneCustomer = isBraintreeAcceleratedCheckoutCustomer(\n                paymentProviderCustomer,\n            )\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstruments = this.braintreeFastlaneUtils.mapPayPalToBcInstrument(\n                methodId,\n                [selectedCard],\n            );\n\n            if (selectedInstruments && selectedInstruments.length > 0) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    ...braintreeFastlaneCustomer,\n                    instruments: [...selectedInstruments],\n                });\n\n                return selectedInstruments[0];\n            }\n        }\n\n        return undefined;\n    }\n}\n","interface CookieOptions {\n    expires?: Date;\n    path?: string;\n    domain?: string;\n    secure?: boolean;\n}\n\nexport default class CookieStorage {\n    static get(name: string): string | null {\n        const cookieKey = `${encodeURIComponent(`${name}`)}=`;\n        const cookie = document.cookie;\n\n        let value = null;\n\n        const firstIndex = cookie.indexOf(cookieKey);\n\n        if (firstIndex > -1) {\n            let lastIndex = cookie.indexOf(';', firstIndex);\n\n            if (lastIndex === -1) {\n                lastIndex = cookie.length;\n            }\n\n            value = decodeURIComponent(cookie.substring(firstIndex + cookieKey.length, lastIndex));\n        }\n\n        return value;\n    }\n\n    static set(name: string, value: string, options: CookieOptions = { secure: true }) {\n        let cookieText = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`;\n\n        const { expires, path, domain, secure } = options;\n\n        if (expires) {\n            cookieText += `; expires=${expires.toUTCString()}`;\n        } else {\n            const now = new Date();\n            // info: default cookie expiration time after setup\n            const minutes = 60;\n\n            now.setTime(now.getTime() + minutes * 60 * 1000);\n\n            cookieText += `; expires=${now.toUTCString()}`;\n        }\n\n        if (path) {\n            cookieText += `; path=${path}`;\n        }\n\n        if (domain) {\n            cookieText += `; domain=${domain}`;\n        }\n\n        if (secure) {\n            cookieText += '; secure';\n        }\n\n        document.cookie = cookieText;\n    }\n\n    static remove(name: string, options?: CookieOptions) {\n        CookieStorage.set(name, '', { expires: new Date(0), ...options });\n    }\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    BraintreeFastlane,\n    BraintreeFastlaneAddress,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneProfileData,\n    BraintreeFastlaneStylesOption,\n    BraintreeFastlaneVaultedInstrument,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CardInstrument,\n    CustomerAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nexport default class BraintreeFastlaneUtils {\n    private braintreeFastlane?: BraintreeFastlane;\n    private methodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async getDeviceSessionId(): Promise<string | undefined> {\n        const cart = this.paymentIntegrationService.getState().getCart();\n\n        return this.braintreeIntegrationService.getSessionId(cart?.id);\n    }\n\n    /**\n     *\n     * Initialization method\n     *\n     */\n    async initializeBraintreeFastlaneOrThrow(\n        methodId: string,\n        styles?: BraintreeFastlaneStylesOption,\n    ) {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCart();\n        const { clientToken, config } =\n            state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.methodId = methodId;\n\n        this.braintreeIntegrationService.initialize(clientToken);\n\n        this.braintreeFastlane = await this.braintreeIntegrationService.getBraintreeFastlane(\n            cart?.id,\n            config.testMode,\n            styles,\n        );\n    }\n\n    getBraintreeFastlaneOrThrow(): BraintreeFastlane {\n        if (!this.braintreeFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeFastlane;\n    }\n\n    getBraintreeFastlaneComponentOrThrow(): BraintreeFastlane['FastlaneCardComponent'] {\n        const braintreeFastlane = this.getBraintreeFastlaneOrThrow();\n\n        return braintreeFastlane.FastlaneCardComponent;\n    }\n\n    /**\n     *\n     * Authentication methods\n     *\n     * */\n    // Remove this rule disabling after method refactor\n    // eslint-disable-next-line complexity\n    async runPayPalAuthenticationFlowOrThrow(\n        email?: string,\n        shouldSetShippingOption?: boolean,\n    ): Promise<void> {\n        try {\n            const methodId = this.getMethodIdOrThrow();\n            const braintreeFastlane = this.getBraintreeFastlaneOrThrow();\n            const { lookupCustomerByEmail, triggerAuthenticationFlow } = braintreeFastlane.identity;\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId)\n                    .initializationData || {};\n\n            const customerEmail = email || customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } = await lookupCustomerByEmail(customerEmail);\n\n            if (!customerContextId) {\n                // Info: we should clean up previous experience with default data and related authenticationState\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState: BraintreeFastlaneAuthenticationState.UNRECOGNIZED,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.saveSessionIdToCookies(cart.id);\n\n                return;\n            }\n\n            const { authenticationState, profileData } = await triggerAuthenticationFlow(\n                customerContextId,\n            );\n\n            const phoneNumber = profileData?.shippingAddress?.phoneNumber || '';\n\n            if (authenticationState === BraintreeFastlaneAuthenticationState.CANCELED) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.removeSessionIdFromCookies();\n\n                return;\n            }\n\n            const shippingAddresses =\n                this.mapPayPalToBcAddress([profileData.shippingAddress], [phoneNumber]) || [];\n            const paypalBillingAddress = this.getPayPalBillingAddresses(profileData);\n            const billingAddresses = paypalBillingAddress\n                ? this.mapPayPalToBcAddress([paypalBillingAddress], [phoneNumber])\n                : [];\n            const instruments = profileData.card\n                ? this.mapPayPalToBcInstrument(methodId, [profileData.card])\n                : [];\n            const addresses = this.mergeShippingAndBillingAddresses(\n                shippingAddresses,\n                billingAddresses,\n            );\n\n            this.saveSessionIdToCookies(cart.id);\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            if (billingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateBillingAddress(billingAddresses[0]);\n            }\n\n            // Prefill billing form if only digital items in cart with billing data and firstName and lastName\n            // from shippingAddresses because there are empty in billing\n            if (\n                billingAddresses.length > 0 &&\n                cart.lineItems.digitalItems.length > 0 &&\n                cart.lineItems.physicalItems.length === 0\n            ) {\n                const { firstName, lastName } = addresses[0];\n                const digitalItemBilling = {\n                    ...billingAddresses[0],\n                    firstName,\n                    lastName,\n                };\n\n                await this.paymentIntegrationService.updateBillingAddress(digitalItemBilling);\n            }\n\n            if (shippingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddresses[0]);\n\n                if (shouldSetShippingOption && isFastlaneShippingOptionAutoSelectEnabled) {\n                    await this.setShippingOption();\n                }\n            }\n        } catch (error) {\n            // TODO: we should figure out what to do here\n            // TODO: because we should not to stop the flow if the error occurs on paypal side\n        }\n    }\n\n    /**\n     *\n     * Session id management\n     *\n     */\n    getSessionIdFromCookies(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    saveSessionIdToCookies(sessionId: string): void {\n        const expires = new Date();\n\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, {\n            expires,\n            secure: true,\n        });\n    }\n\n    removeSessionIdFromCookies(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    /**\n     *\n     * PayPal to BC data mappers\n     *\n     * */\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instruments?: BraintreeFastlaneVaultedInstrument[],\n    ): CardInstrument[] | undefined {\n        if (!instruments) {\n            return;\n        }\n\n        return instruments.map((instrument) => {\n            const { id, paymentSource } = instrument;\n            const { brand, expiry, lastDigits, binDetails } = paymentSource.card;\n\n            const [expiryYear, expiryMonth] = expiry.split('-');\n\n            return {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: binDetails?.bin || '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                type: 'card',\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n            };\n        });\n    }\n\n    private mapPayPalToBcAddress(\n        addresses?: BraintreeFastlaneAddress[],\n        phones?: string[],\n    ): CustomerAddress[] {\n        if (!addresses) {\n            return [];\n        }\n\n        const countries = this.paymentIntegrationService.getState().getCountries() || [];\n\n        const getCountryNameByCountryCode = (countryCode: string) => {\n            const matchedCountry = countries.find((country) => country.code === countryCode);\n\n            return matchedCountry?.name || '';\n        };\n\n        return addresses.map((address) => ({\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: address.firstName || '',\n            lastName: address.lastName || '',\n            company: address.company || '',\n            address1: address.streetAddress,\n            address2: address.extendedAddress || '',\n            city: address.locality,\n            stateOrProvince: address.region,\n            stateOrProvinceCode: address.region,\n            country: getCountryNameByCountryCode(address.countryCodeAlpha2),\n            countryCode: address.countryCodeAlpha2,\n            postalCode: address.postalCode,\n            phone: (phones && phones[0]) || '',\n            customFields: [],\n        }));\n    }\n\n    /**\n     *\n     * Get PayPal billing addresses from stored braintree instruments info\n     *\n     * */\n    private getPayPalBillingAddresses(\n        profileData?: BraintreeFastlaneProfileData,\n    ): BraintreeFastlaneAddress | undefined {\n        const { card, name } = profileData || {};\n\n        if (!card) {\n            return;\n        }\n\n        const { firstName, lastName } = card.paymentSource.card.billingAddress;\n        const { firstName: given_name, lastName: surname } = name || {};\n        const { shippingAddress } = profileData || {};\n        const address = {\n            ...card.paymentSource.card.billingAddress,\n            firstName: firstName || given_name,\n            lastName: lastName || surname,\n        };\n\n        const isAddressExist =\n            shippingAddress &&\n            isEqual(this.normalizeAddress(address), this.normalizeAddress(shippingAddress));\n\n        return isAddressExist ? shippingAddress : address;\n    }\n\n    private normalizeAddress(address: CustomerAddress | BraintreeFastlaneAddress) {\n        return omit(address, ['id']);\n    }\n\n    private mergeShippingAndBillingAddresses(\n        shippingAddresses: CustomerAddress[],\n        billingAddresses: CustomerAddress[],\n    ): CustomerAddress[] {\n        const filteredBillingAddresses = billingAddresses.filter(\n            (billingAddress: CustomerAddress) =>\n                !shippingAddresses.some((shippingAddress: CustomerAddress) => {\n                    return isEqual(\n                        this.normalizeAddress(shippingAddress),\n                        this.normalizeAddress(billingAddress),\n                    );\n                }),\n        );\n\n        return [...shippingAddresses, ...filteredBillingAddresses];\n    }\n\n    /**\n     *\n     * Other\n     *\n     * */\n    private getMethodIdOrThrow(): string {\n        if (!this.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        return this.methodId;\n    }\n\n    private async setShippingOption(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const consignments = state.getConsignments() || [];\n        const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        if (recommendedShippingOption || availableShippingOptions.length) {\n            const selectedOption = recommendedShippingOption || availableShippingOptions[0];\n\n            await this.paymentIntegrationService.selectShippingOption(selectedOption.id);\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeFastlanePaymentStrategy from './braintree-fastlane-payment-strategy';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nconst createBraintreeFastlanePaymentStrategy: PaymentStrategyFactory<\n    BraintreeFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    const braintreeFastlaneUtils = new BraintreeFastlaneUtils(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeFastlanePaymentStrategy(\n        paymentIntegrationService,\n        braintreeFastlaneUtils,\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeFastlanePaymentStrategy, [\n    { id: 'braintreeacceleratedcheckout' },\n]);\n","import {\n    BraintreeError,\n    BraintreeIntegrationService,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    isBraintreeError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    FormattedPayload,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n    PaypalInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\nimport BraintreeVenmoPaymentStrategyInitializeOptions, {\n    WithBraintreeVenmoInitializeOptions,\n} from './braintree-venmo-payment-strategy-initialize-options';\n\nexport default class BraintreeVenmoPaymentStrategy implements PaymentStrategy {\n    private braintreeVenmoCheckout?: BraintreeVenmoCheckout;\n    private venmoOptions?: BraintreeVenmoPaymentStrategyInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeVenmoInitializeOptions,\n    ): Promise<void> {\n        const { methodId } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        const state = this.paymentIntegrationService.getState();\n\n        this.venmoOptions = options.braintreevenmo;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        await this.initializeBraintreeVenmo(paymentMethod);\n    }\n\n    async execute(orderRequest: OrderRequestBody): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            const paymentData = await this.preparePaymentData(payment);\n            await this.paymentIntegrationService.submitOrder(order);\n            await this.paymentIntegrationService.submitPayment(paymentData);\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private async initializeBraintreeVenmo(paymentMethod: PaymentMethod): Promise<void> {\n        const { clientToken } = paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isBraintreeVenmoWebFallbackSupport = isExperimentEnabled(\n            features,\n            'PAYPAL-5406.braintree_venmo_web_fallback_support',\n        );\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n            this.braintreeVenmoCheckout = await this.braintreeIntegrationService.getVenmoCheckout({\n                ...(this.venmoOptions?.allowDesktop !== undefined\n                    ? { allowDesktop: this.venmoOptions.allowDesktop }\n                    : {}),\n                ...(isBraintreeVenmoWebFallbackSupport\n                    ? {\n                          mobileWebFallBack: isBraintreeVenmoWebFallbackSupport,\n                      }\n                    : {}),\n            });\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n        const { nonce } = state.getPaymentMethodOrThrow(payment.methodId);\n\n        if (nonce) {\n            return { ...payment, paymentData: this.formattedPayload(nonce) };\n        }\n        const tokenizeResult = await this.braintreeVenmoTokenize();\n        const sessionId = await this.braintreeIntegrationService.getSessionId();\n\n        return {\n            ...payment,\n            paymentData: this.formattedPayload(\n                tokenizeResult.nonce,\n                tokenizeResult.details.email,\n                sessionId,\n            ),\n        };\n    }\n\n    private formattedPayload(\n        token: string,\n        email?: string,\n        sessionId?: string,\n    ): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n\n    private braintreeVenmoTokenize(): Promise<BraintreeTokenizePayload> {\n        return new Promise((resolve, reject) => {\n            this.braintreeVenmoCheckout?.tokenize(\n                (error: BraintreeError | undefined, payload: BraintreeTokenizePayload) => {\n                    if (error) {\n                        return reject(error);\n                    }\n\n                    resolve(payload);\n                },\n            );\n        });\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport BraintreeVenmoPaymentStrategy from './braintree-venmo-payment-strategy';\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nconst createBraintreeVenmoPaymentStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVenmoPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const scriptLoader = getScriptLoader();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        scriptLoader,\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        braintreeScriptLoader,\n        braintreeHostWindow,\n    );\n\n    return new BraintreeVenmoPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVenmoPaymentStrategy, [{ id: 'braintreevenmo' }]);\n","import { some } from 'lodash';\n\nimport {\n    BraintreeIntegrationService,\n    BraintreeThreeDSecureOptions,\n    isBraintreeAcceleratedCheckoutCustomer,\n    isBraintreePaymentRequest3DSError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NonceInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentInstrumentMeta,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeHostedForm from '../braintree-hosted-form/braintree-hosted-form';\nimport isBraintreeError from '../is-braintree-error';\n\nimport { WithBraintreeCreditCardPaymentInitializeOptions } from './braintree-credit-card-payment-initialize-options';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private is3dsEnabled?: boolean;\n    private isHostedFormInitialized?: boolean;\n    private deviceSessionId?: string;\n    private paymentMethod?: PaymentMethod;\n    private threeDSecure?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostedForm: BraintreeHostedForm,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, gatewayId, braintree } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const { clientToken } = this.paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.threeDSecure = braintree?.threeDSecure;\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken, this.threeDSecure);\n\n            if (this.isHostedPaymentFormEnabled(methodId, gatewayId) && braintree?.form) {\n                await this.braintreeHostedForm.initialize(\n                    braintree.form,\n                    braintree.unsupportedCardBrands,\n                    clientToken,\n                );\n\n                this.isHostedFormInitialized = this.braintreeHostedForm.isInitialized();\n            }\n\n            this.is3dsEnabled = this.paymentMethod.config.is3dsEnabled;\n            this.deviceSessionId = await this.braintreeIntegrationService.getSessionId();\n\n            // TODO: Remove when BT AXO A/B testing is finished\n            if (this.shouldInitializeBraintreeFastlane()) {\n                await this.initializeBraintreeFastlaneOrThrow(methodId);\n            }\n        } catch (error) {\n            return this.handleError(error);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (this.isHostedFormInitialized) {\n            this.braintreeHostedForm.validate();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order);\n\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const orderAmount = state.getOrderOrThrow().orderAmount;\n\n        try {\n            const paymentData = this.isHostedFormInitialized\n                ? await this.prepareHostedPaymentData(payment, billingAddress, orderAmount)\n                : await this.preparePaymentData(payment, billingAddress, orderAmount);\n\n            await this.paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData,\n            });\n        } catch (error) {\n            return this.processAdditionalAction(error, payment, orderAmount);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.isHostedFormInitialized = false;\n\n        await Promise.all([\n            this.braintreeIntegrationService.teardown(),\n            this.braintreeHostedForm.deinitialize(),\n        ]);\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: unknown): never {\n        if (isBraintreeError(error)) {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private async preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const { paymentData } = payment;\n        const commonPaymentData = { deviceSessionId: this.deviceSessionId };\n\n        if (this.isSubmittingWithStoredCard(payment)) {\n            return {\n                ...commonPaymentData,\n                ...paymentData,\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { nonce } = this.shouldPerform3DSVerification(payment)\n            ? await this.braintreeIntegrationService.verifyCard(\n                  payment,\n                  billingAddress,\n                  orderAmount,\n              )\n            : await this.braintreeIntegrationService.tokenizeCard(payment, billingAddress);\n\n        return {\n            ...commonPaymentData,\n            nonce,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        };\n    }\n\n    private async prepareHostedPaymentData(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const { paymentData } = payment;\n        const commonPaymentData = { deviceSessionId: this.deviceSessionId };\n\n        if (this.isSubmittingWithStoredCard(payment)) {\n            const { nonce } = await this.braintreeHostedForm.tokenizeForStoredCardVerification();\n\n            return {\n                ...commonPaymentData,\n                ...paymentData,\n                nonce,\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { nonce } = this.shouldPerform3DSVerification(payment)\n            ? await this.verifyCardWithHostedForm(billingAddress, orderAmount)\n            : await this.braintreeHostedForm.tokenize(billingAddress);\n\n        return {\n            ...commonPaymentData,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n            nonce,\n        };\n    }\n\n    private async verifyCardWithHostedForm(\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this.braintreeHostedForm.tokenize(billingAddress);\n\n        return this.braintreeIntegrationService.challenge3DSVerification(\n            tokenizationPayload,\n            orderAmount,\n        );\n    }\n\n    private async processAdditionalAction(\n        error: unknown,\n        payment: OrderPaymentRequestBody,\n        orderAmount: number,\n    ): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'three_d_secure_required' })\n        ) {\n            return this.handleError(error);\n        }\n\n        try {\n            const { payer_auth_request: storedCreditCardNonce } =\n                (isBraintreePaymentRequest3DSError(error) && error.body.three_ds_result) || {};\n            const { paymentData } = payment;\n            const state = this.paymentIntegrationService.getState();\n\n            if (!paymentData || !isVaultedInstrument(paymentData)) {\n                throw new PaymentArgumentInvalidError(['instrumentId']);\n            }\n\n            const instrument = state.getCardInstrumentOrThrow(paymentData.instrumentId);\n            const { nonce } = await this.braintreeIntegrationService.challenge3DSVerification(\n                {\n                    nonce: storedCreditCardNonce || '',\n                    bin: instrument.iin,\n                },\n                orderAmount,\n            );\n\n            await this.paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    deviceSessionId: this.deviceSessionId,\n                    nonce,\n                },\n            });\n        } catch (error) {\n            return this.handleError(error);\n        }\n    }\n\n    private isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private isSubmittingWithStoredCard(payment: OrderPaymentRequestBody): boolean {\n        return !!(payment.paymentData && isVaultedInstrument(payment.paymentData));\n    }\n\n    private shouldPerform3DSVerification(payment: OrderPaymentRequestBody): boolean {\n        return !!(this.is3dsEnabled && !this.isSubmittingWithStoredCard(payment));\n    }\n\n    // TODO: Remove when BT AXO A/B testing is finished\n    private shouldInitializeBraintreeFastlane(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const braintreeCustomer = isBraintreeAcceleratedCheckoutCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n        const isFastlaneEnabled: boolean =\n            this.paymentMethod?.initializationData.isAcceleratedCheckoutEnabled;\n\n        return isFastlaneEnabled && !braintreeCustomer?.authenticationState;\n    }\n\n    // TODO: Remove when BT AXO A/B testing is finished\n    private async initializeBraintreeFastlaneOrThrow(methodId: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { clientToken, config } = paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeIntegrationService.initialize(clientToken, this.threeDSecure);\n\n        await this.braintreeIntegrationService.getBraintreeFastlane(cart.id, config.testMode);\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","export interface BraintreePayment3DSRequestErrors {\n    code: string;\n}\n\nexport interface BraintreePaymentRequest3DSError {\n    name: string;\n    body: {\n        status: string;\n        three_ds_result: {\n            payer_auth_request: string;\n        };\n        errors: BraintreePayment3DSRequestErrors[];\n    };\n}\n\nexport default function isBraintreePaymentRequest3DSError(\n    error: unknown,\n): error is BraintreePaymentRequest3DSError {\n    if (typeof error !== 'object' || error === null) {\n        return false;\n    }\n    /* eslint-disable @typescript-eslint/consistent-type-assertions */\n    return (\n        'name' in error &&\n        'body' in error &&\n        'status' in (error as BraintreePaymentRequest3DSError).body &&\n        'three_ds_result' in (error as BraintreePaymentRequest3DSError).body &&\n        'payer_auth_request' in (error as BraintreePaymentRequest3DSError).body.three_ds_result &&\n        'errors' in (error as BraintreePaymentRequest3DSError).body\n    );\n}\n","import { BraintreeFormFieldsMap, BraintreeStoredCardFieldsMap } from '../index';\n\nexport function isBraintreeFormFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n): fields is BraintreeFormFieldsMap {\n    return 'cardNumber' in fields;\n}\n\nexport function isBraintreeStoredCardFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n): fields is BraintreeStoredCardFieldsMap {\n    return !!(\n        Object.keys(fields).length > 0 &&\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        ((fields as BraintreeStoredCardFieldsMap).cardCodeVerification ||\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            (fields as BraintreeStoredCardFieldsMap).cardNumberVerification)\n    );\n}\n","import isBraintreeError from './is-braintree-error';\nimport { BraintreeHostedFormError } from '../types';\n\nfunction isValidInvalidFieldKeys(invalidFieldKeys: unknown): invalidFieldKeys is string[] {\n    return (\n        Array.isArray(invalidFieldKeys) && invalidFieldKeys.every((key) => typeof key === 'string')\n    );\n}\n\nexport default function isBraintreeHostedFormError(\n    error: unknown,\n): error is BraintreeHostedFormError {\n    if (!isBraintreeError(error)) {\n        return false;\n    }\n\n    const { details } = error;\n\n    return (\n        details === undefined ||\n        (typeof details === 'object' &&\n            details !== null &&\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            (details as { invalidFieldKeys?: unknown }).invalidFieldKeys === undefined) ||\n        isValidInvalidFieldKeys(details)\n    );\n}\n","import { Dictionary, isEmpty, isNil, omitBy } from 'lodash';\n\nimport {\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BraintreeBillingAddressRequestData,\n    BraintreeClient,\n    BraintreeFormErrorDataKeys,\n    BraintreeFormErrorsData,\n    BraintreeFormFieldsMap,\n    BraintreeFormFieldStyles,\n    BraintreeFormFieldStylesMap,\n    BraintreeFormFieldType,\n    BraintreeFormFieldValidateErrorData,\n    BraintreeFormFieldValidateEventData,\n    BraintreeFormOptions,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeHostedFieldsState,\n    BraintreeHostedFormError,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n    BraintreeStoredCardFieldsMap,\n    isBraintreeFormFieldsMap,\n    isBraintreeHostedFormError,\n    isBraintreeSupportedCardBrand,\n    TokenizationPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nenum BraintreeHostedFormType {\n    CreditCard,\n    StoredCardVerification,\n}\n\nexport default class BraintreeHostedForm {\n    private cardFields?: BraintreeHostedFields;\n    private formOptions?: BraintreeFormOptions;\n    private type?: BraintreeHostedFormType;\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private isInitializedHostedForm = false;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async initialize(\n        options: BraintreeFormOptions,\n        unsupportedCardBrands?: string[],\n        clientToken?: string,\n    ): Promise<void> {\n        this.clientToken = clientToken;\n        this.formOptions = options;\n        this.type = isBraintreeFormFieldsMap(options.fields)\n            ? BraintreeHostedFormType.CreditCard\n            : BraintreeHostedFormType.StoredCardVerification;\n\n        const fields = this.mapFieldOptions(options.fields, unsupportedCardBrands);\n\n        if (isEmpty(fields)) {\n            this.isInitializedHostedForm = false;\n\n            return;\n        }\n\n        this.cardFields = await this.createHostedFields({\n            fields,\n            styles: options.styles && this.mapStyleOptions(options.styles),\n        });\n\n        this.cardFields?.on('blur', this.handleBlur);\n        this.cardFields?.on('focus', this.handleFocus);\n        this.cardFields?.on('cardTypeChange', this.handleCardTypeChange);\n        this.cardFields?.on('validityChange', this.handleValidityChange);\n        this.cardFields?.on('inputSubmitRequest', this.handleInputSubmitRequest);\n\n        this.isInitializedHostedForm = true;\n    }\n\n    isInitialized(): boolean {\n        return !!this.isInitializedHostedForm;\n    }\n\n    async deinitialize(): Promise<void> {\n        if (this.isInitializedHostedForm) {\n            this.isInitializedHostedForm = false;\n            await this.cardFields?.teardown();\n        }\n    }\n\n    validate(): void {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this.cardFields.getState();\n\n        if (!this.isValidForm(state)) {\n            this.handleValidityChange(state);\n\n            const errors = this.mapValidationErrors(state.fields);\n\n            throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n        }\n    }\n\n    async tokenize(billingAddress: Address): Promise<TokenizationPayload> {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            const payload = await this.cardFields.tokenize(\n                omitBy(\n                    {\n                        billingAddress: billingAddress && this.mapBillingAddress(billingAddress),\n                    },\n                    isNil,\n                ),\n            );\n\n            this.formOptions?.onValidate?.({ isValid: true, errors: {} });\n\n            return {\n                nonce: payload.nonce,\n                bin: payload.details?.bin,\n            };\n        } catch (error) {\n            if (isBraintreeHostedFormError(error)) {\n                const errors = this.mapTokenizeError(error);\n\n                if (errors) {\n                    this.formOptions?.onValidate?.({ isValid: false, errors });\n                    throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    async tokenizeForStoredCardVerification(): Promise<TokenizationPayload> {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            const payload = await this.cardFields.tokenize();\n\n            this.formOptions?.onValidate?.({ isValid: true, errors: {} });\n\n            return {\n                nonce: payload.nonce,\n                bin: payload.details?.bin,\n            };\n        } catch (error) {\n            if (isBraintreeHostedFormError(error)) {\n                const errors = this.mapTokenizeError(error, true);\n\n                if (errors) {\n                    this.formOptions?.onValidate?.({ isValid: false, errors });\n                    throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\n    ): Promise<BraintreeHostedFields> {\n        const client = await this.getClient();\n        const hostedFields = await this.braintreeScriptLoader.loadHostedFields();\n\n        const currentSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n        const hostedFieldsOptions =\n            currentSdkVersion === BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION\n                ? { ...options, preventCursorJumps: true }\n                : options;\n\n        return hostedFields.create({ ...hostedFieldsOptions, client });\n    }\n\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this.client) {\n            const client = await this.braintreeScriptLoader.loadClient();\n\n            this.client = client.create({ authorization: this.clientToken });\n        }\n\n        return this.client;\n    }\n\n    private mapBillingAddress(billingAddress: Address): BraintreeBillingAddressRequestData {\n        return {\n            countryName: billingAddress.country,\n            postalCode: billingAddress.postalCode,\n            streetAddress: billingAddress.address2\n                ? `${billingAddress.address1} ${billingAddress.address2}`\n                : billingAddress.address1,\n        };\n    }\n\n    private mapFieldOptions(\n        fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n        unsupportedCardBrands?: string[],\n    ): BraintreeHostedFieldsCreatorConfig['fields'] {\n        if (isBraintreeFormFieldsMap(fields)) {\n            const supportedCardBrands: Partial<Record<string, boolean>> = {};\n\n            unsupportedCardBrands?.forEach((cardBrand) => {\n                if (isBraintreeSupportedCardBrand(cardBrand)) {\n                    supportedCardBrands[cardBrand] = false;\n                }\n            });\n\n            return omitBy(\n                {\n                    number: {\n                        container: `#${fields.cardNumber.containerId}`,\n                        placeholder: fields.cardNumber.placeholder,\n                        internalLabel: fields.cardNumber.accessibilityLabel,\n                        ...(Object.keys(supportedCardBrands).length > 0\n                            ? { supportedCardBrands }\n                            : {}),\n                    },\n                    expirationDate: {\n                        container: `#${fields.cardExpiry.containerId}`,\n                        placeholder: fields.cardExpiry.placeholder,\n                        internalLabel: fields.cardExpiry.accessibilityLabel,\n                    },\n                    cvv: fields.cardCode && {\n                        container: `#${fields.cardCode.containerId}`,\n                        placeholder: fields.cardCode.placeholder,\n                        internalLabel: fields.cardCode.accessibilityLabel,\n                    },\n                    cardholderName: {\n                        container: `#${fields.cardName.containerId}`,\n                        placeholder: fields.cardName.placeholder,\n                        internalLabel: fields.cardName.accessibilityLabel,\n                    },\n                },\n                isNil,\n            );\n        }\n\n        return omitBy(\n            {\n                number: fields.cardNumberVerification && {\n                    container: `#${fields.cardNumberVerification.containerId}`,\n                    placeholder: fields.cardNumberVerification.placeholder,\n                },\n                cvv: fields.cardCodeVerification && {\n                    container: `#${fields.cardCodeVerification.containerId}`,\n                    placeholder: fields.cardCodeVerification.placeholder,\n                },\n            },\n            isNil,\n        );\n    }\n\n    private mapStyleOptions(\n        options: BraintreeFormFieldStylesMap,\n    ): BraintreeHostedFieldsCreatorConfig['styles'] {\n        const mapStyles = (styles: BraintreeFormFieldStyles = {}) =>\n            omitBy(\n                {\n                    color: styles.color,\n                    'font-family': styles.fontFamily,\n                    'font-size': styles.fontSize,\n                    'font-weight': styles.fontWeight,\n                },\n                isNil,\n            ) as Dictionary<string>;\n\n        return {\n            input: mapStyles(options.default),\n            '.invalid': mapStyles(options.error),\n            ':focus': mapStyles(options.focus),\n        };\n    }\n\n    private mapFieldType(type: string): BraintreeFormFieldType {\n        switch (type) {\n            case 'number':\n                return this.type === BraintreeHostedFormType.StoredCardVerification\n                    ? BraintreeFormFieldType.CardNumberVerification\n                    : BraintreeFormFieldType.CardNumber;\n\n            case 'expirationDate':\n                return BraintreeFormFieldType.CardExpiry;\n\n            case 'cvv':\n                return this.type === BraintreeHostedFormType.StoredCardVerification\n                    ? BraintreeFormFieldType.CardCodeVerification\n                    : BraintreeFormFieldType.CardCode;\n\n            case 'cardholderName':\n                return BraintreeFormFieldType.CardName;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    private mapErrors(fields: BraintreeHostedFieldsState['fields']): BraintreeFormErrorsData {\n        const errors: BraintreeFormErrorsData = {};\n\n        if (fields) {\n            // eslint-disable-next-line no-restricted-syntax\n            for (const [key, value] of Object.entries(fields)) {\n                if (value && this.isValidParam(key)) {\n                    const { isValid, isEmpty, isPotentiallyValid } = value;\n\n                    errors[key] = {\n                        isValid,\n                        isEmpty,\n                        isPotentiallyValid,\n                    };\n                }\n            }\n        }\n\n        return errors;\n    }\n\n    private mapValidationErrors(\n        fields: BraintreeHostedFieldsState['fields'],\n    ): BraintreeFormFieldValidateEventData['errors'] {\n        return (Object.keys(fields) as Array<keyof BraintreeHostedFieldsState['fields']>).reduce(\n            (result, fieldKey) => ({\n                ...result,\n                [this.mapFieldType(fieldKey)]: fields[fieldKey]?.isValid\n                    ? undefined\n                    : [this.createInvalidError(this.mapFieldType(fieldKey))],\n            }),\n            {},\n        );\n    }\n\n    private mapTokenizeError(\n        error: BraintreeHostedFormError,\n        isStoredCard = false,\n    ): BraintreeFormFieldValidateEventData['errors'] | undefined {\n        if (error.code === 'HOSTED_FIELDS_FIELDS_EMPTY') {\n            const cvv = [this.createRequiredError(this.mapFieldType('cvv'))];\n\n            if (isStoredCard) {\n                return { [this.mapFieldType('cvv')]: cvv };\n            }\n\n            return {\n                [this.mapFieldType('cvv')]: cvv,\n                [this.mapFieldType('expirationDate')]: [\n                    this.createRequiredError(this.mapFieldType('expirationDate')),\n                ],\n                [this.mapFieldType('number')]: [\n                    this.createRequiredError(this.mapFieldType('number')),\n                ],\n                [this.mapFieldType('cardholderName')]: [\n                    this.createRequiredError(this.mapFieldType('cardholderName')),\n                ],\n            };\n        }\n\n        return error.details?.invalidFieldKeys?.reduce((result, key) => {\n            const type = this.mapFieldType(key);\n\n            return {\n                ...result,\n                [type]: [this.createInvalidError(type)],\n            };\n        }, {});\n    }\n\n    private createRequiredError(\n        fieldType: BraintreeFormFieldType,\n    ): BraintreeFormFieldValidateErrorData {\n        const messages = {\n            [BraintreeFormFieldType.CardCode]: 'CVV is required',\n            [BraintreeFormFieldType.CardCodeVerification]: 'CVV is required',\n            [BraintreeFormFieldType.CardNumber]: 'Credit card number is required',\n            [BraintreeFormFieldType.CardNumberVerification]: 'Credit card number is required',\n            [BraintreeFormFieldType.CardExpiry]: 'Expiration date is required',\n            [BraintreeFormFieldType.CardName]: 'Full name is required',\n        };\n\n        return {\n            fieldType,\n            message: messages[fieldType] ?? 'Field is required',\n            type: 'required',\n        };\n    }\n\n    private createInvalidError(\n        fieldType: BraintreeFormFieldType,\n    ): BraintreeFormFieldValidateErrorData {\n        const formFields = {\n            [BraintreeFormFieldType.CardCode]: {\n                message: 'Invalid card code',\n                type: 'invalid_card_code',\n            },\n            [BraintreeFormFieldType.CardCodeVerification]: {\n                message: 'Invalid card code',\n                type: 'invalid_card_code',\n            },\n            [BraintreeFormFieldType.CardNumber]: {\n                message: 'Invalid card number',\n                type: 'invalid_card_number',\n            },\n            [BraintreeFormFieldType.CardNumberVerification]: {\n                message: 'Invalid card number',\n                type: 'invalid_card_number',\n            },\n            [BraintreeFormFieldType.CardExpiry]: {\n                message: 'Invalid card expiry',\n                type: 'invalid_card_expiry',\n            },\n            [BraintreeFormFieldType.CardName]: {\n                message: 'Invalid card name',\n                type: 'invalid_card_name',\n            },\n        };\n\n        return {\n            fieldType,\n            message: formFields[fieldType]?.message ?? 'Invalid field',\n            type: formFields[fieldType]?.type ?? 'invalid',\n        };\n    }\n\n    private handleBlur = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onBlur?.({\n            fieldType: this.mapFieldType(event.emittedBy),\n            errors: this.mapErrors(event.fields),\n        });\n    };\n\n    private handleFocus = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onFocus?.({\n            fieldType: this.mapFieldType(event.emittedBy),\n        });\n    };\n\n    private handleCardTypeChange = (event: BraintreeHostedFieldsState): void => {\n        const cardType =\n            event.cards.length === 1\n                ? event.cards[0].type.replace(/^master-card$/, 'mastercard')\n                : undefined;\n\n        this.formOptions?.onCardTypeChange?.({ cardType });\n    };\n\n    private handleInputSubmitRequest = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onEnter?.({\n            fieldType: this.mapFieldType(event.emittedBy),\n        });\n    };\n\n    private handleValidityChange = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onValidate?.({\n            isValid: this.isValidForm(event),\n            errors: this.mapValidationErrors(event.fields),\n        });\n    };\n\n    private isValidForm(event: BraintreeHostedFieldsState): boolean {\n        return (\n            Object.keys(event.fields) as Array<keyof BraintreeHostedFieldsState['fields']>\n        ).every((key) => event.fields[key]?.isValid);\n    }\n\n    private isValidParam(key: string): key is BraintreeFormErrorDataKeys {\n        return [\n            'number',\n            'cvv',\n            'expirationDate',\n            'postalCode',\n            'cardholderName',\n            'cardType',\n        ].includes(key);\n    }\n}\n","import { BraintreeSupportedCardBrands } from '../types';\n\nexport const isBraintreeSupportedCardBrand = (\n    cardBrand: string,\n): cardBrand is BraintreeSupportedCardBrands => {\n    const supportedCardBrands = Object.values(BraintreeSupportedCardBrands);\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return supportedCardBrands.includes(cardBrand as BraintreeSupportedCardBrands);\n};\n\nexport default isBraintreeSupportedCardBrand;\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeCreditCardPaymentStrategy from './braintree-credit-card-payment-strategy';\nimport BraintreeHostedForm from '../braintree-hosted-form/braintree-hosted-form';\n\nconst createBraintreeCreditCardPaymentStrategy: PaymentStrategyFactory<\n    BraintreeCreditCardPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        braintreeScriptLoader,\n        braintreeHostWindow,\n    );\n\n    const braintreeHostedForm = new BraintreeHostedForm(\n        braintreeScriptLoader,\n        braintreeSDKVersionManager,\n    );\n\n    return new BraintreeCreditCardPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        braintreeHostedForm,\n    );\n};\n\nexport default toResolvableModule(createBraintreeCreditCardPaymentStrategy, [{ id: 'braintree' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCustomerInitializeOptions, {\n    WithBraintreePaypalCustomerInitializeOptions,\n} from './braintree-paypal-customer-initialize-options';\n\nexport default class BraintreePaypalCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreePaypalCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, methodId } = options;\n        const { container, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal.container\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<BraintreeInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n            if (!paymentMethod.clientToken) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n            }\n        } catch (_e) {\n            state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        const { clientToken, config, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n            commit: false,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                methodId,\n                Boolean(config.testMode),\n                checkoutTopButtonStyles,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, container, onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n        buttonStyles: PaypalStyleOptions,\n    ): void {\n        const { container, onClick = noop } = braintreepaypal;\n\n        const { paypal } = this.braintreeHostWindow;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const paypalButtonRender = paypal.Buttons({\n                env: this.braintreeIntegrationService.getBraintreeEnv(testMode),\n                fundingSource,\n                style: { ...buttonStyles, height: DefaultCheckoutButtonHeight },\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        braintreepaypal,\n                    ),\n                onClick,\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${container}`);\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(container);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        try {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            const state = this.paymentIntegrationService.getState();\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.getCartOrThrow().currency.code;\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","const DefaultCheckoutButtonHeight = 36;\n\nexport default DefaultCheckoutButtonHeight;\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCustomerStrategy from './braintree-paypal-customer-strategy';\n\nconst createBraintreePaypalCustomerStrategy: CustomerStrategyFactory<\n    BraintreePaypalCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCustomerStrategy, [\n    { id: 'braintreepaypal' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditCustomerInitializeOptions, {\n    WithBraintreePaypalCreditCustomerInitializeOptions,\n} from './braintree-paypal-credit-customer-initialize-options';\n\nexport default class BraintreePaypalCreditCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, methodId } = options;\n        const { container, onError } = braintreepaypalcredit || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit.container\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<BraintreeInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        const { clientToken, config, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n            commit: false,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                methodId,\n                Boolean(config.testMode),\n                { ...checkoutTopButtonStyles, height: DefaultCheckoutButtonHeight },\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, container, onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n        buttonStyles: PaypalStyleOptions,\n    ): void {\n        const { container, onClick = noop } = braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyles,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                braintreepaypalcredit,\n                            ),\n                        onClick,\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${container}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(container);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        try {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            const state = this.paymentIntegrationService.getState();\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.getCartOrThrow().currency.code;\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypalcredit;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypalcredit;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditCustomerStrategy from './braintree-paypal-credit-customer-strategy';\n\nconst createBraintreePaypalCreditCustomerStrategy: CustomerStrategyFactory<\n    BraintreePaypalCreditCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalCreditCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditCustomerStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","import {\n    BraintreeInitializationData,\n    getFastlaneStyles,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeFastlaneCustomerInitializeOptions } from './braintree-fastlane-customer-initialize-options';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nexport default class BraintreeFastlaneCustomerStrategy implements CustomerStrategy {\n    private isAcceleratedCheckoutEnabled = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeFastlaneUtils: BraintreeFastlaneUtils,\n    ) {}\n\n    async initialize({\n        methodId,\n        braintreefastlane,\n    }: CustomerInitializeOptions & WithBraintreeFastlaneCustomerInitializeOptions): Promise<void> {\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const paymentMethod = await this.getValidPaymentMethodOrThrow(methodId);\n\n        const { isAcceleratedCheckoutEnabled, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        const paypalFastlaneStylesSettings = isFastlaneStylingEnabled\n            ? paymentMethod.initializationData?.fastlaneStyles\n            : undefined;\n\n        this.isAcceleratedCheckoutEnabled = !!isAcceleratedCheckoutEnabled;\n\n        try {\n            if (this.isAcceleratedCheckoutEnabled) {\n                const fastlaneStyles = getFastlaneStyles(\n                    paypalFastlaneStylesSettings,\n                    braintreefastlane?.styles,\n                );\n\n                await this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(\n                    paymentMethod.id,\n                    fastlaneStyles,\n                );\n            }\n        } catch (_) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback } = options || {};\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (this.isAcceleratedCheckoutEnabled && customer.isGuest) {\n            const shouldRunAuthenticationFlow = await this.shouldRunAuthenticationFlow();\n\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            if (shouldRunAuthenticationFlow) {\n                await this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow(\n                    undefined,\n                    true,\n                );\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    // TODO: remove this method after A/B testing finished\n    private async shouldRunAuthenticationFlow(): Promise<boolean> {\n        const primaryMethodId = 'braintreeacceleratedcheckout';\n\n        try {\n            // Info: we should load payment method each time to detect if the user\n            // should be in a test or in a control group\n            await this.paymentIntegrationService.loadPaymentMethod(primaryMethodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(primaryMethodId);\n\n            // Info: shouldRunAcceleratedCheckout is responsible for the flow of A/B testing purposes\n            // when shouldRunAcceleratedCheckout is true, the lookup PayPal Connect method should be called,\n            // otherwise AcceleratedCheckout should not be available for the customer\n            return paymentMethod.initializationData?.shouldRunAcceleratedCheckout || false;\n        } catch (_) {\n            return false;\n        }\n    }\n\n    private async getValidPaymentMethodOrThrow(\n        methodId: string,\n    ): Promise<PaymentMethod<BraintreeInitializationData>> {\n        let validPaymentMethodId = methodId;\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        } catch {\n            validPaymentMethodId =\n                methodId === 'braintree' ? 'braintreeacceleratedcheckout' : 'braintree';\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        }\n\n        return this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<BraintreeInitializationData>(validPaymentMethodId);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeFastlaneCustomerStrategy from './braintree-fastlane-customer-strategy';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nconst createBraintreeFastlaneCustomerStrategy: CustomerStrategyFactory<\n    BraintreeFastlaneCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n    const braintreeFastlaneUtils = new BraintreeFastlaneUtils(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n\n    return new BraintreeFastlaneCustomerStrategy(paymentIntegrationService, braintreeFastlaneUtils);\n};\n\n// Info: braintree method id was added only for A/B testing purposes.\n// The main reason why we can't go in other way, because braintreeacceleratedcheckout\n// may be turned on only when BE knows customer's email address (to understand should we show the feature for the user or not).\n// So { id: 'braintree' }, should be removed after A/B testing\nexport default toResolvableModule(createBraintreeFastlaneCustomerStrategy, [\n    { id: 'braintreeacceleratedcheckout' },\n    { id: 'braintree' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeVisaCheckoutCustomerInitializeOptions } from './braintree-visa-customer-initialize-options';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private buttonClassName = 'visa-checkout-wrapper';\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreeVisaCheckoutCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const checkout = state.getCheckoutOrThrow();\n\n        const { clientToken, config } = state.getPaymentMethodOrThrow(methodId);\n\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const { container, onError } = visaCheckoutOptions;\n\n        this.onError = onError || noop;\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: storeConfig.currency.code,\n                subtotal: String(checkout.subtotal),\n            },\n            settings: {\n                locale: storeConfig.storeProfile.storeLanguage,\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        const signInButton = this.createSignInButton(container, this.buttonClassName);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on(\n            'payment.success',\n            (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                this.tokenizePayment(braintreeVisaCheckout, paymentSuccessPayload)\n                    .then(() => this.paymentIntegrationService.loadCheckout())\n                    .catch((error) => this.handleError(error)),\n        );\n\n        visaCheckoutInstance.on('payment.error', (_, error) => this.handleError(error));\n\n        signInButton.style.visibility = 'visible';\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.',\n        );\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private async tokenizePayment(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.mapToVisaCheckoutAddress(shipping),\n                billingAddress = this.mapToVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private mapToVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Unable to proceed because the provided container ID is not valid.');\n        }\n\n        return this.insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.style.width = 'max-content';\n\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n\n    private handleError(error: Error) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutCustomerStrategy from './braintree-visa-checkout-customer-strategy';\n\nconst createBraintreeVisaCheckoutCustomerStrategy: CustomerStrategyFactory<\n    BraintreeVisaCheckoutCustomerStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutCustomerStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalStyleOptions } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function getValidButtonStyle(style?: PaypalStyleOptions): PaypalStyleOptions {\n    const { color, fundingicons, height = 40, layout, shape, size, tagline } = style || {};\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height: number | string): number {\n    const minHeight = 25;\n    const defaultHeight = 40;\n    const maxHeight = 55;\n\n    const currentHeight = Number(height);\n\n    if (!currentHeight || Number.isNaN(currentHeight)) {\n        return defaultHeight;\n    }\n\n    if (currentHeight > maxHeight) {\n        return maxHeight;\n    }\n\n    if (currentHeight < minHeight) {\n        return minHeight;\n    }\n\n    return currentHeight;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalButtonInitializeOptions, {\n    WithBraintreePaypalButtonInitializeOptions,\n} from './braintree-paypal-button-initialize-options';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypal.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypal;\n        const { paypal } = this.braintreeHostWindow;\n\n        if (paypal) {\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                fundingSource: paypal.FUNDING.PAYPAL,\n                style: getValidButtonStyle(style),\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                onEligibilityFailure();\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypal;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount;\n            const currencyCode = buyNowCart\n                ? braintreepaypal.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalButtonStrategy from './braintree-paypal-button-strategy';\n\nconst createBraintreePaypalButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalButtonStrategy, [{ id: 'braintreepaypal' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    MessagingPlacements,\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalCreditButtonInitializeOptions, {\n    WithBraintreePaypalCreditButtonInitializeOptions,\n} from './braintree-paypal-credit-button-initialize-options';\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeMessages: BraintreeMessages,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk will be rolled out to 100%\n        const features = state.getStoreConfig()?.checkoutSettings.features ?? {};\n        const isBannerImplementationDisabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk',\n        );\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (!isBannerImplementationDisabled && braintreepaypalcredit.messagingContainerId) {\n                this.renderPayPalMessages(methodId, braintreepaypalcredit.messagingContainerId);\n            }\n\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalMessages(methodId: string, messagingContainerId: string): void {\n        this.braintreeMessages.render(methodId, messagingContainerId, MessagingPlacements.CART);\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? {\n                              label: PaypalButtonStyleLabelOption.CREDIT,\n                              ...getValidButtonStyle(style),\n                          }\n                        : getValidButtonStyle(style);\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    } else if (\n                        paypal.FUNDING.CREDIT &&\n                        onEligibilityFailure &&\n                        typeof onEligibilityFailure === 'function'\n                    ) {\n                        // the condition is related to paypal.FUNDING.CREDIT because when paypal.FUNDING.PAYLATER is not eligible then\n                        // CREDIT button should be configured and triggered to render with eligibility check\n                        // and if it is not eligible, then onEligibilityFailure callback should be called\n                        onEligibilityFailure();\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount; // state.getCheckoutOrThrow().outstandingBalance\n            const currencyCode = buyNowCart\n                ? braintreepaypalcredit.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditButtonStrategy from './braintree-paypal-credit-button-strategy';\n\nconst createBraintreePaypalCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalCreditButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n    const braintreeMessages = new BraintreeMessages(paymentIntegrationService);\n\n    return new BraintreePaypalCreditButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeMessages,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditButtonStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeVisaCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const { clientToken, initializationData, config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const {\n            currency: { code },\n            cartAmount,\n        } = state.getCartOrThrow();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: code,\n                subtotal: String(cartAmount),\n            },\n            settings: {\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        this.createSignInButton(containerId);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on('payment.success', async (payment) => {\n            await this.paymentSuccess(braintreeVisaCheckout, payment);\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private async paymentSuccess(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.toVisaCheckoutAddress(shipping),\n                billingAddress = this.toVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return this.insertVisaCheckoutButton(container);\n    }\n\n    private insertVisaCheckoutButton(container: Element): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.alignItems = 'flex-end';\n\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutButtonStrategy from './braintree-visa-checkout-button-strategy';\n\nconst createBraintreeVisaCheckoutButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVisaCheckoutButtonStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutButtonStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeSdk,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    mapToLegacyBillingAddress,\n    mapToLegacyShippingAddress,\n    PaypalButtonStyleColorOption,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isBraintreeError from '../is-braintree-error';\nimport { isUnsupportedBrowserError } from '../isUnsupportedBrowserError';\n\nimport { WithBraintreeVenmoInitializeOptions } from './braintree-venmo-initialize-options';\n\nconst getVenmoButtonStyle = (styles: PaypalStyleOptions): Record<string, string> => {\n    const { color, height } = styles;\n\n    const colorParser = (c: string) => {\n        if (c === PaypalButtonStyleColorOption.WHITE) {\n            return '#FFFFFF';\n        }\n\n        return '#3D95CE';\n    };\n\n    return {\n        backgroundColor: colorParser(color || ''),\n        backgroundPosition: '50% 50%',\n        backgroundSize: '80px auto',\n        backgroundImage: `url(\"/app/assets/img/payment-providers/venmo-logo-${\n            color === PaypalButtonStyleColorOption.WHITE\n                ? PaypalButtonStyleColorOption.BLUE\n                : PaypalButtonStyleColorOption.WHITE\n        }.svg\")`,\n        backgroundRepeat: 'no-repeat',\n        borderRadius: '4px',\n        cursor: 'pointer',\n        transition: '0.2s ease',\n        minHeight: `${height || 40}px`,\n        minWidth: '150px',\n        height: '100%',\n        width: '100%',\n        border: color === PaypalButtonStyleColorOption.WHITE ? '1px solid black' : 'none',\n    };\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreeVenmoInitializeOptions,\n    ): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { clientToken, initializationData }: PaymentMethod = paymentMethod;\n        const { paymentButtonStyles } = initializationData;\n        const { cartButtonStyles } = paymentButtonStyles || {};\n        const styles = braintreevenmo?.style || cartButtonStyles;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadDefaultCheckout();\n\n        this.onError = braintreevenmo?.onError || this.handleError;\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            const braintreeVenmoCheckout = await this.braintreeSdk.getVenmoCheckoutOrThrow();\n\n            this.renderVenmoButton(\n                braintreeVenmoCheckout,\n                containerId,\n                braintreevenmo?.buyNowInitializeOptions,\n                styles,\n            );\n        } catch (error) {\n            if (isBraintreeError(error) || isUnsupportedBrowserError(error)) {\n                this.handleInitializationVenmoError(error, containerId);\n            }\n        }\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private async createBuyNowCart(\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): Promise<Cart | undefined> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions?.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n\n        return undefined;\n    }\n\n    private handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this.removeVenmoContainer(containerId);\n\n        return this.onError(error);\n    }\n\n    private removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n        buttonStyles?: PaypalStyleOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n        const { color } = buttonStyles || {};\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, getVenmoButtonStyle(buttonStyles || {}));\n\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this.createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (\n                        error: BraintreeError | undefined,\n                        payload: BraintreeTokenizePayload,\n                    ) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            this.onError(error);\n                        }\n\n                        await this.handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        if (color === PaypalButtonStyleColorOption.BLUE) {\n            venmoButton.addEventListener('mouseenter', () => {\n                venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n            });\n\n            venmoButton.addEventListener('mouseleave', () => {\n                venmoButton.style.backgroundColor = getVenmoButtonStyle(\n                    buttonStyles || {},\n                ).backgroundColor;\n            });\n        }\n    }\n\n    private async handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { nonce, details } = payload;\n\n        this.formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: 'braintreevenmo',\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import { UnsupportedBrowserError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport function isUnsupportedBrowserError(error: unknown): error is UnsupportedBrowserError {\n    return error instanceof UnsupportedBrowserError;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVenmoButtonStrategy from './braintree-venmo-button-strategy';\n\nconst createBraintreeVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVenmoButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const scriptLoader = getScriptLoader();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        scriptLoader,\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeVenmoButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVenmoButtonStrategy, [{ id: 'braintreevenmo' }]);\n"],"names":["BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","PaymentMethodClientUnavailableError","BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BRAINTREE_SDK_SCRIPTS_INTEGRITY","Client","PaypalCheckout","Paypal","LocalPayment","DataCollector","UsBankAccount","GooglePayment","ThreeDSecure","VisaCheckout","Venmo","HostedFields","Fastlane","NotInitializedErrorType","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","BraintreeScriptLoader","scriptLoader","braintreeHostWindow","braintreeSDKVersionManager","loadClient","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadLocalPayment","loadDataCollector","loadUsBankAccount","loadGooglePayment","load3DS","loadVisaCheckout","loadVenmoCheckout","loadHostedFields","loadVisaCheckoutSdk","testMode","V","hash","loadScript","async","attributes","integrity","crossorigin","then","braintreeModuleName","fileName","module","getBraintreeModule","braintreeSdkVersion","getSDKVersion","scriptPath","getIntegrityValuesByModuleName","undefined","braintree","moduleName","version","UnsupportedBrowserError","NotInitializedError","subtype","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","getErrorMessage","isBraintreeError","error","Boolean","BraintreeSdk","braintreeScriptLoader","initialize","clientToken","setClientToken","deinitialize","teardownModule","dataCollector","getClient","client","getClientTokenOrThrow","clientCreator","create","authorization","getDataCollectorOrThrow","options","emptyDataCollector","deviceData","teardown","Promise","resolve","dataCollectorConfig","kount","code","KountNotEnabled","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","all","getBraintreeThreeDS","threeDS","threeDSecure","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","reject","getUsBankAccount","usBankAccount","getBraintreeVisaCheckout","visaCheckout","paypal","getVisaCheckoutSdk","visaCheckoutSDK","getVenmoCheckoutOrThrow","braintreeVenmo","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","isExperimentEnabled","features","experimentName","fallbackValue","BraintreeSDKVersionManager","paymentIntegrationService","braintreeWindow","window","storeConfig","getState","getStoreConfig","checkoutSettings","getPreloadedSDKVersion","preloadedVersion","find","values","VERSION","toResolvableModule","resolveIds","assign","InvalidArgumentError","MissingDataErrorType","MissingDataError","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","PaymentArgumentInvalidError","invalidFields","join","isVaultedInstrument","instrument","instrumentId","OrderFinalizationNotRequiredError","isHostedInstrumentLike","shouldSaveInstrument","shouldSetAsDefaultInstrument","PaymentMethodFailedError","isUsBankAccountInstrumentLike","BraintreeAchPaymentStrategy","braintreeSdk","methodId","braintreeach","getMandateText","loadPaymentMethod","paymentMethod","getPaymentMethodOrThrow","initializationData","handleBraintreeError","execute","orderRequest","payment","order","isSubmittingWithVaultingInstrument","paymentData","nonce","tokenizePaymentForVaultedInstrument","tokenizePayment","submitPaymentPayload","preparePaymentDataForVaultedInstrument","preparePaymentData","submitOrder","submitPayment","finalize","getUsBankAccountOrThrow","mandateText","tokenize","bankDetails","getBankDetails","state","config","isVaultingEnabled","routingNumber","accountNumber","deviceSessionId","formattedPayload","tokenized_bank_account","issuer","masked_account_number","substr","token","billingAddress","getBillingAddressOrThrow","ownershipType","toLowerCase","accountType","firstName","lastName","businessName","streetAddress","address1","extendedAddress","address2","locality","city","region","stateOrProvinceCode","postalCode","getScriptLoader","id","PaymentInvalidFormError","details","PaymentMethodCancelledError","CancellablePromise","promise","cancellable","_","cancel","race","PAYPAL_COMPONENTS","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","MessagingPlacements","BraintreeIntegrationService","overlay","dataCollectors","threeDSecureOptions","getBraintreeFastlane","cardId","isTestModeEnabled","styles","localStorage","setItem","braintreeFastlane","getSessionId","braintreeFastlaneCreator","defaultStyles","root","backgroundColorPrimary","getPaypal","braintreePaypal","newWindowFlow","supportsPopups","show","onClick","focusWindow","enableShippingAddress","flow","useraction","response","remove","catch","getPaypalCheckout","onSuccess","onError","paypalCheckout","paypalCheckoutConfig","braintreePaypalCheckout","paypalSdkLoadConfig","currency","isCreditEnabled","components","toString","intent","commit","loadPayPalSDK","getDataCollector","cacheKey","cached","getBraintreeEnv","isTestMode","Sandbox","Production","mapToBraintreeShippingAddressOverride","address","recipientName","line1","line2","countryCode","phone","mapToLegacyShippingAddress","email","shippingAddress","split","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","mapToLegacyBillingAddress","removeElement","elementId","element","document","getElementById","cartId","riskCorrelationId","default","get3DS","getVenmoCheckout","venmoConfig","verifyCard","amount","tokenizationPayload","tokenizeCard","challenge3DSVerification","creditCardInstrument","ccExpiry","ccNumber","ccName","isCreditCardInstrumentLike","errors","getErrorsRequiredFields","isEmpty","requestData","mapToCreditCard","creditCards","request","bin","present3DSChallenge","creditCard","data","cardholderName","number","cvv","ccCvv","expirationDate","month","year","validate","countryCodeAlpha2","countryName","country","endpoint","method","addFrame","removeFrame","challengeRequested","additionalInformation","cancelVerifyCard","verification","roundedAmount","toFixed","iframe","Number","onLookupComplete","_data","next","collectDeviceData","BraintreeMessages","render","containerId","placement","messagingContainer","cart","getCartOrThrow","paypalBNPLConfiguration","bannedId","PAYMENT","bannerConfiguration","status","CART","removeAttribute","Messages","cartAmount","buyerCountry","style","getPaypalMessagesStylesFromBNPLConfig","messagesStyles","color","layout","logo","position","ratio","text","size","Overlay","closeElement","mainElement","_createElements","_element","_closeElement","_mainElement","parentElement","_registerClick","body","appendChild","setTimeout","opacity","_unregisterClick","_removeAfterTransition","createElement","background","transitionDuration","hasCloseButton","innerHtml","classLayout","classClose","classOverlayText","overlayText","className","addClassLayout","innerText","getOverlayStyle","_addEventListener","addEventListener","_removeEventListener","removeEventListener","onClickClose","handleTransition","event","propertyName","DEFAULT_STYLES","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","containerStyles","defineAnimation","container","buildContainer","indicator","buildIndicator","parentId","parent","visibility","hide","handleTransitionEnd","display","bottom","left","height","width","right","top","transition","setStyleAttribute","borderRadius","border","borderColor","margin","transform","transformStyle","animation","attrs","keys","forEach","k","setProperty","head","sheet","CSSStyleSheet","insertRule","LOADING_INDICATOR_STYLES","BraintreePaypalPaymentStrategy","braintreeIntegrationService","braintreeMessages","loadingIndicator","braintreeOptions","bannerContainerId","loadPaypalCheckoutInstance","getStoreConfigOrThrow","shouldHandleInstrumentDeclinedError","useStoreCredit","isProviderError","paypalButtonRender","close","_resolve","handleError","braintreeTokenizePayload","grandTotal","getOutstandingBalance","storeProfile","storeLanguage","getPaymentMethod","hasOwnProperty","call","getShippingAddress","shippingAddressOverride","locale","offerCredit","shippingAddressEditable","sessionId","vaultPaymentInstrument","vault_payment_instrument","set_as_default_stored_instrument","device_info","paypal_account","paymentMethodId","shouldShowPayPalCreditBanner","renderPayPalMessages","renderPayPalButton","onPaymentError","submitForm","onRenderButton","loadingIndicatorContainer","fundingSource","FUNDING","PAYPAL","Buttons","env","toggleLoadingIndicator","createOrder","setupPayment","onApprove","authorizeData","tokenizePaymentOrThrow","onCancel","isEligible","customer","getCustomer","getCheckoutOrThrow","outstandingBalance","currencyCode","addresses","createPayment","isBraintreePaypalProviderError","filter","e","provider_error","isLoading","ContentType","SDK_VERSION_HEADERS","BraintreeRequestSender","requestSender","getOrderStatus","url","headers","Json","get","DEFAULT_RESPONSE","RequestError","PaymentMethodInvalidError","TimeoutError","BraintreeLocalMethodsPaymentStrategy","braintreeRequestSender","pollingInterval","maxPollingIntervalTime","isLPMsUpdateExperimentEnabled","pollingTimer","stopPolling","noop","isPollingEnabled","gatewayId","braintreelocalmethods","merchantId","isNonInstantPaymentMethod","payload","executeWithNotInstantLPM","executeWithInstantLPM","basicPaymentData","getLPMsBasicPaymentData","isBraintreeRedirectError","redirectUrl","additional_action_required","redirect_url","location","replace","startPayment","getInstantLPMConfig","getInstantLPMCallback","billing","lineItems","isShippingRequired","physicalItems","length","checkoutUrl","links","checkoutLink","paymentType","fallback","buttonText","shippingAddressRequired","givenName","surname","onPaymentStart","start","orderId","paymentId","order_id","isBraintreeOrderSavedResponse","order_id_saved_successfully","initializePollingMechanism","startPaymentError","payloadData","resetPollingMechanism","toUpperCase","resolvePromise","rejectPromise","timeout","clearTimeout","orderStatus","params","useMetadata","isOrderPending","Pending","isOrderApproved","Completed","isPollingError","Failed","deinitializePollingMechanism","reinitializeStrategy","createRequestSender","gateway","isInvalidStyleOption","styleOption","getFastlaneStyles","styleSettings","uiStyles","fastlaneStyles","omitBy","input","toggle","textBody","textCaption","caption","branding","cleanUpFastlaneStyles","fastlaneRootSettingsBackgroundColor","errorColor","fastlaneRootSettingsErrorColor","fontFamily","fastlaneRootSettingsFontFamily","fontSizeBase","fastlaneRootSettingsFontSize","padding","fastlaneRootSettingsPadding","primaryColor","fastlaneRootSettingsPrimaryColor","fastlaneInputSettingsBorderRadius","fastlaneInputSettingsBorderColor","focusBorderColor","fastlaneInputSettingsFocusBorderBase","fastlaneInputSettingsBackgroundColor","borderWidth","fastlaneInputSettingsBorderWidth","textColorBase","fastlaneInputSettingsTextColorBase","colorPrimary","fastlaneToggleSettingsColorPrimary","colorSecondary","fastlaneToggleSettingsColorSecondary","fastlaneTextBodySettingsColor","fontSize","fastlaneTextBodySettingsFontSize","fastlaneTextCaptionSettingsColor","fastlaneTextCaptionSettingsFontSize","fastlaneBrandingSettings","mergeFastlaneStyles","isBraintreeAcceleratedCheckoutCustomer","UntrustedShippingCardVerificationType","BraintreeFastlanePaymentStrategy","braintreeFastlaneUtils","braintreefastlane","onInit","onChange","isFastlaneStylingEnabled","isThreeDSExperimentEnabled","is3DSEnabled","is3dsEnabled","initializeBraintreeFastlaneOrThrow","shouldRunAuthenticationFlow","runPayPalAuthenticationFlowOrThrow","initializeCardComponent","renderBraintreeCardComponent","handleBraintreeStoredInstrumentChange","paymentPayload","preparePaymentPayload","removeSessionIdFromCookies","braintreeCardComponent","fullName","cardComponentOptions","fields","prefill","enabled","phoneNumber","paypalPaymentComponent","getBraintreeFastlaneComponentOrThrow","getBraintreeCardComponentOrThrow","paypalInstrument","getPayPalInstruments","getDeviceSessionId","threeDSToken","bigpayToken","iin","paypal_fastlane_token","getPaymentToken","paymentToken","mapToPayPalAddress","binGuest","paymentSource","card","binDetails","getOrderOrThrow","orderAmount","on","verifyError","stateOrProvince","getCustomerOrThrow","paymentProviderCustomer","getPaymentProviderCustomer","braintreePaymentProviderCustomer","paypalFastlaneSessionId","getSessionIdFromCookies","isGuest","authenticationState","CANCELED","getPaymentProviderCustomerOrThrow","instruments","paypalAxoSdk","getBraintreeFastlaneOrThrow","selectionChanged","selectedCard","profile","showCardSelector","braintreeFastlaneCustomer","selectedInstruments","mapPayPalToBcInstrument","updatePaymentProviderCustomer","CookieStorage","cookieKey","encodeURIComponent","cookie","value","firstIndex","indexOf","lastIndex","decodeURIComponent","substring","set","secure","cookieText","expires","path","domain","toUTCString","now","Date","minutes","setTime","getTime","BraintreeFastlaneUtils","getCart","FastlaneCardComponent","shouldSetShippingOption","getMethodIdOrThrow","lookupCustomerByEmail","triggerAuthenticationFlow","identity","getBillingAddress","isFastlaneShippingOptionAutoSelectEnabled","customerEmail","customerContextId","UNRECOGNIZED","saveSessionIdToCookies","profileData","shippingAddresses","mapPayPalToBcAddress","paypalBillingAddress","getPayPalBillingAddresses","billingAddresses","mergeShippingAndBillingAddresses","updateBillingAddress","digitalItems","digitalItemBilling","updateShippingAddress","setShippingOption","setDate","getDate","map","brand","expiry","lastDigits","expiryYear","expiryMonth","defaultInstrument","last4","provider","trustedShippingAddress","untrustedShippingCardVerificationMode","PAN","phones","countries","getCountries","getCountryNameByCountryCode","matchedCountry","company","customFields","given_name","isEqual","normalizeAddress","omit","filteredBillingAddresses","some","consignments","getConsignments","availableShippingOptions","recommendedShippingOption","option","isRecommended","selectedOption","selectShippingOption","BraintreeVenmoPaymentStrategy","venmoOptions","braintreevenmo","initializeBraintreeVenmo","isBraintreeVenmoWebFallbackSupport","mobileWebFallBack","tokenizeResult","braintreeVenmoTokenize","BraintreeCreditCardPaymentStrategy","braintreeHostedForm","isHostedPaymentFormEnabled","form","unsupportedCardBrands","isHostedFormInitialized","isInitialized","shouldInitializeBraintreeFastlane","prepareHostedPaymentData","processAdditionalAction","commonPaymentData","isSubmittingWithStoredCard","shouldPerform3DSVerification","tokenizeForStoredCardVerification","verifyCardWithHostedForm","payer_auth_request","storedCreditCardNonce","three_ds_result","isBraintreePaymentRequest3DSError","getCardInstrumentOrThrow","isHostedFormEnabled","braintreeCustomer","isAcceleratedCheckoutEnabled","isBraintreeFormFieldsMap","isBraintreeHostedFormError","invalidFieldKeys","Array","isArray","every","key","BraintreeHostedFormType","BraintreeHostedForm","isInitializedHostedForm","handleBlur","formOptions","onBlur","fieldType","mapFieldType","emittedBy","mapErrors","handleFocus","onFocus","handleCardTypeChange","cardType","cards","onCardTypeChange","handleInputSubmitRequest","onEnter","handleValidityChange","onValidate","isValid","isValidForm","mapValidationErrors","CreditCard","StoredCardVerification","mapFieldOptions","cardFields","createHostedFields","mapStyleOptions","mapBillingAddress","isNil","mapTokenizeError","hostedFields","hostedFieldsOptions","preventCursorJumps","supportedCardBrands","cardBrand","includes","cardNumber","placeholder","internalLabel","accessibilityLabel","cardExpiry","cardCode","cardName","cardNumberVerification","cardCodeVerification","mapStyles","fontWeight","focus","CardNumberVerification","CardNumber","CardExpiry","CardCodeVerification","CardCode","CardName","entries","isValidParam","isPotentiallyValid","reduce","result","fieldKey","createInvalidError","isStoredCard","createRequiredError","formFields","BraintreePaypalCustomerStrategy","formPoster","braintreepaypal","_e","paymentButtonStyles","checkoutTopButtonStyles","paypalCheckoutOptions","signIn","credentials","signInCustomer","signOut","signOutCustomer","executePaymentMethodCheckout","continueWithCheckoutCallback","buttonStyles","loadDefaultCheckout","tokenizePayload","postForm","payment_type","action","device_data","billing_address","JSON","stringify","shipping_address","buttonContainerId","onErrorCallback","createFormPoster","BraintreePaypalCreditCustomerStrategy","braintreepaypalcredit","hasRenderedSmartButton","PAYLATER","CREDIT","BraintreeFastlaneCustomerStrategy","getValidPaymentMethodOrThrow","paypalFastlaneStylesSettings","checkoutPaymentMethodExecuted","primaryMethodId","shouldRunAcceleratedCheckout","validPaymentMethodId","NotImplementedError","BraintreeVisaCheckoutCustomerStrategy","buttonClassName","braintreevisacheckout","visaCheckoutOptions","checkout","braintreeVisaCheckout","visaCheckoutInstance","initOptions","createInitOptions","paymentRequest","subtotal","String","settings","shipping","collectShipping","signInButton","createSignInButton","init","paymentSuccessPayload","loadCheckout","mapToVisaCheckoutAddress","userData","cardInformation","userEmail","card_information","lastTwo","getAddress","buttonClass","querySelector","insertVisaCheckoutButton","visaCheckoutButton","flexDirection","innerHTML","hostWindow","BuyNowCartCreationError","getValidButtonStyle","fundingicons","shape","tagline","validStyles","getValidHeight","currentHeight","isNaN","BraintreePaypalButtonStrategy","buyNowInitializeOptions","shouldProcessPayment","onAuthorizeError","onEligibilityFailure","buyNowCart","getBuyNowCartRequestBody","createBuyNowCart","buyNowCartId","cart_id","buyNowCardRequestBody","BraintreePaypalCreditButtonStrategy","isBannerImplementationDisabled","messagingContainerId","buttonStyle","label","BraintreeVisaCheckoutButtonStrategy","paymentSuccess","toVisaCheckoutAddress","alignItems","getVenmoButtonStyle","c","WHITE","backgroundPosition","backgroundSize","backgroundImage","BLUE","backgroundRepeat","cursor","minHeight","minWidth","BraintreeVenmoButtonStrategy","cartButtonStyles","renderVenmoButton","isUnsupportedBrowserError","handleInitializationVenmoError","cartRequestBody","removeVenmoContainer","buttonContainer","venmoButton","setAttribute","buyBowCart","handlePostForm"],"sourceRoot":""}