{"version":3,"file":"integrations/zip.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/storefront-payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/zip-integration/src/zip-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/zip-integration/src/create-zip-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class StorefrontPaymentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    async saveExternalId(methodId: string, token: string): Promise<void> {\n        const url = `/api/storefront/payment/${methodId}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                externalId: token,\n                provider: methodId,\n            },\n        };\n\n        await this._requestSender.post<void>(url, options);\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import {\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StorefrontPaymentRequestSender,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private storefrontPaymentRequestSender: StorefrontPaymentRequestSender,\n    ) {}\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const { getPaymentMethodOrThrow } = await this.paymentIntegrationService.loadPaymentMethod(\n            methodId,\n            options,\n        );\n\n        const {\n            clientToken,\n            initializationData,\n        }: { clientToken?: string; initializationData?: { redirectUrl?: string } } =\n            getPaymentMethodOrThrow(methodId);\n        const redirectUrl = initializationData?.redirectUrl;\n\n        if (!clientToken || !redirectUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { id: nonce } = JSON.parse(clientToken);\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        await this.paymentIntegrationService.initializePayment(methodId, { useStoreCredit });\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this._prepareForReferredRegistration(methodId, nonce);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce },\n            });\n        } catch (error) {\n            if (isRequestError(error) && error.body.status === 'additional_action_required') {\n                return new Promise(() => window.location.replace(redirectUrl));\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _prepareForReferredRegistration(methodId: string, externalId: string): Promise<void> {\n        return this.storefrontPaymentRequestSender.saveExternalId(methodId, externalId);\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    StorefrontPaymentRequestSender,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ZipPaymentStrategy from './zip-payment-strategy';\n\nconst createZipPaymentStrategy: PaymentStrategyFactory<ZipPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const requestSender = createRequestSender({ host: getHost() });\n    const storefrontPaymentRequestSender = new StorefrontPaymentRequestSender(requestSender);\n\n    return new ZipPaymentStrategy(paymentIntegrationService, storefrontPaymentRequestSender);\n};\n\nexport default toResolvableModule(createZipPaymentStrategy, [{ id: 'zip' }, { id: 'quadpay' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["ContentType","SDK_VERSION_HEADERS","MissingDataErrorType","StorefrontPaymentRequestSender","constructor","_requestSender","saveExternalId","methodId","token","url","options","headers","Accept","JsonV1","body","externalId","provider","this","post","StandardError","Error","message","prototype","super","name","type","Object","setPrototypeOf","__proto__","captureStackTrace","stack","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","OrderFinalizationNotRequiredError","ZipPaymentStrategy","paymentIntegrationService","storefrontPaymentRequestSender","initialize","Promise","resolve","execute","payload","payment","order","getPaymentMethodOrThrow","loadPaymentMethod","clientToken","initializationData","redirectUrl","id","nonce","JSON","parse","isStoreCreditApplied","useStoreCredit","getState","getCheckoutOrThrow","applyStoreCredit","initializePayment","submitOrder","_prepareForReferredRegistration","submitPayment","paymentData","error","status","window","location","replace","finalize","reject","deinitialize","module","getHost","requestSender","createRequestSender","host","resolveIds","assign"],"sourceRoot":""}