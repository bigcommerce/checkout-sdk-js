{"version":3,"file":"integrations/checkoutcom-custom.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-custom-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-sepa/checkoutcom-fawry-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-sepa/create-checkoutcom-fawry-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/isThreeDSecureRequiredError.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/create-checkoutcom-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-sepa/checkoutcom-sepa-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-sepa/create-checkoutcom-sepa-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-ideal/checkoutcom-ideal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-ideal/create-checkoutcom-ideal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-apm/checkoutcom-apm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-apm/create-checkoutcom-apm-payment-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface AdditionalActionRequired {\n    type: AdditionalActionType;\n    data: AdditionalRedirectData;\n}\n\nexport interface AdditionalRedirectData {\n    redirect_url: string;\n    transaction_id?: string;\n}\n\nexport enum AdditionalActionType {\n    OffsiteRedirect = 'offsite_redirect',\n}\n\nexport function getCheckoutcom(): PaymentMethod {\n    return {\n        id: 'checkoutcom',\n        logoUrl: '',\n        method: 'checkoutcom',\n        supportedCards: [],\n        config: {\n            displayName: 'Checkout.com',\n            merchantId: '',\n            testMode: true,\n        },\n        initializationData: {\n            checkoutcomkey: 'key',\n        },\n        type: 'PAYMENT_TYPE_API',\n        clientToken: 'clientToken',\n        skipRedirectConfirmationAlert: true,\n    };\n}\n\nexport interface WithDocumentInstrument {\n    ccDocument: string;\n}\n\nexport interface WithCheckoutcomSEPAInstrument {\n    iban: string;\n    bic: string;\n}\n\nexport interface WithCheckoutcomFawryInstrument {\n    customerMobile: string;\n    customerEmail: string;\n}\n","import { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, AdditionalActionType } from './checkoutcom';\n\nexport default class CheckoutComCustomPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(protected paymentIntegrationService: PaymentIntegrationService) {\n        super(paymentIntegrationService);\n    }\n    finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && state.getPaymentStatus() === PaymentStatusTypes.FINALIZE) {\n            this.paymentIntegrationService.finalizeOrder(options);\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        try {\n            await form.validate();\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await form.submit(payment);\n        } catch (error) {\n            return this._processResponse(error);\n        }\n\n        this.paymentIntegrationService.loadCurrentOrder();\n    }\n\n    protected _processResponse(error: unknown): Promise<void> {\n        if (!isRequestError(error)) {\n            return Promise.reject(error);\n        }\n\n        const additionalActionRequired: AdditionalActionRequired =\n            error.body.additional_action_required;\n\n        // TODO validate all possible responses and perform respective additional actions\n        if (\n            additionalActionRequired &&\n            additionalActionRequired.type === AdditionalActionType.OffsiteRedirect\n        ) {\n            return this._performRedirect(additionalActionRequired);\n        }\n\n        return Promise.reject(error);\n    }\n\n    private _performRedirect(additionalActionRequired: AdditionalActionRequired): Promise<void> {\n        return new Promise(() => {\n            window.location.replace(additionalActionRequired.data.redirect_url);\n        });\n    }\n}\n","import {\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCheckoutcomFawryInstrument } from '../checkoutcom';\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_FAWRY_PAYMENT_METHOD = 'fawry';\n\nexport default class CheckoutComFawryPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument,\n    ): WithCheckoutcomFawryInstrument | undefined {\n        if (\n            CHECKOUTCOM_FAWRY_PAYMENT_METHOD === methodId &&\n            'customerMobile' in paymentData &&\n            'customerEmail' in paymentData\n        ) {\n            const fawryPaymentData = paymentData as {\n                customerMobile: string;\n                customerEmail: string;\n            };\n\n            return {\n                customerMobile: fawryPaymentData.customerMobile,\n                customerEmail: fawryPaymentData.customerEmail,\n            };\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComFawryPaymentStrategy from './checkoutcom-fawry-payment-strategy';\n\nconst createCheckoutComFawryPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComFawryPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComFawryPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComFawryPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'fawry' },\n]);\n","import { some } from 'lodash';\n\nimport { isRequestError, RequestError } from './';\n\nexport default function isThreeDSecureRequiredError(error: unknown): error is RequestError {\n    return isRequestError(error) && some(error.body.errors, { code: 'three_d_secure_required' });\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    isThreeDSecureRequiredError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class CheckoutComCreditCardPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        protected formPoster: FormPoster,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && state.getPaymentStatus() === PaymentStatusTypes.FINALIZE) {\n            this.paymentIntegrationService.finalizeOrder(options);\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (isThreeDSecureRequiredError(error)) {\n                return this._handleThreeDSecure(error);\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        try {\n            await form.validate();\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await form.submit(payment);\n        } catch (error) {\n            if (isThreeDSecureRequiredError(error)) {\n                return this._handleThreeDSecure(error);\n            }\n\n            return Promise.reject(error);\n        }\n\n        this.paymentIntegrationService.loadCurrentOrder();\n    }\n\n    private _handleThreeDSecure(error: RequestError): Promise<void> {\n        const { acs_url, payer_auth_request, callback_url, merchant_data } =\n            error.body.three_ds_result;\n\n        return new Promise<void>(() =>\n            this.formPoster.postForm(acs_url, {\n                PaReq: payer_auth_request || null,\n                TermUrl: callback_url || null,\n                MD: merchant_data || null,\n            }),\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComCreditCardPaymentStrategy from './checkoutcom-credit-card-payment-strategy';\n\nconst createCheckoutComCreditCardPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComCreditCardPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComCreditCardPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createCheckoutComCreditCardPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'credit_card' },\n    { gateway: 'checkoutcom', id: 'card' },\n]);\n","import {\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCheckoutcomSEPAInstrument } from '../checkoutcom';\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_SEPA_PAYMENT_METHOD = 'sepa';\n\nexport default class CheckoutComSEPAPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument,\n    ): WithCheckoutcomSEPAInstrument {\n        const formattedPayload: WithCheckoutcomSEPAInstrument = { iban: '', bic: '' };\n        const { iban, bic } =\n            'iban' in paymentData && 'bic' in paymentData ? paymentData : formattedPayload;\n\n        if (methodId === CHECKOUTCOM_SEPA_PAYMENT_METHOD && document) {\n            formattedPayload.iban = iban;\n            formattedPayload.bic = bic;\n        }\n\n        return formattedPayload;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComSepaPaymentStrategy from './checkoutcom-sepa-payment-strategy';\n\nconst createCheckoutComSepaPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComSepaPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComSepaPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComSepaPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'sepa' },\n]);\n","import {\n    CreditCardInstrument,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n    WithIdealInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_IDEAL_PAYMENT_METHOD = 'ideal';\n\nexport default class CheckoutComiDealPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument | (CreditCardInstrument & WithIdealInstrument),\n    ): WithIdealInstrument | undefined {\n        if (CHECKOUTCOM_IDEAL_PAYMENT_METHOD === methodId && 'bic' in paymentData) {\n            return { bic: paymentData.bic };\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComiDealPaymentStrategy from './checkoutcom-ideal-payment-strategy';\n\nconst createCheckoutComiDealPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComiDealPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComiDealPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComiDealPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'ideal' },\n]);\n","import {\n    CreditCardInstrument,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithDocumentInstrument } from '../checkoutcom';\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst DOCUMENT_SUPPORTED_APMS = ['boleto', 'oxxo', 'qpay', 'ideal'];\n\nexport default class CheckoutComAPMPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument | (CreditCardInstrument & WithDocumentInstrument),\n    ): WithDocumentInstrument {\n        const formattedPayload: WithDocumentInstrument = { ccDocument: '' };\n        const ccDocument = 'ccDocument' in paymentData ? paymentData.ccDocument : '';\n\n        if (DOCUMENT_SUPPORTED_APMS.indexOf(methodId) !== -1 && ccDocument) {\n            formattedPayload.ccDocument = ccDocument;\n        }\n\n        return formattedPayload;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nimport CheckoutComAPMPaymentStrategy from './checkoutcom-apm-payment-strategy';\n\nconst createCheckoutComAPMPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComCustomPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComAPMPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComAPMPaymentStrategy, [\n    { gateway: 'checkoutcom' },\n]);\n"],"names":["NotInitializedErrorType","__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","OrderFinalizationNotRequiredError","NotInitializedError","subtype","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","getErrorMessage","PaymentStatusTypes","CreditCardPaymentStrategy","_paymentIntegrationService","execute","payload","options","_isHostedPaymentFormEnabled","payment","methodId","gatewayId","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","initialize","_isHostedFieldAvailable","Promise","resolve","formOptions","creditCard","form","state","getState","paymentSettings","bigpayBaseUrl","host","getStoreConfigOrThrow","createHostedForm","attach","then","_hostedForm","deinitialize","detach","finalize","reject","order","paymentData","submitOrder","submitPayment","validate","submit","getPaymentMethodOrThrow","config","isHostedFormEnabled","values","fields","every","isNil","error","AdditionalActionType","CheckoutComCustomPaymentStrategy","paymentIntegrationService","getOrder","getPaymentStatus","FINALIZE","finalizeOrder","_processResponse","loadCurrentOrder","additionalActionRequired","body","additional_action_required","OffsiteRedirect","_performRedirect","window","location","replace","data","redirect_url","CheckoutComFawryPaymentStrategy","formattedPayload","_createFormattedPayload","fawryPaymentData","customerMobile","customerEmail","gateway","id","isThreeDSecureRequiredError","some","errors","code","CheckoutComCreditCardPaymentStrategy","formPoster","_handleThreeDSecure","acs_url","payer_auth_request","callback_url","merchant_data","three_ds_result","postForm","PaReq","TermUrl","MD","createFormPoster","CheckoutComSEPAPaymentStrategy","iban","bic","document","CheckoutComiDealPaymentStrategy","DOCUMENT_SUPPORTED_APMS","CheckoutComAPMPaymentStrategy","ccDocument","indexOf"],"sourceRoot":""}