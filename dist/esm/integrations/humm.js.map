{"version":3,"file":"integrations/humm.js","mappings":"4DAOe,MAAeA,UAAsBC,MAIhD,WAAAC,CAAYC,GCXD,IAAqCC,EDY5CC,MAAMF,GAAW,qCAJrB,KAAAG,KAAO,gBACP,KAAAC,KAAO,WCTyCH,aDcZA,UCbhCI,OAAOC,eACPD,OAAOC,eDYQC,KCZeN,GDYfM,KCVRC,UAAYP,EDYoB,mBAA5BH,MAAMW,kBACbX,MAAMW,kBAAkBF,iBAExBA,KAAKG,MAAQ,IAAIZ,MAAMS,KAAKP,SAASU,KAE7C,EEdW,MAAMC,UAA6Bd,EAC9C,WAAAE,CAAYC,GACRE,MAAMF,GAAW,yCAEjBO,KAAKJ,KAAO,uBACZI,KAAKH,KAAO,kBAChB,ECNW,MAAMQ,UAAoCD,EACrD,WAAAZ,CAAYc,GACR,IAAIb,EAAU,yEAEVa,IACAb,EAAU,GAAGA,4DAAkEa,EAAcC,KACzF,UAIRZ,MAAMF,GAENO,KAAKJ,KAAO,6BAChB,ECfW,MAAMY,UAA4BlB,EAI7C,WAAAE,CAAYiB,EAAiBb,EAAcH,GACvCE,MAAMF,GAPV,oFAGA,KAAAI,KAAO,gCAMHG,KAAKJ,KAAOA,EACZI,KAAKS,QAAUA,CACnB,ECRW,MAAMC,UAA0CpB,EAC3D,WAAAE,GACIG,MAAM,kEAENK,KAAKJ,KAAO,oCACZI,KAAKH,KAAO,iCAChB,ECEW,MAAMc,EACjB,WAAAnB,CACYoB,EACAC,GADA,KAAAD,0BAAAA,EACA,KAAAC,WAAAA,CACT,CAEG,OAAAC,CAAQC,EAA2BC,G,mDACrC,MAAM,QAAEC,GAAsBF,EAAVG,E,yUAAK,CAAKH,EAAxB,aAEN,KAAKE,aAAO,EAAPA,EAASE,UACV,MAAM,IAAId,EAA4B,CAAC,2BAGrCL,KAAKY,0BAA0BQ,kBAAkBH,EAAQE,SAAUH,GAEzE,MAAMK,EAAgBrB,KAAKY,0BACtBU,WACAC,wBAAgDN,EAAQE,UAE7D,KAAqC,QAAhC,EAAAE,EAAcG,0BAAkB,eAAEC,aACnC,MAAM,IAAIjB,EACN,qCACA,iCAIFR,KAAKY,0BAA0Bc,YAAYR,EAAOF,GAExD,UACUhB,KAAKY,0BAA0Be,cAAc,CAC/CR,SAAUF,EAAQE,U,CAExB,MAAOS,GACL,OAAI5B,KAAK6B,0BAA0BD,GACxB5B,KAAK8B,8BAA8BF,GAGvCG,QAAQC,OAAOJ,E,kRAI9B,QAAAK,GACI,OAAOF,QAAQC,OAAO,IAAItB,EAC9B,CAEA,UAAAwB,GACI,OAAOH,QAAQI,SACnB,CAEA,YAAAC,GACI,OAAOL,QAAQI,SACnB,CAEQ,6BAAAL,CAA8BO,GAClC,MAAMC,EAAMD,EAASE,KAAKC,2BAA2BC,KAAKC,aACpDD,EAAOJ,EAASE,KAAKI,cAE3B,OAAO,IAAIZ,QAASI,IAEhBnC,KAAKa,WAAW+B,SAASN,EAAKO,KAAKC,MAAML,GAAON,IAExD,CAEQ,yBAAAN,CAA0BQ,GAC9B,GAAwB,iBAAbA,GAAsC,OAAbA,EAChC,OAAO,EAGX,MAAMU,EAAoDV,EAE1D,IAAKU,EAAgBR,KACjB,OAAO,EAGX,MAAMS,EAAwDD,EAAgBR,KAE9E,MAC2B,+BAAvBS,EAAYC,UACVD,EAAYR,4BAEkC,qBAAhDQ,EAAYR,2BAA2B3C,MACF,iBAA9BmD,EAAYL,aAE3B,ECxFJ,MAMA,GCZIO,EDOAtC,GAEO,IAAID,EAAoBC,EAA2BuC,KCR1DC,EDWyD,CAAC,CAAEC,GAAI,SCTzDvD,OAAOwD,OAAOJ,EAAQ,CAAEE,gBAJpB,IACXF,EACAE,S","sources":["webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-execute-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/humm-integration/src/humm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/humm-integration/src/create-humm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\nconst defaultMessage =\n    'Payment cannot be processed for this order, please select another payment method';\n\nexport default class PaymentExecuteError extends StandardError {\n    type = 'custom_provider_execute_error';\n    subtype: string;\n\n    constructor(subtype: string, name: string, message?: string) {\n        super(message || defaultMessage);\n\n        this.name = name;\n        this.subtype = subtype;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentExecuteError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { HummInitializationData, OffsiteRedirectResponse } from './humm';\n\nexport default class HummPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(payment.methodId, options);\n\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<HummInitializationData>(payment.methodId);\n\n        if (!paymentMethod.initializationData?.processable) {\n            throw new PaymentExecuteError(\n                'payment.humm_not_processable_error',\n                'hummNotProcessableError',\n            );\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n            });\n        } catch (error) {\n            if (this.isOffsiteRedirectResponse(error)) {\n                return this.handleOffsiteRedirectResponse(error);\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private handleOffsiteRedirectResponse(response: OffsiteRedirectResponse): Promise<void> {\n        const url = response.body.additional_action_required.data.redirect_url;\n        const data = response.body.provider_data;\n\n        return new Promise((resolve) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.formPoster.postForm(url, JSON.parse(data), resolve);\n        });\n    }\n\n    private isOffsiteRedirectResponse(response: unknown): response is OffsiteRedirectResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const partialResponse: Partial<OffsiteRedirectResponse> = response;\n\n        if (!partialResponse.body) {\n            return false;\n        }\n\n        const partialBody: Partial<OffsiteRedirectResponse['body']> = partialResponse.body;\n\n        return (\n            partialBody.status === 'additional_action_required' &&\n            !!partialBody.additional_action_required &&\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            partialBody.additional_action_required.type === 'offsite_redirect' &&\n            typeof partialBody.provider_data === 'string'\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HummPaymentStrategy from './humm-payment-strategy';\n\nconst createHummPaymentStrategy: PaymentStrategyFactory<HummPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new HummPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createHummPaymentStrategy, [{ id: 'humm' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","PaymentExecuteError","subtype","OrderFinalizationNotRequiredError","HummPaymentStrategy","paymentIntegrationService","formPoster","execute","payload","options","payment","order","methodId","loadPaymentMethod","paymentMethod","getState","getPaymentMethodOrThrow","initializationData","processable","submitOrder","submitPayment","error","isOffsiteRedirectResponse","handleOffsiteRedirectResponse","Promise","reject","finalize","initialize","resolve","deinitialize","response","url","body","additional_action_required","data","redirect_url","provider_data","postForm","JSON","parse","partialResponse","partialBody","status","module","createFormPoster","resolveIds","id","assign"],"sourceRoot":""}