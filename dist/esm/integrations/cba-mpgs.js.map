{"version":3,"file":"integrations/cba-mpgs.js","mappings":"4HACA,ICCYA,ECKG,MAAeC,UAAsBC,MAIhD,WAAAC,CAAYC,GCXD,IAAqCC,EDY5CC,MAAMF,GAAW,qCAJrB,KAAAG,KAAO,gBACP,KAAAC,KAAO,WCTyCH,aDcZA,UCbhCI,OAAOC,eACPD,OAAOC,eDYQC,KCZeN,GDYfM,KCVRC,UAAYP,EDYoB,mBAA5BH,MAAMW,kBACbX,MAAMW,kBAAkBF,iBAExBA,KAAKG,MAAQ,IAAIZ,MAAMS,KAAKP,SAASU,KAE7C,EEdW,MAAMC,UAA6Bd,EAC9C,WAAAE,CAAYC,GACRE,MAAMF,GAAW,yCAEjBO,KAAKJ,KAAO,uBACZI,KAAKH,KAAO,kBAChB,ECPW,MAAMQ,UAA0Cf,EAC3D,WAAAE,GACIG,MAAM,kEAENK,KAAKJ,KAAO,oCACZI,KAAKH,KAAO,iCAChB,ECLW,MAAMS,UAAoCF,EACrD,WAAAZ,CAAYe,GACR,IAAId,EAAU,yEAEVc,IACAd,EAAU,GAAGA,4DAAkEc,EAAcC,KACzF,UAIRb,MAAMF,GAENO,KAAKJ,KAAO,6BAChB,GLlBJ,SAAYP,GACR,mEACA,uDACA,qDACA,uDACA,kEACH,CAND,CAAYA,IAAAA,EAAuB,KAapB,MAAMoB,UAA4BnB,EAC7C,WAAAE,CAAmBkB,GACff,MAOR,SAAyBE,GACrB,OAAQA,GACJ,KAAKR,EAAwBsB,uBACzB,MAAO,oFAEX,KAAKtB,EAAwBuB,sBACzB,MAAO,mFAEX,KAAKvB,EAAwBwB,uBACzB,MAAO,oFAEX,KAAKxB,EAAwByB,6BACzB,MAAO,mFAEX,QACI,MAAO,6EAEnB,CAxBcC,CAAgBL,IADP,KAAAA,QAAAA,EAGfV,KAAKJ,KAAO,sBACZI,KAAKH,KAAO,iBAChB,E,IMnBQmB,E,8mBCgBG,MAAMC,EAIjB,WAAAzB,CAAsB0B,GAAA,KAAAA,2BAAAA,CAAwD,CAE9E,OAAAC,CAAQC,EAA2BC,G,QAC/B,OAAOrB,KAAKsB,4BACO,QAAf,EAAAF,EAAQG,eAAO,eAAEC,SACF,QAAf,EAAAJ,EAAQG,eAAO,eAAEE,YAChBzB,KAAK0B,wBACJ1B,KAAK2B,uBAAuBP,EAASC,GACrCrB,KAAK4B,0BAA0BR,EAASC,EAClD,CAEA,UAAAQ,CACIR,GAEA,IACKrB,KAAKsB,4BAA4BD,aAAO,EAAPA,EAASG,SAAUH,aAAO,EAAPA,EAASI,aAC7DzB,KAAK8B,wBAAwBT,GAI9B,OAFArB,KAAK0B,yBAA0B,EAExBK,QAAQC,UAGnB,MAAMC,EAAcZ,GAAWA,EAAQa,YAAcb,EAAQa,WAAWC,KAClEC,EAAQpC,KAAKkB,2BAA2BmB,YACtCC,iBAAmBC,cAAeC,EAAO,IAAO,CAAC,GACrDJ,EAAMK,wBAEV,IAAKR,EACD,MAAM,IAAI7B,EAGd,MAAM+B,EAAOnC,KAAKkB,2BAA2BwB,iBAAiBF,EAAMP,GAEpE,OAAOE,EAAKQ,SAASC,KAAK,KACtB5C,KAAK0B,yBAA0B,EAC/B1B,KAAK6C,YAAcV,EAEZJ,QAAQC,WAEvB,CAEA,YAAAc,GAKI,OAJI9C,KAAK6C,aACL7C,KAAK6C,YAAYE,SAGdhB,QAAQC,SACnB,CAEA,QAAAgB,GACI,OAAOjB,QAAQkB,OAAO,IAAI5C,EAC9B,CAEgB,yBAAAuB,CACZR,EACAC,G,wCAEA,MAAM,QAAEE,GAAsBH,EAAV8B,EAAK,EAAK9B,EAAxB,aACA+B,EAAc5B,GAAWA,EAAQ4B,YAEvC,IAAK5B,IAAY4B,EACb,MAAM,IAAI7C,EAA4B,CAAC,8BAGrCN,KAAKkB,2BAA2BkC,YAAYF,EAAO7B,SAEnDrB,KAAKkB,2BAA2BmC,cAAc,OAAD,wBAAM9B,GAAO,CAAE4B,gBACtE,E,CAEgB,sBAAAxB,CACZP,EACAC,G,wCAEA,MAAM,QAAEE,GAAsBH,EAAV8B,EAAK,EAAK9B,EAAxB,aACAe,EAAOnC,KAAK6C,YAElB,IAAKV,EACD,MAAM,IAAI1B,EAAoBpB,EAAwBuB,uBAG1D,IAAKW,IAAYA,EAAQC,SACrB,MAAM,IAAIlB,EAA4B,CAAC,2BAGrCN,KAAKkB,2BAA2BkC,YAAYF,EAAO7B,SAEnDc,EAAKmB,WAAWV,KAAK,IAAMT,EAAKoB,OAAOhC,GACjD,E,CAEU,2BAAAD,CAA4BE,EAAmBC,GACrD,QAAKD,IAO+C,IAHtCxB,KAAKkB,2BAA2BmB,WAClBmB,wBAAwBhC,EAAUC,GAEzCgC,OAAOC,mBAChC,CAEQ,uBAAA5B,CACJT,GAEA,OAAQsC,EAAOtC,GAAWA,EAAQa,YAAcb,EAAQa,WAAWC,KAAKyB,QAAQC,MAC5EC,EAER,GD/HJ,SAAY9C,GACR,qDACA,iCACA,yCACA,iDACA,yCACA,qDACA,mCACA,+CACA,uCACA,uCACA,4CACA,4DACA,oDACA,8DACA,oDACA,kDACA,uDACH,CAlBD,CAAYA,IAAAA,EAAoB,KAyBjB,MAAM+C,UAAyBzE,EAC1C,WAAAE,CAAmBkB,GACff,MAOR,SAAyBE,GACrB,OAAQA,GACJ,KAAKmB,EAAqBgD,sBACtB,MAAO,iEAEX,KAAKhD,EAAqBiD,YACtB,MAAO,sDAEX,KAAKjD,EAAqBkD,oBACtB,MAAO,8DAEX,KAAKlD,EAAqBmD,gBACtB,MAAO,0DAEX,KAAKnD,EAAqBoD,gBACtB,MAAO,0DAEX,KAAKpD,EAAqBqD,sBAC1B,KAAKrD,EAAqBsD,mBACtB,MAAO,+DAEX,KAAKtD,EAAqBuD,aACtB,MAAO,uDAEX,KAAKvD,EAAqBwD,eACtB,MAAO,0EAEX,KAAKxD,EAAqByD,eACtB,MAAO,yDAEX,KAAKzD,EAAqB0D,oBACtB,MAAO,+EAEX,KAAK1D,EAAqB2D,qBACtB,MAAO,2FAEX,KAAK3D,EAAqB4D,uBACtB,MAAO,kEAEX,QACI,MAAO,8DAEnB,CAjDc,CAAgBlE,IADP,KAAAA,QAAAA,EAGfV,KAAKJ,KAAO,mBACZI,KAAKH,KAAO,cAChB,EE1BW,MAAMgF,UAAiCvF,EAClD,WAAAE,CAAYC,GACRE,MACIF,GACI,oGAGRO,KAAKJ,KAAO,2BACZI,KAAKH,KAAO,+BAChB,ECbJ,MCCMiF,EAAmB,CACrBC,KAAM,CAAC,EACPC,QAAS,CAAC,EACVC,OAAQ,GAOG,MAAMC,UAAkC5F,EAMnD,WAAAE,CACI2F,GACA,QACI1F,EAAO,OACP2F,GAIA,CAAC,GAEL,MAAM,KAAEL,EAAI,QAAEC,EAAO,OAAEC,GAAWE,GAAYL,EAE9CnF,MAAMF,GAAW,qCAEjBO,KAAKJ,KAAO,eACZI,KAAKH,KAAO,UACZG,KAAK+E,KAAOA,EACZ/E,KAAKgF,QAAUA,EACfhF,KAAKiF,OAASA,EACdjF,KAAKoF,OAASA,GAAU,EAC5B,ECxCJ,IAAKC,GAAL,SAAKA,GACD,4BACA,sBACA,yBACH,CAJD,CAAKA,IAAAA,EAAkB,KAMvB,U,sSCwBe,MAAMC,UAA+BrE,EAMhD,WAAAzB,CACY+F,EACAC,GAER7F,MAAM4F,GAHE,KAAAA,0BAAAA,EACA,KAAAC,oBAAAA,EALJ,KAAAC,UAAY,EAQpB,CAEM,UAAA5D,CAAWR,G,kHACP,EAAMQ,WAAU,UAACR,GAEvB,MAAM,SAAEG,GAAaH,QAEfrB,KAAKuF,0BAA0BG,kBAAkBlE,GAEvD,MAAMY,EAAQpC,KAAKuF,0BAA0BlD,WACvCsD,EAAgBvD,EAAMoB,wBAAwBhC,GAEpD,IChDD,SACHmE,GAEA,MAC6B,iBAAlBA,GACW,OAAlBA,GACA,uBAAwBA,GAC8C,iBAA9DA,EAAuCC,oBACgB,OAA9DD,EAAuCC,oBACxC,eAAiBD,EAAuCC,oBACyB,iBAAzED,EAAuCC,mBAAmBC,aAE9D,kBADKF,EAAuCC,mBAAmBE,4BAGhC,IADvBH,EAAuCC,mBAC1CE,sBAEjB,CDgCaC,CAA2BJ,GAC5B,MAAM,IAAI5B,EAAiB/C,EAAqB2D,sBAGpD,MAAM,YACFqB,EACAJ,oBAAoB,sBAAEE,GAAwB,EAAK,WAAED,GACrDpC,QAAQ,aAAEwC,IACVN,EAEJ,GAAIM,EAAc,CAGd,GAFAjG,KAAKkG,gBAAkBlG,KAAKwF,oBAAoBW,KAAKL,IAEhD9F,KAAKkG,UACN,MAAM,IAAIzF,EAAoBpB,EAAwBuB,uBAG1D,IAAKoF,IAAgBH,EACjB,MAAM,IAAI9B,EAAiB/C,EAAqB2D,sBAMpD,GAHA3E,KAAKyF,UAAYO,EACjBhG,KAAKoG,OAAShE,EAAMiE,aAEfrG,KAAKoG,OACN,MAAM,IAAIrC,EAAiB/C,EAAqBiD,mBAG9CjE,KAAKkG,UAAUI,UAAU,CAC3BT,aACAJ,UAAWzF,KAAKyF,UAChBc,SAAU,K,MACN,GAAkB,QAAd,EAAAvG,KAAKkG,iBAAS,eAAEM,eAChB,OAAOxG,KAAKuF,0BAA0BlD,WAG1C,MAAM,IAAIwC,EAAyB,iCAEvC4B,cAAe,CACXC,aAAc1G,KAAKoG,OACnBO,UAAW,K,CAKvB,OAAO5E,QAAQC,SACnB,E,CAEM,OAAAb,CAAQC,EAA2BC,G,sGACrC,MAAM,QAAEE,GAAYH,EACd+B,EAAc5B,GAAWA,EAAQ4B,YAEvC,IAAK5B,IAAY4B,EACb,MAAM,IAAI7C,EAA4B,CAAC,wBAG3C,MACMqF,EADQ3F,KAAKuF,0BAA0BlD,WACjBmB,wBAAwBjC,EAAQC,WAEtD,aAAEyE,GAAiBN,EAAclC,OAEvC,GAAIwC,EAAc,CACd,MAAMW,EAAiB,OAAH,wBACbzD,GAAW,CACd0D,aAAc,CAAEC,MAAO9G,KAAKyF,aAG5BrE,EAAQG,UACRH,EAAQG,QAAQ4B,YAAcyD,E,CAItC,OAAO,EAAMzF,QAAO,UAACC,EAASC,GAAS0F,MAAOC,IAC1C,IACKf,IH5HM,CAACe,GACI,iBAAVA,GAAgC,OAAVA,GAAkB,SAAUA,EG4HnD,CAAeA,KACfC,EAAKD,EAAMjC,KAAKK,OAAQ,CAAE8B,KAAM,4BAEjC,OAAOnF,QAAQkB,OAAO+D,GAG1B,MAAMG,EAAanH,KAAKuF,0BAA0BlD,WAC5Ca,EAAQiE,EAAWC,YAGrBC,cAAc,QAAEC,IAChBH,EAAW1E,wBAEf,IAAKS,IAAUlD,KAAKyF,UAChB,MAAM,IAAI1B,EAAiB/C,EAAqBmD,iBAGpD,MAAMoD,EAAU,GAAGD,KAAWpE,EAAMqE,UAEpC,GC1HY,iBAFWxC,ED4HCiC,EAAMjC,OCzHzB,OAATA,KACA,oBAAqBA,IACiC,iBAA9CA,EAA0ByC,iBACa,OAA9CzC,EAA0ByC,mBAC3B,UAAYzC,EAA0ByC,kBACsB,iBAApDzC,EAA0ByC,gBAAgBV,MDqH1C,MAAM,IAAI5B,EC7HnB,IAA4BH,EDgIvB,MACIyC,iBAAmBV,MAAOW,IAC1BT,EAAMjC,KAEV,OAAK0C,EAIEzH,KAAK0H,uBAAuBH,EAASE,GAHjC1F,QAAQkB,OAAO+D,IAKlC,E,CAEM,QAAAhE,CAAS3B,G,wCACX,MAAMe,EAAQpC,KAAKuF,0BAA0BlD,WAG7C,OAFcD,EAAMgF,YAEPhF,EAAMuF,qBAAuB,EAAmBC,gBACnD5H,KAAKuF,0BAA0BsC,cAAcxG,GAE5CU,QAAQC,WAGZD,QAAQkB,OAAO,IAAI5C,EAC9B,E,CAEA,YAAAyC,GAII,OAHA9C,KAAKkG,eAAY4B,EACjB9H,KAAKyF,UAAY,GAEV9F,MAAMmD,cACjB,CAEc,sBAAA4E,CAAuBH,EAAiBE,G,wCAClD,MAAMtC,QAAkC,IAAIpD,QAAQ,CAACC,EAASiB,KAC1D,IAAKjD,KAAKkG,UACN,MAAM,IAAIzF,EAAoBpB,EAAwBuB,uBAG1DZ,KAAKkG,UAAUwB,uBAAuBH,EAASE,EAAgBM,IAC3D,MAAMf,EAAQe,EAAKf,MAEnB,OAAIA,EACO/D,EAAO,IAAI4B,EAAyBmC,EAAMgB,MAGjDhI,KAAKkG,WEjMa,YFiMA6B,EAAKE,sBAChBjG,EAAQ+F,EAAKG,iBAGjBjF,EAAO,IAAI4B,OAI1B,GACIM,EAASgD,aExMmB,6BFyM5BhD,EAASgD,YAAYC,qBAErB,OAAOpI,KAAKqI,kBAAkBd,EAASE,GAG3C,MAAM,IAAI5C,CACd,E,CAEc,iBAAAwD,CACVd,EACAE,EACAa,EAAU,G,wCAEV,OAAO,IAAIvG,QAAQ,CAACwG,EAAUtF,KAC1B,IAAKjD,KAAKkG,UACN,OAAOjD,EACH,IAAIxC,EAAoBpB,EAAwBuB,wBAIxDZ,KAAKkG,UAAUmC,kBACXd,EACAE,EAEOM,GAAS,iCACZ,MAAMf,EAAQe,EAAKf,MAEnB,OAAIA,EACIA,EAAMwB,OEtOC,gBFsOQxB,EAAMwB,OAAiCF,EAAU,SAI1D,IAAIvG,QAASC,GAAYyG,WAAWzG,EAAS,MAG5ChC,KAAKqI,kBAAkBd,EAASE,IAAiBa,IAGrDrF,EAAO,IAAI4B,GAIf,IAAI9C,QAAe2G,EAC9B,GACA,CAAEC,oBAAoB,KAGlC,E,EGvPW,MAAMC,UAA4CtJ,EAC7D,WAAAE,CAAYC,GACRE,MACIF,GACI,uGAGRO,KAAKJ,KAAO,sCACZI,KAAKH,KAAO,mCAChB,ECRW,MAAMgJ,EACjB,WAAArJ,CAAoBsJ,EAAqCC,EAA6BC,QAAlE,KAAAF,cAAAA,EAAqC,KAAAC,QAAAA,CAAsC,CAEzF,IAAA5C,CAAK8C,G,qCAOP,SANMjJ,KAAK8I,cAAcI,WACrB,KACID,EAAW,OAAS,qEAIvBjJ,KAAK+I,QAAQI,QACd,MAAM,IAAIP,EAGd,OAAO5I,KAAK+I,QAAQI,OACxB,E,4RCZJ,MASA,GChBIC,EDQA7D,GAEO,IAAID,EACPC,EACA,IAAIsD,EAAoBQ,MCX5BC,EDe4D,CAAC,CAAEC,GAAI,aCb5DzJ,OAAO0J,OAAOJ,EAAQ,CAAEE,gBAJpB,IACXF,EACAE,S","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/cba-mpgs-integration/src/cba-mpgs-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/cba-mpgs-integration/src/is-cba-mpgs-payment-method-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/cba-mpgs-integration/src/cba-mpgs.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/cba-mpgs-integration/src/cba-mpgs-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/cba-mpgs-integration/src/create-cba-mpgs-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","import { noop, some } from 'lodash';\n\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    RestApiResponse,\n    THREE_D_SECURE_AVAILABLE,\n    THREE_D_SECURE_BUSY,\n    THREE_D_SECURE_PROCEED,\n    ThreeDSjs,\n} from './cba-mpgs';\nimport CBAMPGSScriptLoader from './cba-mpgs-script-loader';\nimport { isCBAMPGSPaymentMethodLike, isThreeDSErrorBody } from './is-cba-mpgs-payment-method-like';\n\nexport default class CBAMPGSPaymentStrategy extends CreditCardPaymentStrategy {\n    private threeDSjs?: ThreeDSjs;\n\n    private sessionId = '';\n    private locale?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private cbaMGPSScriptLoader: CBAMPGSScriptLoader,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const { methodId } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (!isCBAMPGSPaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            clientToken,\n            initializationData: { isTestModeFlagEnabled = false, merchantId },\n            config: { is3dsEnabled },\n        } = paymentMethod;\n\n        if (is3dsEnabled) {\n            this.threeDSjs = await this.cbaMGPSScriptLoader.load(isTestModeFlagEnabled);\n\n            if (!this.threeDSjs) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (!clientToken || !merchantId) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this.sessionId = clientToken;\n            this.locale = state.getLocale();\n\n            if (!this.locale) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            await this.threeDSjs.configure({\n                merchantId,\n                sessionId: this.sessionId,\n                callback: () => {\n                    if (this.threeDSjs?.isConfigured()) {\n                        return this.paymentIntegrationService.getState();\n                    }\n\n                    throw new PaymentMethodFailedError('Failed to configure 3DS API.');\n                },\n                configuration: {\n                    userLanguage: this.locale,\n                    wsVersion: 62,\n                },\n            });\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(payment.methodId);\n\n        const { is3dsEnabled } = paymentMethod.config;\n\n        if (is3dsEnabled) {\n            const newPaymentData = {\n                ...paymentData,\n                threeDSecure: { token: this.sessionId },\n            };\n\n            if (payload.payment) {\n                payload.payment.paymentData = newPaymentData;\n            }\n        }\n\n        return super.execute(payload, options).catch((error) => {\n            if (\n                !is3dsEnabled ||\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            const retryState = this.paymentIntegrationService.getState();\n            const order = retryState.getOrder();\n\n            const {\n                storeProfile: { storeId },\n            } = retryState.getStoreConfigOrThrow();\n\n            if (!order || !this.sessionId) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const orderId = `${storeId}_${order.orderId}`;\n\n            if (!isThreeDSErrorBody(error.body)) {\n                throw new RequestError();\n            }\n\n            const {\n                three_ds_result: { token: transactionId },\n            } = error.body;\n\n            if (!transactionId) {\n                return Promise.reject(error);\n            }\n\n            return this.initiateAuthentication(orderId, transactionId);\n        });\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && state.getPaymentStatus() === PaymentStatusTypes.FINALIZE) {\n            await this.paymentIntegrationService.finalizeOrder(options);\n\n            return Promise.resolve();\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.threeDSjs = undefined;\n        this.sessionId = '';\n\n        return super.deinitialize();\n    }\n\n    private async initiateAuthentication(orderId: string, transactionId: string): Promise<void> {\n        const response: RestApiResponse = await new Promise((resolve, reject) => {\n            if (!this.threeDSjs) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this.threeDSjs.initiateAuthentication(orderId, transactionId, (data) => {\n                const error = data.error;\n\n                if (error) {\n                    return reject(new PaymentMethodFailedError(error.msg));\n                }\n\n                if (this.threeDSjs && data.gatewayRecommendation === THREE_D_SECURE_PROCEED) {\n                    return resolve(data.restApiResponse);\n                }\n\n                return reject(new PaymentMethodFailedError());\n            });\n        });\n\n        if (\n            response.transaction &&\n            response.transaction.authenticationStatus === THREE_D_SECURE_AVAILABLE\n        ) {\n            return this.authenticatePayer(orderId, transactionId);\n        }\n\n        throw new PaymentMethodFailedError();\n    }\n\n    private async authenticatePayer(\n        orderId: string,\n        transactionId: string,\n        attempt = 1,\n    ): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            if (!this.threeDSjs) {\n                return reject(\n                    new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                );\n            }\n\n            this.threeDSjs.authenticatePayer(\n                orderId,\n                transactionId,\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                async (data) => {\n                    const error = data.error;\n\n                    if (error) {\n                        if (error.cause && error.cause === THREE_D_SECURE_BUSY && attempt < 5) {\n                            // Wait 3 seconds for MPGS server to process the `initiateAuthentication` call\n                            // See: Step 1: Initiate Authentication ->  Initiate Authentication Request:\n                            // https://ap-gateway.mastercard.com/api/documentation/integrationGuidelines/supportedFeatures/pickAdditionalFunctionality/authentication/3DS/integrationModelAPI.html?locale=en_US#x_3DSTest\n                            await new Promise((resolve) => setTimeout(resolve, 3000));\n\n                            // eslint-disable-next-line no-plusplus, no-param-reassign\n                            return this.authenticatePayer(orderId, transactionId, ++attempt);\n                        }\n\n                        return reject(new PaymentMethodFailedError());\n                    }\n\n                    // ThreeDSjs will handle the redirect so return a promise that doesn't really resolve\n                    return new Promise<never>(noop);\n                },\n                { fullScreenRedirect: true },\n            );\n        });\n    }\n}\n","/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CBAMPGSPaymentMethod, ThreeDSErrorBody } from './cba-mpgs';\n\nexport function isCBAMPGSPaymentMethodLike(\n    paymentMethod: PaymentMethod,\n): paymentMethod is CBAMPGSPaymentMethod {\n    return (\n        typeof paymentMethod === 'object' &&\n        paymentMethod !== null &&\n        'initializationData' in paymentMethod &&\n        typeof (paymentMethod as CBAMPGSPaymentMethod).initializationData === 'object' &&\n        (paymentMethod as CBAMPGSPaymentMethod).initializationData !== null &&\n        'merchantId' in (paymentMethod as CBAMPGSPaymentMethod).initializationData &&\n        typeof (paymentMethod as CBAMPGSPaymentMethod).initializationData.merchantId === 'string' &&\n        (typeof (paymentMethod as CBAMPGSPaymentMethod).initializationData.isTestModeFlagEnabled ===\n            'boolean' ||\n            typeof (paymentMethod as CBAMPGSPaymentMethod).initializationData\n                .isTestModeFlagEnabled === 'undefined')\n    );\n}\n\nexport function isThreeDSErrorBody(body: unknown): body is ThreeDSErrorBody {\n    return (\n        typeof body === 'object' &&\n        body !== null &&\n        'three_ds_result' in body &&\n        typeof (body as ThreeDSErrorBody).three_ds_result === 'object' &&\n        (body as ThreeDSErrorBody).three_ds_result !== null &&\n        'token' in (body as ThreeDSErrorBody).three_ds_result &&\n        typeof (body as ThreeDSErrorBody).three_ds_result.token === 'string'\n    );\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport const THREE_D_SECURE_PROCEED = 'PROCEED';\nexport const THREE_D_SECURE_BUSY = 'SERVER_BUSY';\nexport const THREE_D_SECURE_AVAILABLE = 'AUTHENTICATION_AVAILABLE';\n\nexport interface CBAMPGSHostWindow extends Window {\n    ThreeDS?: ThreeDSjs;\n}\n\nexport interface ThreeDSjs {\n    // Configuration method for initializing the API.\n    configure(config: ThreeDSConfiguration): Promise<void>;\n    // Convenience method to check if the API has been configured successfully.\n    isConfigured(): boolean;\n    // Authentication for the arguments passed.\n    initiateAuthentication(\n        orderId: string,\n        transactionId: string,\n        callback: (data: ThreeDSAuthenticationResponse) => void,\n    ): void;\n    authenticatePayer(\n        orderId: string,\n        transactionId: string,\n        callback: (data: ThreeDSAuthenticationResponse) => void,\n        optionalParams?: AuthenticatePayerOptionalParams,\n    ): void;\n}\n\nexport interface RestApiResponse {\n    transaction: {\n        authenticationStatus: string;\n    };\n}\n\n// Configuration required to configure ThreeDS\nexport interface ThreeDSConfiguration {\n    merchantId: string;\n    sessionId: string;\n    configuration: ThreeDSAPIConfiguration;\n    callback(): void;\n}\n\nexport interface ThreeDSAuthenticationResponse {\n    error?: ThreeDSAuthenticationError;\n    restApiResponse: RestApiResponse;\n    gatewayRecommendation: string;\n}\n\nexport interface AuthenticatePayerOptionalParams {\n    fullScreenRedirect: boolean;\n}\n\nexport interface ThreeDSAuthenticationError {\n    code: string;\n    msg: string;\n    cause?: string;\n}\n\n// JSON value supporting data elements like userLanguage, REST API version (wsVersion)\nexport interface ThreeDSAPIConfiguration {\n    // A language identifier or IETF language tag to control the language of the payment page displayed to the payer.\n    //  For example, \"en_US\", es, \"fr-CA\". By default, the language is \"en_US\".\n    userLanguage: string;\n    // The Web Services API version that you submitted the request in. IE: 62\n    wsVersion: number;\n}\n\nexport interface CBAMPGSPaymentMethod extends PaymentMethod {\n    initializationData: CBAMPGSInitializationData;\n}\n\nexport interface CBAMPGSInitializationData {\n    isTestModeFlagEnabled?: boolean;\n    merchantId: string;\n}\n\nexport interface ThreeDSErrorBody {\n    three_ds_result: {\n        token: string;\n    };\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CBAMPGSHostWindow, ThreeDSjs } from './cba-mpgs';\n\nexport default class CBAMPGSScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CBAMPGSHostWindow = window) {}\n\n    async load(testMode?: boolean): Promise<ThreeDSjs> {\n        await this._scriptLoader.loadScript(\n            `//${\n                testMode ? 'test' : 'ap'\n            }-gateway.mastercard.com/static/threeDS/1.3.0/three-ds.min.js`,\n        );\n\n        if (!this._window.ThreeDS) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.ThreeDS;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CBAMPGSPaymentStrategy from './cba-mpgs-payment-strategy';\nimport CBAMPGSScriptLoader from './cba-mpgs-script-loader';\n\nconst createCBAMPGSPaymentStrategy: PaymentStrategyFactory<CBAMPGSPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CBAMPGSPaymentStrategy(\n        paymentIntegrationService,\n        new CBAMPGSScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createCBAMPGSPaymentStrategy, [{ id: 'cba_mpgs' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["NotInitializedErrorType","StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","OrderFinalizationNotRequiredError","PaymentArgumentInvalidError","invalidFields","join","NotInitializedError","subtype","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","getErrorMessage","MissingDataErrorType","CreditCardPaymentStrategy","_paymentIntegrationService","execute","payload","options","_isHostedPaymentFormEnabled","payment","methodId","gatewayId","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","initialize","_isHostedFieldAvailable","Promise","resolve","formOptions","creditCard","form","state","getState","paymentSettings","bigpayBaseUrl","host","getStoreConfigOrThrow","createHostedForm","attach","then","_hostedForm","deinitialize","detach","finalize","reject","order","paymentData","submitOrder","submitPayment","validate","submit","getPaymentMethodOrThrow","config","isHostedFormEnabled","values","fields","every","isNil","MissingDataError","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","PaymentMethodFailedError","DEFAULT_RESPONSE","body","headers","status","RequestError","response","errors","PaymentStatusTypes","CBAMPGSPaymentStrategy","paymentIntegrationService","cbaMGPSScriptLoader","sessionId","loadPaymentMethod","paymentMethod","initializationData","merchantId","isTestModeFlagEnabled","isCBAMPGSPaymentMethodLike","clientToken","is3dsEnabled","threeDSjs","load","locale","getLocale","configure","callback","isConfigured","configuration","userLanguage","wsVersion","newPaymentData","threeDSecure","token","catch","error","some","code","retryState","getOrder","storeProfile","storeId","orderId","three_ds_result","transactionId","initiateAuthentication","getPaymentStatus","FINALIZE","finalizeOrder","undefined","data","msg","gatewayRecommendation","restApiResponse","transaction","authenticationStatus","authenticatePayer","attempt","_resolve","cause","setTimeout","noop","fullScreenRedirect","PaymentMethodClientUnavailableError","CBAMPGSScriptLoader","_scriptLoader","_window","window","testMode","loadScript","ThreeDS","module","getScriptLoader","resolveIds","id","assign"],"sourceRoot":""}