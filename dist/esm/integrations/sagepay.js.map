{"version":3,"file":"integrations/sagepay.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/sagepay-integration/src/sage-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/sagepay-integration/src/create-sage-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class SagePayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private _formPoster: FormPoster,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n\n        if (!payment) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { paymentData } = payment;\n\n        if (!paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (this._isThreeDSTwoExperimentOn()) {\n            const newPaymentData = {\n                ...paymentData,\n                browser_info: getBrowserInfo(),\n            };\n\n            if (payload.payment) {\n                payload.payment.paymentData = newPaymentData;\n            }\n        }\n\n        return super.execute(payload, options).catch((error: Error) => {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() => {\n                let payload;\n\n                if (this._isThreeDSTwoExperimentOn() && !error.body.three_ds_result.merchant_data) {\n                    payload = {\n                        creq: error.body.three_ds_result.payer_auth_request,\n                    };\n                } else {\n                    payload = {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    };\n                }\n\n                this._formPoster.postForm(\n                    error.body.three_ds_result.acs_url,\n                    payload,\n                    undefined,\n                    '_top',\n                );\n            });\n        });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && state.getPaymentStatus() === PaymentStatusTypes.FINALIZE) {\n            this.paymentIntegrationService.finalizeOrder(options);\n        }\n\n        return super.finalize();\n    }\n\n    private _isThreeDSTwoExperimentOn(): boolean {\n        return (\n            this.paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings\n                .features['INT-4994.Opayo_3DS2'] === true\n        );\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SagePayPaymentStrategy from './sage-pay-payment-strategy';\n\nconst createSagePayPaymentStrategy: PaymentStrategyFactory<SagePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new SagePayPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createSagePayPaymentStrategy, [{ id: 'sagepay' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["NotInitializedErrorType","StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","OrderFinalizationNotRequiredError","PaymentArgumentInvalidError","invalidFields","join","NotInitializedError","subtype","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","getErrorMessage","MissingDataErrorType","CreditCardPaymentStrategy","_paymentIntegrationService","execute","payload","options","_isHostedPaymentFormEnabled","payment","methodId","gatewayId","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","initialize","_isHostedFieldAvailable","Promise","resolve","formOptions","creditCard","form","state","getState","paymentSettings","bigpayBaseUrl","host","getStoreConfigOrThrow","createHostedForm","attach","then","_hostedForm","deinitialize","detach","finalize","reject","order","paymentData","submitOrder","submitPayment","validate","submit","getPaymentMethodOrThrow","config","isHostedFormEnabled","values","fields","every","isNil","MissingDataError","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getBrowserInfo","navigator","window","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","Date","getTimezoneOffset","toString","PaymentStatusTypes","SagePayPaymentStrategy","paymentIntegrationService","_formPoster","_isThreeDSTwoExperimentOn","newPaymentData","browser_info","catch","error","some","body","errors","code","three_ds_result","merchant_data","creq","payer_auth_request","PaReq","TermUrl","callback_url","MD","postForm","acs_url","undefined","getOrder","getPaymentStatus","FINALIZE","finalizeOrder","checkoutSettings","features","module","createFormPoster","resolveIds","id","assign"],"sourceRoot":""}