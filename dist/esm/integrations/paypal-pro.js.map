{"version":3,"file":"integrations/paypal-pro.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-three-d-secure-flow.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-pro-integration/src/paypal-pro-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-pro-integration/src/create-paypal-pro-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport {\n    HostedForm,\n    isRequestError,\n    isVaultedInstrument,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlow {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n        await this._cardinalClient.configure(await this._getClientToken(method));\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const { getCardInstrument, getPaymentMethodOrThrow } =\n            this._paymentIntegrationService.getState();\n\n        const { payment: { methodId = '', paymentData = {} } = {} } = payload;\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const bin = instrument ? instrument.iin : hostedForm && hostedForm.getBin();\n\n        if (bin) {\n            await this._cardinalClient.runBinProcess(bin);\n        }\n\n        try {\n            return await execute(\n                merge(payload, {\n                    payment: {\n                        paymentData: {\n                            threeDSecure: { token: getPaymentMethodOrThrow(methodId).clientToken },\n                        },\n                    },\n                }),\n                options,\n            );\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                throw error;\n            }\n\n            const threeDSecure = await this._cardinalClient.getThreeDSecureData(\n                error.body.three_ds_result,\n                this._getOrderData(),\n            );\n\n            if (!hostedForm) {\n                await this._paymentIntegrationService.submitPayment(\n                    merge(payload.payment, {\n                        paymentData: { threeDSecure },\n                    }),\n                );\n\n                return;\n            }\n\n            await hostedForm.submit(\n                merge(payload.payment, {\n                    paymentData: { threeDSecure },\n                }),\n            );\n        }\n    }\n\n    private async _getClientToken(method: PaymentMethod): Promise<string> {\n        if (method.clientToken) {\n            return method.clientToken;\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(method.id);\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(method.id);\n\n        return paymentMethod.clientToken || '';\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const state = this._paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n        const checkout = state.getCheckoutOrThrow();\n        const order = state.getOrderOrThrow();\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { ThreeDSecure, ThreeDSecureToken } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(\n        initializationType: K,\n        initializationData: CardinalInitializationDataMap[K],\n    ): void;\n    trigger(\n        event: CardinalTriggerEvents,\n        data?: string,\n    ): Promise<CardinalBinProcessResponse | void>;\n    continue(\n        paymentBrand: CardinalPaymentBrand,\n        continueObject: CardinalContinue,\n        order: CardinalPartialOrder,\n    ): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport type setupCompleteFn = (setupCompleteData: CardinalSetupCompletedData) => void;\nexport type validatedFn = (data: CardinalValidatedData, jwt?: string) => void;\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted]: setupCompleteFn;\n    [CardinalEventType.Validated]: validatedFn;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated?: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n    ChallengeCancel: string;\n}>;\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n\nexport type CardinalThreeDSecureToken = Pick<ThreeDSecure, 'xid'> | ThreeDSecureToken;\n","import { includes, noop } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    CreditCardInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethodFailedError,\n    ThreeDSecureToken,\n    ThreeDsResult,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalSDK,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData,\n} from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _provider = '';\n    private _testMode = false;\n    private _sdk?: Promise<CardinalSDK>;\n    private _configurationToken = '';\n\n    constructor(private _scriptLoader: CardinalScriptLoader) {}\n\n    load(provider: string, testMode = false): Promise<void> {\n        this._provider = provider;\n        this._testMode = testMode;\n\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(noop);\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._configurationToken) {\n            if (this._configurationToken === clientToken) {\n                return Promise.resolve();\n            }\n\n            this._sdk = this._scriptLoader.load(`${this._provider}.${Date.now()}`, this._testMode);\n        }\n\n        return this._getClientSDK().then(\n            (client) =>\n                new Promise<void>((resolve, reject) => {\n                    client.on(CardinalEventType.SetupCompleted, () => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        this._configurationToken = clientToken;\n\n                        resolve();\n                    });\n\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Error:\n                                if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                    reject(\n                                        new MissingDataError(\n                                            MissingDataErrorType.MissingPaymentMethod,\n                                        ),\n                                    );\n                                }\n\n                                reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                break;\n                        }\n                    });\n\n                    client.setup(CardinalInitializationType.Init, {\n                        jwt: clientToken,\n                    });\n                }),\n        );\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then((client) =>\n                client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(noop),\n            )\n            .then((result) => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(\n        threeDSecureData: ThreeDsResult,\n        orderData: CardinalOrderData,\n    ): Promise<ThreeDSecureToken> {\n        return this._getClientSDK().then((client) => {\n            return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                client.on(\n                    CardinalEventType.Validated,\n                    (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n\n                        if (!jwt) {\n                            return reject(\n                                new PaymentMethodFailedError(\n                                    data.ErrorDescription\n                                        ? data.ErrorDescription\n                                        : 'An error was encountered while processing the transaction.',\n                                ),\n                            );\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(\n                                        new PaymentMethodFailedError(data.ErrorDescription),\n                                    );\n                                } else if (\n                                    !data.Payment ||\n                                    !data.Payment.ExtendedData ||\n                                    data.Payment.ExtendedData.SignatureVerification !==\n                                        CardinalSignatureVerification.Yes\n                                ) {\n                                    return reject(\n                                        new PaymentMethodFailedError(\n                                            'Transaction signature could not be validated.',\n                                        ),\n                                    );\n                                }\n\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.Failure:\n                                return reject(\n                                    new PaymentMethodFailedError(\n                                        'User failed authentication or an error was encountered while processing the transaction.',\n                                    ),\n                                );\n\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    },\n                );\n\n                const continueObject = {\n                    AcsUrl: threeDSecureData.acs_url,\n                    Payload: threeDSecureData.merchant_data,\n                };\n\n                const partialOrder = this._mapToPartialOrder(\n                    orderData,\n                    threeDSecureData.payer_auth_request,\n                );\n\n                client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n            });\n        });\n    }\n\n    private _mapToPartialOrder(\n        orderData: CardinalOrderData,\n        transactionId: string,\n    ): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CardinalWindow = window) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader.loadScript(`${url}?v=${provider}`).then(() => {\n            if (!this._window.Cardinal) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.Cardinal;\n        });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import { CardinalThreeDSecureFlow } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class PaypalProPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        protected paymentIntegrationService: PaymentIntegrationService,\n        private threeDSecureFlow: CardinalThreeDSecureFlow,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this.threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n\n        const state = this.paymentIntegrationService.getState();\n\n        if (state.getPaymentStatus() === PaymentStatusTypes.ACKNOWLEDGE) {\n            await this.paymentIntegrationService.submitOrder(\n                {\n                    ...payload,\n                    payment: { methodId },\n                },\n                options,\n            );\n\n            return Promise.resolve();\n        }\n\n        if (state.getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this.threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PaypalProPaymentStrategy from './paypal-pro-payment-strategy';\n\nconst createPayPalProPaymentStrategy: CheckoutButtonStrategyFactory<PaypalProPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new PaypalProPaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlow(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n\nexport default toResolvableModule(createPayPalProPaymentStrategy, [{ id: 'paypal' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["MissingDataErrorType","NotInitializedErrorType","CardinalThreeDSecureFlow","constructor","_paymentIntegrationService","_cardinalClient","prepare","method","this","load","id","config","testMode","configure","_getClientToken","start","execute","payload","options","hostedForm","getCardInstrument","getPaymentMethodOrThrow","getState","payment","methodId","paymentData","instrument","Boolean","instrumentId","isVaultedInstrument","bin","iin","getBin","runBinProcess","merge","threeDSecure","token","clientToken","error","some","body","errors","code","getThreeDSecureData","three_ds_result","_getOrderData","submitPayment","submit","loadPaymentMethod","state","billingAddress","getBillingAddressOrThrow","shippingAddress","getShippingAddress","checkout","getCheckoutOrThrow","order","getOrderOrThrow","currencyCode","cart","currency","orderId","toString","amount","cartAmount","StandardError","Error","message","prototype","super","name","type","Object","setPrototypeOf","__proto__","captureStackTrace","stack","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","PaymentMethodFailedError","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","CardinalSignatureValidationErrors","CardinalEventType","CardinalInitializationType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","CardinalClient","_scriptLoader","_provider","_testMode","_configurationToken","provider","_sdk","then","noop","Promise","resolve","Date","now","_getClientSDK","client","reject","on","SetupCompleted","off","Validated","data","ActionCode","includes","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","trigger","BinProcess","catch","result","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","email","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ccNumber","ExpirationMonth","ccExpiry","month","ExpirationYear","year","NameOnAccount","ccName","CardCode","ccCvv","address","cardinalAddress","FirstName","firstName","LastName","lastName","Address1","address1","City","city","State","stateOrProvince","PostalCode","postalCode","CountryCode","countryCode","address2","Address2","phone","Phone1","PaymentMethodClientUnavailableError","CardinalScriptLoader","_window","window","url","loadScript","Cardinal","InvalidArgumentError","OrderFinalizationNotRequiredError","PaymentArgumentInvalidError","invalidFields","join","PaymentStatusTypes","CreditCardPaymentStrategy","_isHostedPaymentFormEnabled","gatewayId","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","initialize","_isHostedFieldAvailable","formOptions","creditCard","form","paymentSettings","bigpayBaseUrl","host","getStoreConfigOrThrow","createHostedForm","attach","_hostedForm","deinitialize","detach","finalize","submitOrder","validate","isHostedFormEnabled","values","fields","every","isNil","PaypalProPaymentStrategy","paymentIntegrationService","threeDSecureFlow","paymentMethod","is3dsEnabled","getPaymentStatus","ACKNOWLEDGE","bind","module","getScriptLoader","resolveIds","assign"],"sourceRoot":""}