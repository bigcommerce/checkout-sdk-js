{"version":3,"file":"integrations/external.js","mappings":"4DAOe,MAAeA,UAAsBC,MAIhD,WAAAC,CAAYC,GCXD,IAAqCC,EDY5CC,MAAMF,GAAW,qCAJrB,KAAAG,KAAO,gBACP,KAAAC,KAAO,WCTyCH,aDcZA,UCbhCI,OAAOC,eACPD,OAAOC,eDYQC,KCZeN,GDYfM,KCVRC,UAAYP,EDYoB,mBAA5BH,MAAMW,kBACbX,MAAMW,kBAAkBF,iBAExBA,KAAKG,MAAQ,IAAIZ,MAAMS,KAAKP,SAASU,KAE7C,EEdW,MAAMC,UAA6Bd,EAC9C,WAAAE,CAAYC,GACRE,MAAMF,GAAW,yCAEjBO,KAAKJ,KAAO,uBACZI,KAAKH,KAAO,kBAChB,ECNW,MAAMQ,UAAoCD,EACrD,WAAAZ,CAAYc,GACR,IAAIb,EAAU,yEAEVa,IACAb,EAAU,GAAGA,4DAAkEa,EAAcC,KACzF,UAIRZ,MAAMF,GAENO,KAAKJ,KAAO,6BAChB,ECdW,MAAMY,UAA0ClB,EAC3D,WAAAE,GACIG,MAAM,kEAENK,KAAKJ,KAAO,oCACZI,KAAKH,KAAO,iCAChB,ECEW,MAAMY,EACjB,WAAAjB,CACYkB,EACAC,GADA,KAAAD,YAAAA,EACA,KAAAC,2BAAAA,CACT,CAEG,OAAAC,CAAQC,EAA2BC,G,qCACrC,MAAM,QAAEC,GAAsBF,EAAVG,E,yUAAK,CAAKH,EAAxB,aACAI,EAAcF,GAAWA,EAAQE,YAEvC,IAAKF,IAAYE,EACb,MAAM,IAAIZ,EAA4B,CAAC,8BAGrCL,KAAKW,2BAA2BO,YAAYF,EAAOF,GAEzD,UACUd,KAAKW,2BAA2BQ,cAAc,OAAD,wBAAMJ,GAAO,CAAEE,gB,CACpE,MAAOG,GACL,IC9BW,CAACA,GACI,iBAAVA,GAAgC,OAAVA,GAAkB,SAAUA,ED8BnD,CAAeA,IEvBJ,iBADeC,EFyBCD,EAAME,OExBA,OAAVD,KAAkB,+BAAgCA,KFyBzErB,KAAKuB,4BAA4BH,EAAME,MAExC,OAAOE,QAAQC,OAAOL,GAG1B,MACIE,MACII,4BACIC,MAAM,aAAEC,MAGhBR,EAGJ,OAAO,IAAII,QAAQ,KACfxB,KAAK6B,YAAYD,I,CEzC1B,IAAoCP,CF6CvC,E,2RAEA,QAAAS,GACI,OAAON,QAAQC,OAAO,IAAIjB,EAC9B,CAEA,UAAAuB,GACI,OAAOP,QAAQQ,SACnB,CAEA,YAAAC,GACI,OAAOT,QAAQQ,SACnB,CAEU,WAAAH,CAAYD,GAClB,OAAO5B,KAAKU,YAAYwB,SAASN,EAAc,CAAC,EACpD,CAEQ,2BAAAL,CAA4BD,GAChC,MAAM,2BAAEI,EAA0B,OAAES,GAAWb,EAE/C,MACe,+BAAXa,GACAT,GACoC,qBAApCA,EAA2B7B,IAEnC,EGxEJ,MAIA,GCVIuC,EDOAC,GACC,IAAI5B,EAAwB6B,IAAoBD,GCPjDE,EDS6D,CAAC,CAAEC,GAAI,WCP7D1C,OAAO2C,OAAOL,EAAQ,CAAEG,gBAJpB,IACXH,EACAG,S","sources":["webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/external-integration/src/external-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/external-integration/src/is-additional-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/external-integration/src/create-external-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    isRequestError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, isAdditionalActionRequired } from './is-additional-action';\n\nexport default class ExternalPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _formPoster: FormPoster,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !isAdditionalActionRequired(error.body) ||\n                !this._isAdditionalActionRequired(error.body)\n            ) {\n                return Promise.reject(error);\n            }\n\n            const {\n                body: {\n                    additional_action_required: {\n                        data: { redirect_url },\n                    },\n                },\n            } = error;\n\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return new Promise(() => {\n                this.redirectUrl(redirect_url);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }) as any;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected redirectUrl(redirect_url: string): void {\n        return this._formPoster.postForm(redirect_url, {});\n    }\n\n    private _isAdditionalActionRequired(body: AdditionalActionRequired): boolean {\n        const { additional_action_required, status } = body;\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'offsite_redirect'\n        );\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","export interface AdditionalActionRequired {\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n        type: string;\n    };\n    status: string;\n}\n\nexport function isAdditionalActionRequired(value: unknown): value is AdditionalActionRequired {\n    return typeof value === 'object' && value !== null && 'additional_action_required' in value;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ExternalPaymentStrategy from './external-payment-strategy';\n\nconst createExternalPaymentStrategy: PaymentStrategyFactory<ExternalPaymentStrategy> = (\n    paymentIntegrationService,\n) => new ExternalPaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createExternalPaymentStrategy, [{ id: 'laybuy' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","OrderFinalizationNotRequiredError","ExternalPaymentStrategy","_formPoster","_paymentIntegrationService","execute","payload","options","payment","order","paymentData","submitOrder","submitPayment","error","value","body","_isAdditionalActionRequired","Promise","reject","additional_action_required","data","redirect_url","redirectUrl","finalize","initialize","resolve","deinitialize","postForm","status","module","paymentIntegrationService","createFormPoster","resolveIds","id","assign"],"sourceRoot":""}