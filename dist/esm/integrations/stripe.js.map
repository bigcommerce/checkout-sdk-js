{"version":3,"file":"integrations/stripe.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/stripe.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/stripe-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/is-stripe-payment-method-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/is-stripe-accelerated-checkout-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/stripe-upe-constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/stripe-upe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/create-stripe-upe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/stripe-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/is-stripe-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/stripe-link-v2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/create-stripe-link-v2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/is-individual-card-element-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/create-stripev3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/stripe-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/stripe-upe-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/create-stripe-upe-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/stripe-ocs-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/is-stripe-payment-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/create-stripe-ocs-payment-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeLinkV2Event, StripeLinkV2ShippingRate } from '../stripe-ocs/stripe-ocs';\n\n/**\n * Initialization options.\n */\nexport interface StripeConfigurationOptions {\n    /**\n     * For usage with [Connect](https://stripe.com/docs/connect) only.\n     * Specifying a connected account ID (e.g., acct_24BFMpJ1svR5A89k) allows you to perform actions on behalf of that account.\n     */\n    stripeAccount?: string;\n\n    /**\n     * Override your account's [API version](https://stripe.com/docs/api/versioning)\n     */\n    apiVersion?: string;\n\n    /**\n     * A locale used to globally configure localization in Stripe. Setting the locale here will localize error strings for all Stripe.js methods. It will also configure the locale for Elements and Checkout. Default is auto (Stripe detects the locale of the browser).\n     * Note that Checkout supports a slightly different set of locales than Stripe.js.\n     */\n    locale?: string;\n\n    betas?: string[];\n}\n\nexport interface StripeAdditionalActionData {\n    redirect_url?: string;\n    intent?: string;\n}\n\nexport interface StripeAdditionalAction {\n    type: string;\n    data: StripeAdditionalActionData;\n}\n\n/**\n * The PaymentIntent object.\n */\nexport interface PaymentIntent {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * The client secret of the PaymentIntent. Used for client-side retrieval using a publishable key.\n     */\n    client_secret?: string;\n\n    /**\n     * Status of this PaymentIntent. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).\n     */\n    status: 'succeeded' | string;\n\n    /**\n     * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n     */\n    last_payment_error: LastPaymentError | null;\n\n    payment_method_options?: StripePIPaymentMethodOptions;\n}\n\nexport interface StripePIPaymentMethodSavingOptions {\n    setup_future_usage?: StripeInstrumentSetupFutureUsage;\n    verification_method?: string;\n}\n\nexport interface StripePIPaymentMethodOptions {\n    card?: StripePIPaymentMethodSavingOptions;\n    us_bank_account?: StripePIPaymentMethodSavingOptions;\n}\n\n/**\n * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n */\nexport interface LastPaymentError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CssFontSource {\n    /**\n     * A relative or absolute URL pointing to a CSS file with [@font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) definitions, for example:\n     * `https://fonts.googleapis.com/css?family=Open+Sans`\n     * Note that if you are using a [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) (CSP),\n     * [additional directives](https://stripe.com/docs/security#content-security-policy) may be necessary.\n     */\n    cssSrc: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CustomFontSource {\n    /**\n     * The name to give the font.\n     */\n    family: string;\n\n    /**\n     * A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your\n     * custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix.\n     */\n    src: string;\n\n    /**\n     * A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value.\n     */\n    display?: string;\n\n    /**\n     * One of normal, italic, oblique. Defaults to normal.\n     */\n    style?: string;\n\n    /**\n     * A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value.\n     */\n    unicodeRange?: string;\n\n    /**\n     * A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). Note that this is a string, not a number.\n     */\n    weight?: string;\n}\n\nexport type StripeCustomFont = CssFontSource | CustomFontSource;\n\nexport interface StripeError {\n    /**\n     * type of error. When the error type is card_error or validation_error, you can display the error message in error.message directly to your user.\n     */\n    type: string;\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n}\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n\n    /**\n     * The change event is triggered when the Element's value changes. The event payload always contains certain keys,\n     * in addition to some Element-specific keys.\n     * https://stripe.com/docs/js/element/events/on_change?type=paymentElement\n     */\n    on(event: StripeElementEvent, handler: (event: StripeEventType) => void): void;\n\n    /**\n     * Updates the options the Payment Element was initialized with. Updates are merged into the existing configuration.\n     * https://docs.stripe.com/js/elements_object/update_payment_element\n     */\n    update(options?: StripeElementsCreateOptions): void;\n\n    /**\n     * This method collapses the Payment Element into a row of payment method tabs.\n     * https://docs.stripe.com/js/elements_object/collapse_payment_element\n     */\n    collapse(): void;\n}\n\nexport interface StripeEvent {\n    complete: boolean;\n    elementType: string;\n    empty: boolean;\n}\n\nexport interface StripeCustomerEvent extends StripeEvent {\n    collapsed?: boolean;\n    authenticated: boolean;\n    value: {\n        email: string;\n    };\n}\n\nexport interface StripeShippingEvent extends StripeEvent {\n    mode?: string;\n    isNewAddress?: boolean;\n    phoneFieldRequired: boolean;\n    value: {\n        address: Address;\n        name?: string;\n        firstName?: string;\n        lastName?: string;\n        phone?: string;\n    };\n    fields?: {\n        phone: string;\n    };\n    display?: {\n        name: string;\n    };\n}\n\nexport interface StripePaymentEvent extends StripeEvent {\n    value: {\n        type: StripePaymentMethodType;\n    };\n    collapsed?: boolean;\n}\n\nexport interface Address {\n    city: string;\n    country: string;\n    line1: string;\n    line2?: string;\n    postal_code: string;\n    state: string;\n}\n\nexport type StripeEventType =\n    | StripeShippingEvent\n    | StripeCustomerEvent\n    | StripePaymentEvent\n    | StripeLinkV2Event;\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping\n */\nexport type AddressOptions = Partial<Address>;\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface AddressProperties {\n    city?: AutoOrNever;\n    country?: AutoOrNever;\n    state?: AutoOrNever;\n    postalCode?: AutoOrNever;\n    line1?: AutoOrNever;\n    line2?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsOptions {\n    name?: string;\n    email?: string;\n    address?: AddressOptions;\n    phone?: string;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsProperties {\n    name?: AutoOrNever;\n    email?: AutoOrNever;\n    address?: AutoOrNever | AddressProperties;\n    phone?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface PaymentMethodDataOptions {\n    billing_details: BillingDetailsOptions;\n    allow_redisplay?: 'always' | 'limited' | 'unspecified';\n}\n\n/**\n * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n */\nexport interface StripeConfirmParams {\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n    payment_method_data?: PaymentMethodDataOptions;\n}\n\n/**\n * Data to be sent with a `stripe.confirmPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/js/payment_intents/confirm_payment) for a full list of parameters.\n */\nexport interface StripeConfirmPaymentData {\n    /**\n     * The Elements instance that was used to create the Payment Element.\n     */\n    elements: StripeElements;\n\n    /**\n     * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n     */\n    confirmParams?: StripeConfirmParams;\n\n    /**\n     * By default, confirmPayment will always redirect to your return_url after a successful confirmation.\n     * If you set redirect: \"if_required\", then confirmPayment will only redirect if your user chooses a redirect-based payment method.\n     */\n    redirect?: StripeStringConstants.ALWAYS | StripeStringConstants.IF_REQUIRED;\n\n    clientSecret?: string;\n}\n\nexport interface FieldsOptions {\n    billingDetails?: AutoOrNever | BillingDetailsProperties;\n    phone?: string;\n}\n\nexport interface WalletOptions {\n    applePay?: AutoOrNever;\n    googlePay?: AutoOrNever;\n    link?: AutoOrNever;\n}\n\nexport interface TermOptions {\n    card?: AutoOrNever;\n}\n\nexport interface StripeLayoutOptions {\n    type?: 'accordion' | 'tabs';\n    linkInAccordion?: boolean;\n    defaultCollapsed?: boolean;\n    radios?: boolean;\n    spacedAccordionItems?: boolean;\n    visibleAccordionItemsCount?: number;\n}\n\n/**\n * All available options are here https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface StripeElementsCreateOptions {\n    mode?: string;\n    fields?: FieldsOptions;\n    wallets?: WalletOptions;\n    allowedCountries?: string[];\n    defaultValues?: ShippingDefaultValues | CustomerDefaultValues | PaymentDefaultValues;\n    validation?: validationElement;\n    display?: { name: DisplayName };\n    terms?: TermOptions;\n    layout?: StripeLayoutOptions;\n    paymentMethodOrder?: string[];\n    //  Link v2 options\n    lineItems?: LineItem[];\n    allowedShippingCountries?: string[];\n    shippingAddressRequired?: boolean;\n    shippingRates?: StripeLinkV2ShippingRate[];\n    billingAddressRequired?: boolean;\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    paymentMethods?: {\n        link: StripeStringConstants.AUTO;\n        applePay: StripeStringConstants.NEVER;\n        googlePay: StripeStringConstants.NEVER;\n        amazonPay: StripeStringConstants.NEVER;\n        paypal: StripeStringConstants.NEVER;\n        klarna: StripeStringConstants.NEVER;\n    };\n    buttonHeight?: number;\n    savePaymentMethod?: StripeSavePaymentMethod;\n}\n\ninterface validationElement {\n    phone?: validationRequiredElement;\n}\n\ninterface validationRequiredElement {\n    required?: string;\n}\n\ninterface PaymentDefaultValues {\n    savePaymentMethod?: boolean;\n    billingDetails?: BillingDetailsOptions;\n}\n\ninterface ShippingDefaultValues {\n    name?: string;\n    firstName?: string;\n    lastName?: string;\n    phone: string;\n    address: Address;\n}\n\n/*\nDecide which mode you are going to use the Address Element\nShipping: is used with the Payment Element and Link Authentication Element, it will automatically pass shipping\ninformation when confirming Payment Intent or Setup Intent.\nBilling: is used with the Payment Element, it will automatically pass the billing information when confirming\nPayment Intent or Setup Intent.\n */\nexport enum StripeFormMode {\n    SHIPPING = 'shipping',\n    BILLING = 'billing',\n}\n\nexport enum DisplayName {\n    SPLIT = 'split',\n    FULL = 'full',\n    ORGANIZATION = 'organization',\n}\n\ninterface CustomerDefaultValues {\n    mode: StripeFormMode;\n    email: string;\n    allowedCountries?: string[];\n    display?: {\n        name: DisplayName;\n    };\n}\n\nexport interface StripeElements {\n    /**\n     * Creates an Elements instance, which manages a group of elements.\n     * https://stripe.com/docs/js/elements_object/create\n     */\n    create(elementType: StripeElementType, options?: StripeElementsCreateOptions): StripeElement;\n\n    /**\n     * Looks up a previously created element.\n     * https://stripe.com/docs/js/elements_object/get_payment_element or\n     * https://stripe.com/docs/js/elements_object/get_link_authentication_element\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n\n    /**\n     * Updates options on an existing instance of Elements.\n     * https://stripe.com/docs/js/elements_object/update\n     */\n    update(options?: StripeUpdateElementsOptions): StripeElement;\n\n    /**\n     * Fetches updates from the associated PaymentIntent or SetupIntent on an existing instance of Elements,\n     * and reflects these updates in the Payment Element.\n     * https://stripe.com/docs/js/elements_object/fetch_updates\n     */\n    fetchUpdates(): Promise<void>;\n}\n\n/**\n * All available options are here https://stripe.com/docs/stripe-js/appearance-api#supported-css-properties\n */\nexport interface StripeAppearanceOptions {\n    variables?: Record<string, StripeAppearanceValues>;\n\n    rules?: Record<string, Record<string, StripeAppearanceValues>>;\n}\n\nexport type StripeAppearanceValues = string | string[] | number | undefined;\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: StripeCustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.\n     * The client secret can be used to complete a payment from your frontend.\n     * It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer.\n     * Make sure that you have TLS enabled on any page that includes the client secret.\n     * Refer to our docs to accept a payment and learn about how client_secret should be handled.\n     */\n    clientSecret?: string;\n\n    /**\n     * A token that represents the Stripe customer session.\n     * Stripe documentation: https://docs.stripe.com/api/checkout/sessions\n     */\n    customerSessionClientSecret?: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeAppearanceOptions;\n\n    mode?: string;\n    amount?: number;\n    currency?: string;\n    paymentMethodTypes?: string[];\n}\n\nexport interface StripeUpdateElementsOptions {\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeAppearanceOptions;\n    mode?: string;\n    amount?: number;\n    currency?: string;\n}\n\nexport interface StripeClient {\n    /**\n     * Use confirmPayment to confirm a PaymentIntent using data collected by the Payment Element.\n     * When called, confirmPayment will attempt to complete any required actions,\n     * such as authenticating your user by displaying a 3DS dialog or redirecting them to a bank authorization page.\n     */\n    confirmPayment(options: StripeConfirmPaymentData): Promise<StripeResult>;\n\n    /**\n     * When called, it will confirm the PaymentIntent with data you provide and carry out 3DS or other next actions if they are required.\n     */\n    confirmCardPayment(clientSecret: string): Promise<StripeResult>;\n\n    /**\n     * Retrieve a PaymentIntent using its client secret.\n     */\n    retrievePaymentIntent(clientSecret: string): Promise<StripeResult>;\n\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options: StripeElementsOptions): StripeElements;\n}\n\nexport interface StripeResult {\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n}\n\nexport interface StripeHostWindow extends Window {\n    bcStripeClient?: StripeClient;\n    bcStripeElements?: StripeElements;\n    Stripe?<T = StripeClient>(\n        stripePublishableKey: string,\n        options?: StripeConfigurationOptions,\n    ): T;\n}\n\nexport enum StripePaymentMethodType {\n    CreditCard = 'card',\n    Link = 'link',\n    EPS = 'eps',\n    GRABPAY = 'grabpay',\n    BANCONTACT = 'bancontact',\n    IDEAL = 'ideal',\n    ALIPAY = 'alipay',\n    KLARNA = 'klarna',\n    OCS = 'optimized_checkout',\n}\n\ntype AutoOrNever = StripeStringConstants.AUTO | StripeStringConstants.NEVER;\n\nexport enum StripeStringConstants {\n    NEVER = 'never',\n    AUTO = 'auto',\n    ALWAYS = 'always',\n    PAYMENT = 'payment',\n    IF_REQUIRED = 'if_required',\n}\n\nexport enum StripeElementType {\n    PAYMENT = 'payment',\n    AUTHENTICATION = 'linkAuthentication',\n    SHIPPING = 'address',\n    EXPRESS_CHECKOUT = 'expressCheckout',\n}\n\nexport enum StripePaymentIntentStatus {\n    REQUIRES_PAYMENT_METHOD = 'requires_payment_method',\n    REQUIRES_CONFIRMATION = 'requires_confirmation',\n    REQUIRES_ACTION = 'requires_action',\n    PROCESSING = 'processing',\n    SUCCEEDED = 'succeeded',\n    CANCELED = 'canceled',\n}\n\nexport interface StripePaymentMethod extends PaymentMethod {\n    initializationData: StripeInitializationData;\n}\n\nexport interface StripeInitializationData {\n    stripePublishableKey: string;\n    stripeConnectedAccount: string;\n    shopperLanguage: string;\n    customerSessionToken?: string;\n    enableLink?: boolean;\n    allowRedisplayForStoredInstruments?: boolean;\n    captureMethod?: 'automatic' | 'manual';\n}\n\nexport interface StripeElementUpdateOptions {\n    shouldShowTerms?: boolean;\n}\n\nexport interface StripeAdditionalActionRequired {\n    type: string;\n    data: {\n        token?: string;\n        redirect_url?: string;\n    };\n}\n\nexport interface StripeAdditionalActionResponseBody {\n    additional_action_required: StripeAdditionalActionRequired;\n    three_ds_result: {\n        token?: string;\n    };\n}\n\nexport enum StripeElementEvent {\n    CLICK = 'click',\n    CHANGE = 'change',\n    READY = 'ready',\n    SHIPPING_ADDRESS_CHANGE = 'shippingaddresschange',\n    SHIPPING_RATE_CHANGE = 'shippingratechange',\n    CONFIRM = 'confirm',\n    CANCEL = 'cancel',\n    LOADER_START = 'loaderstart',\n}\n\nexport interface LineItem {\n    name: string;\n    amount: number;\n}\n\nexport interface StripeSavePaymentMethod {\n    maxVisiblePaymentMethods?: number;\n}\n\nexport enum StripeInstrumentSetupFutureUsage {\n    ON_SESSION = 'on_session',\n    OFF_SESSION = 'off_session',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    StripeClient,\n    StripeElements,\n    StripeElementsOptions,\n    StripeHostWindow,\n    StripeInitializationData,\n} from './stripe';\n\nexport default class StripeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        initializationData: StripeInitializationData,\n        betas?: string[],\n        apiVersion?: string,\n    ): Promise<StripeClient> {\n        if (this.stripeWindow.bcStripeClient) {\n            return this.stripeWindow.bcStripeClient;\n        }\n\n        const stripe = await this.load();\n        const { stripePublishableKey, stripeConnectedAccount } = initializationData;\n        const options = {\n            ...(stripeConnectedAccount ? { stripeAccount: stripeConnectedAccount } : {}),\n            ...(betas ? { betas } : {}),\n            ...(apiVersion ? { apiVersion } : {}),\n        };\n\n        const stripeClient = stripe<StripeClient>(stripePublishableKey, options);\n\n        Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n\n        return stripeClient;\n    }\n\n    async getElements(\n        stripeClient: StripeClient,\n        options: StripeElementsOptions,\n    ): Promise<StripeElements> {\n        let stripeElements = this.stripeWindow.bcStripeElements;\n\n        if (!stripeElements) {\n            stripeElements = stripeClient.elements(options);\n\n            Object.assign(this.stripeWindow, { bcStripeElements: stripeElements });\n        } else {\n            await this.updateStripeElements(options);\n        }\n\n        return stripeElements;\n    }\n\n    async updateStripeElements(options: StripeElementsOptions) {\n        const stripeElements = this.stripeWindow.bcStripeElements;\n\n        if (!stripeElements) {\n            return;\n        }\n\n        stripeElements.update(options);\n        await stripeElements.fetchUpdates();\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n\n            if (!this.stripeWindow.Stripe) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripePaymentMethod } from './stripe';\n\nexport function isStripePaymentMethodLike(\n    paymentMethod: PaymentMethod,\n): paymentMethod is StripePaymentMethod {\n    return (\n        typeof paymentMethod === 'object' &&\n        paymentMethod !== null &&\n        'initializationData' in paymentMethod &&\n        (paymentMethod as StripePaymentMethod).initializationData !== undefined &&\n        (paymentMethod as StripePaymentMethod).initializationData !== null &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData === 'object' &&\n        'stripePublishableKey' in (paymentMethod as StripePaymentMethod).initializationData &&\n        'stripeConnectedAccount' in (paymentMethod as StripePaymentMethod).initializationData &&\n        'shopperLanguage' in (paymentMethod as StripePaymentMethod).initializationData &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData.stripePublishableKey !==\n            'undefined' &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData.stripeConnectedAccount !==\n            'undefined' &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData.shopperLanguage !==\n            'undefined'\n    );\n}\n","import {\n    PaymentProviderCustomer,\n    StripeAcceleratedCheckoutCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isStripeAcceleratedCheckoutCustomer(\n    customer: PaymentProviderCustomer,\n): customer is StripeAcceleratedCheckoutCustomer {\n    return 'stripeLinkAuthenticationState' in customer;\n}\n","export const STRIPE_CLIENT_BETAS = [\n    'payment_element_beta_2',\n    'alipay_pm_beta_1',\n    'link_default_integration_beta_1',\n    'shipping_address_element_beta_1',\n    'address_element_beta_1',\n];\n\nexport const STRIPE_CLIENT_API_VERSION = '2020-03-02;alipay_beta=v1;link_beta=v1';\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    isStripePaymentMethodLike,\n    StripeAppearanceOptions,\n    StripeClient,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementType,\n    StripeEventType,\n    StripeFormMode,\n    StripeScriptLoader,\n} from '../stripe-utils';\n\nimport isStripeAcceleratedCheckoutCustomer from './is-stripe-accelerated-checkout-customer';\nimport { STRIPE_CLIENT_API_VERSION, STRIPE_CLIENT_BETAS } from './stripe-upe-constants';\nimport { WithStripeUPECustomerInitializeOptions } from './stripeupe-customer-initialize-options';\n\nexport default class StripeUPECustomerStrategy implements CustomerStrategy {\n    private _stripeElements?: StripeElements;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithStripeUPECustomerInitializeOptions,\n    ): Promise<void> {\n        let stripeUPEClient: StripeClient;\n\n        if (!options.stripeupe) {\n            throw new InvalidArgumentError(\n                `Unable to proceed because \"options\" argument is not provided.`,\n            );\n        }\n\n        const { container, gatewayId, methodId, onEmailChange, getStyles, isLoading } =\n            options.stripeupe;\n\n        Object.entries(options.stripeupe).forEach(([key, value]) => {\n            if (!value) {\n                throw new InvalidArgumentError(\n                    `Unable to proceed because \"${key}\" argument is not provided.`,\n                );\n            }\n        });\n\n        await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { clientToken } = paymentMethod;\n\n        if (!isStripePaymentMethodLike(paymentMethod) || !clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const { email } = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const stripePaymentProviderCustomer = isStripeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n        const stripeLinkAuthenticationState =\n            stripePaymentProviderCustomer.stripeLinkAuthenticationState;\n\n        if (!email) {\n            let appearance: StripeAppearanceOptions | undefined;\n            const styles = typeof getStyles === 'function' && getStyles();\n\n            if (styles) {\n                appearance = {\n                    variables: {\n                        colorPrimary: styles.fieldInnerShadow,\n                        colorBackground: styles.fieldBackground,\n                        colorText: styles.labelText,\n                        colorDanger: styles.fieldErrorText,\n                        colorTextSecondary: styles.labelText,\n                        colorTextPlaceholder: styles.fieldPlaceholderText,\n                    },\n                    rules: {\n                        '.Input': {\n                            borderColor: styles.fieldBorder,\n                            color: styles.fieldText,\n                            boxShadow: styles.fieldInnerShadow,\n                        },\n                    },\n                };\n            } else {\n                appearance = {};\n            }\n\n            stripeUPEClient = await this.scriptLoader.getStripeClient(\n                paymentMethod.initializationData,\n                STRIPE_CLIENT_BETAS,\n                STRIPE_CLIENT_API_VERSION,\n            );\n\n            this._stripeElements = await this.scriptLoader.getElements(stripeUPEClient, {\n                clientSecret: clientToken,\n                appearance,\n            });\n\n            const { getBillingAddress, getConsignments } =\n                this.paymentIntegrationService.getState();\n            const consignments = getConsignments();\n            const id = consignments?.[0]?.id;\n            const { email: billingEmail } = getBillingAddress() || {};\n            const options = billingEmail\n                ? { defaultValues: { mode: StripeFormMode.SHIPPING, email: billingEmail } }\n                : {};\n            const linkAuthenticationElement =\n                this._stripeElements.getElement(StripeElementType.AUTHENTICATION) ||\n                this._stripeElements.create(StripeElementType.AUTHENTICATION, options);\n\n            linkAuthenticationElement.on(StripeElementEvent.CHANGE, (event: StripeEventType) => {\n                if (!('authenticated' in event)) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCustomer);\n                }\n\n                this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    stripeLinkAuthenticationState: event.authenticated,\n                });\n\n                if (event.complete) {\n                    onEmailChange(event.authenticated, event.value.email);\n                } else {\n                    onEmailChange(false, '');\n                }\n\n                if (isLoading) {\n                    isLoading(false);\n                }\n\n                if (stripeLinkAuthenticationState === undefined && event.authenticated && id) {\n                    this.paymentIntegrationService.deleteConsignment(id);\n                }\n            });\n            linkAuthenticationElement.mount(`#${container}`);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        this._stripeElements?.getElement(StripeElementType.AUTHENTICATION)?.unmount();\n\n        return Promise.resolve();\n    }\n\n    signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    signOut(options?: RequestOptions): Promise<void> {\n        this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeScriptLoader } from '../stripe-utils';\n\nimport StripeUPECustomerStrategy from './stripe-upe-customer-strategy';\n\nconst createStripeUPECustomerStrategy: CustomerStrategyFactory<StripeUPECustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new StripeUPECustomerStrategy(\n        paymentIntegrationService,\n        new StripeScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createStripeUPECustomerStrategy, [{ id: 'stripeupe' }]);\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    Address,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport StripeOCSPaymentInitializeOptions from '../stripe-ocs/stripe-ocs-initialize-options';\nimport StripeUPEPaymentInitializeOptions from '../stripe-upe/stripe-upe-initialize-options';\n\nimport { isStripeError } from './is-stripe-error';\nimport {\n    AddressOptions,\n    StripeAdditionalActionRequired,\n    StripeClient,\n    StripeConfirmPaymentData,\n    StripeElement,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    StripePaymentIntentStatus,\n    StripeStringConstants,\n} from './stripe';\nimport StripeScriptLoader from './stripe-script-loader';\n\nexport default class StripeIntegrationService {\n    private isMounted = false;\n    private checkoutEventsUnsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n    ) {}\n\n    deinitialize(): void {\n        this.checkoutEventsUnsubscribe?.();\n        this.isMounted = false;\n    }\n\n    initCheckoutEventsSubscription(\n        gatewayId: string,\n        methodId: string,\n        stripeInitializationOptions:\n            | StripeUPEPaymentInitializeOptions\n            | StripeOCSPaymentInitializeOptions,\n        stripeElements?: StripeElements,\n    ): void {\n        this.checkoutEventsUnsubscribe = this.paymentIntegrationService.subscribe(\n            async () => {\n                const paymentElement = stripeElements?.getElement(StripeElementType.PAYMENT);\n\n                if (!paymentElement) {\n                    return;\n                }\n\n                try {\n                    await this.updateStripePaymentIntent(gatewayId, methodId);\n                } catch (error) {\n                    if (this.isMounted) {\n                        paymentElement.unmount();\n                        this.isMounted = false;\n                    }\n\n                    if (error instanceof Error) {\n                        stripeInitializationOptions.onError?.(error);\n                    }\n\n                    return;\n                }\n\n                if (!this.isMounted) {\n                    await stripeElements?.fetchUpdates();\n                    this.mountElement(paymentElement, stripeInitializationOptions.containerId);\n                }\n            },\n            (state) => state.getCheckout()?.outstandingBalance,\n            (state) => state.getCheckout()?.coupons,\n        );\n    }\n\n    mountElement(stripeElement: StripeElement, containerId: string): void {\n        if (!document.getElementById(containerId)) {\n            return;\n        }\n\n        stripeElement.mount(`#${containerId}`);\n        this.isMounted = true;\n    }\n\n    mapAppearanceVariables(styles: NonNullable<StripeUPEPaymentInitializeOptions['style']>) {\n        return {\n            colorPrimary: styles.fieldInnerShadow,\n            colorBackground: styles.fieldBackground,\n            colorText: styles.labelText,\n            colorDanger: styles.fieldErrorText,\n            colorTextSecondary: styles.labelText,\n            colorTextPlaceholder: styles.fieldPlaceholderText,\n            colorIcon: styles.fieldPlaceholderText,\n        };\n    }\n\n    mapInputAppearanceRules(styles: NonNullable<StripeUPEPaymentInitializeOptions['style']>) {\n        return {\n            borderColor: styles.fieldBorder,\n            color: styles.fieldText,\n            boxShadow: styles.fieldInnerShadow,\n        };\n    }\n\n    throwStripeError(stripeError?: unknown): never {\n        if (isStripeError(stripeError)) {\n            this.throwDisplayableStripeError(stripeError);\n\n            if (this.isCancellationError(stripeError)) {\n                throw new PaymentMethodCancelledError();\n            }\n        }\n\n        throw new PaymentMethodFailedError();\n    }\n\n    throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n\n    isCancellationError(stripeError?: StripeError): boolean {\n        const errorMessage = stripeError?.payment_intent.last_payment_error?.message;\n\n        return !!errorMessage && errorMessage.indexOf('canceled') !== -1;\n    }\n\n    throwPaymentConfirmationProceedMessage() {\n        // INFO: for case if payment was successfully confirmed on Stripe side but on BC side something go wrong, request failed and order status hasn't changed yet\n        // For shopper we need to show additional message that BC is waiting for stripe confirmation, to prevent additional payment creation\n        throw new PaymentMethodFailedError(\n            \"We've received your order and are processing your payment. Once the payment is verified, your order will be completed. We will send you an email when it's completed. Please note, this process may take a few minutes depending on the processing times of your chosen method.\",\n        );\n    }\n\n    async isPaymentCompleted(methodId: string, stripeUPEClient?: StripeClient): Promise<boolean> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n\n        if (\n            !paymentMethod.clientToken ||\n            !stripeUPEClient ||\n            !features['PI-626.Block_unnecessary_payment_confirmation_for_StripeUPE']\n        ) {\n            return false;\n        }\n\n        const { paymentIntent } = await stripeUPEClient.retrievePaymentIntent(\n            paymentMethod.clientToken,\n        );\n\n        return paymentIntent?.status === StripePaymentIntentStatus.SUCCEEDED;\n    }\n\n    mapStripePaymentData(\n        stripeElements?: StripeElements,\n        returnUrl?: string,\n        shouldAllowRedisplay = false,\n    ): StripeConfirmPaymentData {\n        const billingAddress = this.paymentIntegrationService.getState().getBillingAddress();\n        const { firstName, lastName, email } = billingAddress || {};\n        const address = this._mapStripeAddress(billingAddress);\n\n        if (!stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!email || !address || !address.city || !address.country || !firstName || !lastName) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            elements: stripeElements,\n            redirect: StripeStringConstants.IF_REQUIRED,\n            confirmParams: {\n                payment_method_data: {\n                    ...(shouldAllowRedisplay ? { allow_redisplay: 'always' } : {}),\n                    billing_details: {\n                        email,\n                        address,\n                        name: `${firstName} ${lastName}`,\n                    },\n                },\n                ...(returnUrl && { return_url: returnUrl }),\n            },\n        };\n    }\n\n    isAdditionalActionError(errors: Array<{ code: string }>): boolean {\n        return some(errors, { code: 'additional_action_required' });\n    }\n\n    isRedirectAction(additionalAction: StripeAdditionalActionRequired): boolean {\n        const {\n            type,\n            data: { redirect_url },\n        } = additionalAction;\n\n        return type === 'redirect_to_url' && !!redirect_url;\n    }\n\n    isOnPageAdditionalAction(additionalAction: StripeAdditionalActionRequired): boolean {\n        const {\n            type,\n            data: { token },\n        } = additionalAction;\n\n        return type === 'additional_action_requires_payment_method' && !!token;\n    }\n\n    async updateStripePaymentIntent(gatewayId: string, methodId: string): Promise<void> {\n        // INFO: to trigger payment intent update on the BE side we need to make stripe config request\n        const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.scriptLoader.updateStripeElements({ clientSecret: clientToken });\n    }\n\n    private _mapStripeAddress(address?: Address): AddressOptions {\n        if (address) {\n            const {\n                city,\n                address1,\n                address2,\n                countryCode: country,\n                postalCode,\n                stateOrProvinceCode,\n            } = address;\n\n            return {\n                city,\n                country,\n                postal_code: postalCode,\n                line1: address1,\n                line2: address2,\n                ...(stateOrProvinceCode ? { state: stateOrProvinceCode } : {}),\n            };\n        }\n\n        throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n    }\n}\n","import { StripeError } from './stripe';\n\nexport function isStripeError(error: unknown): error is StripeError {\n    return typeof error === 'object' && error !== null && 'type' in error;\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","export const expressCheckoutAllowedCountryCodes = [\n    'AC',\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CV',\n    'CW',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SZ',\n    'TA',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'XK',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n    'ZZ',\n];\n","import { round } from 'lodash';\n\nimport {\n    AmountTransformer,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    InvalidArgumentError,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { StripeIntegrationService, StripePaymentMethodType } from '../stripe-utils';\nimport { isStripePaymentMethodLike } from '../stripe-utils/is-stripe-payment-method-like';\nimport {\n    StripeAdditionalActionRequired,\n    StripeClient,\n    StripeElement,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementsCreateOptions,\n    StripeElementType,\n    StripeError,\n    StripeEventType,\n    StripeResult,\n    StripeStringConstants,\n} from '../stripe-utils/stripe';\nimport StripeScriptLoader from '../stripe-utils/stripe-script-loader';\n\nimport { expressCheckoutAllowedCountryCodes } from './constants';\nimport { StripeLinkV2Event, StripeLinkV2Options, StripeLinkV2ShippingRate } from './stripe-ocs';\nimport { WithStripeOCSCustomerInitializeOptions } from './stripe-ocs-customer-initialize-options';\n\nexport default class StripeLinkV2CustomerStrategy implements CustomerStrategy {\n    private _stripeClient?: StripeClient;\n    private _stripeElements?: StripeElements;\n    private _linkV2Element?: StripeElement;\n    private _amountTransformer?: AmountTransformer;\n    private _onComplete?: (orderId?: number) => Promise<never>;\n    private _loadingIndicatorContainer?: string;\n    private _captureMethod?: 'automatic' | 'manual';\n    private _currencyCode?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n        private stripeIntegrationService: StripeIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithStripeOCSCustomerInitializeOptions,\n    ): Promise<void> {\n        const { stripeocs } = options || {};\n\n        if (!stripeocs) {\n            throw new InvalidArgumentError(\n                `Unable to proceed because \"options\" argument is not provided.`,\n            );\n        }\n\n        const { methodId, gatewayId, container } = stripeocs;\n\n        if (!container || !methodId || !gatewayId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { loadingContainerId, buttonHeight, onComplete } = stripeocs;\n\n        this._loadingIndicatorContainer = loadingContainerId;\n\n        this._onComplete = onComplete;\n\n        if (!isStripePaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = paymentMethod;\n        const { captureMethod } = initializationData;\n\n        this._captureMethod = captureMethod;\n        this._stripeClient = await this.scriptLoader.getStripeClient(initializationData);\n\n        await this._mountExpressCheckoutElement(\n            methodId,\n            container,\n            this._stripeClient,\n            buttonHeight,\n        );\n\n        return Promise.resolve();\n    }\n\n    signIn() {\n        return Promise.resolve();\n    }\n\n    signOut() {\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout() {\n        return Promise.resolve();\n    }\n\n    deinitialize() {\n        return Promise.resolve();\n    }\n\n    private async _mountExpressCheckoutElement(\n        methodId: string,\n        container: string,\n        stripeExpressCheckoutClient: StripeClient,\n        buttonHeight = 40,\n    ) {\n        const shouldRequireShippingAddress = this._shouldRequireShippingAddress();\n        const expressCheckoutOptions: StripeElementsCreateOptions = {\n            shippingAddressRequired: shouldRequireShippingAddress,\n            ...(shouldRequireShippingAddress\n                ? { allowedShippingCountries: await this._getAvailableCountries() }\n                : {}),\n            ...(shouldRequireShippingAddress\n                ? { shippingRates: [{ id: '_', amount: 0, displayName: 'Pending rates' }] }\n                : {}),\n            billingAddressRequired: true,\n            emailRequired: true,\n            phoneNumberRequired: true,\n            paymentMethods: {\n                link: StripeStringConstants.AUTO,\n                applePay: StripeStringConstants.NEVER,\n                googlePay: StripeStringConstants.NEVER,\n                amazonPay: StripeStringConstants.NEVER,\n                paypal: StripeStringConstants.NEVER,\n                klarna: StripeStringConstants.NEVER,\n            },\n            // Minimal buttonHeight value is 40\n            buttonHeight,\n        };\n\n        const { cartAmount } = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        const elementsOptions: StripeLinkV2Options = {\n            mode: 'payment',\n            amount: this._toCents(cartAmount),\n            currency: this._getCurrency(),\n            ...(this._captureMethod ? { captureMethod: this._captureMethod } : {}),\n        };\n\n        this._stripeElements = stripeExpressCheckoutClient.elements(elementsOptions);\n\n        this._linkV2Element = this._stripeElements.create(\n            StripeElementType.EXPRESS_CHECKOUT,\n            expressCheckoutOptions,\n        );\n        this._linkV2Element.mount(`#${container}`);\n        this._initializeEvents(this._linkV2Element, methodId);\n    }\n\n    /** Events * */\n\n    private _initializeEvents(expressCheckoutElement: StripeElement, methodId: string): void {\n        const shouldRequireShippingAddress = this._shouldRequireShippingAddress();\n\n        if (shouldRequireShippingAddress) {\n            expressCheckoutElement.on(StripeElementEvent.SHIPPING_ADDRESS_CHANGE, async (event) =>\n                this._onShippingAddressChange(event),\n            );\n            expressCheckoutElement.on(StripeElementEvent.SHIPPING_RATE_CHANGE, async (event) =>\n                this._onShippingRateChange(event),\n            );\n        }\n\n        expressCheckoutElement.on(StripeElementEvent.CONFIRM, async (event) =>\n            this._onConfirm(event, methodId),\n        );\n\n        expressCheckoutElement.on(StripeElementEvent.CANCEL, this._onCancel);\n    }\n\n    private async _onShippingAddressChange(event: StripeEventType) {\n        if ('address' in event) {\n            const shippingAddress = event.address;\n            // Depending on the country, some fields can be missing or partially redacted.\n            // For example, the shipping address in the US can only contain a city, state, and ZIP code.\n            // The full shipping address appears in the confirm event object after the purchase is confirmed in the browser’s payment interface.\n            const result = {\n                firstName: '',\n                lastName: '',\n                phone: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: shippingAddress?.city || '',\n                countryCode: shippingAddress?.country || '',\n                postalCode: shippingAddress?.postal_code || '',\n                stateOrProvince: shippingAddress?.state || '',\n                stateOrProvinceCode: '',\n                customFields: [],\n            };\n\n            await this.paymentIntegrationService.updateShippingAddress(result);\n\n            const shippingRates = await this._getAvailableShippingOptions();\n\n            await this._updateDisplayedPrice();\n\n            event.resolve({\n                shippingRates,\n            });\n        }\n    }\n\n    private _onCancel() {\n        throw new PaymentMethodCancelledError();\n    }\n\n    private async _onShippingRateChange(event: StripeEventType) {\n        if ('shippingRate' in event) {\n            const { shippingRate } = event;\n\n            await this._handleShippingOptionChange(shippingRate?.id);\n\n            await this._updateDisplayedPrice();\n\n            event.resolve({});\n        }\n    }\n\n    /** Confirm methods * */\n    private async _onConfirm(event: StripeEventType, methodId: string) {\n        if (\n            'billingDetails' in event &&\n            'shippingAddress' in event &&\n            this._stripeClient &&\n            this._stripeElements\n        ) {\n            await this._updateShippingAndBillingAddress(event);\n            await this.paymentIntegrationService.submitOrder();\n\n            const paymentMethod = this._getPaymentPayload(methodId);\n\n            try {\n                await this.paymentIntegrationService.submitPayment(paymentMethod);\n            } catch (error) {\n                await this._processAdditionalAction(error, methodId);\n            }\n        }\n\n        return Promise.resolve();\n    }\n\n    private async _updateShippingAndBillingAddress(event: StripeLinkV2Event) {\n        const shouldRequireShippingAddress = this._shouldRequireShippingAddress();\n\n        const firstName =\n            event.shippingAddress?.name?.split(' ')[0] ||\n            event.billingDetails?.name?.split(' ')[0] ||\n            '';\n        const lastName =\n            event.shippingAddress?.name?.split(' ')[1] ||\n            event.billingDetails?.name?.split(' ')[1] ||\n            '';\n\n        if (shouldRequireShippingAddress) {\n            const shippingAddress = this._mapShippingAddress(\n                event.shippingAddress,\n                event.billingDetails,\n                firstName,\n                lastName,\n            );\n\n            await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        const billingAddress = this._mapBillingAddress(\n            event.shippingAddress,\n            event.billingDetails,\n            firstName,\n            lastName,\n        );\n\n        await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n    }\n\n    private _mapShippingAddress(\n        shippingAddress: StripeLinkV2Event['shippingAddress'],\n        billingDetails: StripeLinkV2Event['billingDetails'],\n        firstName: string,\n        lastName: string,\n    ) {\n        return {\n            firstName,\n            lastName,\n            phone: billingDetails?.phone || '',\n            company: '',\n            address1: shippingAddress?.address?.line1 || '',\n            address2: shippingAddress?.address?.line2 || '',\n            city: shippingAddress?.address?.city || '',\n            countryCode: shippingAddress?.address?.country || '',\n            postalCode: shippingAddress?.address?.postal_code || '',\n            stateOrProvince: shippingAddress?.address?.state || '',\n            stateOrProvinceCode: shippingAddress?.address?.state || '',\n            customFields: [],\n        };\n    }\n\n    private _mapBillingAddress(\n        shippingAddress: StripeLinkV2Event['shippingAddress'],\n        billingDetails: StripeLinkV2Event['billingDetails'],\n        firstName: string,\n        lastName: string,\n    ) {\n        return {\n            email: billingDetails?.email || '',\n            firstName,\n            lastName,\n            phone: billingDetails?.phone || '',\n            company: '',\n            address1: billingDetails?.address?.line1 || '',\n            address2: '',\n            city: billingDetails?.address?.city || '',\n            countryCode: billingDetails?.address?.country || '',\n            postalCode: billingDetails?.address?.postal_code || '',\n            stateOrProvince: billingDetails?.address?.state || '',\n            stateOrProvinceCode: shippingAddress?.address?.state || '',\n            customFields: [],\n        };\n    }\n\n    private async _processAdditionalAction(error: unknown, methodId: string): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !this.stripeIntegrationService.isAdditionalActionError(error.body.errors)\n        ) {\n            throw error;\n        }\n\n        if (!this._stripeClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { data: additionalActionData } = error.body.additional_action_required;\n        const { token } = additionalActionData;\n\n        const { paymentIntent } = await this._confirmStripePaymentOrThrow(\n            additionalActionData,\n            methodId,\n        );\n\n        const paymentPayload = this._getPaymentPayload(methodId, paymentIntent?.id || token);\n\n        try {\n            this._toggleLoadingIndicator(true);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n            await this._completeCheckoutFlow();\n        } catch (error) {\n            this.stripeIntegrationService.throwPaymentConfirmationProceedMessage();\n        } finally {\n            this._toggleLoadingIndicator(false);\n        }\n    }\n\n    private async _confirmStripePaymentOrThrow(\n        additionalActionData: StripeAdditionalActionRequired['data'],\n        methodId: string,\n    ): Promise<StripeResult | never> {\n        const { token, redirect_url } = additionalActionData;\n        const stripePaymentData = this.stripeIntegrationService.mapStripePaymentData(\n            this._stripeElements,\n            redirect_url,\n        );\n        let stripeError: StripeError | undefined;\n\n        try {\n            const isPaymentCompleted = await this.stripeIntegrationService.isPaymentCompleted(\n                methodId,\n                this._stripeClient,\n            );\n\n            const confirmationResult = !isPaymentCompleted\n                ? await this._stripeClient?.confirmPayment({\n                      elements: stripePaymentData.elements,\n                      clientSecret: token,\n                      redirect: StripeStringConstants.IF_REQUIRED,\n                      confirmParams: {\n                          return_url: stripePaymentData.confirmParams?.return_url,\n                      },\n                  })\n                : await this._stripeClient?.retrievePaymentIntent(token || '');\n\n            stripeError = confirmationResult?.error;\n\n            if (stripeError || !confirmationResult?.paymentIntent) {\n                throw new PaymentMethodFailedError();\n            }\n\n            return confirmationResult;\n        } catch (error: unknown) {\n            return this.stripeIntegrationService.throwStripeError(stripeError);\n        }\n    }\n\n    private async _completeCheckoutFlow() {\n        if (typeof this._onComplete === 'function') {\n            return this._onComplete();\n        }\n\n        window.location.replace('/order-confirmation');\n\n        return Promise.resolve();\n    }\n\n    private _getPaymentPayload(methodId: string, token?: string): Payment {\n        const cartId = this.paymentIntegrationService.getState().getCart()?.id || '';\n        const formattedPayload = {\n            cart_id: cartId,\n            ...(token ? { credit_card_token: { token } } : {}),\n            confirm: false,\n            payment_method_id: StripePaymentMethodType.Link,\n        };\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload,\n            },\n        };\n    }\n\n    /** Utils * */\n\n    private _shouldRequireShippingAddress() {\n        const { getCartOrThrow } = this.paymentIntegrationService.getState();\n        const { lineItems } = getCartOrThrow();\n\n        return !!lineItems.physicalItems.length;\n    }\n\n    private async _updateDisplayedPrice() {\n        if (this._stripeElements) {\n            this._stripeElements.update({\n                currency: this._getCurrency(),\n                mode: 'payment',\n                amount: await this._getTotalPrice(),\n            });\n        }\n    }\n\n    private _getCurrency() {\n        if (!this._currencyCode) {\n            const { code: currencyCode } = this.paymentIntegrationService\n                .getState()\n                .getCartOrThrow().currency;\n\n            this._currencyCode = currencyCode.toLowerCase();\n        }\n\n        return this._currencyCode;\n    }\n\n    private async _getTotalPrice(): Promise<number> {\n        await this.paymentIntegrationService.loadCheckout();\n\n        const { getCheckoutOrThrow, getCartOrThrow } = this.paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return this._toCents(+totalPrice);\n    }\n\n    private async _getAvailableCountries(): Promise<string[]> {\n        const countries = await this.paymentIntegrationService.loadShippingCountries();\n        const deliverableCountries =\n            countries.getShippingCountries()?.map((country) => country.code) || [];\n\n        return deliverableCountries.filter((code) => {\n            return expressCheckoutAllowedCountryCodes.includes(code);\n        });\n    }\n\n    private async _getAvailableShippingOptions(): Promise<StripeLinkV2ShippingRate[] | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            return;\n        }\n\n        const consignment = consignments[0];\n        const options = (consignment.availableShippingOptions || []).map(\n            this._getStripeShippingOption.bind(this),\n        );\n\n        const selectedId = consignment.selectedShippingOption?.id;\n\n        if (!selectedId) {\n            await this._handleShippingOptionChange(options[0]?.id);\n        } else {\n            // Set selected shipping option first in the array, as it will be selected by default\n            options.sort((option) => (option.id === selectedId ? -1 : 0));\n        }\n\n        return options;\n    }\n\n    private _getStripeShippingOption({ id, cost, description }: ShippingOption) {\n        return {\n            id,\n            displayName: description,\n            amount: this._toCents(cost),\n        };\n    }\n\n    private async _handleShippingOptionChange(optionId?: string) {\n        if (!optionId || optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this.paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private _getAmountTransformer() {\n        if (this._amountTransformer) {\n            return this._amountTransformer;\n        }\n\n        const { getCart } = this.paymentIntegrationService.getState();\n        const { currency } = getCart() || {};\n\n        if (currency) {\n            const amountTransformer = new AmountTransformer(currency.decimalPlaces);\n\n            return amountTransformer;\n        }\n    }\n\n    private _toCents(amount: number) {\n        const fallbackValue = Math.round(amount * 100);\n        const amountTransformer = this._getAmountTransformer();\n\n        if (amountTransformer) {\n            return amountTransformer.toInteger(amount);\n        }\n\n        return fallbackValue;\n    }\n\n    private _toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this._loadingIndicatorContainer) {\n            this.loadingIndicator.show(this._loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { DEFAULT_CONTAINER_STYLES, LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { StripeIntegrationService, StripeScriptLoader } from '../stripe-utils';\n\nimport StripeLinkV2CustomerStrategy from './stripe-link-v2-customer-strategy';\n\nconst createStripeLinkV2CustomerStrategy: CustomerStrategyFactory<StripeLinkV2CustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const stripeScriptLoader = new StripeScriptLoader(getScriptLoader());\n    const loadingIndicator = new LoadingIndicator({\n        containerStyles: DEFAULT_CONTAINER_STYLES,\n    });\n\n    return new StripeLinkV2CustomerStrategy(\n        paymentIntegrationService,\n        stripeScriptLoader,\n        new StripeIntegrationService(paymentIntegrationService, stripeScriptLoader),\n        loadingIndicator,\n    );\n};\n\nexport default toResolvableModule(createStripeLinkV2CustomerStrategy, [{ id: 'stripeocs' }]);\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { IndividualCardElementOptions } from './stripev3';\n\nexport default function isIndividualCardElementOptions(\n    individualCardElementOptions: any,\n): individualCardElementOptions is IndividualCardElementOptions {\n    return (\n        individualCardElementOptions !== null &&\n        typeof individualCardElementOptions === 'object' &&\n        'cardNumberElementOptions' in individualCardElementOptions &&\n        'cardCvcElementOptions' in individualCardElementOptions &&\n        'cardExpiryElementOptions' in individualCardElementOptions &&\n        typeof individualCardElementOptions.cardNumberElementOptions !== 'undefined' &&\n        typeof individualCardElementOptions.cardCvcElementOptions !== 'undefined' &&\n        typeof individualCardElementOptions.cardExpiryElementOptions !== 'undefined'\n    );\n}\n","interface BaseElementOptions {\n    /**\n     * Customize the appearance of an element using CSS properties passed in a [Style](https://stripe.com/docs/js/appendix/style) object,\n     * which consists of CSS properties nested under objects for each variant.\n     */\n    style?: StripeElementStyle;\n\n    /**\n     * Set custom class names on the container DOM element when the Stripe element is in a particular state.\n     */\n    classes?: StripeElementClasses;\n\n    /**\n     * Applies a disabled state to the Element such that user input is not accepted. Default is false.\n     */\n    disabled?: boolean;\n}\n\nexport interface CreatePaymentMethodCardData extends PaymentMethodCreateParams {\n    card?: StripeElement;\n}\n\nexport interface CreatePaymentMethodIdealData extends PaymentMethodCreateParams {\n    ideal?: StripeElement;\n}\n\nexport interface CreatePaymentMethodSepaData extends PaymentMethodCreateParams {\n    sepa_debit?: StripeElement;\n}\n\n/**\n * The PaymentIntent object.\n */\nexport interface PaymentIntent {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * Status of this PaymentIntent. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).\n     */\n    status: 'succeeded' | string;\n\n    /**\n     * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n     */\n    last_payment_error: LastPaymentError | null;\n}\n\n/**\n * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n */\nexport interface LastPaymentError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n}\n\n/**\n * The PaymentMethod object\n */\nexport interface PaymentMethod {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value.\n     * It contains additional information specific to the PaymentMethod type.\n     */\n    type: string;\n}\n\nexport interface PaymentMethodCreateParams {\n    /**\n     * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n     */\n    billing_details?: StripeBillingDetails;\n}\n\nexport interface StripeError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n\n    /**\n     * A human-readable code for the error obtained\n     */\n    code?: string;\n}\n\n/**\n * CSS properties supported by Stripe.js.\n */\ninterface StripeElementCSSProperties {\n    /**\n     * The [background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) CSS property.\n     *\n     * This property works best with the `::selection` pseudo-class.\n     * In other cases, consider setting the background color on the element's container instaed.\n     */\n    backgroundColor?: string;\n\n    /**\n     * The [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS property.\n     */\n    color?: string;\n\n    /**\n     * The [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) CSS property.\n     */\n    fontFamily?: string;\n\n    /**\n     * The [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) CSS property.\n     */\n    fontSize?: string;\n\n    /**\n     * The [font-smoothing](https://developer.mozilla.org/en-US/docs/Web/CSS/font-smoothing) CSS property.\n     */\n    fontSmoothing?: string;\n\n    /**\n     * The [font-style](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style) CSS property.\n     */\n    fontStyle?: string;\n\n    /**\n     * The [font-variant](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant) CSS property.\n     */\n    fontVariant?: string;\n\n    /**\n     * The [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) CSS property.\n     */\n    fontWeight?: string;\n\n    /**\n     * A custom property, used to set the color of the icons that are rendered in an element.\n     */\n    iconColor?: string;\n\n    /**\n     * The [line-height](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) CSS property.\n     *\n     * To avoid cursors being rendered inconsistently across browsers, consider using a padding on the element's container instead.\n     */\n    lineHeight?: string;\n\n    /**\n     * The [letter-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing) CSS property.\n     */\n    letterSpacing?: string;\n\n    /**\n     * The [text-align](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) CSS property.\n     *\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    textAlign?: string;\n\n    /**\n     * The [padding](https://developer.mozilla.org/en-US/docs/Web/CSS/padding) CSS property.\n     *\n     * Available for the `idealBank` element.\n     * Accepts integer `px` values.\n     */\n    padding?: string;\n\n    /**\n     * The [text-decoration](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration) CSS property.\n     */\n    textDecoration?: string;\n\n    /**\n     * The [text-shadow](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow) CSS property.\n     */\n    textShadow?: string;\n\n    /**\n     * The [text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) CSS property.\n     */\n    textTransform?: string;\n}\n\ninterface StripeElementStyleVariant extends StripeElementCSSProperties {\n    ':hover'?: StripeElementCSSProperties;\n\n    ':focus'?: StripeElementCSSProperties;\n\n    '::placeholder'?: StripeElementCSSProperties;\n\n    '::selection'?: StripeElementCSSProperties;\n\n    ':-webkit-autofill'?: StripeElementCSSProperties;\n\n    /**\n     * Available for all elements except the `paymentRequestButton` element\n     */\n    ':disabled'?: StripeElementCSSProperties;\n\n    /**\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    '::-ms-clear'?: StripeElementCSSProperties & { display: string };\n}\n\nexport interface CardElementOptions extends BaseElementOptions {\n    /**\n     * A pre-filled set of values to include in the input (e.g., {postalCode: '94110'}).\n     * Note that sensitive card information (card number, CVC, and expiration date)\n     * cannot be pre-filled\n     */\n    value?: string;\n\n    /**\n     * Hide the postal code field. Default is false. If you are already collecting a\n     * full billing address or postal code elsewhere, set this to true.\n     */\n    hidePostalCode?: boolean;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n\n    /*\n     * Hides the icon in the Element, Default is false\n     */\n    hideIcon?: boolean;\n}\n\ninterface BaseIndividualElementOptions extends BaseElementOptions {\n    containerId: string;\n}\n\nexport interface CardNumberElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n\n    showIcon?: boolean;\n    /**\n     * Appearance of the icon in the Element. Either `solid` or `default`\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface CardExpiryElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n}\n\nexport interface CardCvcElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n}\n\nexport interface IbanElementOptions extends BaseElementOptions {\n    /**\n     * Specify the list of countries or country-groups whose IBANs you want to allow.\n     * Must be ['SEPA'].\n     */\n    supportedCountries?: string[];\n\n    /**\n     * Customize the country and format of the placeholder IBAN. Default is DE.\n     */\n    placeholderCountry?: string;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface IdealElementOptions extends BaseElementOptions {\n    value?: string;\n\n    /**\n     * Hides the icon in the Element. Default is false.\n     */\n    hideIcon?: boolean;\n}\n\nexport interface ZipCodeElementOptions {\n    containerId: string;\n}\n\nexport enum IconStyle {\n    Solid = 'solid',\n    Default = 'default',\n}\n\nexport interface StripeElementStyle {\n    /**\n     * Base variant—all other variants inherit from these styles.\n     */\n    base?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has valid input.\n     */\n    complete?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has no customer input.\n     */\n    empty?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has invalid input.\n     */\n    invalid?: StripeElementStyleVariant;\n}\n\nexport interface StripeElementClasses {\n    /**\n     * The base class applied to the container. Defaults to StripeElement.\n     */\n    base?: string;\n\n    /**\n     * The class name to apply when the Element is complete. Defaults to StripeElement--complete.\n     */\n    complete?: string;\n\n    /**\n     * The class name to apply when the Element is empty. Defaults to StripeElement--empty.\n     */\n    empty?: string;\n\n    /**\n     * The class name to apply when the Element is focused. Defaults to StripeElement--focus.\n     */\n    focus?: string;\n\n    /**\n     * The class name to apply when the Element is invalid. Defaults to StripeElement--invalid.\n     */\n    invalid?: string;\n\n    /**\n     * The class name to apply when the Element has its value autofilled by the browser\n     * (only on Chrome and Safari). Defaults to StripeElement--webkit-autofill.\n     */\n    webkitAutoFill?: string;\n}\n\nexport interface StripeAddress {\n    /**\n     * City, district, suburb, town, or village.\n     */\n    city?: string;\n\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     */\n    country?: string;\n\n    /**\n     * Address line 1 (e.g., street, PO Box, or company name).\n     */\n    line1: string;\n\n    /**\n     * Address line 2 (e.g., apartment, suite, unit, or building).\n     */\n    line2?: string;\n\n    /**\n     * ZIP or postal code.\n     */\n    postal_code?: string;\n\n    /**\n     * State, county, province, or region.\n     */\n    state?: string;\n}\n\nexport interface StripeBillingDetails {\n    /**\n     * Billing address.\n     */\n    address?: StripeAddress;\n\n    /**\n     * Email address.\n     */\n    email?: string;\n\n    /**\n     * Full name.\n     */\n    name?: string;\n\n    /**\n     * Billing phone number (including extension).\n     */\n    phone?: string;\n}\n\nexport interface StripeShippingAddress {\n    /**\n     * Shipping Address\n     */\n    address: StripeAddress;\n\n    /**\n     * Recipient name\n     */\n    name: string;\n\n    /**\n     * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.\n     */\n    carrier?: string;\n\n    /**\n     * Recipient phone (including extension).\n     */\n    phone?: string;\n\n    /**\n     * The tracking number for a physical product, obtained from the delivery service.\n     * If multiple tracking numbers were generated for this purchase, please separate them with commas.\n     */\n    tracking_number?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmAlipayPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmAlipayPaymentData {\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmCardPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmCardPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodCardData;\n\n    /*\n     * The [shipping details](https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n     *\n     * @recommended\n     */\n    shipping?: StripeShippingAddress;\n\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n\n    /**\n     * Indicates that you intend to make future payments with this PaymentIntent's payment method.\n     *\n     * If present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.\n     *\n     * Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow.\n     */\n    setup_future_usage?: 'off_session' | 'on_session' | null;\n}\n\n/**\n * Data to be sent with a `stripe.confirmIdealPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmIdealPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodIdealData;\n\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmSEPAPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmSepaPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodSepaData;\n}\n\nexport type StripeConfirmPaymentData =\n    | StripeConfirmAlipayPaymentData\n    | StripeConfirmCardPaymentData\n    | StripeConfirmIdealPaymentData\n    | StripeConfirmSepaPaymentData\n    | undefined;\n\nexport type StripeElementOptions =\n    | CardElementOptions\n    | CardExpiryElementOptions\n    | CardNumberElementOptions\n    | CardCvcElementOptions\n    | IdealElementOptions\n    | IbanElementOptions\n    | ZipCodeElementOptions;\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n}\n\nexport interface StripeElements {\n    /**\n     * Creates a `AlipayElement` | `CardElement` | `CardCvcElement` |`CardExpiryElement` | `CardExpiryElement` | `CardNumberElement` | `IdealBankElement` | `IbanElement`.\n     */\n    create(elementType: StripeElementType, options?: StripeElementOptions): StripeElement;\n\n    /**\n     * Looks up a previously created `Element` by its type.\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CssFontSource {\n    /**\n     * A relative or absolute URL pointing to a CSS file with [@font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) definitions, for example:\n     * `https://fonts.googleapis.com/css?family=Open+Sans`\n     * Note that if you are using a [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) (CSP),\n     * [additional directives](https://stripe.com/docs/security#content-security-policy) may be necessary.\n     */\n    cssSrc: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CustomFontSource {\n    /**\n     * The name to give the font.\n     */\n    family: string;\n\n    /**\n     * A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your\n     * custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix.\n     */\n    src: string;\n\n    /**\n     * A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value.\n     */\n    display?: string;\n\n    /**\n     * One of normal, italic, oblique. Defaults to normal.\n     */\n    style?: string;\n\n    /**\n     * A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value.\n     */\n    unicodeRange?: string;\n\n    /**\n     * A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). Note that this is a string, not a number.\n     */\n    weight?: string;\n}\n\nexport type CustomFont = CssFontSource | CustomFontSource;\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: CustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n}\n\nexport interface StripeConfirmPaymentOptions {\n    /**\n     * Set this to false if you want to [manually handle the authorization redirect](https://stripe.com/docs/payments/ideal#handle-redirect). Default is true.\n     */\n    handleActions?: boolean;\n}\n\nexport interface StripeV3Client {\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options?: StripeElementsOptions): StripeElements;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_alipay_payment\n     *\n     * Use `stripe.confirmAlipayPayment` in the Alipay payment method creation flow when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents) with data you provide, and it will automatically\n     * redirect the customer to the authorize the transaction. Once authorization is complete, the customer will be redirected\n     * back to your specified `return_url`. When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * If you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmAlipayPayment` by default, will trigger a redirect when successful. If there is an error, or when handling\n     * `next_actions` manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmAlipayPayment` may take several seconds to complete. During that time, you should disable your\n     * form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should\n     * be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmAlipayPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmAlipayPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_card_payment\n     *\n     * Use `stripe.confirmCardPayment` when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents)\n     * with `data` you provide and carry out 3DS or other next actions if they are required.\n     *\n     * If you are using [Dynamic 3D Secure](https://stripe.com/docs/payments/3d-secure#three-ds-radar), `stripe.confirmCardPayment` will\n     * trigger your Radar rules to execute and may open a dialog for your customer to authenticate their payment.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmCardPayment` will return a Promise which resolves with a result object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that stripe.confirmCardPayment may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     *\n     * Additionally, `stripe.confirmCardPayment may trigger` a [3D Secure](https://stripe.com/docs/payments/3d-secure) authentication\n     * challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like\n     * screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out\n     * after this method completes.\n     *\n     */\n    confirmCardPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmCardPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_ideal_payment\n     *\n     * Use `stripe.confirmIdealPayment` in the [iDEAL Payments with Payment Methods](https://stripe.com/docs/payments/ideal)\n     * flow when the customer submits your payment form. When called, it will confirm the `PaymentIntent` with `data` you\n     * provide, and it will automatically redirect the customer to the authorize the transaction.\n     * Once authorization is complete, the customer will be redirected back to your specified `return_url`.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * By default, `stripe.confirmIdealPayment` will trigger a redirect when successful. If there is an error, or when handling\n     * next actions manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result`\n     * object. This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmIdealPayment` may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmIdealPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmIdealPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     *\n     * Use `stripe.confirmSepaDebitPayment` in the [SEPA Direct Debit Payments](https://stripe.com/docs/payments/sepa-debit)\n     * with Payment Methods flow when the customer submits your payment form. When called, it will confirm the\n     * [PaymentIntent](https://stripe.com/docs/api/payment_intents) with `data` you provide. Note that there are some additional\n     * requirements to this flow that are not covered in this reference. Refer to our [integration guide](https://stripe.com/docs/payments/sepa-debit\n     * for more details.\n     *\n     * When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent,\n     * this method can automatically create and attach a new PaymentMethod for you. If you have already attached a\n     * [PaymentMethod](https://stripe.com/docs/api/payment_methods) you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_sepa_debit_payment\n     */\n    confirmSepaDebitPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n         */\n        data?: StripeConfirmSepaPaymentData,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * Use stripe.createPaymentMethod to convert payment information collected by elements into a PaymentMethod\n     * object that you safely pass to your server to use in an API call.\n     *\n     * @docs https://stripe.com/docs/js/payment_methods/create_payment_method\n     *\n     * @param type: String, The type of the PaymentMethod to create. Refer to the PaymentMethod API for all possible values.\n     * @param card: StripeElement, A card or cardNumber Element.\n     * @param billing_details: StripeBillingDetails, Billing information associated with the PaymentMethod that\n     * may be used or required by particular types of payment methods.\n     */\n    createPaymentMethod(\n        params: CreatePaymentMethodParams,\n    ): Promise<{ paymentMethod?: PaymentMethod; error?: StripeError }>;\n\n    /*\n     * Use stripe.handleCardAction in the Payment Intents API manual confirmation flow to handle a PaymentIntent\n     * with the requires_action status. It will throw an error if the PaymentIntent has a different status.\n     *\n     * @docs https://stripe.com/docs/js/payment_intents/handle_card_action\n     *\n     * @param paymentIntentClientSecret: String, The client secret of the PaymentIntent to handle.\n     */\n    handleCardAction(\n        paymentIntentClientSecret: string,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n}\n\nexport interface CreatePaymentMethodParams {\n    type: StripePaymentMethodType;\n    card: StripeElement;\n    billing_details?: StripeBillingDetails;\n    allow_redisplay?: 'always' | 'limited' | 'unspecified';\n}\n\nexport interface StripeHostWindow extends Window {\n    Stripe?(stripePublishableKey: string, options?: StripeConfigurationOptions): StripeV3Client;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    CreditCard = 'card',\n    IDEAL = 'idealBank',\n    Sepa = 'iban',\n}\n\nexport enum StripePaymentMethodType {\n    Alipay = 'alipay',\n    CreditCard = 'card',\n    IDEAL = 'ideal',\n    Sepa = 'sepa_debit',\n}\n\n/**\n * Initialization options.\n */\nexport interface StripeConfigurationOptions {\n    /**\n     * For usage with [Connect](https://stripe.com/docs/connect) only.\n     * Specifying a connected account ID (e.g., acct_24BFMpJ1svR5A89k) allows you to perform actions on behalf of that account.\n     */\n    stripeAccount: string;\n\n    /**\n     * Override your account's [API version](https://stripe.com/docs/api/versioning)\n     */\n    apiVersion?: string;\n\n    /**\n     * A locale used to globally configure localization in Stripe. Setting the locale here will localize error strings for all Stripe.js methods. It will also configure the locale for Elements and Checkout. Default is auto (Stripe detects the locale of the browser).\n     * Note that Checkout supports a slightly different set of locales than Stripe.js.\n     */\n    locale?: string;\n\n    betas?: string[];\n}\n\nexport interface StripeAdditionalActionData {\n    redirect_url?: string;\n    intent?: string;\n}\n\nexport interface StripeAdditionalAction {\n    type: string;\n    data: StripeAdditionalActionData;\n}\n\nexport interface StripeCardElements {\n    [index: number]: StripeElement;\n}\n\nexport interface IndividualCardElementOptions {\n    cardCvcElementOptions: CardCvcElementOptions;\n    cardExpiryElementOptions: CardExpiryElementOptions;\n    cardNumberElementOptions: CardNumberElementOptions;\n    zipCodeElementOptions?: ZipCodeElementOptions;\n}\n\nexport interface StripeV3PaymentMethod extends PaymentMethod {\n    initializationData: StripeV3InitializationData;\n}\n\nexport interface StripeV3InitializationData {\n    stripePublishableKey: string;\n    stripeConnectedAccount: string;\n    useIndividualCardFields: boolean;\n    allowRedisplayForStoredInstruments?: boolean;\n}\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport enum StripeV3ErrorType {\n    AuthFailure = 'auth_failure',\n}\n\nexport default class StripeV3Error extends StandardError {\n    subtype: string;\n\n    constructor(subtype: StripeV3ErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'stripev3_error';\n        this.subtype = subtype;\n    }\n}\n\nfunction getErrorMessage(type: StripeV3ErrorType) {\n    switch (type) {\n        case StripeV3ErrorType.AuthFailure:\n            return `User did not authenticate`;\n\n        default:\n            return 'There was an error while processing your payment. Please try again or contact us.';\n    }\n}\n","import { includes, isEmpty, omitBy, some } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    Customer,\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isBillingAddressLike,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StripeV3FormattedPayload,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isIndividualCardElementOptions from './is-individual-card-element-options';\nimport {\n    PaymentIntent,\n    StripeAdditionalAction,\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElements,\n    StripeConfirmIdealPaymentData,\n    StripeConfirmPaymentData,\n    StripeConfirmSepaPaymentData,\n    StripeElement,\n    StripeElementOptions,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    PaymentMethod as StripePaymentMethod,\n    StripePaymentMethodType,\n    StripeV3Client,\n    StripeV3PaymentMethod,\n} from './stripev3';\nimport StripeV3Error, { StripeV3ErrorType } from './stripev3-error';\nimport StripeV3PaymentInitializeOptions, {\n    WithStripeV3PaymentInitializeOptions,\n} from './stripev3-initialize-options';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nconst APM_REDIRECT = [StripeElementType.Alipay, StripeElementType.IDEAL];\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private initializeOptions?: StripeV3PaymentInitializeOptions;\n    private stripeV3Client?: StripeV3Client;\n    private stripeElements?: StripeElements;\n    private stripeElement?: StripeElement;\n    private stripeCardElements?: StripeCardElements;\n    private useIndividualCardFields?: boolean;\n    private hostedForm?: HostedForm;\n    private isDeinitialize?: boolean;\n    private _allowRedisplayForStoredInstruments?: boolean;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeV3ScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions & WithStripeV3PaymentInitializeOptions) {\n        const { stripev3, methodId, gatewayId } = options;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        this.initializeOptions = stripev3;\n        this.isDeinitialize = false;\n\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(methodId);\n\n        const {\n            initializationData: {\n                stripePublishableKey,\n                stripeConnectedAccount,\n                useIndividualCardFields,\n                allowRedisplayForStoredInstruments,\n            },\n        } = paymentMethod as StripeV3PaymentMethod;\n\n        this._allowRedisplayForStoredInstruments = allowRedisplayForStoredInstruments;\n\n        const form = this.getInitializeOptions().form;\n\n        this.useIndividualCardFields = useIndividualCardFields;\n        this.stripeV3Client = await this.loadStripeJs(stripePublishableKey, stripeConnectedAccount);\n\n        if (\n            this.isCreditCard(methodId) &&\n            this.shouldShowTSVHostedForm(methodId, gatewayId) &&\n            form\n        ) {\n            this.hostedForm = await this.mountCardVerificationFields(form);\n        } else {\n            this.stripeElement = await this.mountCardFields(methodId);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        let formattedPayload: StripeV3FormattedPayload;\n        let stripeError: StripeError | undefined;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { paymentData, gatewayId, methodId } = payment;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const shouldSubmitOrderBeforeLoadingAPM = includes(APM_REDIRECT, methodId);\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        try {\n            if (shouldSubmitOrderBeforeLoadingAPM) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n            }\n\n            if (gatewayId) {\n                await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                    params: { method: methodId },\n                });\n            }\n\n            const state = this.paymentIntegrationService.getState();\n\n            if (isVaultedInstrument(paymentData)) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n\n                const { instrumentId } = paymentData;\n                const paymentMethod = state.getPaymentMethodOrThrow(payment.methodId);\n                const clientToken = paymentMethod.clientToken;\n\n                if (!clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return await this.executeWithVaulted(\n                    payment,\n                    instrumentId,\n                    shouldSetAsDefaultInstrument,\n                    clientToken,\n                );\n            }\n\n            const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n            const result = await this.confirmStripePayment(paymentMethod);\n            const { clientToken, method } = paymentMethod;\n            const { id: token } = result.paymentIntent ?? result.paymentMethod ?? { id: '' };\n\n            stripeError = result.error;\n\n            formattedPayload = {\n                credit_card_token: { token },\n                vault_payment_instrument: shouldSaveInstrument,\n                confirm: false,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n            };\n\n            if (method === StripeElementType.CreditCard) {\n                formattedPayload.client_token = clientToken;\n            }\n\n            if (!shouldSubmitOrderBeforeLoadingAPM) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n            }\n\n            const paymentPayload = this.buildPaymentPayload(\n                methodId,\n                formattedPayload,\n                shouldSetAsDefaultInstrument,\n            );\n\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this.processAdditionalAction(\n                this.handleEmptyPaymentIntentError(error, stripeError),\n                methodId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        this.isDeinitialize = true;\n        this.unmountElement();\n\n        return Promise.resolve();\n    }\n\n    private buildPaymentPayload(\n        methodId: string,\n        formattedPayload: StripeV3FormattedPayload,\n        shouldSetAsDefaultInstrument: boolean | undefined,\n    ): Payment {\n        const paymentData = shouldSetAsDefaultInstrument\n            ? {\n                  formattedPayload: {\n                      ...formattedPayload,\n                      set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                  },\n              }\n            : { formattedPayload };\n\n        return { methodId, paymentData };\n    }\n\n    private isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private isAuthError(stripeError: StripeError | undefined) {\n        return stripeError?.code === 'payment_intent_authentication_failure';\n    }\n\n    private isCreditCard(methodId: string): boolean {\n        return methodId === StripePaymentMethodType.CreditCard;\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n        const definedFields = omitBy(options.form?.fields, isEmpty);\n\n        return !isEmpty(definedFields);\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string, gatewayId?: string): boolean {\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return Boolean(paymentMethod.config.isHostedFormEnabled);\n    }\n\n    private async confirmStripePayment(paymentMethod: PaymentMethod): Promise<{\n        paymentIntent?: PaymentIntent | undefined;\n        paymentMethod?: StripePaymentMethod | undefined;\n        error?: StripeError | undefined;\n    }> {\n        const { clientToken: clientSecret, method, returnUrl } = paymentMethod;\n\n        if (!clientSecret) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        switch (method) {\n            case StripeElementType.Alipay:\n                return this.getStripeJs().confirmAlipayPayment(\n                    clientSecret,\n                    { return_url: returnUrl },\n                    { handleActions: false },\n                );\n\n            case StripeElementType.IDEAL: {\n                const data = this.mapStripePaymentData(StripePaymentMethodType.IDEAL, returnUrl);\n\n                return this.getStripeJs().confirmIdealPayment(clientSecret, data, {\n                    handleActions: false,\n                });\n            }\n\n            case StripeElementType.Sepa: {\n                const data = this.mapStripePaymentData(StripePaymentMethodType.Sepa);\n\n                return this.getStripeJs().confirmSepaDebitPayment(clientSecret, data);\n            }\n\n            default: {\n                const card = this.useIndividualCardFields\n                    ? this.getStripeCardElements()[0]\n                    : this.getStripeElement();\n                const billingDetails = this.mapStripeBillingDetails(\n                    this.paymentIntegrationService.getState().getBillingAddress(),\n                    this.paymentIntegrationService.getState().getCustomer(),\n                );\n                const shouldAllowRedisplay = this._allowRedisplayForStoredInstruments;\n\n                return this.getStripeJs().createPaymentMethod({\n                    type: StripePaymentMethodType.CreditCard,\n                    card,\n                    billing_details: billingDetails,\n                    ...(shouldAllowRedisplay ? { allow_redisplay: 'always' } : {}),\n                });\n            }\n        }\n    }\n\n    private async executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n        token: string,\n        shouldSetAsDefaultInstrument: boolean | undefined,\n        clientToken: string,\n    ): Promise<any> {\n        const formattedPayload = {\n            bigpay_token: { token },\n            confirm: true,\n            client_token: clientToken,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n        };\n\n        if (\n            this.isHostedPaymentFormEnabled(payment.methodId, payment.gatewayId) &&\n            this.hostedForm\n        ) {\n            const form = this.hostedForm;\n\n            if (payment.paymentData && isVaultedInstrument(payment.paymentData)) {\n                payment.paymentData = {\n                    ...payment.paymentData,\n                    instrumentId: JSON.stringify({\n                        token: payment.paymentData?.instrumentId || '',\n                        client_token: clientToken,\n                    }),\n                };\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this.paymentIntegrationService.loadCurrentOrder();\n        }\n\n        const paymentPayload = this.buildPaymentPayload(\n            payment.methodId,\n            formattedPayload,\n            shouldSetAsDefaultInstrument,\n        );\n\n        return this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    private getInitializeOptions(): StripeV3PaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private getStripeCardElements(): StripeCardElements {\n        if (!this.stripeCardElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeCardElements;\n    }\n\n    private getStripeElement(): StripeElement {\n        if (!this.stripeElement) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeElement;\n    }\n\n    private getStripeJs(): StripeV3Client {\n        if (!this.stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeV3Client;\n    }\n\n    private handleEmptyPaymentIntentError(error: unknown, stripeError: StripeError | undefined) {\n        if (!isRequestError(error)) {\n            return error;\n        }\n\n        return some(error.body.errors, { code: 'required_field' }) && stripeError\n            ? new Error(stripeError.message)\n            : error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeV3Client> {\n        if (this.stripeV3Client) {\n            return Promise.resolve(this.stripeV3Client);\n        }\n\n        return this.scriptLoader.load(\n            stripePublishableKey,\n            stripeConnectedAccount,\n            this.paymentIntegrationService.getState().getLocale(),\n        );\n    }\n\n    private mapStripeAddress(address?: Address): StripeAddress {\n        if (address) {\n            const {\n                city,\n                countryCode: country,\n                address1: line1,\n                address2: line2,\n                postalCode,\n                stateOrProvinceCode: state,\n            } = address;\n\n            return { city, country, line1, line2, postal_code: postalCode, state };\n        }\n\n        return { line1: '' };\n    }\n\n    private mapStripeBillingDetails(\n        billingAddress?: BillingAddress,\n        customer?: Customer,\n    ): StripeBillingDetails {\n        const { firstName, lastName } = billingAddress ||\n            customer || { firstName: 'Guest', lastName: '' };\n        const name = `${firstName} ${lastName}`.trim();\n        const { options } = this.getInitializeOptions();\n\n        if (this.useIndividualCardFields && isIndividualCardElementOptions(options)) {\n            const { zipCodeElementOptions } = options;\n\n            if (zipCodeElementOptions) {\n                const postalCode = document.getElementById(zipCodeElementOptions.containerId)\n                    ? (\n                          document.getElementById(\n                              zipCodeElementOptions.containerId,\n                          ) as HTMLInputElement\n                      ).value\n                    : '';\n\n                if (postalCode && billingAddress) {\n                    billingAddress = { ...billingAddress, postalCode };\n                }\n            }\n        }\n\n        const address = {\n            address: this.mapStripeAddress(billingAddress),\n        };\n\n        if (customer && customer.addresses[0] && isBillingAddressLike(customer.addresses[0])) {\n            const customerAddress = customer.addresses[0];\n            const { email } = customer;\n            const { phone } = customerAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        if (billingAddress) {\n            const { email, phone } = billingAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        return { ...address, name };\n    }\n\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType.IDEAL,\n        returnUrl?: string,\n    ): StripeConfirmIdealPaymentData;\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType.Sepa,\n    ): StripeConfirmSepaPaymentData;\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType,\n        returnUrl?: string,\n    ): StripeConfirmPaymentData {\n        const customer = this.paymentIntegrationService.getState().getCustomer();\n        const billingAddress = this.paymentIntegrationService.getState().getBillingAddress();\n\n        const result: Partial<StripeConfirmPaymentData> = {\n            payment_method: {\n                [stripePaymentMethodType]: this.getStripeElement(),\n                billing_details: this.mapStripeBillingDetails(billingAddress, customer),\n            },\n        };\n\n        if (stripePaymentMethodType === StripePaymentMethodType.IDEAL) {\n            return { ...result, return_url: returnUrl };\n        }\n\n        return result;\n    }\n\n    private mountCardFields(methodId: string): Promise<StripeElement> {\n        const { options, containerId } = this.getInitializeOptions();\n\n        let stripeElement: StripeElement;\n\n        return new Promise((resolve, reject) => {\n            if (!this.stripeElements) {\n                this.stripeElements = this.getStripeJs().elements();\n            }\n\n            switch (methodId) {\n                case StripeElementType.CreditCard:\n                    if (this.useIndividualCardFields && isIndividualCardElementOptions(options)) {\n                        const {\n                            cardNumberElementOptions,\n                            cardExpiryElementOptions,\n                            cardCvcElementOptions,\n                        } = options;\n\n                        const cardNumberElement =\n                            this.stripeElements.getElement(StripeElementType.CardNumber) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardNumber,\n                                cardNumberElementOptions,\n                            );\n                        const cardExpiryElement =\n                            this.stripeElements.getElement(StripeElementType.CardExpiry) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardExpiry,\n                                cardExpiryElementOptions,\n                            );\n                        const cardCvcElement =\n                            this.stripeElements.getElement(StripeElementType.CardCvc) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardCvc,\n                                cardCvcElementOptions,\n                            );\n\n                        this.stripeCardElements = [\n                            cardNumberElement,\n                            cardExpiryElement,\n                            cardCvcElement,\n                        ];\n                        stripeElement = this.stripeCardElements[0];\n\n                        try {\n                            cardNumberElement.mount(`#${cardNumberElementOptions.containerId}`);\n                            cardExpiryElement.mount(`#${cardExpiryElementOptions.containerId}`);\n                            cardCvcElement.mount(`#${cardCvcElementOptions.containerId}`);\n                        } catch (error) {\n                            if (!this.isDeinitialize) {\n                                reject(\n                                    new InvalidArgumentError(\n                                        'Unable to mount Stripe component without valid container ID.',\n                                    ),\n                                );\n                            }\n                        }\n                    } else {\n                        stripeElement =\n                            this.stripeElements.getElement(methodId) ||\n                            this.stripeElements.create(methodId, options as StripeElementOptions);\n\n                        try {\n                            stripeElement.mount(`#${containerId}`);\n                        } catch (error) {\n                            if (!this.isDeinitialize) {\n                                reject(\n                                    new InvalidArgumentError(\n                                        'Unable to mount Stripe component without valid container ID.',\n                                    ),\n                                );\n                            }\n                        }\n                    }\n\n                    break;\n\n                case StripeElementType.IDEAL:\n                case StripeElementType.Sepa:\n                    stripeElement =\n                        this.stripeElements.getElement(methodId) ||\n                        this.stripeElements.create(methodId, options as StripeElementOptions);\n\n                    try {\n                        stripeElement.mount(`#${containerId}`);\n                    } catch (error) {\n                        if (!this.isDeinitialize) {\n                            reject(\n                                new InvalidArgumentError(\n                                    'Unable to mount Stripe component without valid container ID.',\n                                ),\n                            );\n                        }\n                    }\n\n                    break;\n\n                case StripeElementType.Alipay:\n                    break;\n            }\n\n            resolve(stripeElement);\n        });\n    }\n\n    private async mountCardVerificationFields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const bigpayBaseUrl = storeConfig.paymentSettings.bigpayBaseUrl;\n\n        const form = this.paymentIntegrationService.createHostedForm(bigpayBaseUrl, formOptions);\n\n        await form.attach();\n\n        return form;\n    }\n\n    private async processAdditionalAction(\n        error: unknown,\n        methodId: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<any | never> {\n        if (!isRequestError(error)) {\n            throw error;\n        }\n\n        const isAdditionalActionError = some(error.body.errors, {\n            code: 'additional_action_required',\n        });\n        const isThreeDSecureRequiredError = some(error.body.errors, {\n            code: 'three_d_secure_required',\n        });\n\n        if (isAdditionalActionError) {\n            const action: StripeAdditionalAction = error.body.additional_action_required;\n\n            if (action && action.type === 'redirect_to_url') {\n                return new Promise(() => {\n                    if (action.data.redirect_url) {\n                        window.location.replace(action.data.redirect_url);\n                    }\n                });\n            }\n        }\n\n        if (isThreeDSecureRequiredError) {\n            const clientSecret = error.body.three_ds_result.token;\n            const needsConfirm = false;\n            let catchedConfirmError = false;\n            let result;\n\n            try {\n                result = await this.getStripeJs().confirmCardPayment(clientSecret);\n            } catch (error) {\n                catchedConfirmError = true;\n            }\n\n            if (result?.error) {\n                if (this.isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                if (this.isAuthError(result.error)) {\n                    throw new StripeV3Error(StripeV3ErrorType.AuthFailure);\n                }\n\n                throw new Error(result.error.message);\n            }\n\n            const token = this.getPaymentToken(\n                result?.paymentIntent,\n                clientSecret,\n                catchedConfirmError,\n            );\n\n            const formattedPayload = {\n                credit_card_token: { token },\n                vault_payment_instrument: shouldSaveInstrument,\n                confirm: needsConfirm,\n            };\n\n            const paymentPayload = this.buildPaymentPayload(\n                methodId,\n                formattedPayload,\n                shouldSetAsDefaultInstrument,\n            );\n\n            try {\n                return await this.paymentIntegrationService.submitPayment(paymentPayload);\n            } catch (error) {\n                throw this.handleEmptyPaymentIntentError(error, result?.error);\n            }\n        }\n\n        throw error;\n    }\n\n    private getPaymentToken(\n        paymentIntent: PaymentIntent | undefined,\n        clientSecret: string,\n        catchedConfirmError: boolean,\n    ): string {\n        if (!paymentIntent || catchedConfirmError) {\n            return clientSecret;\n        }\n\n        return paymentIntent.id;\n    }\n\n    private shouldShowTSVHostedForm(methodId: string, gatewayId: string): boolean {\n        return (\n            this.isHostedFieldAvailable() && this.isHostedPaymentFormEnabled(methodId, gatewayId)\n        );\n    }\n\n    private unmountElement(): void {\n        if (this.stripeElement) {\n            this.stripeElement.unmount();\n            this.stripeElement = undefined;\n        }\n    }\n}\n","import BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: any): address is BillingAddress {\n    return (\n        typeof address === 'object' &&\n        address !== null &&\n        'id' in address &&\n        typeof address.id !== 'undefined'\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    load(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeV3Client> {\n        return this.scriptLoader.loadScript('https://js.stripe.com/v3/').then(() => {\n            if (!this.stripeWindow.Stripe) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this.stripeWindow.Stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: ['payment_intent_beta_3', 'alipay_pm_beta_1'],\n                apiVersion: '2020-03-02;alipay_beta=v1',\n            });\n        });\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport StripeV3PaymentStrategy from './stripev3-payment-strategy';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nconst createStripeV3PaymentStrategy: PaymentStrategyFactory<any> = (paymentIntegrationService) => {\n    return new StripeV3PaymentStrategy(\n        paymentIntegrationService,\n        new StripeV3ScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createStripeV3PaymentStrategy, [{ gateway: 'stripev3' }]);\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","export const supportedLocales: Record<string, string[]> = {\n    ar: ['ar'],\n    bg: ['bg'],\n    cs: ['cs'],\n    da: ['da'],\n    de: ['de'],\n    el: ['el'],\n    en: ['en', 'en-GB'],\n    es: ['es', 'es-419'],\n    et: ['et'],\n    fi: ['fi'],\n    fil: ['fil'],\n    fr: ['fr', 'fr-CA'],\n    he: ['he'],\n    hr: ['hr'],\n    hu: ['hu'],\n    id: ['id'],\n    it: ['it'],\n    ja: ['ja'],\n    ko: ['ko'],\n    lt: ['lt'],\n    lv: ['lv'],\n    ms: ['ms'],\n    mt: ['mt'],\n    nb: ['nb'],\n    nl: ['nl'],\n    pl: ['pl'],\n    pt: ['pt', 'pt-BR'],\n    ro: ['ro'],\n    ru: ['ru'],\n    sk: ['sk'],\n    sl: ['sl'],\n    sv: ['sv'],\n    th: ['th'],\n    tr: ['tr'],\n    vi: ['vi'],\n    zh: ['zh', 'zh-HK', 'zh-TW'],\n};\n","import { supportedLocales } from './stripe-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace(/_/g, '-').toLowerCase().split('-');\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'auto';\n    }\n\n    const formattedLocale = country ? `${language}-${country.toUpperCase()}` : language;\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { some } from 'lodash';\n\nimport {\n    FormattedHostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestError,\n    StripeUPEIntent,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    formatLocale,\n    isStripePaymentMethodLike,\n    StripeAdditionalActionRequired,\n    StripeAppearanceOptions,\n    StripeClient,\n    StripeElement,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementsCreateOptions,\n    StripeElementType,\n    StripeElementUpdateOptions,\n    StripeError,\n    StripeEventType,\n    StripeInitializationData,\n    StripeIntegrationService,\n    StripePaymentMethodType,\n    StripeResult,\n    StripeScriptLoader,\n    StripeStringConstants,\n} from '../stripe-utils';\n\nimport isStripeAcceleratedCheckoutCustomer from './is-stripe-accelerated-checkout-customer';\nimport { STRIPE_CLIENT_API_VERSION, STRIPE_CLIENT_BETAS } from './stripe-upe-constants';\nimport StripeUPEPaymentInitializeOptions, {\n    WithStripeUPEPaymentInitializeOptions,\n} from './stripe-upe-initialize-options';\n\nexport default class StripeUPEPaymentStrategy implements PaymentStrategy {\n    private _stripeUPEClient?: StripeClient;\n    private _stripeElements?: StripeElements;\n    private _isStripeElementUpdateEnabled?: boolean;\n    private _allowRedisplayForStoredInstruments?: boolean;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n        private stripeIntegrationService: StripeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithStripeUPEPaymentInitializeOptions,\n    ): Promise<void> {\n        const { stripeupe, methodId, gatewayId } = options;\n\n        if (!stripeupe?.containerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        this._loadStripeElement(stripeupe, gatewayId, methodId).catch((error) =>\n            stripeupe.onError?.(error),\n        );\n\n        this.stripeIntegrationService.initCheckoutEventsSubscription(\n            gatewayId,\n            methodId,\n            stripeupe,\n            this._stripeElements,\n        );\n\n        return Promise.resolve();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        if (!this._stripeUPEClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { paymentData, methodId, gatewayId } = payment;\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n        const state = this.paymentIntegrationService.getState();\n        const { isStoreCreditApplied: useStoreCredit } = state.getCheckoutOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const stripePaymentProviderCustomer = isStripeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n        const stripeLinkAuthenticationState =\n            stripePaymentProviderCustomer.stripeLinkAuthenticationState;\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        if (gatewayId) {\n            await this.stripeIntegrationService.updateStripePaymentIntent(gatewayId, methodId);\n\n            const { email } = state.getCustomerOrThrow();\n\n            if (stripeLinkAuthenticationState !== undefined && !email) {\n                const billingAddress = state.getBillingAddressOrThrow();\n\n                await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n            }\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        if (isVaultedInstrument(paymentData)) {\n            const { instrumentId } = paymentData;\n\n            await this._executeWithVaulted(\n                payment.methodId,\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n            );\n\n            return;\n        }\n\n        await this._executeWithStripeConfirmation(\n            payment.methodId,\n            stripeLinkAuthenticationState ? false : shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._stripeElements?.getElement(StripeElementType.PAYMENT)?.unmount();\n        this.stripeIntegrationService.deinitialize();\n        this._stripeElements = undefined;\n        this._stripeUPEClient = undefined;\n\n        return Promise.resolve();\n    }\n\n    private async _executeWithStripeConfirmation(\n        methodId: string,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            clientToken || '',\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this._processAdditionalActionWithStripeConfirmation(\n                error,\n                methodId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private async _executeWithVaulted(\n        methodId: string,\n        token: string,\n        shouldSetAsDefaultInstrument: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const cartId = state.getCart()?.id;\n\n        try {\n            const paymentPayload = {\n                methodId,\n                paymentData: {\n                    formattedPayload: {\n                        cart_id: cartId,\n                        bigpay_token: { token },\n                        confirm: false,\n                        client_token: paymentMethod.clientToken,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n\n            return await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            return this._processVaultedAdditionalAction(\n                error,\n                methodId,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private async _loadStripeElement(\n        stripeupe: StripeUPEPaymentInitializeOptions,\n        gatewayId: string,\n        methodId: string,\n    ) {\n        const { containerId, style, render, initStripeElementUpdateTrigger } = stripeupe;\n        const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { checkoutSettings } = state.getStoreConfigOrThrow();\n\n        if (!isStripePaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientToken, initializationData } = paymentMethod;\n        const { shopperLanguage, allowRedisplayForStoredInstruments = false } = initializationData;\n\n        this._allowRedisplayForStoredInstruments = allowRedisplayForStoredInstruments;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._stripeUPEClient = await this._loadStripeJs(initializationData);\n        this._isStripeElementUpdateEnabled =\n            !!checkoutSettings.features['PI-1679.trigger_update_stripe_payment_element'] &&\n            typeof initStripeElementUpdateTrigger === 'function';\n\n        let appearance: StripeAppearanceOptions | undefined;\n\n        if (style) {\n            const styles = style;\n\n            appearance = {\n                variables: this.stripeIntegrationService.mapAppearanceVariables(style),\n                rules: {\n                    '.Input': this.stripeIntegrationService.mapInputAppearanceRules(styles),\n                },\n            };\n        }\n\n        this._stripeElements = await this.scriptLoader.getElements(this._stripeUPEClient, {\n            clientSecret: clientToken,\n            locale: formatLocale(shopperLanguage),\n            appearance,\n        });\n\n        const { getBillingAddress, getShippingAddress } = state;\n        const { postalCode } = getShippingAddress() || getBillingAddress() || {};\n\n        const stripeElement: StripeElement =\n            this._stripeElements.getElement(StripeElementType.PAYMENT) ||\n            this._stripeElements.create(StripeElementType.PAYMENT, {\n                fields: {\n                    billingDetails: {\n                        email: StripeStringConstants.NEVER,\n                        address: {\n                            country: StripeStringConstants.NEVER,\n                            city: StripeStringConstants.NEVER,\n                            postalCode: postalCode\n                                ? StripeStringConstants.NEVER\n                                : StripeStringConstants.AUTO,\n                        },\n                    },\n                },\n                wallets: {\n                    applePay: StripeStringConstants.NEVER,\n                    googlePay: StripeStringConstants.NEVER,\n                },\n                ...this._getStripeElementTerms(),\n            });\n\n        this.stripeIntegrationService.mountElement(stripeElement, containerId);\n\n        stripeElement.on(StripeElementEvent.READY, () => {\n            render();\n        });\n\n        stripeElement.on(StripeElementEvent.CHANGE, (event: StripeEventType) => {\n            if (!event?.value || !('type' in event.value)) {\n                return;\n            }\n\n            this._updateStripeLinkStateByElementType(event.value.type);\n        });\n\n        if (this._isStripeElementUpdateEnabled) {\n            initStripeElementUpdateTrigger?.(this._updateStripeElement.bind(this));\n        }\n    }\n\n    private async _processAdditionalActionWithStripeConfirmation(\n        error: unknown,\n        methodId: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !this.stripeIntegrationService.isAdditionalActionError(error.body.errors)\n        ) {\n            throw error;\n        }\n\n        if (!this._stripeUPEClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { data: additionalActionData } = error.body.additional_action_required;\n        const { token } = additionalActionData;\n\n        const { paymentIntent } = await this._confirmStripePaymentOrThrow(\n            methodId,\n            additionalActionData,\n        );\n\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            paymentIntent?.id || token,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            this.stripeIntegrationService.throwPaymentConfirmationProceedMessage();\n        }\n    }\n\n    private async _confirmStripePaymentOrThrow(\n        methodId: string,\n        additionalActionData: StripeAdditionalActionRequired['data'],\n    ): Promise<StripeResult | never> {\n        const { token, redirect_url } = additionalActionData;\n        const stripePaymentData = this.stripeIntegrationService.mapStripePaymentData(\n            this._stripeElements,\n            redirect_url,\n            !!this._allowRedisplayForStoredInstruments,\n        );\n        let stripeError: StripeError | undefined;\n\n        try {\n            const isPaymentCompleted = await this.stripeIntegrationService.isPaymentCompleted(\n                methodId,\n                this._stripeUPEClient,\n            );\n\n            const confirmationResult = !isPaymentCompleted\n                ? await this._stripeUPEClient?.confirmPayment(stripePaymentData)\n                : await this._stripeUPEClient?.retrievePaymentIntent(token || '');\n\n            stripeError = confirmationResult?.error;\n\n            if (stripeError || !confirmationResult?.paymentIntent) {\n                throw new PaymentMethodFailedError();\n            }\n\n            return confirmationResult;\n        } catch (error: unknown) {\n            this.stripeIntegrationService.throwStripeError(stripeError);\n        }\n    }\n\n    private async _processVaultedAdditionalAction(\n        error: unknown,\n        methodId?: string,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (\n            !methodId ||\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'three_d_secure_required' })\n        ) {\n            throw error;\n        }\n\n        if (!this._stripeUPEClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const clientSecret = error.body.three_ds_result.token;\n        let result;\n        let catchedConfirmError = false;\n\n        try {\n            result = await this._stripeUPEClient.confirmCardPayment(clientSecret);\n        } catch (error) {\n            try {\n                result = await this._stripeUPEClient.retrievePaymentIntent(clientSecret);\n            } catch (error) {\n                catchedConfirmError = true;\n            }\n        }\n\n        if (result?.error) {\n            this.stripeIntegrationService.throwStripeError(result.error);\n        }\n\n        if (!result?.paymentIntent && !catchedConfirmError) {\n            throw new RequestError();\n        }\n\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            catchedConfirmError ? clientSecret : result?.paymentIntent?.id,\n            false,\n            shouldSetAsDefaultInstrument,\n        );\n\n        return this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    private async _loadStripeJs(\n        initializationData: StripeInitializationData,\n    ): Promise<StripeClient> {\n        if (this._stripeUPEClient) {\n            return this._stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(\n            initializationData,\n            STRIPE_CLIENT_BETAS,\n            STRIPE_CLIENT_API_VERSION,\n        );\n    }\n\n    private _getPaymentPayload(\n        methodId: string,\n        token: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Payment {\n        const cartId = this.paymentIntegrationService.getState().getCart()?.id || '';\n        const formattedPayload: StripeUPEIntent & FormattedHostedInstrument = {\n            cart_id: cartId,\n            credit_card_token: { token },\n            confirm: false,\n            vault_payment_instrument: shouldSaveInstrument,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n        };\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload,\n            },\n        };\n    }\n\n    private _updateStripeElement({ shouldShowTerms }: StripeElementUpdateOptions): void {\n        const stripeElement = this._stripeElements?.getElement(StripeElementType.PAYMENT);\n\n        stripeElement?.update({\n            ...this._getStripeElementTerms(shouldShowTerms),\n        });\n    }\n\n    private _getStripeElementTerms(\n        shouldShowTerms?: boolean,\n    ): Pick<StripeElementsCreateOptions, 'terms'> {\n        let card = StripeStringConstants.AUTO;\n\n        if (this._isStripeElementUpdateEnabled) {\n            card = shouldShowTerms ? StripeStringConstants.AUTO : StripeStringConstants.NEVER;\n        }\n\n        return {\n            terms: {\n                card,\n            },\n        };\n    }\n\n    private _updateStripeLinkStateByElementType(paymentElementType: StripePaymentMethodType): void {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const isStripeLinkElementType = paymentElementType === StripePaymentMethodType.Link;\n\n        // INFO: Trigger additional update only if Stripe Link Authentication was skipped on the customer step, but the Link payment element was rendered.\n        if (\n            !isStripeAcceleratedCheckoutCustomer(paymentProviderCustomer) &&\n            isStripeLinkElementType\n        ) {\n            this.paymentIntegrationService.updatePaymentProviderCustomer({\n                stripeLinkAuthenticationState: isStripeLinkElementType,\n            });\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeIntegrationService, StripeScriptLoader } from '../stripe-utils';\n\nimport StripeUPEPaymentStrategy from './stripe-upe-payment-strategy';\n\nconst createStripeUPEPaymentStrategy: PaymentStrategyFactory<StripeUPEPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const stripeScriptLoader = new StripeScriptLoader(getScriptLoader());\n\n    return new StripeUPEPaymentStrategy(\n        paymentIntegrationService,\n        stripeScriptLoader,\n        new StripeIntegrationService(paymentIntegrationService, stripeScriptLoader),\n    );\n};\n\nexport default toResolvableModule(createStripeUPEPaymentStrategy, [\n    { gateway: 'stripeupe' },\n    { gateway: 'stripeupe', id: 'klarna' },\n]);\n","import {\n    InvalidArgumentError,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    formatLocale,\n    isStripePaymentEvent,\n    isStripePaymentMethodLike,\n    StripeAdditionalActionRequired,\n    StripeClient,\n    StripeElement,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    StripeEventType,\n    StripeInitializationData,\n    StripeInstrumentSetupFutureUsage,\n    StripeIntegrationService,\n    StripePIPaymentMethodOptions,\n    StripePIPaymentMethodSavingOptions,\n    StripeResult,\n    StripeScriptLoader,\n    StripeStringConstants,\n} from '../stripe-utils';\n\nimport StripeOCSPaymentInitializeOptions, {\n    WithStripeOCSPaymentInitializeOptions,\n} from './stripe-ocs-initialize-options';\n\nexport default class StripeOCSPaymentStrategy implements PaymentStrategy {\n    private stripeClient?: StripeClient;\n    private stripeElements?: StripeElements;\n    private selectedMethodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n        private stripeIntegrationService: StripeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithStripeOCSPaymentInitializeOptions,\n    ): Promise<void> {\n        const { stripeocs, methodId, gatewayId } = options;\n\n        if (!stripeocs?.containerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        try {\n            await this._initializeStripeElement(stripeocs, gatewayId, methodId);\n        } catch (error) {\n            if (error instanceof Error) {\n                stripeocs.onError?.(error);\n            }\n        }\n\n        this.stripeIntegrationService.initCheckoutEventsSubscription(\n            gatewayId,\n            methodId,\n            stripeocs,\n            this.stripeElements,\n        );\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n        const { methodId, gatewayId } = payment || {};\n\n        if (!this.stripeClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" or \"methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { isStoreCreditApplied } = state.getCheckoutOrThrow();\n\n        if (isStoreCreditApplied) {\n            await this.paymentIntegrationService.applyStoreCredit(isStoreCreditApplied);\n        }\n\n        await this.stripeIntegrationService.updateStripePaymentIntent(gatewayId, methodId);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n        const paymentPayload = this._getPaymentPayload(methodId, clientToken || '');\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this._processAdditionalAction(error, methodId);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const paymentElement = this.stripeElements?.getElement(StripeElementType.PAYMENT);\n\n        paymentElement?.unmount();\n        paymentElement?.destroy();\n        this.stripeIntegrationService.deinitialize();\n        this.stripeElements = undefined;\n        this.stripeClient = undefined;\n\n        return Promise.resolve();\n    }\n\n    private async _initializeStripeElement(\n        stripe: StripeOCSPaymentInitializeOptions,\n        gatewayId: string,\n        methodId: string,\n    ) {\n        let paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod?.clientToken) {\n            const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                params: { method: methodId },\n            });\n\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        if (!isStripePaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientToken, initializationData } = paymentMethod;\n        const { shopperLanguage, customerSessionToken, enableLink } = initializationData;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.stripeClient = await this._loadStripeJs(initializationData);\n\n        const {\n            appearance,\n            containerId,\n            fonts,\n            layout,\n            render,\n            paymentMethodSelect,\n            handleClosePaymentMethod,\n            togglePreloader,\n        } = stripe;\n\n        this.stripeElements = await this.scriptLoader.getElements(this.stripeClient, {\n            clientSecret: clientToken,\n            customerSessionClientSecret: customerSessionToken,\n            locale: formatLocale(shopperLanguage),\n            appearance,\n            fonts,\n        });\n\n        const { getBillingAddress, getShippingAddress } = this.paymentIntegrationService.getState();\n        const billingAddress = getBillingAddress();\n        const { postalCode } = getShippingAddress() || billingAddress || {};\n\n        const stripeElement: StripeElement =\n            this.stripeElements.getElement(StripeElementType.PAYMENT) ||\n            this.stripeElements.create(StripeElementType.PAYMENT, {\n                fields: {\n                    billingDetails: {\n                        email: StripeStringConstants.NEVER,\n                        address: {\n                            country: StripeStringConstants.NEVER,\n                            city: StripeStringConstants.NEVER,\n                            postalCode: postalCode\n                                ? StripeStringConstants.NEVER\n                                : StripeStringConstants.AUTO,\n                        },\n                    },\n                },\n                wallets: {\n                    applePay: StripeStringConstants.NEVER,\n                    googlePay: StripeStringConstants.NEVER,\n                    link: enableLink ? StripeStringConstants.AUTO : StripeStringConstants.NEVER,\n                },\n                layout,\n                savePaymentMethod: {\n                    maxVisiblePaymentMethods: 20,\n                },\n                defaultValues: {\n                    billingDetails: {\n                        email: billingAddress?.email || '',\n                    },\n                },\n            });\n\n        this.stripeIntegrationService.mountElement(stripeElement, containerId);\n\n        stripeElement.on(StripeElementEvent.LOADER_START, () => {\n            togglePreloader?.(false);\n        });\n\n        stripeElement.on(StripeElementEvent.READY, () => {\n            render();\n        });\n\n        stripeElement.on(StripeElementEvent.CHANGE, (event: StripeEventType) => {\n            this._onStripeElementChange(event, gatewayId, methodId, paymentMethodSelect);\n        });\n\n        handleClosePaymentMethod?.(this._collapseStripeElement.bind(this));\n    }\n\n    private async _loadStripeJs(\n        initializationData: StripeInitializationData,\n    ): Promise<StripeClient> {\n        if (this.stripeClient) {\n            return this.stripeClient;\n        }\n\n        return this.scriptLoader.getStripeClient(initializationData);\n    }\n\n    private _collapseStripeElement() {\n        const stripeElement = this.stripeElements?.getElement(StripeElementType.PAYMENT);\n\n        stripeElement?.collapse();\n    }\n\n    private _getPaymentPayload(\n        methodId: string,\n        token: string,\n        paymentMethodOptions?: StripePIPaymentMethodOptions,\n    ): Payment {\n        const cartId = this.paymentIntegrationService.getState().getCart()?.id || '';\n        const { card, us_bank_account } = paymentMethodOptions || {};\n        const shouldSaveInstrument =\n            this._shouldSaveInstrument(card) || this._shouldSaveInstrument(us_bank_account);\n        const tokenizedOptions = this._getTokenizedOptions(token, paymentMethodOptions);\n\n        const formattedPayload = {\n            cart_id: cartId,\n            confirm: false,\n            method: this.selectedMethodId,\n            vault_payment_instrument: shouldSaveInstrument,\n            ...tokenizedOptions,\n        };\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload,\n            },\n        };\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        methodId: string,\n    ): Promise<PaymentIntegrationSelectors | undefined> {\n        if (\n            !isRequestError(error) ||\n            !this.stripeIntegrationService.isAdditionalActionError(error.body.errors)\n        ) {\n            throw error;\n        }\n\n        if (!this.stripeClient || !this.stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { data: additionalActionData } = error.body.additional_action_required;\n        const { token } = additionalActionData;\n\n        const { paymentIntent } = await this._confirmStripePaymentOrThrow(\n            methodId,\n            additionalActionData,\n        );\n        const {\n            client_secret: paymentIntentClientSecret,\n            payment_method_options: paymentMethodOptions,\n        } = paymentIntent || {};\n\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            paymentIntentClientSecret || token,\n            paymentMethodOptions,\n        );\n\n        try {\n            return await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            this.stripeIntegrationService.throwPaymentConfirmationProceedMessage();\n        }\n    }\n\n    private async _confirmStripePaymentOrThrow(\n        methodId: string,\n        additionalActionData: StripeAdditionalActionRequired['data'],\n    ): Promise<StripeResult | never> {\n        const { token, redirect_url } = additionalActionData;\n        const stripePaymentData = this.stripeIntegrationService.mapStripePaymentData(\n            this.stripeElements,\n            redirect_url,\n        );\n        let stripeError: StripeError | undefined;\n\n        try {\n            const isPaymentCompleted = await this.stripeIntegrationService.isPaymentCompleted(\n                methodId,\n                this.stripeClient,\n            );\n\n            const confirmationResult = !isPaymentCompleted\n                ? await this.stripeClient?.confirmPayment(stripePaymentData)\n                : await this.stripeClient?.retrievePaymentIntent(token || '');\n\n            stripeError = confirmationResult?.error;\n\n            if (stripeError || !confirmationResult?.paymentIntent) {\n                throw new PaymentMethodFailedError();\n            }\n\n            return confirmationResult;\n        } catch (error: unknown) {\n            return this.stripeIntegrationService.throwStripeError(stripeError);\n        }\n    }\n\n    private _onStripeElementChange(\n        event: StripeEventType,\n        gatewayId: string,\n        methodId: string,\n        paymentMethodSelect?: (id: string) => void,\n    ) {\n        if (!isStripePaymentEvent(event) || event.collapsed) {\n            return;\n        }\n\n        this.selectedMethodId = event.value.type;\n        paymentMethodSelect?.(`${gatewayId}-${methodId}`);\n    }\n\n    private _shouldSaveInstrument(paymentMethodOptions?: StripePIPaymentMethodSavingOptions) {\n        const setupFutureUsage = paymentMethodOptions?.setup_future_usage;\n\n        return (\n            setupFutureUsage === StripeInstrumentSetupFutureUsage.ON_SESSION ||\n            setupFutureUsage === StripeInstrumentSetupFutureUsage.OFF_SESSION\n        );\n    }\n\n    private _getTokenizedOptions(\n        token: string,\n        paymentMethodOptions?: StripePIPaymentMethodOptions,\n    ) {\n        if (this._shouldSaveInstrument(paymentMethodOptions?.us_bank_account)) {\n            return { tokenized_ach: { token } };\n        }\n\n        return { credit_card_token: { token } };\n    }\n}\n","import { StripePaymentEvent } from './stripe';\n\nexport const isStripePaymentEvent = (event: unknown): event is StripePaymentEvent => {\n    return typeof event === 'object' && event !== null && 'value' in event && 'collapsed' in event;\n};\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeIntegrationService, StripeScriptLoader } from '../stripe-utils';\n\nimport StripeOCSPaymentStrategy from './stripe-ocs-payment-strategy';\n\nconst createStripeOCSPaymentStrategy: PaymentStrategyFactory<StripeOCSPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const stripeScriptLoader = new StripeScriptLoader(getScriptLoader());\n\n    return new StripeOCSPaymentStrategy(\n        paymentIntegrationService,\n        stripeScriptLoader,\n        new StripeIntegrationService(paymentIntegrationService, stripeScriptLoader),\n    );\n};\n\nexport default toResolvableModule(createStripeOCSPaymentStrategy, [\n    { gateway: 'stripeocs', id: 'optimized_checkout' },\n]);\n"],"names":["__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","PaymentMethodClientUnavailableError","MissingDataErrorType","StripeFormMode","DisplayName","StripePaymentMethodType","StripeStringConstants","StripeElementType","StripePaymentIntentStatus","StripeElementEvent","StripeInstrumentSetupFutureUsage","StripeScriptLoader","scriptLoader","stripeWindow","window","getStripeClient","initializationData","betas","apiVersion","bcStripeClient","stripe","load","stripePublishableKey","stripeConnectedAccount","stripeClient","stripeAccount","getElements","options","stripeElements","bcStripeElements","updateStripeElements","elements","update","fetchUpdates","Stripe","loadScript","InvalidArgumentError","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","isStripePaymentMethodLike","paymentMethod","undefined","shopperLanguage","isStripeAcceleratedCheckoutCustomer","customer","STRIPE_CLIENT_BETAS","STRIPE_CLIENT_API_VERSION","StripeUPECustomerStrategy","paymentIntegrationService","initialize","stripeUPEClient","stripeupe","container","gatewayId","methodId","onEmailChange","getStyles","isLoading","entries","forEach","value","loadPaymentMethod","params","method","state","getState","getPaymentMethodOrThrow","clientToken","email","getCustomerOrThrow","paymentProviderCustomer","getPaymentProviderCustomerOrThrow","stripeLinkAuthenticationState","appearance","styles","variables","colorPrimary","fieldInnerShadow","colorBackground","fieldBackground","colorText","labelText","colorDanger","fieldErrorText","colorTextSecondary","colorTextPlaceholder","fieldPlaceholderText","rules","borderColor","fieldBorder","color","fieldText","boxShadow","_stripeElements","clientSecret","getBillingAddress","getConsignments","consignments","id","billingEmail","defaultValues","mode","SHIPPING","linkAuthenticationElement","getElement","AUTHENTICATION","create","on","CHANGE","event","updatePaymentProviderCustomer","authenticated","complete","deleteConsignment","mount","deinitialize","unmount","Promise","resolve","signIn","credentials","signInCustomer","signOut","signOutCustomer","executePaymentMethodCheckout","continueWithCheckoutCallback","getScriptLoader","DEFAULT_STYLES","size","backgroundColor","DEFAULT_CONTAINER_STYLES","position","ROTATION_ANIMATION","LoadingIndicator","containerStyles","defineAnimation","buildContainer","indicator","buildIndicator","appendChild","show","parentId","parent","document","getElementById","style","visibility","opacity","hide","handleTransitionEnd","removeEventListener","addEventListener","createElement","display","bottom","left","height","width","right","top","transition","setStyleAttribute","borderRadius","border","margin","transform","transformStyle","animation","element","attrs","keys","k","setProperty","head","sheet","CSSStyleSheet","insertRule","PaymentMethodCancelledError","PaymentMethodFailedError","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","StripeIntegrationService","isMounted","checkoutEventsUnsubscribe","initCheckoutEventsSubscription","stripeInitializationOptions","subscribe","paymentElement","PAYMENT","updateStripePaymentIntent","error","onError","mountElement","containerId","getCheckout","outstandingBalance","coupons","stripeElement","mapAppearanceVariables","colorIcon","mapInputAppearanceRules","throwStripeError","stripeError","throwDisplayableStripeError","isCancellationError","includes","errorMessage","payment_intent","last_payment_error","indexOf","throwPaymentConfirmationProceedMessage","isPaymentCompleted","features","getStoreConfigOrThrow","checkoutSettings","paymentIntent","retrievePaymentIntent","status","SUCCEEDED","mapStripePaymentData","returnUrl","shouldAllowRedisplay","billingAddress","firstName","lastName","address","_mapStripeAddress","city","country","redirect","IF_REQUIRED","confirmParams","payment_method_data","allow_redisplay","billing_details","return_url","isAdditionalActionError","errors","some","code","isRedirectAction","additionalAction","data","redirect_url","isOnPageAdditionalAction","token","address1","address2","countryCode","postalCode","stateOrProvinceCode","postal_code","line1","line2","AmountTransformer","_decimalPlaces","toInteger","amount","Math","round","expressCheckoutAllowedCountryCodes","StripeLinkV2CustomerStrategy","stripeIntegrationService","loadingIndicator","stripeocs","loadingContainerId","buttonHeight","onComplete","_loadingIndicatorContainer","_onComplete","captureMethod","_captureMethod","_stripeClient","_mountExpressCheckoutElement","stripeExpressCheckoutClient","shouldRequireShippingAddress","_shouldRequireShippingAddress","expressCheckoutOptions","shippingAddressRequired","allowedShippingCountries","_getAvailableCountries","shippingRates","displayName","billingAddressRequired","emailRequired","phoneNumberRequired","paymentMethods","link","AUTO","applePay","NEVER","googlePay","amazonPay","paypal","klarna","cartAmount","getCartOrThrow","elementsOptions","_toCents","currency","_getCurrency","_linkV2Element","EXPRESS_CHECKOUT","_initializeEvents","expressCheckoutElement","SHIPPING_ADDRESS_CHANGE","_onShippingAddressChange","SHIPPING_RATE_CHANGE","_onShippingRateChange","CONFIRM","_onConfirm","CANCEL","_onCancel","shippingAddress","result","phone","company","stateOrProvince","customFields","updateShippingAddress","_getAvailableShippingOptions","_updateDisplayedPrice","shippingRate","_handleShippingOptionChange","_updateShippingAndBillingAddress","submitOrder","_getPaymentPayload","submitPayment","_processAdditionalAction","split","billingDetails","_mapShippingAddress","_mapBillingAddress","updateBillingAddress","body","additionalActionData","additional_action_required","_confirmStripePaymentOrThrow","paymentPayload","_toggleLoadingIndicator","_completeCheckoutFlow","stripePaymentData","confirmationResult","confirmPayment","location","replace","cartId","getCart","paymentData","formattedPayload","cart_id","credit_card_token","confirm","payment_method_id","Link","lineItems","physicalItems","length","_getTotalPrice","_currencyCode","currencyCode","toLowerCase","loadCheckout","getCheckoutOrThrow","decimalPlaces","totalPrice","toFixed","countries","loadShippingCountries","getShippingCountries","map","filter","consignment","availableShippingOptions","_getStripeShippingOption","bind","selectedId","selectedShippingOption","sort","option","cost","description","optionId","selectShippingOption","_getAmountTransformer","_amountTransformer","fallbackValue","amountTransformer","stripeScriptLoader","PaymentArgumentInvalidError","invalidFields","join","isHostedInstrumentLike","instrument","shouldSaveInstrument","shouldSetAsDefaultInstrument","isVaultedInstrument","Boolean","instrumentId","OrderFinalizationNotRequiredError","isIndividualCardElementOptions","individualCardElementOptions","cardNumberElementOptions","cardCvcElementOptions","cardExpiryElementOptions","IconStyle","StripeV3ErrorType","StripeV3Error","AuthFailure","APM_REDIRECT","Alipay","IDEAL","StripeV3PaymentStrategy","stripev3","initializeOptions","isDeinitialize","useIndividualCardFields","allowRedisplayForStoredInstruments","_allowRedisplayForStoredInstruments","form","getInitializeOptions","stripeV3Client","loadStripeJs","isCreditCard","shouldShowTSVHostedForm","hostedForm","mountCardVerificationFields","mountCardFields","execute","orderRequest","payment","order","shouldSubmitOrderBeforeLoadingAPM","isStoreCreditApplied","useStoreCredit","applyStoreCredit","executeWithVaulted","confirmStripePayment","vault_payment_instrument","set_as_default_stored_instrument","CreditCard","client_token","buildPaymentPayload","processAdditionalAction","handleEmptyPaymentIntentError","finalize","reject","detach","unmountElement","isAuthError","isHostedFieldAvailable","definedFields","omitBy","fields","isEmpty","isHostedPaymentFormEnabled","config","isHostedFormEnabled","getStripeJs","confirmAlipayPayment","handleActions","confirmIdealPayment","Sepa","confirmSepaDebitPayment","card","getStripeCardElements","getStripeElement","mapStripeBillingDetails","getCustomer","createPaymentMethod","bigpay_token","JSON","stringify","validate","submit","loadCurrentOrder","stripeCardElements","getLocale","mapStripeAddress","trim","zipCodeElementOptions","addresses","isBillingAddressLike","customerAddress","stripePaymentMethodType","payment_method","cardNumberElement","CardNumber","cardExpiryElement","CardExpiry","cardCvcElement","CardCvc","formOptions","storeConfig","getStoreConfig","bigpayBaseUrl","paymentSettings","createHostedForm","attach","isThreeDSecureRequiredError","action","three_ds_result","needsConfirm","catchedConfirmError","confirmCardPayment","getPaymentToken","StripeV3ScriptLoader","locale","then","gateway","DEFAULT_RESPONSE","headers","RequestError","response","supportedLocales","ar","bg","cs","da","de","el","en","es","et","fi","fil","fr","he","hr","hu","it","ja","ko","lt","lv","ms","mt","nb","nl","pl","pt","ro","ru","sk","sl","sv","th","tr","vi","zh","formatLocale","localeLanguage","language","countryLocales","formattedLocale","toUpperCase","StripeUPEPaymentStrategy","_loadStripeElement","catch","_stripeUPEClient","getBillingAddressOrThrow","_executeWithVaulted","_executeWithStripeConfirmation","_processAdditionalActionWithStripeConfirmation","_processVaultedAdditionalAction","render","initStripeElementUpdateTrigger","_loadStripeJs","_isStripeElementUpdateEnabled","getShippingAddress","wallets","_getStripeElementTerms","READY","_updateStripeLinkStateByElementType","_updateStripeElement","shouldShowTerms","terms","paymentElementType","isStripeLinkElementType","StripeOCSPaymentStrategy","_initializeStripeElement","destroy","customerSessionToken","enableLink","fonts","layout","paymentMethodSelect","handleClosePaymentMethod","togglePreloader","customerSessionClientSecret","savePaymentMethod","maxVisiblePaymentMethods","LOADER_START","_onStripeElementChange","_collapseStripeElement","collapse","paymentMethodOptions","us_bank_account","_shouldSaveInstrument","tokenizedOptions","_getTokenizedOptions","selectedMethodId","client_secret","paymentIntentClientSecret","payment_method_options","isStripePaymentEvent","collapsed","setupFutureUsage","setup_future_usage","ON_SESSION","OFF_SESSION","tokenized_ach"],"sourceRoot":""}