{"version":3,"file":"integrations/paypal-commerce.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/create-paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-base-instrument/is-base-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-redirect-action-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-paypal-commerce-provider-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/create-paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-utils/src/paypal-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-utils/src/paypal-sdk-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-utils/src/create-paypal-sdk-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/storage/src/cookie-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/hosted-field-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-utils/src/paypal-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-utils/src/create-paypal-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/is-credit-card-form-fields.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/is-credit-card-vaulted-form-fields.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit-card/paypal-commerce-credit-cards-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-paypal-commerce-accelerated-checkout-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit-card/create-paypal-commerce-credit-cards-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-ratepay/paypal-commerce-ratepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-ratepay/create-paypal-commerce-ratepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-utils/src/utils/get-fastlane-styles.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-utils/src/utils/is-paypal-fastlane-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/paypal-commerce-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-utils/src/utils/is-paypal-fastlane-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/create-paypal-commerce-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/checkout-buttons/default-checkout-button-height.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/get-fastlane-styles.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/paypal-commerce-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/create-paypal-commerce-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/create-paypal-commerce-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-button-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: [\n                    'fastlane',\n                    'buttons',\n                    'payment-fields',\n                    'hosted-fields',\n                    'three-domain-secure',\n                ],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\n\nexport interface PayPalCommerceCardFieldsConfig {\n    inputEvents: {\n        onChange(data: PayPalCommerceCardFieldsState): void;\n        onFocus(data: PayPalCommerceCardFieldsState): void;\n        onBlur(data: PayPalCommerceCardFieldsState): void;\n        onInputSubmitRequest(data: PayPalCommerceCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: PayPalCommerceCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: PayPalCommerceHostedFieldsRenderOptions['styles'];\n    onApprove(data: PayPalCommerceCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface PayPalCommerceCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface PayPalCommerceCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype PayPalCommerceCardFieldsCard = PayPalCommerceHostedFieldsCard;\n\nexport interface PayPalCommerceCardFieldsState {\n    cards: PayPalCommerceCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: PayPalCommerceCardFieldsFieldData;\n        cardNumberField: PayPalCommerceCardFieldsFieldData;\n        cardNameField?: PayPalCommerceCardFieldsFieldData;\n        cardExpiryField: PayPalCommerceCardFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface PayPalCommerceFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceCardFields {\n    isEligible(): boolean;\n    CVVField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    ExpiryField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NameField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NumberField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    submit(config?: PayPalCommerceCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<PayPalCommerceCardFieldsState>;\n}\n\nexport interface PayPalCommerceCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (data: PayPalCommerceCardFieldsConfig) => Promise<PayPalCommerceCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    isAppSwitchEnabled?: boolean;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Commerce BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(\n        options?: PayPalCommerceHostedFieldsSubmitOptions,\n    ): Promise<PayPalCommerceHostedFieldsApprove>;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n    hasReturned?(): boolean;\n    resume?(): void;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n    fastlaneToken?: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from './paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from './paypal-commerce-script-loader';\nimport {\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceInitializationData,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.paypalCommerceRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.paypalCommerceRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'paypalcommerce',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    ComponentsScriptType,\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<PayPalCommerceScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<PayPalCommerceScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceIntegrationService,\n    PayPalCommerceRequestSender,\n    PayPalCommerceScriptLoader,\n} from './index';\n\nconst createPayPalCommerceIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createPayPalCommerceIntegrationService;\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../paypal-commerce-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","export interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport function isBaseInstrument(instrument: unknown): instrument is BaseInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    return (\n        'bigpayToken' in instrument &&\n        'defaultInstrument' in instrument &&\n        'provider' in instrument &&\n        'trustedShippingAddress' in instrument &&\n        'method' in instrument &&\n        'type' in instrument\n    );\n}\n","import {\n    HostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentPayload,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    isPaypalCommerceProviderError,\n    isRedirectActionError,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isBaseInstrument } from '@bigcommerce/checkout-sdk/utility';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommercePaymentInitializeOptions, {\n    WithPayPalCommercePaymentInitializeOptions,\n} from './paypal-commerce-payment-initialize-options';\n\nexport default class PayPalCommercePaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n    private paypalcommerce?: PayPalCommercePaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommercePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce } = options || {};\n\n        this.paypalcommerce = paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const { container, bannerContainerId } = paypalcommerce;\n\n        const {\n            orderId,\n            paypalBNPLConfiguration = [],\n            isPayPalCreditAvailable,\n        } = paymentMethod.initializationData || {};\n\n        if (bannerContainerId !== undefined) {\n            if (!document.getElementById(bannerContainerId)) {\n                // eslint-disable-next-line no-console\n                console.error('Unable to create banner without valid banner container ID.');\n\n                return;\n            }\n\n            const bannerConfiguration = paypalBNPLConfiguration?.find(\n                ({ id }) => id === 'checkout',\n            );\n\n            if (isPayPalCreditAvailable || !bannerConfiguration?.status) {\n                return;\n            }\n\n            const paypalMessages = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            if (!paypalMessages || typeof paypalMessages?.Messages !== 'function') {\n                console.error(\n                    '[BC PayPalCommerce PayLater]: banner could not be rendered, due to issues with loading PayPal SDK',\n                );\n\n                return;\n            }\n\n            return this.renderMessages(paypalMessages, bannerContainerId, bannerConfiguration);\n        }\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        this.loadingIndicatorContainer = container?.split('#')[1];\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (paypalcommerce.onInit && typeof paypalcommerce.onInit === 'function') {\n            paypalcommerce.onInit(() => this.renderButton(methodId, paypalcommerce));\n        }\n\n        if (\n            paypalcommerce.shouldRenderPayPalButtonOnInitialization === undefined ||\n            paypalcommerce.shouldRenderPayPalButtonOnInitialization\n        ) {\n            this.renderButton(methodId, paypalcommerce);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { onError } = this.paypalcommerce || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (this.isPayPalVaultedInstrumentPaymentData(paymentData) && !this.orderId) {\n            this.orderId = await this.createOrder();\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        const paymentPayload = this.isPayPalVaultedInstrumentPaymentData(paymentData)\n            ? this.prepareVaultedInstrumentPaymentPayload(methodId, this.orderId, paymentData)\n            : this.preparePaymentPayload(methodId, this.orderId, paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            if (isRedirectActionError(error)) {\n                const redirectUrl = error.body.additional_action_required?.data?.redirect_url;\n\n                return new Promise(() => window.location.replace(redirectUrl));\n            }\n\n            if (this.isProviderError(error)) {\n                await this.paypalCommerceIntegrationService.loadPayPalSdk(payment.methodId);\n\n                await new Promise((_resolve, reject) => {\n                    if (this.paypalcommerce) {\n                        this.paypalButton?.close();\n                        this.renderButton(payment.methodId, this.paypalcommerce);\n                        this.handleError(new Error('INSTRUMENT_DECLINED'), onError);\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error, onError);\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    private prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: VaultedInstrument & HostedInstrument,\n    ): Payment {\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        const shouldConfirmInstrument = !this.isTrustedVaultingFlow(paymentData);\n\n        if (shouldConfirmInstrument) {\n            return {\n                methodId,\n                paymentData: {\n                    shouldSaveInstrument: shouldConfirmInstrument,\n                    shouldSetAsDefaultInstrument,\n                    formattedPayload: {\n                        paypal_account: {\n                            order_id: paypalOrderId,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                    bigpay_token: {\n                        token: instrumentId,\n                    },\n                },\n            },\n        };\n    }\n\n    private preparePaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalcommerce: PayPalCommercePaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalcommerce;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            ...(this.isPaypalCommerceAppSwitchEnabled(methodId) && {\n                appSwitchWhenAvailable: true,\n            }),\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () => this.createOrder(),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onError: (error) => this.handleError(error, onError),\n            onCancel: () => this.toggleLoadingIndicator(false),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        if (this.paypalButton.hasReturned?.() && this.isPaypalCommerceAppSwitchEnabled(methodId)) {\n            this.paypalButton.resume?.();\n        } else {\n            this.paypalButton.render(container);\n        }\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommercePaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        return onValidate?.(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommercePaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm?.();\n    }\n\n    private handleError(\n        error: unknown,\n        onError: PayPalCommercePaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private async createOrder(): Promise<string> {\n        const fieldsValues = this.getFieldsValues();\n\n        return this.paypalCommerceIntegrationService.createOrder('paypalcommercecheckout', {\n            shouldSaveInstrument: fieldsValues?.shouldSaveInstrument || false,\n        });\n    }\n\n    /**\n     *\n     * Vaulting flow methods\n     *\n     * */\n    private getFieldsValues(): HostedInstrument | undefined {\n        const { getFieldsValues } = this.paypalcommerce || {};\n\n        return typeof getFieldsValues === 'function' ? getFieldsValues() : undefined;\n    }\n\n    private isTrustedVaultingFlow(paymentData?: PaymentInstrumentPayload): boolean {\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            const state = this.paymentIntegrationService.getState();\n\n            const instruments = state.getInstruments();\n            const findInstrument = instruments?.find(\n                (instrument) =>\n                    isBaseInstrument(instrument) &&\n                    instrument.bigpayToken === paymentData.instrumentId,\n            );\n            const trustedShippingAddress = isBaseInstrument(findInstrument)\n                ? findInstrument.trustedShippingAddress\n                : {};\n\n            return !!trustedShippingAddress;\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Guards\n     *\n     */\n    private isPayPalVaultedInstrumentPaymentData(\n        paymentData?: PaymentInstrumentPayload,\n    ): paymentData is VaultedInstrument & HostedInstrument {\n        return (\n            !!paymentData && isVaultedInstrument(paymentData) && isHostedInstrumentLike(paymentData)\n        );\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(\n        paypalMessages: PayPalMessagesSdk,\n        bannerContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'payment',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n\n    /**\n     *\n     * Error handling\n     *\n     */\n    private isProviderError(error: unknown): boolean {\n        if (isPaypalCommerceProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === 'INSTRUMENT_DECLINED';\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * PayPal AppSwitch enabling handling\n     *\n     */\n    private isPaypalCommerceAppSwitchEnabled(methodId: string): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        return paymentMethod.initializationData?.isAppSwitchEnabled || false;\n    }\n}\n","import { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ProviderError } from './is-paypal-commerce-provider-error';\n\nexport interface RedirectActionError extends ProviderError {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default function isRedirectActionError(error: unknown): error is RedirectActionError {\n    return (\n        isRequestError(error) && error.body.additional_action_required?.type === 'offsite_redirect'\n    );\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isPaypalCommerceProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommercePaymentStrategy from './paypal-commerce-payment-strategy';\n\nconst createPayPalCommercePaymentStrategy: PaymentStrategyFactory<PayPalCommercePaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new PayPalCommercePaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new PayPalCommerceSdk(getScriptLoader()),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createPayPalCommercePaymentStrategy, [{ id: 'paypalcommerce' }]);\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalCommerceSdk from './paypal-commerce-sdk';\n\nexport default function createPayPalCommerceSdk(): PayPalCommerceSdk {\n    return new PayPalCommerceSdk(createScriptLoader());\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditPaymentInitializeOptions, {\n    WithPayPalCommerceCreditPaymentInitializeOptions,\n} from './paypal-commerce-credit-payment-initialize-options';\n\nexport default class PayPalCommerceCreditPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommerceCreditPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce, paypalcommercecredit } = options || {};\n\n        const paypalOptions = paypalcommercecredit || paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const { paypalBNPLConfiguration = [], orderId } = paymentMethod.initializationData || {};\n        const { bannerContainerId, container } = paypalOptions;\n\n        if (bannerContainerId !== undefined) {\n            if (!document.getElementById(bannerContainerId)) {\n                // eslint-disable-next-line no-console\n                console.error('Unable to create banner without valid banner container ID.');\n\n                return;\n            }\n\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === 'checkout');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            const paypalMessages = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            return this.renderMessages(paypalMessages, bannerContainerId, bannerConfiguration);\n        }\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = container?.split('#')[1];\n\n        this.renderButton(methodId, paypalOptions);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paypalCommerceIntegrationService.submitPayment(payment.methodId, this.orderId);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalOptions: PayPalCommerceCreditPaymentInitializeOptions,\n    ): void {\n        if (!paypalOptions?.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalOptions;\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (hasRenderedSmartButton) {\n                return;\n            }\n\n            const buttonOptions: PayPalCommerceButtonsOptions = {\n                fundingSource,\n                style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                    checkoutPaymentButtonStyles,\n                ),\n                createOrder: () =>\n                    this.paypalCommerceIntegrationService.createOrder(\n                        'paypalcommercecreditcheckout',\n                    ),\n                onClick: (_, actions) => this.handleClick(actions, onValidate),\n                onApprove: (data) => this.handleApprove(data, submitForm),\n                onCancel: () => this.toggleLoadingIndicator(false),\n                onError: (error) => this.handleError(error, onError),\n            };\n\n            this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n            if (!this.paypalButton.isEligible() && fundingSource === paypalSdk.FUNDING.PAYLATER) {\n                return;\n            }\n\n            if (!this.paypalButton.isEligible() && fundingSource === paypalSdk.FUNDING.CREDIT) {\n                throw new NotImplementedError(\n                    `PayPal ${fundingSource} is not available for your region. Please use PayPal Checkout instead.`,\n                );\n            }\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            this.paypalButton.render(container);\n            hasRenderedSmartButton = true;\n        });\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommerceCreditPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        if (onValidate && typeof onValidate === 'function') {\n            return onValidate(onValidationPassed, reject);\n        }\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceCreditPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        if (submitForm && typeof submitForm === 'function') {\n            submitForm();\n        }\n    }\n\n    private handleError(\n        error: Error,\n        onError: PayPalCommerceCreditPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(\n        paypalMessages: PayPalMessagesSdk,\n        bannerContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'payment',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommerceCreditPaymentStrategy from './paypal-commerce-credit-payment-strategy';\n\nconst createPayPalCommerceCreditPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceCreditPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditPaymentStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoPaymentInitializeOptions, {\n    WithPayPalCommerceVenmoPaymentInitializeOptions,\n} from './paypal-commerce-venmo-payment-initialize-options';\n\nexport default class PayPalCommerceVenmoPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommerceVenmoPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce, paypalcommercevenmo } = options || {};\n\n        const paypalOptions = paypalcommercevenmo || paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = paypalOptions.container.split('#')[1];\n\n        this.renderButton(methodId, paypalOptions);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paypalCommerceIntegrationService.submitPayment(payment.methodId, this.orderId);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalcommercevenmo;\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmocheckout'),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => this.toggleLoadingIndicator(false),\n            onError: (error) => this.handleError(error, onError),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            throw new NotImplementedError(\n                `PayPal Venmo is not available for your region. Please use PayPal Checkout instead.`,\n            );\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommerceVenmoPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        return onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceVenmoPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n        this.toggleLoadingIndicator(false);\n    }\n\n    private handleError(\n        error: Error,\n        onError: PayPalCommerceVenmoPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoPaymentStrategy from './paypal-commerce-venmo-payment-strategy';\n\nconst createPayPalCommerceVenmoPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceVenmoPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoPaymentStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalApmSdk, PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    NonInstantAlternativePaymentMethods,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    PayPalOrderStatus,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsPaymentOptions, {\n    WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n} from './paypal-commerce-alternative-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class PayPalCommerceAlternativeMethodsPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n    private paypalApms?: PayPalApmSdk;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n    private paypalcommercealternativemethods?: PayPalCommerceAlternativeMethodsPaymentOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const {\n            gatewayId,\n            methodId,\n            paypalcommerce, // FIXME: this option is deprecated\n            paypalcommercealternativemethods,\n        } = options;\n        const paypalOptions = paypalcommercealternativemethods || paypalcommerce;\n\n        this.paypalcommercealternativemethods = paypalcommercealternativemethods;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { orderId, shouldRenderFields } = paymentMethod.initializationData || {};\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5192.paypal_commerce_ideal_polling',\n        );\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        this.paypalApms = await this.paypalCommerceSdk.getPayPalApmsSdk(\n            paymentMethod,\n            state.getCartOrThrow().currency.code,\n        );\n\n        this.loadingIndicatorContainer = paypalOptions.container.split('#')[1];\n\n        this.renderButton(methodId, gatewayId, paypalOptions);\n\n        if (shouldRenderFields) {\n            this.renderFields(methodId, paypalOptions);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (this.isPollingEnabled && methodId === 'ideal') {\n            await new Promise((resolve, reject) => {\n                void this.initializePollingMechanism(methodId, resolve, reject, gatewayId);\n            });\n        }\n\n        if (!this.isNonInstantPaymentMethod(methodId)) {\n            await this.paymentIntegrationService.submitOrder(order, options);\n        }\n\n        await this.paypalCommerceIntegrationService.submitPayment(\n            methodId,\n            this.orderId,\n            gatewayId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: (value?: unknown) => void,\n        rejectPromise: (value?: unknown) => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.paypalCommerceIntegrationService.getOrderStatus(\n                gatewayId,\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.Approved;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                paypalcommercealternativemethods: this.paypalcommercealternativemethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.paypalcommercealternativemethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        gatewayId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { buttonStyle } = paymentMethod.initializationData || {};\n\n        const { container, onError, onRenderButton, submitForm } = paypalOptions;\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: methodId,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(buttonStyle),\n            onInit: (_, actions) => paypalOptions.onInitButton(actions),\n            createOrder: () => this.onCreateOrder(methodId, gatewayId, paypalOptions),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => {\n                this.toggleLoadingIndicator(false);\n                this.deinitializePollingMechanism();\n            },\n            onError: (error) => {\n                this.deinitializePollingMechanism();\n                this.handleFailure(error, onError);\n            },\n            onClick: async (_, actions) =>\n                paypalOptions.onValidate(actions.resolve, actions.reject),\n        };\n\n        this.paypalButton = paypalAmpsSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async onCreateOrder(\n        methodId: string,\n        gatewayId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): Promise<string> {\n        const { onValidate } = paypalOptions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return () => Promise.resolve();\n        };\n\n        await onValidate(onValidationPassed, noop);\n\n        const orderId = await this.paypalCommerceIntegrationService.createOrder(\n            'paypalcommercealternativemethodscheckout',\n        );\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            const order = { useStoreCredit: false };\n            const options = {\n                params: {\n                    methodId,\n                    gatewayId,\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, orderId, gatewayId);\n        }\n\n        return orderId;\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceAlternativeMethodsPaymentOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleFailure(\n        error: Error,\n        onError: PayPalCommerceAlternativeMethodsPaymentOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Fields methods\n     *\n     * */\n    private renderFields(\n        methodId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const { firstName, lastName, email } = state.getBillingAddressOrThrow();\n\n        const { apmFieldsContainer, apmFieldsStyles } = paypalOptions;\n\n        if (!apmFieldsContainer) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument should contain \"apmFieldsContainer\".',\n            );\n        }\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        const fieldsOptions = {\n            fundingSource: methodId,\n            style: apmFieldsStyles || {},\n            fields: {\n                name: {\n                    value: `${firstName} ${lastName}`,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        const paypalPaymentFields = paypalAmpsSdk.PaymentFields(fieldsOptions);\n\n        paypalPaymentFields.render(apmFieldsContainer);\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantAlternativePaymentMethods;\n    }\n\n    private getPaypalAmpsSdkOrThrow() {\n        if (!this.paypalApms) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalApms;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommerceAlternativeMethodsPaymentStrategy from './paypal-commerce-alternative-methods-payment-strategy';\n\nconst createPayPalCommerceAlternativeMethodsPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceAlternativeMethodsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsPaymentStrategy, [\n    { gateway: 'paypalcommercealternativemethods' },\n]);\n","import { HostedInstrument, NonceInstrument } from './payment';\n\ntype PaymentInstrument = CardInstrument | AccountInstrument | HostedInstrument | NonceInstrument;\n\nexport default PaymentInstrument;\n\nexport interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport interface CardInstrument extends BaseInstrument {\n    brand: string;\n    expiryMonth: string;\n    expiryYear: string;\n    iin: string;\n    last4: string;\n    type: 'card';\n    untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType;\n}\n\ninterface BaseAccountInstrument extends BaseInstrument {\n    method: string;\n    type: 'account' | 'bank';\n}\n\nexport interface PayPalInstrument extends BaseAccountInstrument {\n    externalId: string;\n    method: 'paypal';\n}\n\nexport interface AchInstrument extends BaseAccountInstrument {\n    issuer: string;\n    accountNumber: string;\n    type: 'bank';\n    method: 'ach' | 'ecp';\n}\n\nexport interface BankInstrument extends BaseAccountInstrument {\n    accountNumber: string;\n    issuer: string;\n    iban: string;\n    method: string;\n    type: 'bank';\n}\n\nexport type AccountInstrument = PayPalInstrument | BankInstrument | AchInstrument;\n\nexport interface VaultAccessToken {\n    vaultAccessToken: string;\n    vaultAccessExpiry: number;\n}\n\nexport interface SessionContext {\n    customerId: number;\n    storeId: string;\n    currencyCode?: string;\n}\n\nexport interface InstrumentRequestContext extends SessionContext {\n    authToken: string;\n}\n","import {\n    BuyNowCartRequestBody,\n    CardInstrument,\n    CustomerAddress,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * PayPal Initialization Data\n *\n */\nexport interface PayPalInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    fastlaneStyles?: FastlaneStylesSettings;\n    connectClientToken?: string; // TODO: remove when PPCP Fastlane A/B test will be finished\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalIntent;\n    isAcceleratedCheckoutEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneStylingEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalAnalyticsV2Enabled?: boolean; // PayPal Fastlane related\n    isPayPalCreditAvailable?: boolean;\n    isPayPalCommerceAnalyticsV2Enabled?: boolean; // PayPal Fastlane related\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: remove when PPCP Fastlane A/B test will be finished\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    threeDSVerificationMethod?: string;\n}\n\n/**\n *\n * PayPalHostWindow contains different\n * PayPal Sdk instances for different purposes\n *\n */\nexport interface PayPalHostWindow extends Window {\n    paypal?: PayPalSDK;\n    paypalFastlane?: PayPalFastlane;\n    paypalFastlaneSdk?: PayPalFastlaneSdk;\n    paypalMessages?: PayPalMessagesSdk;\n    paypalApms?: PayPalApmSdk;\n    paypalGooglePay?: PayPalGooglePaySdk;\n}\n\n/**\n *\n * PayPal SDK config\n *\n */\nexport interface PayPalSdkConfig {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'enable-funding'?: EnableFundingType;\n        'disable-funding'?: FundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalIntent;\n        components?: PayPalSdkComponents;\n    };\n    attributes: {\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-sdk-client-token'?: string;\n        'data-namespace'?: string;\n        'data-client-token'?: string;\n    };\n}\n\nexport enum PayPalIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type PayPalSdkComponents = Array<\n    | 'fastlane'\n    | 'three-domain-secure'\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\n/**\n *\n * PayPal Sdk instances\n *\n */\nexport interface PayPalSDK {\n    CardFields: (data: PaypalCardFieldsConfig) => Promise<PayPalCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalHostedFieldsRenderOptions): Promise<PayPalHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: PayPalButtonsOptions): PayPalButtons;\n    PaymentFields(options: PayPalPaymentFieldsOptions): PayPalPaymentFields;\n    Messages(options: PayPalMessagesOptions): PayPalMessages;\n}\n\nexport interface PaypalCardFieldsConfig {\n    inputEvents: {\n        onChange(data: PayPalCardFieldsState): void;\n        onFocus(data: PayPalCardFieldsState): void;\n        onBlur(data: PayPalCardFieldsState): void;\n        onInputSubmitRequest(data: PayPalCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: PayPalCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: PayPalHostedFieldsRenderOptions['styles'];\n    onApprove(data: PayPalCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\ninterface PayPalFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface PayPalCardFields {\n    isEligible(): boolean;\n    CVVField(config?: PayPalFieldsInitializationData): PayPalFields;\n    ExpiryField(config?: PayPalFieldsInitializationData): PayPalFields;\n    NameField(config?: PayPalFieldsInitializationData): PayPalFields;\n    NumberField(config?: PayPalFieldsInitializationData): PayPalFields;\n    submit(config?: PayPalCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<PayPalCardFieldsState>;\n}\n\nexport interface PayPalCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\ninterface PayPalCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype PayPalCardFieldsCard = PayPalHostedFieldsCard;\n\nexport interface PayPalCardFieldsState {\n    cards: PayPalCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: PayPalCardFieldsFieldData;\n        cardNumberField: PayPalCardFieldsFieldData;\n        cardNameField?: PayPalCardFieldsFieldData;\n        cardExpiryField: PayPalCardFieldsFieldData;\n    };\n}\n\nexport interface PayPalFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\nexport interface PayPalFastlaneSdk {\n    ThreeDomainSecureClient: {\n        isEligible(params: threeDSecureParameters): Promise<boolean>;\n        show(): Promise<ThreeDomainSecureClientShowResponse>;\n    };\n    Fastlane(options?: PayPalFastlaneOptions): Promise<PayPalFastlane>;\n}\n\ninterface ThreeDomainSecureClientShowResponse {\n    liabilityShift: LiabilityShiftEnum;\n    authenticationState: TDSecureAuthenticationState;\n    nonce: string; // Enriched nonce or the original nonce\n}\n\nexport enum TDSecureAuthenticationState {\n    Succeeded = 'succeeded',\n    Cancelled = 'cancelled',\n    Errored = 'errored',\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\nexport interface threeDSecureParameters {\n    amount: string;\n    currency: string;\n    nonce: string;\n    threeDSRequested: boolean;\n    transactionContext: {\n        experience_context: {\n            brand_name?: string;\n            locale: string;\n            return_url: string;\n            cancel_url: string;\n        };\n    };\n}\n\nexport interface PayPalMessagesSdk {\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PayPalApmSdk {\n    Buttons(options: PayPalButtonsOptions): PayPalButtons;\n    PaymentFields(options: PayPalPaymentFieldsOptions): PayPalPaymentFields;\n}\n\nexport interface PayPalGooglePaySdk {\n    Googlepay(): GooglePay;\n}\n\n/**\n *\n * PayPal Payments Hosted Fields\n *\n */\nexport interface PayPalHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalHostedFieldOption;\n        cvv?: PayPalHostedFieldOption;\n        expirationDate?: PayPalHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalHostedFields {\n    submit(options?: PayPalHostedFieldsSubmitOptions): Promise<PayPalHostedFieldsApprove>;\n    getState(): PayPalHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalHostedFieldsState) => void): void;\n}\n\nexport interface PayPalHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalHostedFieldsState {\n    cards: PayPalHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalHostedFieldsFieldData;\n        expirationDate?: PayPalHostedFieldsFieldData;\n        expirationMonth?: PayPalHostedFieldsFieldData;\n        expirationYear?: PayPalHostedFieldsFieldData;\n        cvv?: PayPalHostedFieldsFieldData;\n        postalCode?: PayPalHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Buttons\n *\n */\nexport interface PayPalButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\nexport interface PayPalButtonOptions {\n    fundingSource: string;\n    style?: PayPalButtonStyleOptions;\n    onClick?: () => void;\n    onCancel?: () => void;\n    onPaymentComplete?: () => void;\n}\n\n/**\n *\n * PayPal Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Google Pay related types\n *\n */\n\ninterface GooglePay {\n    config: () => Promise<GooglePayConfig>;\n    confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n    initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\n/**\n *\n * PayPal  Payment fields\n *\n */\nexport interface PayPalPaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalPaymentFieldsOptions {\n    style?: PayPalFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayLater Messages related types\n * doc: https://developer.paypal.com/docs/checkout/pay-later/us/integrate/reference\n */\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Fastlane related types\n *\n */\nexport interface PayPalFastlane {\n    identity: PayPalFastlaneIdentity;\n    events: PayPalFastlaneEvents;\n    profile: PayPalFastlaneProfile;\n    FastlaneCardComponent(\n        options: PayPalFastlaneCardComponentOptions,\n    ): Promise<PayPalFastlaneCardComponentMethods>;\n}\n\nexport interface PayPalFastlaneOptions {\n    styles?: PayPalFastlaneStylesOption;\n}\n\nexport interface PayPalFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerContextId: string,\n    ): Promise<PayPalFastlaneAuthenticationResult>;\n}\n\nexport interface PayPalFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface PayPalFastlaneAuthenticationResult {\n    authenticationState?: PayPalFastlaneAuthenticationState;\n    profileData?: PayPalFastlaneProfileData;\n}\n\nexport enum PayPalFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'canceled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface PayPalFastlaneProfileData {\n    name: PayPalFastlaneProfileName;\n    shippingAddress: PayPalFastlaneShippingAddress;\n    card: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface PayPalFastlaneProfilePhone {\n    countryCode: string;\n    nationalNumber: string;\n}\n\nexport interface PayPalFastlaneShippingAddress {\n    name: PayPalFastlaneProfileName;\n    phoneNumber: PayPalFastlaneProfilePhone;\n    address: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneProfileCard {\n    id: string; // nonce / token\n    paymentSource: PayPalFastlanePaymentSource;\n}\n\nexport interface PayPalFastlanePaymentSource {\n    card: PayPalFastlaneCardSource;\n}\n\nexport interface PayPalFastlaneCardSource {\n    brand: string;\n    expiry: string; // \"YYYY-MM\"\n    lastDigits: string; // \"1111\"\n    name: string;\n    billingAddress: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneAddress {\n    company?: string;\n    addressLine1: string;\n    addressLine2?: string;\n    adminArea1: string; // State\n    adminArea2: string; // City\n    postalCode: string;\n    countryCode?: string;\n}\n\nexport interface PayPalFastlaneProfileToBcCustomerDataMappingResult {\n    authenticationState: PayPalFastlaneAuthenticationState;\n    addresses: CustomerAddress[];\n    billingAddress?: CustomerAddress;\n    shippingAddress?: CustomerAddress;\n    instruments: CardInstrument[];\n}\n\nexport interface PayPalFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport interface PayPalFastlaneProfile {\n    showCardSelector(): Promise<PayPalFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<PayPalFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface PayPalFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: PayPalFastlaneShippingAddress;\n}\n\nexport interface PayPalFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneCardComponentMethods {\n    getPaymentToken(\n        options: PayPalFastlaneGetPaymentTokenOptions,\n    ): Promise<PayPalFastlaneProfileCard>;\n    render(element: string): void;\n}\n\nexport interface PayPalFastlaneGetPaymentTokenOptions {\n    name?: PayPalFastlaneProfileName;\n    billingAddress?: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneCardComponentOptions {\n    fields?: PayPalFastlaneCardComponentFields;\n}\n\nexport interface PayPalFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface PayPalFastlaneEvents {\n    apmSelected: (options: PayPalFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: PayPalFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: PayPalFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface PayPalFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface PayPalFastlaneApmSelectedEventOptions extends PayPalFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface PayPalFastlaneEmailEnteredEventOptions extends PayPalFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface PayPalFastlaneOrderPlacedEventOptions extends PayPalFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface PayPalFastlanePaymentFormattedPayload {\n    paypal_connect_token?: {\n        order_id?: string;\n        token: string;\n    };\n    paypal_fastlane_token?: {\n        order_id?: string;\n        token: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    FundingType,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalInitializationData,\n    PayPalMessagesSdk,\n    PayPalSDK,\n    PayPalSdkComponents,\n    PayPalSdkConfig,\n} from './paypal-types';\n\nexport default class PayPalSdkScriptLoader {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n\n            if (!this.window.paypal) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypal;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<PayPalInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard =\n            id === 'paypalcommercecreditcards' || id === 'bigcommerce_payments_creditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: PayPalSdkComponents = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: PayPalSdkComponents = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: [\n                    'fastlane',\n                    'buttons',\n                    'payment-fields',\n                    'hosted-fields',\n                    'three-domain-secure',\n                ],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalSdkScriptLoader from './paypal-sdk-script-loader';\n\nexport default function createPayPalSdkScriptLoader(): PayPalSdkScriptLoader {\n    return new PayPalSdkScriptLoader(createScriptLoader());\n}\n","interface CookieOptions {\n    expires?: Date;\n    path?: string;\n    domain?: string;\n    secure?: boolean;\n}\n\nexport default class CookieStorage {\n    static get(name: string): string | null {\n        const cookieKey = `${encodeURIComponent(`${name}`)}=`;\n        const cookie = document.cookie;\n\n        let value = null;\n\n        const firstIndex = cookie.indexOf(cookieKey);\n\n        if (firstIndex > -1) {\n            let lastIndex = cookie.indexOf(';', firstIndex);\n\n            if (lastIndex === -1) {\n                lastIndex = cookie.length;\n            }\n\n            value = decodeURIComponent(cookie.substring(firstIndex + cookieKey.length, lastIndex));\n        }\n\n        return value;\n    }\n\n    static set(name: string, value: string, options: CookieOptions = { secure: true }) {\n        let cookieText = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`;\n\n        const { expires, path, domain, secure } = options;\n\n        if (expires) {\n            cookieText += `; expires=${expires.toUTCString()}`;\n        } else {\n            const now = new Date();\n            // info: default cookie expiration time after setup\n            const minutes = 60;\n\n            now.setTime(now.getTime() + minutes * 60 * 1000);\n\n            cookieText += `; expires=${now.toUTCString()}`;\n        }\n\n        if (path) {\n            cookieText += `; path=${path}`;\n        }\n\n        if (domain) {\n            cookieText += `; domain=${domain}`;\n        }\n\n        if (secure) {\n            cookieText += '; secure';\n        }\n\n        document.cookie = cookieText;\n    }\n\n    static remove(name: string, options?: CookieOptions) {\n        CookieStorage.set(name, '', { expires: new Date(0), ...options });\n    }\n}\n","// copied from packages/core/src/hosted-form/hosted-field-type.ts\n\nenum HostedFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n    CardExpiryVerification = 'cardExpiryVerification',\n}\n\nexport default HostedFieldType;\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    Address,\n    CardInstrument,\n    CustomerAddress,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport {\n    PayPalFastlane,\n    PayPalFastlaneAddress,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneLookupCustomerByEmailResult,\n    PayPalFastlaneProfileCard,\n    PayPalFastlaneProfileName,\n    PayPalFastlaneProfilePhone,\n    PayPalFastlaneProfileToBcCustomerDataMappingResult,\n    PayPalFastlaneSdk,\n    PayPalFastlaneStylesOption,\n    PayPalHostWindow,\n} from './paypal-types';\n\nexport default class PaypalFastlaneUtils {\n    private window: PayPalHostWindow;\n\n    constructor() {\n        this.window = window;\n    }\n\n    async initializePayPalFastlane(\n        paypalFastlaneSdk: PayPalFastlaneSdk,\n        isTestModeEnabled: boolean,\n        styles?: PayPalFastlaneStylesOption,\n    ): Promise<PayPalFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n            window.localStorage.setItem('axoEnv', 'sandbox'); // TODO: remove if this key does not use on PayPal side\n        }\n\n        if (!this.window.paypalFastlane) {\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.window.paypalFastlane = await paypalFastlaneSdk.Fastlane({\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    getPayPalFastlaneOrThrow(): PayPalFastlane {\n        if (!this.window.paypalFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    /**\n     *\n     * Detects the customer to PayPal Fastlane relation and\n     * returns customerContextId to use it for authentication\n     *\n     */\n    async lookupCustomerOrThrow(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult> {\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.lookupCustomerByEmail(email);\n    }\n\n    /**\n     *\n     * Triggers authentication flow (shows OTP popup) if the customer recognised as PayPal Fastlane user\n     * and returns PayPal Fastlane Profile data to use it in BC checkout\n     *\n     */\n    async triggerAuthenticationFlowOrThrow(\n        customerContextId?: string,\n    ): Promise<PayPalFastlaneAuthenticationResult> {\n        if (!customerContextId) {\n            return {};\n        }\n\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.triggerAuthenticationFlow(customerContextId);\n    }\n\n    /**\n     *\n     * 'updateStorageSessionId' method is used to:\n     * - set session id after user was authenticated (or unrecognised) to trigger authentication after page refresh\n     *\n     * Flow info:\n     * If user unrecognised then the lookup method will be working but the OTP will not be shown\n     * If user recognised and not canceled then the lookup method will be working and the OTP will be shown only if needed\n     * If user cancels the OPT then OTP will not be triggered after page refresh\n     *\n     */\n    updateStorageSessionId(sessionId: string): void {\n        const expires = new Date();\n\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        const cookiesOption = {\n            expires,\n            secure: true,\n        };\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, cookiesOption);\n    }\n\n    removeStorageSessionId(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    getStorageSessionId(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    /**\n     *\n     * 'mapPayPalFastlaneProfileToBcCustomerData' method is responsible for:\n     * - mapping PayPal Fastlane Profile data to BC data shape\n     * - returning mapped data to use for updating PaymentProviderCustomer state and\n     * update shipping and billing addresses\n     *\n     */\n    mapPayPalFastlaneProfileToBcCustomerData(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): PayPalFastlaneProfileToBcCustomerDataMappingResult {\n        const { authenticationState, profileData } = authenticationResult;\n\n        const paypalBillingAddress = profileData?.card?.paymentSource?.card?.billingAddress;\n        const paypalShippingAddress = profileData?.shippingAddress;\n        const paypalProfileName = profileData?.name;\n        const paypalInstrument = profileData?.card;\n\n        const shippingAddress = paypalShippingAddress\n            ? this.mapPayPalToBcAddress(\n                  paypalShippingAddress.address,\n                  paypalShippingAddress.name,\n                  paypalShippingAddress.phoneNumber,\n              )\n            : undefined;\n        const billingAddress =\n            paypalBillingAddress && paypalProfileName\n                ? this.mapPayPalToBcAddress(\n                      paypalBillingAddress,\n                      paypalProfileName,\n                      paypalShippingAddress?.phoneNumber,\n                  )\n                : undefined;\n        const instruments = paypalInstrument\n            ? this.mapPayPalToBcInstrument(methodId, paypalInstrument)\n            : [];\n\n        const addresses = this.filterAddresses([shippingAddress, billingAddress]);\n\n        return {\n            authenticationState:\n                authenticationState || PayPalFastlaneAuthenticationState.UNRECOGNIZED,\n            addresses,\n            billingAddress,\n            shippingAddress,\n            instruments,\n        };\n    }\n\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instrument: PayPalFastlaneProfileCard,\n    ): CardInstrument[] {\n        const { id, paymentSource } = instrument;\n        const { brand, expiry, lastDigits } = paymentSource.card;\n\n        const [expiryYear, expiryMonth] = expiry.split('-');\n\n        return [\n            {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n                type: 'card',\n            },\n        ];\n    }\n\n    mapBcToPayPalAddress(address?: Address): PayPalFastlaneAddress {\n        return {\n            company: address?.company || '',\n            addressLine1: address?.address1 || '',\n            addressLine2: address?.address2 || '',\n            adminArea1: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            adminArea2: address?.city || '',\n            postalCode: address?.postalCode || '',\n            countryCode: address?.countryCode || '',\n        };\n    }\n\n    mapPayPalToBcAddress(\n        address: PayPalFastlaneAddress,\n        profileName: PayPalFastlaneProfileName,\n        phone?: PayPalFastlaneProfilePhone,\n        customFields?: CustomerAddress['customFields'],\n    ): CustomerAddress {\n        const [firstName, lastName] = profileName.fullName.split(' ');\n\n        const phoneData = {\n            nationalNumber: phone?.nationalNumber || '',\n            countryCode: phone?.countryCode || '',\n        };\n\n        return {\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: profileName.firstName || firstName || '',\n            lastName: profileName.lastName || lastName || '',\n            company: address.company || '',\n            address1: address.addressLine1,\n            address2: address.addressLine2 || '',\n            city: address.adminArea2,\n            stateOrProvince: address.adminArea1,\n            stateOrProvinceCode: address.adminArea1,\n            country: address.countryCode || '', // TODO: update country with valid naming\n            countryCode: address.countryCode || '',\n            postalCode: address.postalCode,\n            phone: phoneData.countryCode + phoneData.nationalNumber,\n            customFields: customFields || [],\n        };\n    }\n\n    /**\n     *\n     * This method is responsible for filtering PayPal Fastlane addresses if they are the same\n     * and returns an array of addresses to use them for shipping and/or billing address selections\n     * so the customer will be able to use addresses from PayPal Fastlane in checkout flow\n     *\n     */\n    filterAddresses(addresses: Array<CustomerAddress | undefined>): CustomerAddress[] {\n        return addresses.reduce(\n            (customerAddresses: CustomerAddress[], currentAddress: CustomerAddress | undefined) => {\n                if (!currentAddress) {\n                    return customerAddresses;\n                }\n\n                const sameAddressInTheArray = customerAddresses.some((customerAddress) =>\n                    this.isEqualAddresses(customerAddress, currentAddress),\n                );\n\n                return sameAddressInTheArray\n                    ? customerAddresses\n                    : [...customerAddresses, currentAddress];\n            },\n            [],\n        );\n    }\n\n    private isEqualAddresses(\n        firstAddress: CustomerAddress,\n        secondAddress: CustomerAddress,\n    ): boolean {\n        return isEqual(this.normalizeAddress(firstAddress), this.normalizeAddress(secondAddress));\n    }\n\n    private normalizeAddress(address: CustomerAddress) {\n        return omit(address, ['id', 'phone']);\n    }\n}\n","import PaypalFastlaneUtils from './paypal-fastlane-utils';\n\nexport default function createPaypalFastlaneUtils(): PaypalFastlaneUtils {\n    return new PaypalFastlaneUtils();\n}\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumber in fields &&\n        HostedFieldType.CardName in fields &&\n        HostedFieldType.CardExpiry in fields\n    );\n}\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardVaultedFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedStoredCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumberVerification in fields &&\n        HostedFieldType.CardCodeVerification in fields &&\n        HostedFieldType.CardExpiryVerification in fields\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    HostedCardFieldOptions,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldStylesMap,\n    HostedFieldType,\n    HostedFieldValidateEventData,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInstrument,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    isCreditCardFormFields,\n    isCreditCardVaultedFormFields,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isPayPalCommerceAcceleratedCheckoutCustomer } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport {\n    PayPalFastlaneUtils,\n    PayPalInitializationData,\n    PayPalSdkScriptLoader,\n} from '@bigcommerce/checkout-sdk/paypal-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    LiabilityShiftEnum,\n    PayPalCommerceCardFields,\n    PayPalCommerceCardFieldsConfig,\n    PayPalCommerceCardFieldsOnApproveData,\n    PayPalCommerceCardFieldsState,\n    PayPalCommerceFields,\n    PayPalCommerceHostedFieldsRenderOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditCardsPaymentInitializeOptions, {\n    WithPayPalCommerceCreditCardsPaymentInitializeOptions,\n} from './paypal-commerce-credit-cards-payment-initialize-options';\n\nexport default class PayPalCommerceCreditCardsPaymentStrategy implements PaymentStrategy {\n    private executionPaymentData?: OrderPaymentRequestBody['paymentData'];\n    private isCreditCardForm?: boolean;\n    private isCreditCardVaultedForm?: boolean;\n\n    private cardFields?: PayPalCommerceCardFields;\n    private cvvField?: PayPalCommerceFields;\n    private expiryField?: PayPalCommerceFields;\n    private numberField?: PayPalCommerceFields;\n    private nameField?: PayPalCommerceFields;\n\n    private hostedFormOptions?: HostedFormOptions;\n    private returnedOrderId?: string;\n    private returnedVaultedToken?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalSdkScriptLoader: PayPalSdkScriptLoader,\n        private paypalFastlaneUtils: PayPalFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceCreditCardsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercecreditcards, paypalcommerce } = options;\n        const paypalCommerceInitializationOptions = paypalcommercecreditcards || paypalcommerce;\n\n        const { form, onCreditCardFieldsRenderingError, onLoadComplete } =\n            paypalCommerceInitializationOptions || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!form) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.paypalcommercecreditcards.form\" argument is not provided.',\n            );\n        }\n\n        this.hostedFormOptions = form;\n\n        this.isCreditCardForm = isCreditCardFormFields(form.fields);\n        this.isCreditCardVaultedForm =\n            isCreditCardVaultedFormFields(form.fields) && !this.hasUndefinedValues();\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, undefined, true, true);\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.initializeFields(form, onCreditCardFieldsRenderingError);\n        }\n\n        onLoadComplete?.();\n\n        if (this.shouldInitializePayPalFastlane(methodId)) {\n            await this.initializePayPalFastlaneOrThrow(methodId);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n\n        if (!payment || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        this.executionPaymentData = paymentData;\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.validateHostedFormOrThrow();\n            await this.submitHostedForm();\n        } else {\n            // This condition is triggered when we pay with vaulted instrument and shipping address is truste\n            const { orderId } = await this.paypalCommerceIntegrationService.createOrderCardFields(\n                'paypalcommercecreditcardscheckout',\n                this.getInstrumentParams(),\n            );\n\n            this.returnedOrderId = orderId;\n        }\n\n        const submitPaymentPayload = this.preparePaymentPayload(\n            methodId,\n            paymentData,\n            this.returnedOrderId,\n            this.returnedVaultedToken,\n        );\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.cvvField?.close();\n        await this.expiryField?.close();\n        await this.numberField?.close();\n        await this.nameField?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Submit Payment Payload preparing method\n     *\n     * `vaultedToken` is used when we pay with vaulted instrument (with trusted shipping address and untrusted)\n     * `setupToken` is used when we pay with vaulted instrument (untrusted shipping address)\n     * `orderId` is used in every case (basic card payment, trusted shipping address and untrusted)\n     */\n    private preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n        orderId?: string,\n        nonce?: string,\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const instrumentId =\n            paymentData && isVaultedInstrument(paymentData) ? paymentData.instrumentId : undefined;\n\n        const bigpay_token = omitBy(\n            {\n                verification_nonce: nonce,\n                token: instrumentId,\n            },\n            isNil,\n        );\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                instrumentId,\n                formattedPayload: {\n                    ...(nonce || instrumentId ? { bigpay_token } : {}),\n                    ...(orderId ? { card_with_order: { order_id: orderId } } : {}),\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Card fields initialize\n     *\n     */\n    private async initializeFields(\n        formOptions: HostedFormOptions,\n        onCreditCardFieldsRenderingError?: PayPalCommerceCreditCardsPaymentInitializeOptions['onCreditCardFieldsRenderingError'],\n    ): Promise<void> {\n        const { fields, styles } = formOptions;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const executeCallback = this.getExecuteCallback(fields);\n\n        const cardFieldsConfig: PayPalCommerceCardFieldsConfig = {\n            style: this.getInputStyles(styles),\n            onApprove: ({\n                orderID,\n                vaultSetupToken,\n                liabilityShift,\n            }: PayPalCommerceCardFieldsOnApproveData) => {\n                if (\n                    liabilityShift === LiabilityShiftEnum.No ||\n                    liabilityShift === LiabilityShiftEnum.Unknown\n                ) {\n                    throw new Error();\n                }\n\n                return this.handleApprove({ orderID, vaultSetupToken });\n            },\n            onError: () => {\n                throw new PaymentMethodFailedError();\n            },\n            inputEvents: {\n                onChange: (event) => this.onChangeHandler(formOptions, event),\n                onFocus: (event) => this.onFocusHandler(formOptions, event),\n                onBlur: (event) => this.onBlurHandler(formOptions, event),\n                onInputSubmitRequest: (event) => this.onInputSubmitRequest(formOptions, event),\n            },\n            ...executeCallback,\n        };\n\n        this.cardFields = await paypalSdk.CardFields(cardFieldsConfig);\n\n        if (!this.cardFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            this.stylizeInputContainers(fields);\n\n            if (isCreditCardFormFields(fields)) {\n                await this.renderFields(fields);\n            }\n\n            if (isCreditCardVaultedFormFields(fields)) {\n                await this.renderVaultedFields(fields);\n            }\n        } catch (error: unknown) {\n            if (typeof onCreditCardFieldsRenderingError === 'function') {\n                onCreditCardFieldsRenderingError(error);\n            }\n        }\n    }\n\n    /**\n     *\n     * Get execute callback method\n     * Depends on shipping address is trusted or not we should pass to PP\n     * `createVaultSetupToken` callback if address is untrusted or\n     * `createOrder` if address is trusted\n     *\n     */\n    private getExecuteCallback(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ) {\n        const isVaultedForm = isCreditCardVaultedFormFields(fields);\n\n        return isVaultedForm ? this.createVaultSetupTokenCallback() : this.createOrderCallback();\n    }\n\n    private createVaultSetupTokenCallback() {\n        return {\n            createVaultSetupToken: async () => {\n                const { setupToken } =\n                    (await this.paypalCommerceIntegrationService.createOrderCardFields(\n                        'paypalcommercecreditcardscheckout',\n                        {\n                            ...this.getInstrumentParams(),\n                            setupToken: true,\n                        },\n                    )) || {};\n\n                return setupToken;\n            },\n        };\n    }\n\n    private createOrderCallback() {\n        return {\n            createOrder: async () => {\n                const { orderId } =\n                    (await this.paypalCommerceIntegrationService.createOrderCardFields(\n                        'paypalcommercecreditcardscheckout',\n                        this.getInstrumentParams(),\n                    )) || {};\n\n                return orderId;\n            },\n        };\n    }\n\n    /**\n     *\n     * onApprove method\n     * When submitting a form with a `submitHostedForm` method if there is no error\n     * then onApprove callback is triggered and depends on the flow\n     * we will receive an `orderID` if it's basic paying and `vaultSetupToken` if we are paying\n     * with vaulted instrument and shipping address is untrusted\n     *\n     */\n    private handleApprove({ orderID, vaultSetupToken }: PayPalCommerceCardFieldsOnApproveData) {\n        if (orderID) {\n            this.returnedOrderId = orderID;\n        }\n\n        if (vaultSetupToken) {\n            this.returnedVaultedToken = vaultSetupToken;\n        }\n    }\n\n    /**\n     *\n     * Rendering Card Fields methods\n     *\n     */\n    private async renderFields(fieldsOptions: HostedCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCode?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCode.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiry?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiry.containerId}`);\n        }\n\n        if (fieldsOptions.cardName?.containerId) {\n            this.nameField = cardFields.NameField({\n                placeholder: '',\n            });\n            await this.nameField.render(`#${fieldsOptions.cardName.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumber?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumber.containerId}`);\n        }\n    }\n\n    private async renderVaultedFields(fieldsOptions: HostedStoredCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCodeVerification?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCodeVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiryVerification?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiryVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumberVerification?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumberVerification.containerId}`);\n        }\n    }\n\n    /**\n     *\n     * Instrument params method\n     *\n     */\n    private getInstrumentParams(): HostedInstrument | VaultedInstrument {\n        if (!this.executionPaymentData) {\n            return {};\n        }\n\n        if (isHostedInstrumentLike(this.executionPaymentData)) {\n            const { shouldSaveInstrument, shouldSetAsDefaultInstrument } =\n                this.executionPaymentData;\n\n            return {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            };\n        }\n\n        if (isVaultedInstrument(this.executionPaymentData)) {\n            const { instrumentId } = this.executionPaymentData;\n\n            return {\n                instrumentId,\n            };\n        }\n\n        return {};\n    }\n\n    private getFieldTypeByEmittedField({\n        emittedBy,\n    }: PayPalCommerceCardFieldsState):\n        | HostedFieldBlurEventData\n        | HostedFieldEnterEventData\n        | HostedFieldFocusEventData {\n        return {\n            fieldType: this.mapFieldType(emittedBy),\n        };\n    }\n\n    /**\n     *\n     * Form submit method\n     * Triggers a form submit\n     * */\n    private async submitHostedForm() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const submitConfig = {\n            billingAddress: {\n                company: billingAddress.company,\n                addressLine1: billingAddress.address1,\n                addressLine2: billingAddress.address2,\n                adminArea1: billingAddress.stateOrProvinceCode,\n                adminArea2: billingAddress.city,\n                postalCode: billingAddress.postalCode,\n                countryCode: billingAddress.countryCode,\n            },\n        };\n\n        try {\n            if (this.isCreditCardVaultedForm) {\n                await cardFields.submit();\n            } else {\n                await cardFields.submit(submitConfig);\n            }\n        } catch (_) {\n            throw new PaymentMethodFailedError(\n                'Failed authentication. Please try to authorize again.',\n            );\n        }\n    }\n\n    /**\n     *\n     * Validation and errors\n     *\n     */\n    private async validateHostedFormOrThrow() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const cardFieldsState = await cardFields.getState().then((data) => data);\n        const validationData = this.getValidityData(cardFieldsState);\n\n        if (validationData.isValid) {\n            return;\n        }\n\n        this.hostedFormOptions?.onValidate?.(validationData);\n\n        throw new PaymentInvalidFormError(this.mapValidationErrors(validationData.errors));\n    }\n\n    private getValidityData({\n        fields,\n    }: PayPalCommerceCardFieldsState): HostedFieldValidateEventData {\n        const updatedFields = { ...fields };\n\n        delete updatedFields.cardNameField;\n\n        const fieldsKeys = Object.keys(updatedFields) as Array<\n            keyof PayPalCommerceCardFieldsState['fields']\n        >;\n\n        const isValid = fieldsKeys.every((key) => updatedFields[key]?.isValid);\n\n        const errors = fieldsKeys.reduce((fieldsErrors, key) => {\n            const fieldType = this.mapFieldType(key);\n\n            return {\n                ...fieldsErrors,\n                [fieldType]: updatedFields[key]?.isValid\n                    ? undefined\n                    : [this.getInvalidErrorByFieldType(fieldType)],\n            };\n        }, {});\n\n        return { isValid, errors };\n    }\n\n    private getInvalidErrorByFieldType(fieldType: string): HostedInputValidateErrorData {\n        switch (fieldType) {\n            case HostedFieldType.CardCode:\n            case HostedFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case HostedFieldType.CardNumber:\n            case HostedFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case HostedFieldType.CardExpiry:\n            case HostedFieldType.CardExpiryVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private mapValidationErrors(\n        validationErrors: HostedInputValidateErrorDataMap = {},\n    ): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n        const validationErrorsKeys = Object.keys(validationErrors) as Array<\n            keyof HostedInputValidateErrorDataMap\n        >;\n\n        validationErrorsKeys.forEach((key) => {\n            errors[key] = [\n                {\n                    message: validationErrors[key]?.[0]?.message || '',\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    /**\n     *\n     * Fields mappers\n     *\n     */\n    private mapFieldType(type: string): HostedFieldType {\n        switch (type) {\n            case 'name':\n                return HostedFieldType.CardName;\n\n            case 'cardNumberField':\n            case 'number':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardNumber\n                    : HostedFieldType.CardNumberVerification;\n\n            case 'cardExpiryField':\n            case 'expiry':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardExpiry\n                    : HostedFieldType.CardExpiryVerification;\n\n            case 'cardCvvField':\n            case 'cvv':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardCode\n                    : HostedFieldType.CardCodeVerification;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     */\n    private getCardFieldsOrThrow(): PayPalCommerceCardFields {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.cardFields;\n    }\n\n    private getInputStyles(\n        styles?: HostedFieldStylesMap,\n    ): PayPalCommerceHostedFieldsRenderOptions['styles'] {\n        const commonStyles = {\n            'font-size': styles?.default?.fontSize || '1rem',\n            'font-family':\n                styles?.default?.fontFamily || 'Montserrat, Arial, Helvetica, sans-serif',\n            'font-weight': styles?.default?.fontWeight || '400',\n            outline: 'none',\n            padding: '9px 13px',\n        };\n\n        const defaultStyles = { ...commonStyles, color: '#333333' };\n        const errorStyles = { ...commonStyles, color: 'red' };\n\n        return {\n            input: defaultStyles,\n            '.invalid': errorStyles,\n            '.valid': defaultStyles,\n            ':focus': defaultStyles,\n        };\n    }\n\n    private stylizeInputContainers(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ): void {\n        Object.values(fields || {}).forEach((id: HostedCardFieldOptions) => {\n            const element = document.getElementById(`${id?.containerId || ''}`);\n\n            if (element) {\n                element.style.padding = '0px';\n                element.style.boxShadow = 'none';\n                element.style.border = 'none';\n                element.style.background = 'transparent';\n                element.style.marginBottom = '10px';\n                element.style.marginLeft = '-5px';\n            }\n        });\n    }\n\n    private hasUndefinedValues() {\n        if (this.hostedFormOptions) {\n            return Object.values(this.hostedFormOptions.fields).some(\n                (value) => value === undefined,\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * Input events methods\n     *\n     */\n    private onChangeHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onValidate?.(this.getValidityData(event));\n    }\n\n    private onFocusHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onFocus?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onBlurHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onBlur?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onInputSubmitRequest(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onEnter?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    /**\n     *\n     * PayPal Commerce Accelerated checkout related methods\n     *\n     */\n    // TODO: remove this part when PPCP AXO A/B testing will be finished\n    private shouldInitializePayPalFastlane(methodId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalInitializationData>(methodId);\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalCommercePaymentProviderCustomer = isPayPalCommerceAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return (\n            paymentMethod?.initializationData?.isAcceleratedCheckoutEnabled &&\n            paymentMethod?.initializationData?.isPayPalCommerceAnalyticsV2Enabled &&\n            !paypalCommercePaymentProviderCustomer?.authenticationState\n        );\n    }\n\n    // TODO: remove this part when PPCP AXO A/B testing will be finished\n    private async initializePayPalFastlaneOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod = state.getPaymentMethodOrThrow<PayPalInitializationData>(methodId);\n            const { initializationData } = paymentMethod;\n\n            if (!initializationData?.connectClientToken) {\n                return;\n            }\n\n            const payPalFastlaneSdk = await this.paypalSdkScriptLoader.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.paypalFastlaneUtils.initializePayPalFastlane(\n                payPalFastlaneSdk,\n                !!initializationData?.isDeveloperModeApplicable,\n            );\n        } catch (_: unknown) {\n            // We should avoid throwing any error from this flow to do no brake default flow\n            // This flow is optional\n        }\n    }\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isPayPalCommerceAcceleratedCheckoutCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalFastlaneUtils,\n    createPayPalSdkScriptLoader,\n} from '@bigcommerce/checkout-sdk/paypal-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditCardsPaymentStrategy from './paypal-commerce-credit-cards-payment-strategy';\n\nconst createPaypalCommerceCreditCardsPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceCreditCardsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditCardsPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalSdkScriptLoader(),\n        createPayPalFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createPaypalCommerceCreditCardsPaymentStrategy, [\n    { id: 'paypalcommercecreditcards' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    BirthDate,\n    PayPalCommerceInitializationData,\n    PayPalOrderStatus,\n} from '../paypal-commerce-types';\n\nimport {\n    PaypalCommerceRatePay,\n    WithPayPalCommerceRatePayPaymentInitializeOptions,\n} from './paypal-commerce-ratepay-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class PaypalCommerceRatepayPaymentStrategy implements PaymentStrategy {\n    private guid?: string;\n    private paypalcommerceratepay?: PaypalCommerceRatePay;\n    private loadingIndicatorContainer?: string;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, paypalcommerceratepay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerceratepay) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerceratepay\" argument is not provided.`,\n            );\n        }\n\n        const { legalTextContainer, container, loadingContainerId } = paypalcommerceratepay;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.container\" argument is not provided.`,\n            );\n        }\n\n        if (!legalTextContainer) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.legalTextContainer\" argument is not provided.`,\n            );\n        }\n\n        if (!loadingContainerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.loadingContainerId\" argument is not provided.`,\n            );\n        }\n\n        this.loadingIndicatorContainer = loadingContainerId;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { merchantId } = paymentMethod.initializationData || {};\n\n        if (!merchantId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because merchantId argument is not provided.`,\n            );\n        }\n\n        this.paypalcommerceratepay = paypalcommerceratepay;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.createFraudNetScript(merchantId, methodId, gatewayId);\n\n        this.loadFraudnetConfig();\n\n        this.renderLegalText(legalTextContainer, container);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        const { getFieldsValues } = this.paypalcommerceratepay || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!getFieldsValues || typeof getFieldsValues !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.getFieldsValues\" argument is not provided.`,\n            );\n        }\n\n        this.toggleLoadingIndicator(true);\n\n        try {\n            const orderId = await this.paypalCommerceIntegrationService.createOrder(\n                'paypalcommercealternativemethodscheckout',\n                { metadataId: this.guid },\n            );\n\n            const { ratepayBirthDate, ratepayPhoneNumber, ratepayPhoneCountryCode } =\n                getFieldsValues();\n\n            const paymentData = {\n                formattedPayload: {\n                    vault_payment_instrument: null,\n                    set_as_default_stored_instrument: null,\n                    device_info: null,\n                    method_id: payment.methodId,\n                    rate_pay: {\n                        birth_date: this.normalizeDate(ratepayBirthDate),\n                        phone: {\n                            national_number: ratepayPhoneNumber,\n                            country_code: ratepayPhoneCountryCode.split('+')[1],\n                        },\n                    },\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n\n            return await new Promise((resolve, reject) => {\n                this.initializePollingMechanism(\n                    payment.methodId,\n                    resolve,\n                    reject,\n                    payment.gatewayId,\n                );\n            });\n        } catch (error: unknown) {\n            this.handleError(error);\n\n            return new Promise((_resolve, reject) => reject());\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const { legalTextContainer } = this.paypalcommerceratepay || {};\n        const fraudNetScript = document.querySelectorAll('[data-id=\"fraudnetScript\"]')[0];\n        const fraudNetConfig = document.querySelectorAll('[data-id=\"fraudnetConfig\"]')[0];\n\n        this.deinitializePollingMechanism();\n\n        fraudNetScript.remove();\n        fraudNetConfig.remove();\n\n        if (legalTextContainer) {\n            const legalTextContainerElement = document.getElementById(legalTextContainer);\n\n            legalTextContainerElement?.remove();\n        }\n\n        return Promise.resolve();\n    }\n\n    private normalizeDate(date: BirthDate) {\n        const formattedDate = this.formatDate(date.getDate());\n        const formattedMonth = this.formatDate(date.getMonth() + 1);\n\n        return `${date.getFullYear()}-${formattedMonth}-${formattedDate}`;\n    }\n\n    private formatDate(date: number): string {\n        return `${date < 10 ? 0 : ''}${date}`;\n    }\n\n    private renderLegalText(legalTextContainerElementId: string, container: string) {\n        const legalTextContainerId = legalTextContainerElementId;\n        const buttonContainerId = container.split('#')[1];\n        const buttonContainer = document.getElementById(buttonContainerId);\n        const buttonContainerParent = buttonContainer?.parentNode;\n        const legalTextContainer = document.createElement('div');\n\n        legalTextContainer.style.marginBottom = '20px';\n        legalTextContainer.setAttribute('id', legalTextContainerId);\n        buttonContainerParent?.prepend(legalTextContainer);\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const ratePayButton = paypalSdk.Legal({\n            fundingSource: paypalSdk.Legal.FUNDING.PAY_UPON_INVOICE,\n        });\n        const legalTextContainerElement = document.getElementById(legalTextContainerId);\n\n        if (legalTextContainerElement) {\n            ratePayButton.render(`#${legalTextContainerId}`);\n        } else {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"legalTextContainerElement\" argument is not found.`,\n            );\n        }\n    }\n\n    private handleError(error: unknown): void {\n        const { onError } = this.paypalcommerceratepay || {};\n\n        this.resetPollingMechanism();\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private createFraudNetScript(merchantId: string, methodId: string, gatewayId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { testMode } = paymentMethod.config;\n        const scriptElement = document.createElement('script');\n\n        scriptElement.setAttribute('type', 'application/json');\n        scriptElement.setAttribute('fncls', 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99');\n        scriptElement.setAttribute('data-id', 'fraudnetScript');\n        this.guid = this.generateGUID();\n\n        const fraudNetConfig = {\n            f: this.guid,\n            s: `${merchantId}_checkout-page`,\n            sandbox: testMode,\n        };\n\n        scriptElement.innerHTML = JSON.stringify(fraudNetConfig);\n        document.body.appendChild(scriptElement);\n    }\n\n    private generateGUID() {\n        let guid = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < 32; i += 1) {\n            const randomIndex = Math.floor(Math.random() * characters.length);\n\n            guid += characters[randomIndex];\n        }\n\n        return guid;\n    }\n\n    private loadFraudnetConfig() {\n        const script = document.createElement('script');\n\n        script.setAttribute('data-id', 'fraudnetConfig');\n        script.src = 'https://c.paypal.com/da/r/fb.js';\n        document.body.appendChild(script);\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithPayPalCommerceRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.paypalCommerceIntegrationService.getOrderStatus(\n                'paypalcommercealternativemethods',\n                {\n                    params: {\n                        useMetadata: true,\n                    },\n                },\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.PollingStop;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                paypalcommerceratepay: this.paypalcommerceratepay,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            this.handleError(error);\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PaypalCommerceRatepayPaymentStrategy from './paypal-commerce-ratepay-payment-strategy';\n\nconst createPaypalCommerceRatepayPaymentStrategy: PaymentStrategyFactory<\n    PaypalCommerceRatepayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PaypalCommerceRatepayPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: { ...LOADING_INDICATOR_STYLES, position: 'fixed' },\n        }),\n    );\n\nexport default toResolvableModule(createPaypalCommerceRatepayPaymentStrategy, [\n    { gateway: 'paypalcommercealternativemethods', id: 'ratepay' },\n]);\n","import { omitBy } from 'lodash';\n\nimport { FastlaneStylesSettings, PayPalFastlaneStylesOption } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n) {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n): PayPalFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: PayPalFastlaneStylesOption) {\n    const fastlaneStyles: PayPalFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n// TODO: update PayPalConnectCustomer with PayPalFastlaneCustomer\nexport default function isPayPalFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    CardInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getFastlaneStyles,\n    isPayPalFastlaneCustomer,\n    isPaypalFastlaneRequestError,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneCardComponentMethods,\n    PayPalFastlaneCardComponentOptions,\n    PayPalFastlanePaymentFormattedPayload,\n    PayPalFastlaneSdk,\n    PayPalFastlaneUtils,\n    PayPalInitializationData,\n    PayPalSdkScriptLoader,\n    TDSecureAuthenticationState,\n} from '@bigcommerce/checkout-sdk/paypal-utils';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\nimport { LiabilityShiftEnum } from '../paypal-commerce-types';\n\nimport PayPalCommerceFastlanePaymentInitializeOptions, {\n    WithPayPalCommerceFastlanePaymentInitializeOptions,\n} from './paypal-commerce-fastlane-payment-initialize-options';\n\nexport default class PaypalCommerceFastlanePaymentStrategy implements PaymentStrategy {\n    private paypalComponentMethods?: PayPalFastlaneCardComponentMethods;\n    private paypalFastlaneSdk?: PayPalFastlaneSdk;\n    private threeDSVerificationMethod?: string;\n    private paypalcommercefastlane?: PayPalCommerceFastlanePaymentInitializeOptions;\n    private orderId?: string;\n    private methodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalSdkScriptLoader: PayPalSdkScriptLoader,\n        private paypalFastlaneUtils: PayPalFastlaneUtils,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     * */\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercefastlane } = options;\n\n        this.methodId = methodId;\n\n        this.paypalcommercefastlane = paypalcommercefastlane;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercefastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercefastlane.onInit || typeof paypalcommercefastlane.onInit !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (\n            !paypalcommercefastlane.onChange ||\n            typeof paypalcommercefastlane.onChange !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalInitializationData>(methodId);\n        const { isDeveloperModeApplicable, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        this.threeDSVerificationMethod =\n            paymentMethod.initializationData?.threeDSVerificationMethod;\n\n        this.paypalFastlaneSdk = await this.paypalSdkScriptLoader.getPayPalFastlaneSdk(\n            paymentMethod,\n            cart.currency.code,\n            cart.id,\n        );\n\n        const paypalFastlaneStyling = isFastlaneStylingEnabled\n            ? paymentMethod?.initializationData?.fastlaneStyles\n            : {};\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyling,\n            paypalcommercefastlane?.styles,\n        );\n\n        await this.paypalFastlaneUtils.initializePayPalFastlane(\n            this.paypalFastlaneSdk,\n            !!isDeveloperModeApplicable,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.runPayPalAuthenticationFlowOrThrow(methodId);\n        }\n\n        await this.initializePayPalPaymentComponent();\n\n        paypalcommercefastlane.onInit((container: string) =>\n            this.renderPayPalPaymentComponent(container),\n        );\n        paypalcommercefastlane.onChange(() => this.handlePayPalStoredInstrumentChange(methodId));\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData, methodId } = payment;\n\n        const isVaultedFlow = paymentData && isVaultedInstrument(paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            const paymentPayload = isVaultedFlow\n                ? await this.prepareVaultedInstrumentPaymentPayload(methodId, paymentData)\n                : await this.preparePaymentPayload(methodId, paymentData);\n\n            await this.paymentIntegrationService.submitPayment<PayPalFastlanePaymentFormattedPayload>(\n                paymentPayload,\n            );\n\n            this.paypalFastlaneUtils.removeStorageSessionId();\n        } catch (error) {\n            if (\n                isPaypalFastlaneRequestError(error) &&\n                error.response.body.name === 'INVALID_REQUEST'\n            ) {\n                const invalidRequestError = {\n                    translationKey: 'payment.errors.invalid_request_error',\n                };\n\n                this.handleError(invalidRequestError);\n\n                return Promise.reject();\n            }\n\n            if (error instanceof Error && error.name !== 'FastlaneError') {\n                throw error;\n            }\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.paypalFastlaneUtils.getStorageSessionId();\n\n        if (\n            !customer.isGuest ||\n            paypalFastlaneCustomer?.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return !paypalFastlaneCustomer?.authenticationState && paypalFastlaneSessionId === cart.id;\n    }\n\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const customerEmail = customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } = await this.paypalFastlaneUtils.lookupCustomerOrThrow(\n                customerEmail,\n            );\n\n            const authenticationResult =\n                await this.paypalFastlaneUtils.triggerAuthenticationFlowOrThrow(customerContextId);\n\n            const { authenticationState, addresses, instruments } =\n                this.paypalFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                    methodId,\n                    authenticationResult,\n                );\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            const isAuthenticationFlowCanceled =\n                authenticationResult.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED;\n\n            if (isAuthenticationFlowCanceled) {\n                this.paypalFastlaneUtils.removeStorageSessionId();\n            } else {\n                this.paypalFastlaneUtils.updateStorageSessionId(cart.id);\n            }\n        } catch (error) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n    }\n\n    /**\n     *\n     * PayPal Fastlane Card Component rendering method\n     *\n     */\n    private async initializePayPalPaymentComponent(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const phone = billingAddress.phone;\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const paypalFastlane = this.paypalFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const cardComponentOptions: PayPalFastlaneCardComponentOptions = {\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        this.paypalComponentMethods = await paypalFastlane.FastlaneCardComponent(\n            cardComponentOptions,\n        );\n    }\n\n    private renderPayPalPaymentComponent(container?: string): void {\n        const paypalComponentMethods = this.getPayPalComponentMethodsOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render card component because \"container\" argument is not provided.',\n            );\n        }\n\n        paypalComponentMethods.render(container);\n    }\n\n    private getPayPalComponentMethodsOrThrow(): PayPalFastlaneCardComponentMethods {\n        if (!this.paypalComponentMethods) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalComponentMethods;\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paymentData: VaultedInstrument,\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const { instrumentId } = paymentData;\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalInitializationData>(methodId);\n        const is3DSEnabled =\n            this.isPaypalCommerceFastlaneThreeDSAvailable() && paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(instrumentId);\n        }\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(instrumentId) : instrumentId;\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalInitializationData>(methodId);\n\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const { getPaymentToken } = this.getPayPalComponentMethodsOrThrow();\n\n        const { id } = await getPaymentToken({\n            name: { fullName },\n            billingAddress: this.paypalFastlaneUtils.mapBcToPayPalAddress(billingAddress),\n        });\n\n        const is3DSEnabled =\n            this.isPaypalCommerceFastlaneThreeDSAvailable() && paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(id);\n        }\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(id) : id;\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async createOrder(id: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n\n        if (this.methodId) {\n            const { orderId } = await this.paypalCommerceRequestSender.createOrder(this.methodId, {\n                cartId,\n                fastlaneToken: id,\n            });\n\n            this.orderId = orderId;\n        }\n    }\n\n    /**\n     *\n     * 3DSecure methods\n     *\n     * */\n    private async get3DSNonce(paypalNonce: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const order = state.getOrderOrThrow();\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        const threeDomainSecureComponent = this.paypalFastlaneSdk?.ThreeDomainSecureClient;\n\n        if (!threeDomainSecureComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const threeDomainSecureParameters = {\n            amount: order.orderAmount.toFixed(2),\n            currency: cart.currency.code,\n            nonce: paypalNonce,\n            threeDSRequested: this.threeDSVerificationMethod === 'SCA_ALWAYS',\n            transactionContext: {\n                experience_context: {\n                    locale: 'en-US',\n                    return_url: checkoutUrl,\n                    cancel_url: checkoutUrl,\n                },\n            },\n        };\n\n        const isThreeDomainSecureEligible = await threeDomainSecureComponent.isEligible(\n            threeDomainSecureParameters,\n        );\n\n        if (isThreeDomainSecureEligible) {\n            const { liabilityShift, authenticationState, nonce } =\n                await threeDomainSecureComponent.show();\n\n            if (\n                liabilityShift === LiabilityShiftEnum.No ||\n                liabilityShift === LiabilityShiftEnum.Unknown ||\n                authenticationState === TDSecureAuthenticationState.Errored ||\n                authenticationState === TDSecureAuthenticationState.Cancelled\n            ) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            if (\n                authenticationState === TDSecureAuthenticationState.Succeeded &&\n                [LiabilityShiftEnum.Yes, LiabilityShiftEnum.Possible].includes(liabilityShift)\n            ) {\n                await this.createOrder(nonce);\n\n                return nonce;\n            }\n        }\n\n        return paypalNonce;\n    }\n\n    /**\n     *\n     * PayPal Fastlane instrument change\n     *\n     */\n    private async handlePayPalStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.paypalFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstrument = this.paypalFastlaneUtils.mapPayPalToBcInstrument(\n                methodId,\n                selectedCard,\n            )[0];\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                ...paypalFastlaneCustomer,\n                instruments: [selectedInstrument],\n            });\n\n            return selectedInstrument;\n        }\n\n        return undefined;\n    }\n\n    /**\n     *\n     * PayPal Fastlane experiments handling\n     *\n     */\n    private isPaypalCommerceFastlaneThreeDSAvailable(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        return isExperimentEnabled(features, 'PROJECT-7080.paypalcommerce_fastlane_three_ds');\n    }\n\n    private handleError(error: unknown): void {\n        if (\n            this.paypalcommercefastlane?.onError &&\n            typeof this.paypalcommercefastlane.onError === 'function'\n        ) {\n            this.paypalcommercefastlane.onError(error);\n        }\n    }\n}\n","export interface PaypalFastlaneRequestError {\n    name: string;\n    message: string;\n    response: {\n        body: {\n            name: string;\n        };\n    };\n}\n\nexport default function isPaypalFastlaneRequestError(\n    error: unknown,\n): error is PaypalFastlaneRequestError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'message' in error &&\n        'response' in error &&\n        'body' in (error as PaypalFastlaneRequestError).response &&\n        'name' in (error as PaypalFastlaneRequestError).response.body\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalFastlaneUtils,\n    createPayPalSdkScriptLoader,\n} from '@bigcommerce/checkout-sdk/paypal-utils';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\n\nimport PayPalCommerceFastlanePaymentStrategy from './paypal-commerce-fastlane-payment-strategy';\n\nconst createPayPalCommerceFastlanePaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceFastlanePaymentStrategy(\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        createPayPalSdkScriptLoader(),\n        createPayPalFastlaneUtils(),\n    );\n};\n\nexport default toResolvableModule(createPayPalCommerceFastlanePaymentStrategy, [\n    { id: 'paypalcommerceacceleratedcheckout' }, // PayPal Fastlane relates to 'paypalcommerceacceleratedcheckout' method id\n]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCustomerInitializeOptions, {\n    WithPayPalCommerceCustomerInitializeOptions,\n} from './paypal-commerce-customer-initialize-options';\n\nexport default class PayPalCommerceCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommerce.onClick && typeof paypalcommerce.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = paypalcommerce.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalcommerce: PayPalCommerceCustomerInitializeOptions,\n    ): void {\n        const { container, onClick, onComplete } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            ...(this.isPaypalCommerceAppSwitchEnabled(methodId) && {\n                appSwitchWhenAvailable: true,\n            }),\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            ...defaultCallbacks,\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            if (paypalButton.hasReturned?.() && this.isPaypalCommerceAppSwitchEnabled(methodId)) {\n                paypalButton.resume?.();\n            } else {\n                paypalButton.render(`#${container}`);\n            }\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n\n    /**\n     *\n     * PayPal AppSwitch enabling handling\n     *\n     */\n    private isPaypalCommerceAppSwitchEnabled(methodId: string): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        return paymentMethod.initializationData?.isAppSwitchEnabled || false;\n    }\n}\n","const DefaultCheckoutButtonHeight = 36;\n\nexport default DefaultCheckoutButtonHeight;\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCustomerStrategy from './paypal-commerce-customer-strategy';\n\nconst createPayPalCommerceCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCustomerStrategy, [{ id: 'paypalcommerce' }]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditCustomerInitializeOptions, {\n    WithPayPalCommerceCreditCustomerInitializeOptions,\n} from './paypal-commerce-credit-customer-initialize-options';\n\nexport default class PayPalCommerceCreditCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceCreditCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercecredit.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommercecredit.onClick && typeof paypalcommercecredit.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = paypalcommercecredit.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, paypalcommercecredit);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalCommerceCredit: PayPalCommerceCreditCustomerInitializeOptions,\n    ): void {\n        const { container, onComplete, onClick } = paypalCommerceCredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                        ...checkoutTopButtonStyles,\n                        height: DefaultCheckoutButtonHeight,\n                    }),\n                    ...defaultCallbacks,\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${container}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditCustomerStrategy from './paypal-commerce-credit-customer-strategy';\n\nconst createPayPalCommerceCreditCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceCreditCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditCustomerStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoCustomerInitializeOptions, {\n    WithPayPalCommerceVenmoCustomerInitializeOptions,\n} from './paypal-commerce-venmo-customer-initialize-options';\n\nexport default class PayPalCommerceVenmoCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceVenmoCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercevenmo.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommercevenmo.onClick && typeof paypalcommercevenmo.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo.onClick\" argument is not a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoCustomerInitializeOptions,\n    ): void {\n        const { container, onClick } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${container}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoCustomerStrategy from './paypal-commerce-venmo-customer-strategy';\n\nconst createPayPalCommerceVenmoCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceVenmoCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoCustomerStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import { CardInstrument, CustomerAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    fastlaneStyles?: FastlaneStylesSettings;\n    connectClientToken?: string; // TODO: remove when PPCP Fastlane A/B test will be finished\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneStylingEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCommerceAnalyticsV2Enabled?: boolean; // PayPal Fastlane related\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: remove when PPCP Fastlane A/B test will be finished\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    threeDSVerificationMethod?: string;\n    isAppSwitchEnabled?: boolean;\n}\n\n/**\n *\n * PayPalCommerceHostWindow contains different\n * PayPal Sdk instances for different purposes\n *\n */\nexport interface PayPalCommerceHostWindow extends Window {\n    paypalFastlane?: PayPalFastlane;\n    paypalFastlaneSdk?: PayPalFastlaneSdk;\n    paypalMessages?: PayPalMessagesSdk;\n    paypalApms?: PayPalApmSdk;\n    paypalGooglePay?: PayPalGooglePaySdk;\n}\n\n/**\n *\n * PayPal SDK config\n *\n */\nexport interface PayPalSdkConfig {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'enable-funding'?: EnableFundingType;\n        'disable-funding'?: FundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: PayPalSdkComponents;\n    };\n    attributes: {\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-sdk-client-token'?: string;\n        'data-namespace'?: string;\n        'data-client-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type PayPalSdkComponents = Array<\n    | 'fastlane'\n    | 'messages'\n    | 'buttons'\n    | 'payment-fields'\n    | 'three-domain-secure'\n    | 'hosted-fields'\n    | 'googlepay'\n>;\n\n/**\n *\n * PayPal Sdk instances\n *\n */\nexport interface PayPalFastlaneSdk {\n    ThreeDomainSecureClient: {\n        isEligible(params: threeDSecureParameters): Promise<boolean>;\n        show(): Promise<ThreeDomainSecureClientShowResponse>;\n    };\n    Fastlane(options?: PayPalFastlaneOptions): Promise<PayPalFastlane>;\n}\n\ninterface ThreeDomainSecureClientShowResponse {\n    liabilityShift: LiabilityShiftEnum;\n    authenticationState: TDSecureAuthenticationState;\n    nonce: string; // Enriched nonce or the original nonce\n}\n\nexport enum TDSecureAuthenticationState {\n    Succeeded = 'succeeded',\n    Cancelled = 'cancelled',\n    Errored = 'errored',\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\nexport interface threeDSecureParameters {\n    amount: string;\n    currency: string;\n    nonce: string;\n    threeDSRequested: boolean;\n    transactionContext: {\n        experience_context: {\n            brand_name?: string;\n            locale: string;\n            return_url: string;\n            cancel_url: string;\n        };\n    };\n}\n\nexport interface PayPalMessagesSdk {\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PayPalApmSdk {\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n}\n\nexport interface PayPalGooglePaySdk {\n    Googlepay(): GooglePay;\n}\n\n/**\n *\n * Google Pay related types\n *\n */\n\ninterface GooglePay {\n    config: () => Promise<GooglePayConfig>;\n    confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n    initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: PayPalButtonApproveCallbackPayload,\n        actions: PayPalButtonApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(\n        data: PayPalButtonInitCallbackPayload,\n        actions: PayPalButtonInitCallbackActions,\n    ): Promise<void>;\n    onClick?(\n        data: PayPalButtonClickCallbackPayload,\n        actions: PayPalButtonClickCallbackActions,\n    ): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n}\n\nexport interface PayPalButtonClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface PayPalButtonClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface PayPalButtonInitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface PayPalButtonInitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalButtonApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface PayPalButtonApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayLater Messages related types\n * doc: https://developer.paypal.com/docs/checkout/pay-later/us/integrate/reference\n */\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Fastlane related types\n *\n */\nexport interface PayPalFastlane {\n    identity: PayPalFastlaneIdentity;\n    events: PayPalFastlaneEvents;\n    profile: PayPalFastlaneProfile;\n    FastlaneCardComponent(\n        options: PayPalFastlaneCardComponentOptions,\n    ): Promise<PayPalFastlaneCardComponentMethods>;\n}\n\nexport interface PayPalFastlaneOptions {\n    styles?: PayPalFastlaneStylesOption;\n}\n\nexport interface PayPalFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerContextId: string,\n    ): Promise<PayPalFastlaneAuthenticationResult>;\n}\n\nexport interface PayPalFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface PayPalFastlaneAuthenticationResult {\n    authenticationState?: PayPalFastlaneAuthenticationState;\n    profileData?: PayPalFastlaneProfileData;\n}\n\nexport enum PayPalFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'canceled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface PayPalFastlaneProfileData {\n    name: PayPalFastlaneProfileName;\n    shippingAddress: PayPalFastlaneShippingAddress;\n    card: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface PayPalFastlaneProfilePhone {\n    countryCode: string;\n    nationalNumber: string;\n}\n\nexport interface PayPalFastlaneShippingAddress {\n    name: PayPalFastlaneProfileName;\n    phoneNumber: PayPalFastlaneProfilePhone;\n    address: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneProfileCard {\n    id: string; // nonce / token\n    paymentSource: PayPalFastlanePaymentSource;\n}\n\nexport interface PayPalFastlanePaymentSource {\n    card: PayPalFastlaneCardSource;\n}\n\nexport interface PayPalFastlaneCardSource {\n    brand: string;\n    expiry: string; // \"YYYY-MM\"\n    lastDigits: string; // \"1111\"\n    name: string;\n    billingAddress: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneAddress {\n    company?: string;\n    addressLine1: string;\n    addressLine2?: string;\n    adminArea1: string; // State\n    adminArea2: string; // City\n    postalCode: string;\n    countryCode?: string;\n}\n\nexport interface PayPalFastlaneProfileToBcCustomerDataMappingResult {\n    authenticationState: PayPalFastlaneAuthenticationState;\n    addresses: CustomerAddress[];\n    billingAddress?: CustomerAddress;\n    shippingAddress?: CustomerAddress;\n    instruments: CardInstrument[];\n}\n\nexport interface PayPalFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport interface PayPalFastlaneProfile {\n    showCardSelector(): Promise<PayPalFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<PayPalFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface PayPalFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: PayPalFastlaneShippingAddress;\n}\n\nexport interface PayPalFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneCardComponentMethods {\n    getPaymentToken(\n        options: PayPalFastlaneGetPaymentTokenOptions,\n    ): Promise<PayPalFastlaneProfileCard>;\n    render(element: string): void;\n}\n\nexport interface PayPalFastlaneGetPaymentTokenOptions {\n    name?: PayPalFastlaneProfileName;\n    billingAddress?: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneCardComponentOptions {\n    fields?: PayPalFastlaneCardComponentFields;\n}\n\nexport interface PayPalFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface PayPalFastlaneEvents {\n    apmSelected: (options: PayPalFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: PayPalFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: PayPalFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface PayPalFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface PayPalFastlaneApmSelectedEventOptions extends PayPalFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface PayPalFastlaneEmailEnteredEventOptions extends PayPalFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface PayPalFastlaneOrderPlacedEventOptions extends PayPalFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface PayPalFastlanePaymentFormattedPayload {\n    paypal_connect_token?: {\n        order_id?: string;\n        token: string;\n    };\n    paypal_fastlane_token?: {\n        order_id?: string;\n        token: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    Address,\n    CardInstrument,\n    CustomerAddress,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalFastlane,\n    PayPalFastlaneAddress,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneLookupCustomerByEmailResult,\n    PayPalFastlaneProfileCard,\n    PayPalFastlaneProfileName,\n    PayPalFastlaneProfilePhone,\n    PayPalFastlaneProfileToBcCustomerDataMappingResult,\n    PayPalFastlaneSdk,\n    PayPalFastlaneStylesOption,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceFastlaneUtils {\n    private window: PayPalCommerceHostWindow;\n\n    constructor() {\n        this.window = window;\n    }\n\n    async initializePayPalFastlane(\n        paypalFastlaneSdk: PayPalFastlaneSdk,\n        isTestModeEnabled: boolean,\n        styles?: PayPalFastlaneStylesOption,\n    ): Promise<PayPalFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n            window.localStorage.setItem('axoEnv', 'sandbox'); // TODO: remove if this key does not use on PayPal side\n        }\n\n        if (!this.window.paypalFastlane) {\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.window.paypalFastlane = await paypalFastlaneSdk.Fastlane({\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    getPayPalFastlaneOrThrow(): PayPalFastlane {\n        if (!this.window.paypalFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    /**\n     *\n     * Detects the customer to PayPal Fastlane relation and\n     * returns customerContextId to use it for authentication\n     *\n     */\n    async lookupCustomerOrThrow(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult> {\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.lookupCustomerByEmail(email);\n    }\n\n    /**\n     *\n     * Triggers authentication flow (shows OTP popup) if the customer recognised as PayPal Fastlane user\n     * and returns PayPal Fastlane Profile data to use it in BC checkout\n     *\n     */\n    async triggerAuthenticationFlowOrThrow(\n        customerContextId?: string,\n    ): Promise<PayPalFastlaneAuthenticationResult> {\n        if (!customerContextId) {\n            return {};\n        }\n\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.triggerAuthenticationFlow(customerContextId);\n    }\n\n    /**\n     *\n     * 'updateStorageSessionId' method is used to:\n     * - set session id after user was authenticated (or unrecognised) to trigger authentication after page refresh\n     *\n     * Flow info:\n     * If user unrecognised then the lookup method will be working but the OTP will not be shown\n     * If user recognised and not canceled then the lookup method will be working and the OTP will be shown only if needed\n     * If user cancels the OPT then OTP will not be triggered after page refresh\n     *\n     */\n    updateStorageSessionId(sessionId: string): void {\n        const expires = new Date();\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        const cookiesOption = {\n            expires,\n            secure: true,\n        };\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, cookiesOption);\n    }\n\n    removeStorageSessionId(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    getStorageSessionId(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    /**\n     *\n     * 'mapPayPalFastlaneProfileToBcCustomerData' method is responsible for:\n     * - mapping PayPal Fastlane Profile data to BC data shape\n     * - returning mapped data to use for updating PaymentProviderCustomer state and\n     * update shipping and billing addresses\n     *\n     */\n    mapPayPalFastlaneProfileToBcCustomerData(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): PayPalFastlaneProfileToBcCustomerDataMappingResult {\n        const { authenticationState, profileData } = authenticationResult;\n\n        const paypalBillingAddress = profileData?.card?.paymentSource?.card?.billingAddress;\n        const paypalShippingAddress = profileData?.shippingAddress;\n        const paypalProfileName = profileData?.name;\n        const paypalInstrument = profileData?.card;\n\n        const shippingAddress = paypalShippingAddress\n            ? this.mapPayPalToBcAddress(\n                  paypalShippingAddress.address,\n                  paypalShippingAddress.name,\n                  paypalShippingAddress.phoneNumber,\n              )\n            : undefined;\n        const billingAddress =\n            paypalBillingAddress && paypalProfileName\n                ? this.mapPayPalToBcAddress(\n                      paypalBillingAddress,\n                      paypalProfileName,\n                      paypalShippingAddress?.phoneNumber,\n                  )\n                : undefined;\n        const instruments = paypalInstrument\n            ? this.mapPayPalToBcInstrument(methodId, paypalInstrument)\n            : [];\n\n        const addresses = this.filterAddresses([shippingAddress, billingAddress]);\n\n        return {\n            authenticationState:\n                authenticationState || PayPalFastlaneAuthenticationState.UNRECOGNIZED,\n            addresses,\n            billingAddress,\n            shippingAddress,\n            instruments,\n        };\n    }\n\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instrument: PayPalFastlaneProfileCard,\n    ): CardInstrument[] {\n        const { id, paymentSource } = instrument;\n        const { brand, expiry, lastDigits } = paymentSource.card;\n\n        const [expiryYear, expiryMonth] = expiry.split('-');\n\n        return [\n            {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n                type: 'card',\n            },\n        ];\n    }\n\n    mapBcToPayPalAddress(address?: Address): PayPalFastlaneAddress {\n        return {\n            company: address?.company || '',\n            addressLine1: address?.address1 || '',\n            addressLine2: address?.address2 || '',\n            adminArea1: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            adminArea2: address?.city || '',\n            postalCode: address?.postalCode || '',\n            countryCode: address?.countryCode || '',\n        };\n    }\n\n    mapPayPalToBcAddress(\n        address: PayPalFastlaneAddress,\n        profileName: PayPalFastlaneProfileName,\n        phone?: PayPalFastlaneProfilePhone,\n        customFields?: CustomerAddress['customFields'],\n    ): CustomerAddress {\n        const [firstName, lastName] = profileName.fullName.split(' ');\n\n        const phoneData = {\n            nationalNumber: phone?.nationalNumber || '',\n            countryCode: phone?.countryCode || '',\n        };\n\n        return {\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: profileName.firstName || firstName || '',\n            lastName: profileName.lastName || lastName || '',\n            company: address.company || '',\n            address1: address.addressLine1,\n            address2: address.addressLine2 || '',\n            city: address.adminArea2,\n            stateOrProvince: address.adminArea1,\n            stateOrProvinceCode: address.adminArea1,\n            country: address.countryCode || '', // TODO: update country with valid naming\n            countryCode: address.countryCode || '',\n            postalCode: address.postalCode,\n            phone: phoneData.countryCode + phoneData.nationalNumber,\n            customFields: customFields || [],\n        };\n    }\n\n    /**\n     *\n     * This method is responsible for filtering PayPal Fastlane addresses if they are the same\n     * and returns an array of addresses to use them for shipping and/or billing address selections\n     * so the customer will be able to use addresses from PayPal Fastlane in checkout flow\n     *\n     */\n    filterAddresses(addresses: Array<CustomerAddress | undefined>): CustomerAddress[] {\n        return addresses.reduce(\n            (customerAddresses: CustomerAddress[], currentAddress: CustomerAddress | undefined) => {\n                if (!currentAddress) {\n                    return customerAddresses;\n                }\n\n                const sameAddressInTheArray = customerAddresses.some((customerAddress) =>\n                    this.isEqualAddresses(customerAddress, currentAddress),\n                );\n\n                return sameAddressInTheArray\n                    ? customerAddresses\n                    : [...customerAddresses, currentAddress];\n            },\n            [],\n        );\n    }\n\n    private isEqualAddresses(\n        firstAddress: CustomerAddress,\n        secondAddress: CustomerAddress,\n    ): boolean {\n        return isEqual(this.normalizeAddress(firstAddress), this.normalizeAddress(secondAddress));\n    }\n\n    private normalizeAddress(address: CustomerAddress) {\n        return omit(address, ['id', 'phone']);\n    }\n}\n","import { omitBy } from 'lodash';\n\nimport { FastlaneStylesSettings, PayPalFastlaneStylesOption } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n) {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n): PayPalFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: PayPalFastlaneStylesOption) {\n    const fastlaneStyles: PayPalFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getFastlaneStyles,\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneStylesOption,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceFastlaneCustomerInitializeOptions, {\n    WithPayPalCommerceFastlaneCustomerInitializeOptions,\n} from './paypal-commerce-fastlane-customer-initialize-options';\n\nexport default class PayPalCommerceFastlaneCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceFastlaneCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercefastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n            const isTestModeEnabled = !!paymentMethod.initializationData?.isDeveloperModeApplicable;\n\n            const paypalFastlaneSdk = await this.paypalCommerceSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.paypalCommerceFastlaneUtils.initializePayPalFastlane(\n                paypalFastlaneSdk,\n                isTestModeEnabled,\n                this.getFastlaneStyles(methodId, paypalcommercefastlane),\n            );\n        } catch (_) {\n            // TODO: add logger to be able to debug issues if there any\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback, methodId } =\n            options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (customer.isGuest) {\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            try {\n                await this.runPayPalAuthenticationFlowOrThrow(methodId);\n            } catch (_) {\n                // TODO: add logger to be able to debug issues if there any\n                // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n        const customerEmail = customer?.email || billingAddress?.email || '';\n\n        const { customerContextId } = await this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(\n            customerEmail,\n        );\n\n        const authenticationResult =\n            await this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                customerContextId,\n            );\n\n        const isAuthenticationFlowCanceled =\n            authenticationResult.authenticationState === PayPalFastlaneAuthenticationState.CANCELED;\n\n        await this.updateCustomerDataState(methodId, authenticationResult);\n\n        if (isAuthenticationFlowCanceled) {\n            this.paypalCommerceFastlaneUtils.removeStorageSessionId();\n        } else {\n            this.paypalCommerceFastlaneUtils.updateStorageSessionId(cartId);\n        }\n    }\n\n    private async updateCustomerDataState(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        const { authenticationState, addresses, billingAddress, shippingAddress, instruments } =\n            this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                methodId,\n                authenticationResult,\n            );\n\n        await this.paymentIntegrationService.updatePaymentProviderCustomer({\n            authenticationState,\n            addresses,\n            instruments,\n        });\n\n        if (billingAddress) {\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && cart.lineItems.physicalItems.length > 0) {\n            const updatedState = await this.paymentIntegrationService.updateShippingAddress(\n                shippingAddress,\n            );\n\n            const paymentMethod =\n                updatedState.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                paymentMethod.initializationData || {};\n            const consignments = updatedState.getConsignments() || [];\n            const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n            const firstShippingOption = availableShippingOptions[0];\n            const recommendedShippingOption = availableShippingOptions.find(\n                (option) => option.isRecommended,\n            );\n\n            if (\n                (recommendedShippingOption || firstShippingOption) &&\n                isFastlaneShippingOptionAutoSelectEnabled\n            ) {\n                const shippingOptionId = recommendedShippingOption?.id || firstShippingOption.id;\n\n                await this.paymentIntegrationService.selectShippingOption(shippingOptionId);\n            }\n        }\n    }\n\n    /**\n     *\n     * Fastlane styling methods\n     *\n     */\n    private getFastlaneStyles(\n        methodId: string,\n        paypalcommercefastlane: PayPalCommerceFastlaneCustomerInitializeOptions | undefined,\n    ): PayPalFastlaneStylesOption | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const { fastlaneStyles, isFastlaneStylingEnabled } = paymentMethod.initializationData || {};\n\n        return getFastlaneStyles(\n            isFastlaneStylingEnabled ? fastlaneStyles : {},\n            paypalcommercefastlane?.styles,\n        );\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceFastlaneCustomerStrategy from './paypal-commerce-fastlane-customer-strategy';\n\nconst createPayPalCommerceFastlaneCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceFastlaneCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceFastlaneCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceSdk(),\n        createPayPalCommerceFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceFastlaneCustomerStrategy, [\n    { id: 'paypalcommerceacceleratedcheckout' }, // this method id will be provided for users from test group\n    { id: 'paypalcommercecreditcards' }, // this method id will be provided for users from control group\n]);\n","import PayPalCommerceFastlaneUtils from './paypal-commerce-fastlane-utils';\n\nexport default function createPayPalCommerceFastlaneUtils(): PayPalCommerceFastlaneUtils {\n    return new PayPalCommerceFastlaneUtils();\n}\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceButtonInitializeOptions, {\n    WithPayPalCommerceButtonInitializeOptions,\n} from './paypal-commerce-button-initialize-options';\n\nexport default class PayPalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(paypalcommerce?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !paypalcommerce.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof paypalcommerce.buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? paypalcommerce.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommerce, isBuyNowFlow);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PayPalCommerceButtonInitializeOptions,\n        isBuyNowFlow?: boolean,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            ...(!isBuyNowFlow &&\n                this.isPaypalCommerceAppSwitchEnabled(methodId) && {\n                    appSwitchWhenAvailable: true,\n                }),\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            if (paypalButton.hasReturned?.() && this.isPaypalCommerceAppSwitchEnabled(methodId)) {\n                paypalButton.resume?.();\n            } else {\n                paypalButton.render(`#${containerId}`);\n            }\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     *\n     * PayPal AppSwitch enabling handling\n     *\n     */\n    private isPaypalCommerceAppSwitchEnabled(methodId: string): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        return paymentMethod.initializationData?.isAppSwitchEnabled || false;\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceButtonStrategy from './paypal-commerce-button-strategy';\n\nconst createPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceButtonStrategy, [{ id: 'paypalcommerce' }]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditButtonInitializeOptions, {\n    WithPayPalCommerceCreditButtonInitializeOptions,\n} from './paypal-commerce-credit-button-initialize-options';\n\nexport default class PayPalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = paypalcommercecredit || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercecredit);\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5557.Hide_ppc_banner_implementation will be rolled out to 100%\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isBannerImplementationDisabled =\n            features['PAYPAL-5557.Hide_ppc_banner_implementation'] ?? false;\n\n        if (isBannerImplementationDisabled) {\n            return;\n        }\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this code when data attributes will be removed from the banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const paypalSdk = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(paypalSdk, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PayPalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            paypalcommercecredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditButtonStrategy from './paypal-commerce-credit-button-strategy';\n\nconst createPayPalCommerceCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceCreditButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditButtonStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    StyleButtonColor,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoButtonInitializeOptions, {\n    WithPayPalCommerceVenmoButtonInitializeOptions,\n} from './paypal-commerce-venmo-button-initialize-options';\n\nexport default class PayPalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            paypalcommercevenmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle = this.paypalCommerceIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoButtonStrategy from './paypal-commerce-venmo-button-strategy';\n\nconst createPayPalCommerceVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoButtonStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsButtonOptions, {\n    WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n} from './paypal-commerce-alternative-methods-button-initialize-options';\n\nexport default class PayPalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = paypalcommercealternativemethods || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercealternativemethods: PayPalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            paypalcommercealternativemethods;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder(\n                    'paypalcommercealternativemethod',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: apm,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceAlternativeMethodsButtonStrategy from './paypal-commerce-alternative-methods-button-strategy';\n\nconst createPayPalCommerceAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsButtonStrategy, [\n    { id: 'paypalcommercealternativemethods' },\n]);\n"],"names":["MissingDataErrorType","__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","PaymentMethodClientUnavailableError","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","PayPalCommerceSdk","scriptLoader","window","getPayPalFastlaneSdk","paymentMethod","currencyCode","sessionId","paypalFastlaneSdk","config","getPayPalFastlaneSdkConfiguration","loadPayPalSdk","getPayPalGooglePaySdk","initializesOnCheckoutPage","forceLoad","paypalGooglePay","paypalSdkScriptConfig","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","options","attributes","scriptOptions","transformConfig","scriptAttributes","scriptSrc","URLSearchParams","toString","loadScript","async","clientToken","initializationData","clientId","intent","merchantId","attributionId","commit","components","currency","replace","buyerCountry","isHostedCheckoutEnabled","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","enableAPMsFunding","disableAPMsFunding","filter","apm","includes","length","undefined","transformedConfig","keys","forEach","value","Array","isArray","join","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","styles","containerStyles","defineAnimation","container","buildContainer","indicator","buildIndicator","appendChild","show","parentId","parent","document","getElementById","style","visibility","opacity","hide","handleTransitionEnd","removeEventListener","addEventListener","createElement","display","bottom","left","height","width","position","right","top","transition","setStyleAttribute","borderRadius","border","borderColor","margin","transform","transformStyle","animation","element","attrs","k","setProperty","id","head","sheet","CSSStyleSheet","insertRule","BuyNowCartCreationError","DEFAULT_RESPONSE","body","headers","status","RequestError","response","errors","CartSource","LiabilityShiftEnum","PayPalCommerceIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","NonInstantAlternativePaymentMethods","PayPalOrderStatus","PayPalCommerceIntegrationService","formPoster","paymentIntegrationService","paypalCommerceRequestSender","paypalCommerceScriptLoader","methodId","providedCurrencyCode","state","getState","getCartOrThrow","code","getPaymentMethodOrThrow","paypalSdk","getPayPalSDK","getPayPalSdkOrThrow","createBuyNowCartOrThrow","buyNowInitializeOptions","cartRequestBody","getBuyNowCartRequestBody","createBuyNowCart","error","createOrder","providerId","requestBody","cartId","orderId","createOrderCardFields","setupToken","updateOrder","cart","consignment","getConsignmentsOrThrow","availableShippingOptions","selectedShippingOption","_error","getOrderStatus","tokenizePayment","postForm","payment_type","action","provider","order_id","source","BuyNow","cart_id","submitPayment","gatewayId","paymentData","formattedPayload","vault_payment_instrument","set_as_default_stored_instrument","device_info","method_id","paypal_account","getShippingOptionOrThrow","selectedShippingOptionId","recommendedShippingOption","find","option","isRecommended","shippingOptionToSelect","getAddress","address","firstName","lastName","email","phone","company","address1","address2","city","countryCode","postalCode","stateOrProvince","stateOrProvinceCode","customFields","getBillingAddressFromOrderDetails","payer","given_name","surname","email_address","address_line_1","address_line_2","admin_area_2","country_code","postal_code","admin_area_1","phone_number","national_number","getShippingAddressFromOrderDetails","orderDetails","purchase_units","full_name","shipping","split","getValidButtonStyle","label","shape","validStyles","getValidHeight","omitBy","isNil","removeElement","elementId","INTERNAL_USE_ONLY","ContentType","SDK_VERSION_HEADERS","PayPalCommerceRequestSender","requestSender","url","Json","post","put","PayPalCommerceScriptLoader","getPayPalSdkScriptConfigOrThrow","loadPayPalSDK","paypal","isVenmoEnabled","isPayPalCreditAvailable","isGooglePayEnabled","shouldEnableCard","enableCardFunding","enableCreditFunding","shouldEnableAPMs","enableVenmoFunding","googlePayComponent","cardFieldsComponent","disableFunding","enableFunding","getHost","createFormPoster","createRequestSender","host","getScriptLoader","LOADING_INDICATOR_STYLES","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","PaymentMethodInvalidError","OrderFinalizationNotRequiredError","isHostedInstrumentLike","instrument","shouldSaveInstrument","shouldSetAsDefaultInstrument","isVaultedInstrument","Boolean","instrumentId","messagesStyles","layout","logo","ratio","text","isBaseInstrument","PayPalCommercePaymentStrategy","paypalCommerceIntegrationService","paypalCommerceSdk","loadingIndicator","initialize","paypalcommerce","loadPaymentMethod","bannerContainerId","paypalBNPLConfiguration","console","bannerConfiguration","Messages","renderMessages","loadingIndicatorContainer","onInit","renderButton","shouldRenderPayPalButtonOnInitialization","execute","payload","payment","order","onError","isPayPalVaultedInstrumentPaymentData","paymentPayload","prepareVaultedInstrumentPaymentPayload","preparePaymentPayload","submitOrder","additional_action_required","isRedirectActionError","redirectUrl","data","redirect_url","Promise","location","isProviderError","_resolve","reject","paypalButton","close","handleError","finalize","deinitialize","resolve","paypalOrderId","shouldConfirmInstrument","isTrustedVaultingFlow","bigpay_token","token","paymentButtonStyles","checkoutPaymentButtonStyles","onRenderButton","onValidate","submitForm","buttonOptions","isPaypalCommerceAppSwitchEnabled","appSwitchWhenAvailable","fundingSource","FUNDING","PAYPAL","onClick","_","actions","handleClick","onApprove","handleApprove","onCancel","toggleLoadingIndicator","Buttons","isEligible","hasReturned","resume","render","orderID","fieldsValues","getFieldsValues","instruments","getInstruments","findInstrument","bigpayToken","trustedShippingAddress","isLoading","paypalMessagesOptions","amount","getCheckoutOrThrow","outstandingBalance","placement","isPaypalCommerceProviderError","e","provider_error","isAppSwitchEnabled","createPayPalCommerceSdk","createScriptLoader","NotImplementedError","PayPalCommerceCreditPaymentStrategy","paypalcommercecredit","paypalOptions","fundingSources","PAYLATER","CREDIT","hasRenderedSmartButton","PayPalCommerceVenmoPaymentStrategy","paypalcommercevenmo","VENMO","TimeoutError","isExperimentEnabled","features","experimentName","fallbackValue","PayPalCommerceAlternativeMethodsPaymentStrategy","pollingInterval","maxPollingIntervalTime","pollingTimer","stopPolling","noop","isPollingEnabled","paypalcommercealternativemethods","shouldRenderFields","getStoreConfigOrThrow","checkoutSettings","renderFields","initializePollingMechanism","isNonInstantPaymentMethod","resetPollingMechanism","resolvePromise","rejectPromise","timeout","setTimeout","clearTimeout","orderStatus","isOrderApproved","Approved","isPollingError","PollingError","deinitializePollingMechanism","reinitializeStrategy","paypalAmpsSdk","getPaypalAmpsSdkOrThrow","buttonStyle","onInitButton","onCreateOrder","handleFailure","useStoreCredit","params","getBillingAddressOrThrow","apmFieldsContainer","apmFieldsStyles","fieldContainerElement","querySelector","innerHTML","fieldsOptions","fields","PaymentFields","toUpperCase","gateway","UntrustedShippingCardVerificationType","PayPalIntent","TDSecureAuthenticationState","PayPalFastlaneAuthenticationState","PayPalSdkScriptLoader","createPayPalSdkScriptLoader","CookieStorage","cookieKey","encodeURIComponent","cookie","firstIndex","indexOf","lastIndex","decodeURIComponent","substring","set","secure","cookieText","expires","path","domain","toUTCString","now","Date","minutes","setTime","getTime","remove","HostedFieldType","PaypalFastlaneUtils","initializePayPalFastlane","isTestModeEnabled","localStorage","setItem","paypalFastlane","defaultStyles","root","backgroundColorPrimary","Fastlane","getPayPalFastlaneOrThrow","lookupCustomerOrThrow","identity","lookupCustomerByEmail","triggerAuthenticationFlowOrThrow","customerContextId","triggerAuthenticationFlow","updateStorageSessionId","setDate","getDate","cookiesOption","removeStorageSessionId","getStorageSessionId","mapPayPalFastlaneProfileToBcCustomerData","authenticationResult","authenticationState","profileData","paypalBillingAddress","card","paymentSource","billingAddress","paypalShippingAddress","shippingAddress","paypalProfileName","paypalInstrument","mapPayPalToBcAddress","phoneNumber","mapPayPalToBcInstrument","addresses","filterAddresses","UNRECOGNIZED","brand","expiry","lastDigits","expiryYear","expiryMonth","defaultInstrument","iin","last4","method","untrustedShippingCardVerificationMode","PAN","mapBcToPayPalAddress","addressLine1","addressLine2","adminArea1","adminArea2","profileName","fullName","phoneData","nationalNumber","country","reduce","customerAddresses","currentAddress","some","customerAddress","isEqualAddresses","firstAddress","secondAddress","isEqual","normalizeAddress","omit","createPaypalFastlaneUtils","isCreditCardFormFields","CardNumber","CardName","CardExpiry","isCreditCardVaultedFormFields","CardNumberVerification","CardCodeVerification","CardExpiryVerification","PaymentMethodFailedError","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","PaymentInvalidFormError","details","PayPalCommerceCreditCardsPaymentStrategy","paypalSdkScriptLoader","paypalFastlaneUtils","paypalcommercecreditcards","paypalCommerceInitializationOptions","form","onCreditCardFieldsRenderingError","onLoadComplete","hostedFormOptions","isCreditCardForm","isCreditCardVaultedForm","hasUndefinedValues","initializeFields","shouldInitializePayPalFastlane","initializePayPalFastlaneOrThrow","executionPaymentData","validateHostedFormOrThrow","submitHostedForm","getInstrumentParams","returnedOrderId","submitPaymentPayload","returnedVaultedToken","cvvField","expiryField","numberField","nameField","nonce","verification_nonce","card_with_order","formOptions","executeCallback","getExecuteCallback","cardFieldsConfig","getInputStyles","vaultSetupToken","liabilityShift","No","Unknown","inputEvents","onChange","event","onChangeHandler","onFocus","onFocusHandler","onBlur","onBlurHandler","onInputSubmitRequest","cardFields","CardFields","stylizeInputContainers","renderVaultedFields","createVaultSetupTokenCallback","createOrderCallback","createVaultSetupToken","getCardFieldsOrThrow","cardCode","containerId","CVVField","placeholder","cardExpiry","ExpiryField","cardName","NameField","cardNumber","NumberField","cardCodeVerification","cardExpiryVerification","cardNumberVerification","getFieldTypeByEmittedField","emittedBy","fieldType","mapFieldType","submitConfig","submit","cardFieldsState","then","validationData","getValidityData","isValid","mapValidationErrors","updatedFields","cardNameField","fieldsKeys","every","fieldsErrors","getInvalidErrorByFieldType","CardCode","validationErrors","commonStyles","default","fontSize","fontFamily","fontWeight","outline","padding","input","values","boxShadow","background","marginBottom","marginLeft","onEnter","paymentProviderCustomer","getPaymentProviderCustomer","paypalCommercePaymentProviderCustomer","customer","isAcceleratedCheckoutEnabled","isPayPalCommerceAnalyticsV2Enabled","connectClientToken","payPalFastlaneSdk","PaypalCommerceRatepayPaymentStrategy","paypalcommerceratepay","legalTextContainer","loadingContainerId","createFraudNetScript","loadFraudnetConfig","renderLegalText","metadataId","guid","ratepayBirthDate","ratepayPhoneNumber","ratepayPhoneCountryCode","rate_pay","birth_date","normalizeDate","fraudNetScript","querySelectorAll","fraudNetConfig","legalTextContainerElement","date","formattedDate","formatDate","formattedMonth","getMonth","getFullYear","legalTextContainerElementId","legalTextContainerId","buttonContainerId","buttonContainer","buttonContainerParent","parentNode","setAttribute","prepend","ratePayButton","Legal","PAY_UPON_INVOICE","testMode","scriptElement","generateGUID","f","s","sandbox","JSON","stringify","i","Math","floor","characters","random","script","src","useMetadata","PollingStop","isInvalidStyleOption","styleOption","isPayPalFastlaneCustomer","PaypalCommerceFastlanePaymentStrategy","paypalcommercefastlane","isFastlaneStylingEnabled","threeDSVerificationMethod","fastlaneStyles","styleSettings","uiStyles","toggle","textBody","textCaption","caption","branding","cleanUpFastlaneStyles","fastlaneRootSettingsBackgroundColor","errorColor","fastlaneRootSettingsErrorColor","fastlaneRootSettingsFontFamily","fontSizeBase","fastlaneRootSettingsFontSize","fastlaneRootSettingsPadding","primaryColor","fastlaneRootSettingsPrimaryColor","fastlaneInputSettingsBorderRadius","fastlaneInputSettingsBorderColor","focusBorderColor","fastlaneInputSettingsFocusBorderBase","fastlaneInputSettingsBackgroundColor","borderWidth","fastlaneInputSettingsBorderWidth","textColorBase","fastlaneInputSettingsTextColorBase","colorPrimary","fastlaneToggleSettingsColorPrimary","colorSecondary","fastlaneToggleSettingsColorSecondary","fastlaneTextBodySettingsColor","fastlaneTextBodySettingsFontSize","fastlaneTextCaptionSettingsColor","fastlaneTextCaptionSettingsFontSize","fastlaneBrandingSettings","mergeFastlaneStyles","getFastlaneStyles","shouldRunAuthenticationFlow","runPayPalAuthenticationFlowOrThrow","initializePayPalPaymentComponent","renderPayPalPaymentComponent","handlePayPalStoredInstrumentChange","orderRequest","isVaultedFlow","isPaypalFastlaneRequestError","invalidRequestError","translationKey","getCustomerOrThrow","paypalFastlaneCustomer","paypalFastlaneSessionId","isGuest","CANCELED","getCustomer","getBillingAddress","customerEmail","updatePaymentProviderCustomer","trim","cardComponentOptions","cardholderName","prefill","enabled","paypalComponentMethods","FastlaneCardComponent","getPayPalComponentMethodsOrThrow","is3DSEnabled","isPaypalCommerceFastlaneThreeDSAvailable","is3dsEnabled","fastlaneToken","get3DSNonce","paypal_fastlane_token","getPaymentToken","paypalNonce","getOrderOrThrow","checkoutUrl","links","checkoutLink","threeDomainSecureComponent","ThreeDomainSecureClient","threeDomainSecureParameters","orderAmount","toFixed","threeDSRequested","transactionContext","experience_context","locale","return_url","cancel_url","Errored","Cancelled","Succeeded","Yes","Possible","paypalAxoSdk","selectionChanged","selectedCard","profile","showCardSelector","selectedInstrument","PayPalCommerceCustomerStrategy","getPaymentMethod","signIn","credentials","signInCustomer","signOut","signOutCustomer","executePaymentMethodCheckout","continueWithCheckoutCallback","onComplete","checkoutTopButtonStyles","defaultCallbacks","hostedCheckoutCallbacks","onShippingAddressChange","onShippingOptionsChange","onHostedCheckoutApprove","buttonRenderOptions","updateBillingAddress","lineItems","physicalItems","updateShippingAddress","shippingOption","selectShippingOption","PayPalCommerceCreditCustomerStrategy","paypalCommerceCredit","PayPalCommerceVenmoCustomerStrategy","paypalButtonRender","PayPalCommerceFastlaneUtils","PayPalCommerceFastlaneCustomerStrategy","paypalCommerceFastlaneUtils","checkoutPaymentMethodExecuted","isAuthenticationFlowCanceled","updateCustomerDataState","updatedState","isFastlaneShippingOptionAutoSelectEnabled","consignments","getConsignments","firstShippingOption","shippingOptionId","PayPalCommerceButtonStrategy","isBuyNowFlow","loadDefaultCheckout","onEligibilityFailure","buyNowFlowCallbacks","buyNowCart","loadCheckout","PayPalCommerceCreditButtonStrategy","messagingContainerId","messagingContainer","removeAttribute","paypalMessagesSdk","PayPalCommerceVenmoButtonStrategy","getValidVenmoButtonStyles","validButtonStyle","gold","PayPalCommerceAlternativeMethodsButtonStrategy"],"sourceRoot":""}