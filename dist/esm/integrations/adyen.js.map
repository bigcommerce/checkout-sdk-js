{"version":3,"file":"integrations/adyen.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv2/adyenv2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-card-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv2/adyenv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-account-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv2/create-adyenv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv3/adyenv3-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv3/adyenv3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-boleto-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv3/create-adyenv3-payment-strategy.ts"],"sourcesContent":["import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","export enum AdyenV3ActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2 = 'threeDS2',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n\n    /*\n     * The Component displays the widget which the shopper uses to complete the payment.\n     * */\n    Sdk = 'sdk',\n}\n\nexport enum AdyenV2ActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2Challenge = 'threeDS2Challenge',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n}\n\nexport enum AdyenComponentType {\n    SecuredFields = 'securedfields',\n}\n\nexport enum AdyenPaymentMethodType {\n    ACH = 'ach',\n    AliPay = 'alipay',\n    Bancontact = 'bcmc',\n    CreditCard = 'scheme',\n    Klarna = 'klarna',\n    KlarnaPayNow = 'klarna_paynow',\n    KlarnaAccount = 'klarna_account',\n    IDEAL = 'ideal',\n    GiroPay = 'giropay',\n    GooglePay = 'paywithgoogle',\n    SEPA = 'sepadirectdebit',\n    Sofort = 'directEbanking',\n    Vipps = 'vipps',\n    WeChatPayQR = 'wechatpayQR',\n}\n\nexport enum HTTPMethod {\n    POST = 'POST',\n}\n\nexport enum ResultCode {\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n}\n\ninterface AdyenPaymentMethodState {\n    type: string;\n}\n\ninterface WechatDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\ninterface BoletoDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n    shopperName?: {\n        firstName?: string;\n        lastName?: string;\n    };\n    socialSecurityNumber?: string;\n}\n\ninterface CardPaymentMethodState extends AdyenPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName: string;\n}\n\nexport interface AdyenV2Action {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenV2ActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport interface AdyenV3Action {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenV3ActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport type AdyenAction = AdyenV2Action | AdyenV3Action;\n\nexport interface AdyenAdditionalAction {\n    resultCode: ResultCode;\n    action: string;\n}\n\nexport interface AdyenAdditionalActionCallbacks {\n    /**\n     * A callback that gets called before adyen component is loaded\n     */\n    onBeforeLoad?(shopperInteraction?: boolean): void;\n\n    /**\n     * A callback that gets called when adyen component is loaded\n     */\n    onLoad?(cancel?: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete?(): void;\n\n    /**\n     * A callback that gets called when an action, for example a QR code or 3D Secure 2 authentication screen, is shown to the shopper\n     */\n    onActionHandled?(): void;\n}\n\nexport interface AdyenAdditionalActionErrorResponse {\n    provider_data: AdyenAdditionalAction;\n    errors: [{ code: string }];\n}\n\nexport interface AdyenAdditionalActionOptions extends AdyenAdditionalActionCallbacks {\n    /**\n     * The location to insert the additional action component.\n     */\n    containerId: string;\n\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface AdyenAdditionalActionState {\n    data: AdyenAdditionalAction;\n    isValid?: boolean;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: StyleOptions;\n\n    showBrandsUnderCardNumber?: boolean;\n}\n\nexport interface AdyenComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenComponentEventState, component: AdyenComponent): void;\n\n    /**\n     * Called when the shopper selects the Pay button and payment details are valid.\n     */\n    onSubmit?(state: AdyenComponentEventState, component: AdyenComponent): void;\n\n    /**\n     * Called in case of an invalid card number, invalid expiry date, or\n     *  incomplete field. Called again when errors are cleared.\n     */\n    onError?(state: AdyenValidationState, component: AdyenComponent): void;\n\n    onFieldValid?(state: AdyenValidationState, component: AdyenComponent): void;\n}\n\nexport interface AdyenClient {\n    create(type: string, componentOptions?: AdyenComponentOptions): AdyenComponent;\n\n    createFromAction(\n        action: AdyenV2Action | AdyenV3Action,\n        componentOptions?:\n            | ThreeDS2DeviceFingerprintComponentOptions\n            | AdyenV3ThreeDS2ChallengeComponentOptions\n            | AdyenV2ThreeDS2ChallengeComponentOptions,\n    ): AdyenComponent;\n}\n\nexport interface AdyenComponent {\n    componentRef?: {\n        showValidation(): void;\n    };\n    props?: {\n        type?: string;\n    };\n    state?: AdyenComponentState;\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n    submit(): void;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey?: string;\n\n    /*\n     * The Client Key of your Adyen account.\n     */\n    clientKey?: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /**\n     * Configuration for specific payment methods.\n     */\n    paymentMethodsConfiguration?: {\n        klarna: {\n            useKlarnaWidget: boolean;\n        };\n        klarna_account: {\n            useKlarnaWidget: boolean;\n        };\n        klarna_paynow: {\n            useKlarnaWidget: boolean;\n        };\n        card?: {\n            installmentOptions?: {\n                card?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                visa?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                mc?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                diners?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                jcb?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                showInstallmentAmounts?: boolean;\n            };\n        };\n    };\n\n    showPayButton?: boolean;\n\n    /**\n     * If your shoppers use a language that isn't supported by the Components, you can create your own localization.\n     * To create a localization:\n     * Add a translations object to your payment page, specifying:\n     * The localization you want to create.\n     * An object containing the fields that are used in the Components, as well as the text you want displayed for each field.\n     *\n     * \"en\": {\n     *  \"paymentMethods.moreMethodsButton\": \"More payment methods\",\n     *  \"payButton\": \"Pay\",\n     *  \"storeDetails\": \"Save for my next payment\",\n     *   ...\n     * }\n     */\n    translations?: {\n        [index: string]: {\n            [index: string]: string;\n        };\n    };\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenComponentEventState, component?: AdyenComponent): void;\n\n    onAdditionalDetails?(state: AdyenComponentEventState, component?: AdyenComponent): void;\n}\n\nexport interface AdyenPlaceholderData {\n    firstName?: string;\n    lastName?: string;\n    holderName?: string;\n    prefillCardHolderName?: boolean;\n    billingAddress?: {\n        street: string;\n        houseNumberOrName: string;\n        postalCode: string;\n        city: string;\n        stateOrProvince: string;\n        country: string;\n    };\n}\n\nexport interface AdyenCreditCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Information to prefill fields.\n     */\n    data?: AdyenPlaceholderData;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface AdyenCustomCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: CustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\ntype AdyenClientConstructor = (configuration: AdyenConfiguration) => Promise<AdyenClient>;\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface AdyenV3HostWindow extends Window {\n    AdyenCheckout?: AdyenClientConstructor;\n}\n\nexport interface AdyenV2HostWindow extends Window {\n    AdyenCheckout?: new (configuration: AdyenConfiguration) => AdyenClient;\n}\n\nexport interface AdyenIdealComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Optional. Set to **false** to remove the bank logos from the iDEAL form.\n     */\n    showImage?: boolean;\n}\n\nexport interface AdyenBoletoComponentOptions extends AdyenComponentEvents {\n    personalDetailsRequired?: boolean;\n    billingAddressRequired?: boolean;\n    showEmailAddress?: boolean;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface AdyenThreeDS2Options extends AdyenAdditionalActionCallbacks {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CardState {\n    data: CardDataPaymentMethodState;\n    isValid?: boolean;\n    valid?: { [key: string]: boolean };\n    errors?: CardStateErrors;\n}\n\ninterface IdealStateData {\n    issuer: string;\n}\n\ninterface SepaStateData {\n    ownerName: string;\n    ibanNumber: string;\n}\n\ninterface CardStateData {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName: string;\n}\n\nexport interface AdyenComponentState {\n    data?: CardStateData | IdealStateData | SepaStateData;\n    issuer?: string;\n    isValid?: boolean;\n    valid?: { [key: string]: boolean };\n    errors?: CardStateErrors;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n    installments?: { value: number; plan?: 'string' };\n}\n\nexport interface CardStateErrors {\n    [key: string]: string;\n}\n\nexport interface WechatState {\n    data: WechatDataPaymentMethodState;\n}\n\nexport interface BoletoState {\n    data: BoletoDataPaymentMethodState;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\ninterface AccountDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\nexport interface AccountState {\n    data: AccountDataPaymentMethodState;\n}\n\nexport interface CssProperties {\n    background?: string;\n    caretColor?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface CustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface PaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface PaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: PaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: PaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface RecurringDetail extends PaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface StyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface AdyenV3ThreeDS2ChallengeComponentOptions {\n    challengeWindowSize?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onActionHandled?(rtnObj: ActionHandledReturnObject): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenV2ThreeDS2ChallengeComponentOptions {\n    size?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onActionHandled?(rtnObj: ActionHandledReturnObject): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface ActionHandledReturnObject {\n    componentType: string;\n    actionDescription: string;\n}\n\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    onActionHandled?(rtnObj: ActionHandledReturnObject): void;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenValidationState {\n    valid: boolean;\n    fieldType?: AdyenCardFields;\n    endDigits?: string;\n    encryptedFieldName?: string;\n    i18n?: string;\n    error?: string;\n    errorKey?: string;\n}\n\nexport enum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport type AdyenComponentEventState = CardState | BoletoState | WechatState;\n\nexport type AdyenComponentOptions =\n    | AdyenCreditCardComponentOptions\n    | AdyenIdealComponentOptions\n    | AdyenBoletoComponentOptions\n    | AdyenCustomCardComponentOptions;\n\nexport interface AdyenV3PaymentMethodInitializationData {\n    clientKey?: string;\n    environment?: string;\n    paymentMethodsResponse?: PaymentMethodsResponse;\n    prefillCardHolderName?: boolean;\n    installmentOptions?: null | {\n        card?: {\n            values: number[];\n            plans?: string[];\n        };\n        visa?: {\n            values: number[];\n            plans?: string[];\n        };\n        mc?: {\n            values: number[];\n            plans?: string[];\n        };\n        diners?: {\n            values: number[];\n            plans?: string[];\n        };\n        jcb?: {\n            values: number[];\n            plans?: string[];\n        };\n    };\n}\n\nexport interface AdyenV2PaymentMethodInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    paymentMethodsResponse?: PaymentMethodsResponse;\n    prefillCardHolderName?: boolean;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV2HostWindow } from '../types';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV2HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-8ofgICZZ/k5cC5N7xegqFZOA73H9RQ7H13439JfAZW8Gj3qjuKL2isaTD3GMIhDE',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-wG2z9zSQo61EIvyXmiFCo+zB3y0ZB4hsrXVcANmpP8HLthjoQJQPBh7tZKJSV8jA',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { AdyenComponentEventState, CardState } from '../types';\n\nexport default function isCardState(param: AdyenComponentEventState): param is CardState {\n    return (\n        (typeof param === 'object' &&\n            typeof (param as CardState).data.paymentMethod.encryptedSecurityCode === 'string') ||\n        typeof (param as CardState).data.paymentMethod.encryptedExpiryMonth === 'string'\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import { some } from 'lodash';\n\nimport {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenComponent,\n    AdyenComponentEventState,\n    AdyenComponentType,\n    AdyenError,\n    AdyenPaymentMethodType,\n    AdyenPlaceholderData,\n    AdyenV2ActionType,\n    AdyenV2PaymentInitializeOptions,\n    AdyenV2PaymentMethodInitializationData,\n    AdyenV2ScriptLoader,\n    CardStateErrors,\n    isAccountState,\n    isCardState,\n    WithAdyenV2PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    BillingAddress,\n    getBrowserInfo,\n    HostedInstrument,\n    InvalidArgumentError,\n    isRequestError,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentEventState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV2PaymentInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _scriptLoader: AdyenV2ScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAdyenV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.adyenv2\" argument is not provided.',\n            );\n        }\n\n        this._paymentInitializeOptions = adyenv2;\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<AdyenV2PaymentMethodInitializationData>(options.methodId);\n        const { originKey, clientKey, environment, paymentMethodsResponse } =\n            paymentMethod.initializationData || {};\n        const clientSideAuthentication = {\n            key: '',\n            value: '',\n        };\n\n        if (originKey) {\n            clientSideAuthentication.key = 'originKey';\n            clientSideAuthentication.value = originKey;\n        } else {\n            clientSideAuthentication.key = 'clientKey';\n            clientSideAuthentication.value = clientKey || '';\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment,\n            locale: this._paymentIntegrationService.getState().getLocale(),\n            [clientSideAuthentication.key]: clientSideAuthentication.value,\n            paymentMethodsResponse,\n            translations: {\n                es: { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-AR': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-ES': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-MX': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CL': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CO': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-PE': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n            },\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (\n            paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact\n        ) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument =\n            paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n        const shouldSetAsDefaultInstrument =\n            paymentData && (paymentData as HostedInstrument).shouldSetAsDefaultInstrument;\n\n        if (!payment) {\n            return Promise.reject(new PaymentArgumentInvalidError(['payment']));\n        }\n\n        this._validateCardData();\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        const componentState = this._componentState;\n\n        if (!componentState) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            let bigpayToken = {};\n\n            if (isCardState(componentState)) {\n                const {\n                    encryptedCardNumber,\n                    encryptedSecurityCode,\n                    encryptedExpiryMonth,\n                    encryptedExpiryYear,\n                } = componentState.data.paymentMethod;\n\n                bigpayToken = {\n                    credit_card_number_confirmation: encryptedCardNumber,\n                    expiry_month: encryptedExpiryMonth,\n                    expiry_year: encryptedExpiryYear,\n                    verification_value: encryptedSecurityCode,\n                };\n            }\n\n            if (isCardState(componentState) || isAccountState(componentState)) {\n                try {\n                    await this._paymentIntegrationService.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            formattedPayload: {\n                                bigpay_token: {\n                                    ...bigpayToken,\n                                    token: paymentData.instrumentId,\n                                },\n                                origin: window.location.origin,\n                                browser_info: getBrowserInfo(),\n                                set_as_default_stored_instrument:\n                                    shouldSetAsDefaultInstrument || null,\n                            },\n                        },\n                    });\n\n                    return;\n                } catch (error) {\n                    await this._processAdditionalAction(\n                        error,\n                        shouldSaveInstrument,\n                        shouldSetAsDefaultInstrument,\n                    );\n\n                    return;\n                }\n            }\n        }\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: JSON.stringify({\n                                ...componentState.data.paymentMethod,\n                                origin: window.location.origin,\n                            }),\n                        },\n                        browser_info: getBrowserInfo(),\n                        vault_payment_instrument: shouldSaveInstrument || null,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                },\n            });\n        } catch (error) {\n            await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._componentState = undefined;\n\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError(\n                '\"options.adyenv2\" argument was not provided during initialization.',\n            );\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { additionalActionOptions, threeDS2Options } = this._getPaymentInitializeOptions();\n        const widgetSize = additionalActionOptions.widgetSize || threeDS2Options?.widgetSize;\n\n        if (!widgetSize) {\n            return '05';\n        }\n\n        return widgetSize;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { threeDS2ContainerId, additionalActionOptions } =\n                this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete } = additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete) {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                size: this._getThreeDS2ChallengeWidgetSize(),\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad) {\n                onBeforeLoad(\n                    adyenAction.type === AdyenV2ActionType.ThreeDS2Challenge ||\n                        adyenAction.type === AdyenV2ActionType.QRCode,\n                );\n            }\n\n            additionalActionComponent.mount(`#${containerId || threeDS2ContainerId}`);\n\n            if (onLoad) {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(\n        billingAddress?: BillingAddress,\n        prefillCardHolderName?: boolean,\n    ): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: prefillCardHolderName ? `${firstName} ${lastName}` : '',\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv2.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv2.options,\n                    styles: {\n                        ...adyenv2.options?.styles,\n                        placeholder: {\n                            color: 'transparent',\n                            caretColor: '#000',\n                            ...adyenv2.options?.styles?.placeholder,\n                        },\n                    },\n                    onChange: (componentState) => this._updateComponentState(componentState),\n                    onError: (validateState) => adyenv2.validateCardFields(validateState),\n                    onFieldValid: (validateState) => adyenv2.validateCardFields(validateState),\n                });\n\n                try {\n                    cardVerificationComponent.mount(`#${adyenv2.cardVerificationContainerId}`);\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            switch (paymentMethod.method) {\n                case AdyenPaymentMethodType.CreditCard:\n                case AdyenPaymentMethodType.ACH:\n                case AdyenPaymentMethodType.Bancontact: {\n                    const billingAddress = this._paymentIntegrationService\n                        .getState()\n                        .getBillingAddress();\n                    const { prefillCardHolderName } = paymentMethod.initializationData;\n\n                    paymentComponent = adyenClient.create(paymentMethod.method, {\n                        ...adyenv2.options,\n                        onChange: (componentState) => this._updateComponentState(componentState),\n                        data: this._mapAdyenPlaceholderData(billingAddress, prefillCardHolderName),\n                    });\n\n                    try {\n                        paymentComponent.mount(`#${adyenv2.containerId}`);\n                    } catch (error) {\n                        reject(\n                            new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                        );\n                    }\n\n                    break;\n                }\n\n                case AdyenPaymentMethodType.IDEAL:\n                case AdyenPaymentMethodType.SEPA:\n                    if (!adyenv2.hasVaultedInstruments) {\n                        paymentComponent = adyenClient.create(paymentMethod.method, {\n                            ...adyenv2.options,\n                            onChange: (componentState) =>\n                                this._updateComponentState(componentState),\n                        });\n\n                        try {\n                            paymentComponent.mount(`#${adyenv2.containerId}`);\n                        } catch (error) {\n                            reject(\n                                new NotInitializedError(\n                                    NotInitializedErrorType.PaymentNotInitialized,\n                                ),\n                            );\n                        }\n                    } else {\n                        this._updateComponentState({\n                            data: {\n                                paymentMethod: {\n                                    type: paymentMethod.method,\n                                },\n                            },\n                        });\n                    }\n\n                    break;\n\n                case AdyenPaymentMethodType.AliPay:\n                case AdyenPaymentMethodType.GiroPay:\n                case AdyenPaymentMethodType.Sofort:\n                case AdyenPaymentMethodType.Klarna:\n                case AdyenPaymentMethodType.KlarnaPayNow:\n                case AdyenPaymentMethodType.KlarnaAccount:\n                case AdyenPaymentMethodType.Vipps:\n                case AdyenPaymentMethodType.WeChatPayQR:\n                    this._updateComponentState({\n                        data: {\n                            paymentMethod: {\n                                type: paymentMethod.method,\n                            },\n                        },\n                    });\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            });\n        } catch (paymentError) {\n            return this._processAdditionalAction(\n                paymentError,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private _updateComponentState(componentState: AdyenComponentEventState) {\n        this._componentState = componentState;\n    }\n\n    private _validateCardData(): void {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const cardComponent = adyenv2.hasVaultedInstruments\n            ? this._cardVerificationComponent\n            : this._paymentComponent;\n        const isEmptyString = (value: string) => value.toString().trim().length === 0;\n\n        if (!cardComponent?.componentRef?.showValidation || !cardComponent.state) {\n            return;\n        }\n\n        cardComponent.componentRef.showValidation();\n\n        /**\n         * For some reason adyen sdk doesn't return isValid for payment methods with select field in form(iDeal for example)\n         * so we need to check state issuer field\n         */\n        if (\n            Object.keys(cardComponent.state).length === 0 ||\n            (!cardComponent.state.isValid && !cardComponent.state.issuer) ||\n            // prevent empty sepa fields from being sent\n            (cardComponent.props?.type === 'sepadirectdebit' &&\n                cardComponent.state.data &&\n                Object.values(cardComponent.state.data).some(isEmptyString))\n        ) {\n            throw new PaymentInvalidFormError(this._mapCardErrors(cardComponent.state.errors));\n        }\n    }\n\n    private _mapCardErrors(cardStateErrors: CardStateErrors = {}): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        Object.keys(cardStateErrors).forEach((key) => {\n            errors[key] = [\n                {\n                    message: cardStateErrors[key],\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n}\n","import { AccountState, AdyenComponentEventState } from '../types';\n\nexport default function isAccountState(param: AdyenComponentEventState): param is AccountState {\n    const bankSupported = ['ideal', 'sepadirectdebit', 'directEbanking', 'giropay'];\n\n    return bankSupported.indexOf((param as AccountState).data.paymentMethod.type) !== -1;\n}\n","import { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV2ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AdyenV2PaymentStrategy from './adyenv2-payment-strategy';\n\nconst createAdyenV2PaymentStrategy: PaymentStrategyFactory<AdyenV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AdyenV2PaymentStrategy(\n        paymentIntegrationService,\n        new AdyenV2ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n    );\n};\n\nexport default toResolvableModule(createAdyenV2PaymentStrategy, [{ gateway: 'adyenv2' }]);\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV3HostWindow } from '../types';\n\nexport default class AdyenV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV3HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-5MvB4RnzvviA3VBT4KYABZ4HXNZG5LRqREEgd41xt/pf/QvKmsj2O9GuNuywRXx9',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-yvY2yFNR4WqIjPqP9MzjI+gJimmaJnAvj4rLHKvgJbgFD5fMuf8zIJrFJOW8Lhhf',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const checkout = await this._window.AdyenCheckout(configuration);\n\n        return checkout;\n    }\n}\n","import { some } from 'lodash';\n\nimport {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenComponent,\n    AdyenComponentEventState,\n    AdyenComponentType,\n    AdyenError,\n    AdyenPaymentMethodType,\n    AdyenPlaceholderData,\n    AdyenV3ActionType,\n    AdyenV3PaymentInitializeOptions,\n    AdyenV3PaymentMethodInitializationData,\n    AdyenV3ScriptLoader,\n    CardStateErrors,\n    isBoletoState,\n    isCardState,\n    WithAdyenV3PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    BillingAddress,\n    getBrowserInfo,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class Adyenv3PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentEventState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV3PaymentInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _scriptLoader: AdyenV3ScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAdyenV3PaymentInitializeOptions,\n    ): Promise<void> {\n        const { adyenv3 } = options;\n\n        if (!adyenv3) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.adyenv3\" argument is not provided.',\n            );\n        }\n\n        this._paymentInitializeOptions = adyenv3;\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<AdyenV3PaymentMethodInitializationData>(options.methodId);\n        const { environment, clientKey, paymentMethodsResponse, installmentOptions } =\n            paymentMethod.initializationData || {};\n\n        this._adyenClient = await this._scriptLoader.load({\n            paymentMethodsConfiguration: {\n                klarna: {\n                    useKlarnaWidget: true,\n                },\n                klarna_account: {\n                    useKlarnaWidget: true,\n                },\n                klarna_paynow: {\n                    useKlarnaWidget: true,\n                },\n                ...(installmentOptions\n                    ? {\n                          card: {\n                              installmentOptions: {\n                                  showInstallmentAmounts: true,\n                                  ...installmentOptions,\n                              },\n                          },\n                      }\n                    : {}),\n            },\n            environment,\n            locale: this._getLocale(),\n            clientKey,\n            paymentMethodsResponse,\n            showPayButton: false,\n            translations: {\n                es: { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-AR': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-ES': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-MX': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CL': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CO': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-PE': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n            },\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (\n            paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact\n        ) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const paymentData = payment.paymentData;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        this._validateCardData();\n\n        if (\n            payment.methodId === 'klarna' ||\n            payment.methodId === 'klarna_account' ||\n            payment.methodId === 'klarna_paynow'\n        ) {\n            this._paymentComponent?.submit();\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        const componentState = this._componentState || {\n            data: { paymentMethod: { type: payment.methodId } },\n        };\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            let bigpayToken = {};\n\n            if (isCardState(componentState)) {\n                const {\n                    encryptedCardNumber,\n                    encryptedSecurityCode,\n                    encryptedExpiryMonth,\n                    encryptedExpiryYear,\n                } = componentState.data.paymentMethod;\n\n                bigpayToken = {\n                    credit_card_number_confirmation: encryptedCardNumber,\n                    expiry_month: encryptedExpiryMonth,\n                    expiry_year: encryptedExpiryYear,\n                    verification_value: encryptedSecurityCode,\n                };\n            }\n\n            try {\n                await this._paymentIntegrationService.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        formattedPayload: {\n                            bigpay_token: {\n                                ...bigpayToken,\n                                token: paymentData.instrumentId,\n                            },\n                            origin: window.location.origin,\n                            browser_info: getBrowserInfo(),\n                            set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                        },\n                    },\n                });\n\n                return;\n            } catch (error) {\n                await this._processAdditionalAction(\n                    error,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                );\n\n                return;\n            }\n        }\n\n        let paymentToken = JSON.stringify({\n            ...componentState.data.paymentMethod,\n            type: payment.methodId,\n            origin: window.location.origin,\n        });\n\n        if (payment.methodId === 'boletobancario' && isBoletoState(componentState)) {\n            paymentToken = JSON.stringify({\n                socialSecurityNumber: componentState.data.socialSecurityNumber,\n                ...componentState.data.shopperName,\n                type: payment.methodId,\n                origin: window.location.origin,\n            });\n        }\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: paymentToken,\n                        },\n                        ...(isCardState(componentState) && componentState.data.installments\n                            ? {\n                                  installments: {\n                                      value: componentState.data.installments.value,\n                                      plan: componentState.data.installments.plan || 'regular',\n                                  },\n                              }\n                            : {}),\n                        browser_info: getBrowserInfo(),\n                        vault_payment_instrument: shouldSaveInstrument || null,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                },\n            });\n        } catch (error) {\n            await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._componentState = undefined;\n\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _updateComponentState(componentState: AdyenComponentEventState) {\n        this._componentState = componentState;\n    }\n\n    private _getLocale(): string | undefined {\n        const locale = this._paymentIntegrationService.getState().getLocale();\n\n        if (locale && locale.substring(0, 2) === 'es') {\n            return 'es';\n        }\n\n        return locale;\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV3PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError(\n                '\"options.adyenv3\" argument was not provided during initialization.',\n            );\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { additionalActionOptions } = this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete, widgetSize, onActionHandled } =\n                additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onActionHandled: (additionalActionState) => {\n                    if (\n                        onActionHandled &&\n                        typeof onActionHandled === 'function' &&\n                        additionalActionState.componentType !== '3DS2Fingerprint'\n                    ) {\n                        onActionHandled();\n                    }\n                },\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete && typeof onComplete === 'function') {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                challengeWindowSize: widgetSize || '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad && typeof onBeforeLoad === 'function') {\n                onBeforeLoad(\n                    adyenAction.type === AdyenV3ActionType.ThreeDS2 ||\n                        adyenAction.type === AdyenV3ActionType.QRCode ||\n                        adyenAction.type === AdyenV3ActionType.Sdk,\n                );\n            }\n\n            this._mountElement(additionalActionComponent, containerId);\n\n            if (onLoad && typeof onLoad === 'function') {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(\n        billingAddress?: BillingAddress,\n        prefillCardHolderName?: boolean,\n    ): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: prefillCardHolderName ? `${firstName} ${lastName}` : '',\n            firstName: prefillCardHolderName ? firstName : '',\n            lastName: prefillCardHolderName ? lastName : '',\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv3.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv3.options,\n                    styles: {\n                        ...adyenv3.options?.styles,\n                        placeholder: {\n                            color: 'transparent',\n                            caretColor: '#000',\n                            ...adyenv3.options?.styles?.placeholder,\n                        },\n                    },\n                    onChange: (componentState) => this._updateComponentState(componentState),\n                    onError: (validateState) => adyenv3.validateCardFields(validateState),\n                    onFieldValid: (validateState) => adyenv3.validateCardFields(validateState),\n                });\n\n                try {\n                    this._mountElement(\n                        cardVerificationComponent,\n                        adyenv3.cardVerificationContainerId,\n                    );\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._paymentIntegrationService.getState().getBillingAddress();\n\n            const { prefillCardHolderName } = paymentMethod.initializationData;\n\n            paymentComponent = adyenClient.create(paymentMethod.method, {\n                ...adyenv3.options,\n                showBrandsUnderCardNumber: false,\n                billingAddressRequired: false,\n                showEmailAddress: false,\n                onChange: (componentState) => this._updateComponentState(componentState),\n                onSubmit: (componentState) => this._updateComponentState(componentState),\n                ...(billingAddress\n                    ? { data: this._mapAdyenPlaceholderData(billingAddress, prefillCardHolderName) }\n                    : {}),\n            });\n\n            try {\n                this._mountElement(paymentComponent, adyenv3.containerId);\n            } catch (error) {\n                reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            });\n        } catch (paymentError) {\n            return this._processAdditionalAction(\n                paymentError,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private _validateCardData(): void {\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const cardComponent = adyenv3.hasVaultedInstruments\n            ? this._cardVerificationComponent\n            : this._paymentComponent;\n\n        if (!cardComponent?.componentRef?.showValidation || !cardComponent.state) {\n            return;\n        }\n\n        cardComponent.componentRef.showValidation();\n\n        if (Object.keys(cardComponent.state).length === 0 || !cardComponent.state.isValid) {\n            throw new PaymentInvalidFormError(this._mapCardErrors(cardComponent.state.errors));\n        }\n    }\n\n    private _mapCardErrors(cardStateErrors: CardStateErrors = {}): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        Object.keys(cardStateErrors).forEach((key) => {\n            errors[key] = [\n                {\n                    message: cardStateErrors[key],\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    private _mountElement(adyenComponent: AdyenComponent, containerId: string): void {\n        if (!document.getElementById(containerId)) {\n            return;\n        }\n\n        adyenComponent.mount(`#${containerId}`);\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import { AdyenComponentEventState, BoletoState } from '../types';\n\nexport default function isBoletoState(param: AdyenComponentEventState): param is BoletoState {\n    return (\n        (typeof param === 'object' && typeof (param as BoletoState).data.socialSecurityNumber) ===\n            'string' &&\n        typeof (param as BoletoState).data.shopperName?.firstName === 'string' &&\n        typeof (param as BoletoState).data.shopperName?.lastName === 'string'\n    );\n}\n","import { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV3ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AdyenV3PaymentStrategy from './adyenv3-payment-strategy';\n\nconst createAdyenV3PaymentStrategy: PaymentStrategyFactory<AdyenV3PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AdyenV3PaymentStrategy(\n        paymentIntegrationService,\n        new AdyenV3ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n    );\n};\n\nexport default toResolvableModule(createAdyenV3PaymentStrategy, [{ gateway: 'adyenv3' }]);\n"],"names":["StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","PaymentMethodClientUnavailableError","AdyenV3ActionType","AdyenV2ActionType","AdyenComponentType","AdyenPaymentMethodType","HTTPMethod","ResultCode","AdyenCardFields","NotInitializedErrorType","AdyenV2ScriptLoader","_scriptLoader","_stylesheetLoader","_window","window","load","configuration","Promise","all","loadStylesheet","environment","prepend","attributes","integrity","crossorigin","loadScript","async","AdyenCheckout","toResolvableModule","module","resolveIds","assign","isCardState","param","data","paymentMethod","encryptedSecurityCode","encryptedExpiryMonth","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","NotInitializedError","subtype","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","getErrorMessage","isVaultedInstrument","instrument","Boolean","instrumentId","getBrowserInfo","navigator","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","Date","getTimezoneOffset","toString","OrderFinalizationNotRequiredError","PaymentMethodCancelledError","error","PaymentInvalidFormError","details","AdyenV2PaymentStrategy","_paymentIntegrationService","initialize","options","adyenv2","_paymentInitializeOptions","getState","getPaymentMethodOrThrow","methodId","originKey","clientKey","paymentMethodsResponse","initializationData","clientSideAuthentication","key","value","_adyenClient","locale","getLocale","translations","es","_paymentComponent","_mountPaymentComponent","method","CreditCard","Bancontact","_cardVerificationComponent","_mountCardVerificationComponent","resolve","execute","payload","payment","order","paymentData","shouldSaveInstrument","shouldSetAsDefaultInstrument","reject","_validateCardData","submitOrder","componentState","_componentState","bigpayToken","encryptedCardNumber","encryptedExpiryYear","credit_card_number_confirmation","expiry_month","expiry_year","verification_value","indexOf","submitPayment","formattedPayload","bigpay_token","token","origin","location","browser_info","set_as_default_stored_instrument","_processAdditionalAction","credit_card_token","JSON","stringify","vault_payment_instrument","finalize","deinitialize","undefined","unmount","_getAdyenClient","_getPaymentInitializeOptions","_getThreeDS2ChallengeWidgetSize","additionalActionOptions","threeDS2Options","widgetSize","_handleAction","additionalAction","threeDS2ContainerId","onBeforeLoad","containerId","onLoad","onComplete","adyenAction","parse","action","additionalActionComponent","createFromAction","onAdditionalDetails","additionalActionState","paymentPayload","paymentMethodType","nonce","size","onError","ThreeDS2Challenge","QRCode","mount","_mapAdyenPlaceholderData","billingAddress","prefillCardHolderName","firstName","lastName","address1","street","address2","houseNumberOrName","postalCode","city","stateOrProvinceCode","stateOrProvince","countryCode","country","holderName","adyenClient","cardVerificationComponent","cardVerificationContainerId","create","SecuredFields","styles","placeholder","color","caretColor","onChange","_updateComponentState","validateState","validateCardFields","onFieldValid","paymentComponent","ACH","getBillingAddress","IDEAL","SEPA","hasVaultedInstruments","AliPay","GiroPay","Sofort","Klarna","KlarnaPayNow","KlarnaAccount","Vipps","WeChatPayQR","some","body","errors","code","provider_data","paymentError","cardComponent","componentRef","showValidation","state","keys","length","isValid","issuer","props","values","trim","_mapCardErrors","cardStateErrors","forEach","paymentIntegrationService","getScriptLoader","getStylesheetLoader","gateway","AdyenV3ScriptLoader","Adyenv3PaymentStrategy","adyenv3","installmentOptions","paymentMethodsConfiguration","klarna","useKlarnaWidget","klarna_account","klarna_paynow","card","showInstallmentAmounts","_getLocale","showPayButton","submit","paymentToken","socialSecurityNumber","shopperName","isBoletoState","installments","plan","substring","onActionHandled","componentType","challengeWindowSize","ThreeDS2","Sdk","_mountElement","showBrandsUnderCardNumber","billingAddressRequired","showEmailAddress","onSubmit","adyenComponent","document","getElementById"],"sourceRoot":""}