{"version":3,"file":"integrations/google-pay.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/bind-decorator/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-card-network-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-initialize-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/create-currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/items-require-shipping.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-error-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-additional-action-processable.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/create-google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-adyenv2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-adyenv3-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-authorizenet-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-authorizenet-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-authorizenet-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-checkoutcom-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-checkoutcom-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-threedsecure-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-checkoutcom-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-cybersource-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-cybersource-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-bnz-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-orbital-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-orbital-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/google-pay-stripe-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/stripe-upe-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripeupe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-worldpayaccess-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-worldpayaccess-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-braintree-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-braintree-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-braintree-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-paypal-commerce-payment-method.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/paypal-sdk-helper.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-tdonlinemart-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-td-online-mart-additional-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-tdonlinemart-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv2/adyenv2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-additional-action-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-adyenv2-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-adyenv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv3/adyenv3-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-adyenv3-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-adyenv3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-authorizenet-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-checkoutcom-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-cybersource-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-orbital-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-worldpayaccess-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-braintree-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-tdonlinemart-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-braintree-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv3-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-authorizenet-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-checkoutcom-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-cybersource-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-orbital-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-worldpayaccess-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-tdonlinemart-button-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { InvalidArgumentError } from '../errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(currencySettings: CurrencyConfig) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const { decimalPlaces, symbolLocation, symbol, thousandsSeparator, decimalSeparator } =\n            currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ? `-${formattedCurrency}` : formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [integerAmount, decimalAmount = ''] = this._toFixed(\n            positiveAmount,\n            this._decimalPlaces,\n        ).split('.');\n        const parsedIntegerAmount = integerAmount.replace(\n            /\\B(?=(\\d{3})+(?!\\d))/g,\n            this._thousandsSeparator,\n        );\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [parsedIntegerAmount, decimalAmount].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return this._symbolLocation.toLowerCase() === 'left'\n            ? `${this._symbol}${formattedNumber}`\n            : `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+`${Math.round(+`${value}e${precision}`)}e${-precision}`).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(private _storeConfig: StoreConfig) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { BigCommercePaymentsIntent } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    BrowserInfo,\n    BuyNowCartRequestBody,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { FundingType } from './google-pay-paypal-commerce/types';\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\nexport interface GooglePayGatewayBaseRequest {\n    apiVersion: 2;\n    apiVersionMinor: 0;\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\ntype GooglePayGatewayBaseResponse = GooglePayGatewayBaseRequest;\n\ninterface GooglePayPaymentMethod<T> {\n    type: string;\n    parameters: T;\n}\n\ntype GooglePayAuthMethod = 'PAN_ONLY' | 'CRYPTOGRAM_3DS';\n\nexport enum GooglePayCardNetwork {\n    AMEX = 'AMEX',\n    DISCOVER = 'DISCOVER',\n    INTERAC = 'INTERAC',\n    JCB = 'JCB',\n    MC = 'MASTERCARD',\n    VISA = 'VISA',\n}\n\nexport interface GooglePayCardParameters {\n    allowedAuthMethods: GooglePayAuthMethod[];\n    allowedCardNetworks: GooglePayCardNetwork[];\n    billingAddressRequired?: boolean;\n    billingAddressParameters?: {\n        format?: 'MIN' | 'FULL';\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface GooglePayBaseCardPaymentMethod\n    extends GooglePayPaymentMethod<GooglePayCardParameters> {\n    type: 'CARD';\n    parameters: GooglePayCardParameters;\n}\n\nexport interface GooglePayIsReadyToPayRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n}\n\ninterface GooglePayGatewayBaseParameters {\n    gateway: string;\n}\n\nexport interface GooglePayRegularGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId: string;\n}\n\nexport interface GooglePayStripeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'stripe:version'?: string;\n    'stripe:publishableKey'?: string;\n}\n\nexport interface GooglePayBraintreeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'braintree:apiVersion'?: string;\n    'braintree:authorizationFingerprint'?: string;\n    'braintree:merchantId'?: string;\n    'braintree:sdkVersion'?: string;\n}\n\nexport interface GooglePayPayPalCommerceGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId?: string;\n}\n\nexport type GooglePayGatewayParameters =\n    | GooglePayRegularGatewayParameters\n    | GooglePayStripeGatewayParameters\n    | GooglePayBraintreeGatewayParameters;\n\nexport interface GooglePayCardPaymentMethod extends GooglePayBaseCardPaymentMethod {\n    tokenizationSpecification: {\n        type: 'PAYMENT_GATEWAY';\n        parameters: GooglePayGatewayParameters;\n    };\n}\n\nexport interface GooglePayTransactionInfo {\n    /** [!] Required for EEA countries */\n    countryCode?: string;\n    currencyCode: string;\n    totalPriceStatus: TotalPriceStatusType;\n    totalPrice: string;\n}\n\nexport interface GooglePayMerchantInfo {\n    merchantName: string;\n    merchantId: string;\n    authJwt: string;\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport interface GooglePayPaymentDataRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayCardPaymentMethod];\n    transactionInfo: GooglePayTransactionInfo;\n    merchantInfo: GooglePayMerchantInfo;\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n    offerInfo: Offers;\n    shippingOptionRequired?: boolean;\n    callbackIntents?: CallbackIntentsType[];\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport interface ShippingOptionParameters {\n    defaultSelectedOptionId?: string;\n    shippingOptions?: GoogleShippingOption[];\n}\n\nexport interface NewShippingOptionParameters {\n    newShippingOptionParameters?: ShippingOptionParameters;\n}\n\nexport interface NewOfferInfo {\n    newOfferInfo?: Offers;\n}\n\nexport interface Offers {\n    offers: OfferInfoItem[];\n}\n\nexport interface GooglePayError {\n    message: string;\n    reason: ErrorReasonType;\n    intent: CallbackTriggerType;\n}\n\nexport enum ErrorReasonType {\n    OFFER_INVALID = 'OFFER_INVALID',\n    PAYMENT_DATA_INVALID = 'PAYMENT_DATA_INVALID',\n    SHIPPING_ADDRESS_INVALID = 'SHIPPING_ADDRESS_INVALID',\n    SHIPPING_ADDRESS_UNSERVICEABLE = 'SHIPPING_ADDRESS_UNSERVICEABLE',\n    SHIPPING_OPTION_INVALID = 'SHIPPING_OPTION_INVALID',\n    OTHER_ERROR = 'OTHER_ERROR',\n}\n\nexport interface OfferInfoItem {\n    redemptionCode: string;\n    description: string;\n}\n\nexport interface HandleCouponsOut {\n    newOfferInfo: GooglePayPaymentDataRequest['offerInfo'];\n    error?: GooglePayError;\n}\n\nexport interface GoogleShippingOption {\n    id: string;\n    label?: string;\n}\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n    shippingAddress: GooglePayFullBillingAddress;\n    shippingOptionData: GoogleShippingOption;\n    offerData: {\n        redemptionCodes: string[];\n    };\n}\n\nexport interface GooglePayPaymentOptions {\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): onPaymentDataChangedOut;\n    };\n}\n\nexport type onPaymentDataChangedOut = Promise<\n    | (NewTransactionInfo & NewShippingOptionParameters & NewOfferInfo & { error?: GooglePayError })\n    | void\n>;\n\nexport type GooglePayRequiredPaymentData = Pick<\n    GooglePayPaymentDataRequest,\n    | 'emailRequired'\n    | 'shippingAddressRequired'\n    | 'shippingAddressParameters'\n    | 'shippingOptionRequired'\n>;\n\ninterface GooglePayMinBillingAddress {\n    name: string;\n    postalCode: string;\n    countryCode: string;\n    phoneNumber?: string;\n}\n\nexport interface GooglePayFullBillingAddress extends GooglePayMinBillingAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    locality: string;\n    administrativeArea: string;\n    sortingCode: string;\n}\n\ninterface GooglePayCardInfo {\n    cardNetwork: GooglePayCardNetwork;\n    cardDetails: string;\n    billingAddress?: GooglePayFullBillingAddress;\n}\n\ninterface GooglePayPaymentMethodData<T> {\n    description: string;\n    tokenizationData: {\n        type: 'PAYMENT_GATEWAY';\n        token: string;\n    };\n    type: string;\n    info: T;\n}\n\ninterface GooglePayCardData extends GooglePayPaymentMethodData<GooglePayCardInfo> {\n    type: 'CARD';\n}\n\ninterface GooglePayPaymentDataResponse<T> extends GooglePayGatewayBaseResponse {\n    paymentMethodData: GooglePayPaymentMethodData<T>;\n    shippingAddress?: GooglePayFullBillingAddress;\n    email?: string;\n}\n\nexport interface GooglePayCardDataResponse extends GooglePayPaymentDataResponse<GooglePayCardInfo> {\n    paymentMethodData: GooglePayCardData;\n}\n\ninterface GooglePayIsReadyToPayResponse {\n    result: boolean;\n}\n\nexport interface GooglePayButtonOptions {\n    onClick: (event: MouseEvent) => Promise<void>;\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n    buttonColor?: GooglePayButtonColor;\n    buttonType?: GooglePayButtonType;\n}\n\nexport interface GooglePaymentsClient {\n    isReadyToPay(request: GooglePayIsReadyToPayRequest): Promise<GooglePayIsReadyToPayResponse>;\n    createButton(options: GooglePayButtonOptions): HTMLElement;\n    loadPaymentData(request: GooglePayPaymentDataRequest): Promise<GooglePayCardDataResponse>;\n    prefetchPaymentData(request: GooglePayPaymentDataRequest): void;\n}\n\ntype GooglePayEnvironment = 'TEST' | 'PRODUCTION';\n\nexport type GooglePaymentsClientConstructor = new (paymentOptions: {\n    environment: GooglePayEnvironment;\n}) => GooglePaymentsClient;\n\nexport interface GooglePayHostWindow extends Window {\n    google?: {\n        payments: {\n            api: {\n                PaymentsClient: GooglePaymentsClientConstructor;\n            };\n        };\n    };\n}\n\ninterface GooglePayBaseInitializationData {\n    card_information?: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    gateway: string;\n    gatewayMerchantId?: string;\n    googleMerchantId: string;\n    googleMerchantName: string;\n    isThreeDSecureEnabled: boolean;\n    nonce?: string;\n    platformToken: string;\n    storeCountry?: string;\n}\n\nexport interface GooglePayPayPalCommerceInitializationData extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayBigCommercePaymentsInitializationData\n    extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayAuthorizeNetInitializationData extends GooglePayBaseInitializationData {\n    paymentGatewayId: string;\n}\n\nexport interface GooglePayStripeInitializationData extends GooglePayBaseInitializationData {\n    stripeConnectedAccount: string;\n    stripePublishableKey: string;\n    stripeVersion: string;\n}\n\nexport interface GooglePayCheckoutComInitializationData extends GooglePayBaseInitializationData {\n    checkoutcomkey: string;\n}\n\nexport interface GooglePayAdyenV2InitializationData extends GooglePayBaseInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface GooglePayAdyenV3InitializationData extends GooglePayBaseInitializationData {\n    clientKey: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport type GooglePayInitializationData =\n    | GooglePayBaseInitializationData\n    | GooglePayAdyenV2InitializationData\n    | GooglePayAdyenV3InitializationData\n    | GooglePayAuthorizeNetInitializationData\n    | GooglePayStripeInitializationData\n    | GooglePayCheckoutComInitializationData\n    | GooglePayPayPalCommerceInitializationData\n    | GooglePayBigCommercePaymentsInitializationData;\n\nexport interface GooglePaySetExternalCheckoutData {\n    nonce: string;\n    card_information: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    cart_id?: string;\n}\n\nexport interface GooglePayAdditionalActionProcessable {\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void>;\n}\n\nexport interface GooglePayErrorObject {\n    errorCode?: number;\n    statusCode: 'CANCELED' | 'DEVELOPER_ERROR';\n    statusMessage?: string;\n}\n\nexport interface GooglePayTokenObject {\n    protocolVersion: string;\n    signature: string;\n    signedMessage: string;\n}\n\nexport interface GooglePayStripeTokenObject {\n    id: string;\n}\n\nexport interface GooglePayBraintreeTokenObject {\n    androidPayCards: [\n        {\n            nonce: string;\n            details: {\n                bin: string;\n                isNetworkTokenized?: boolean;\n            };\n        },\n    ];\n}\n\nexport interface GooglePayCheckoutComTokenObject {\n    token: string;\n}\n\nexport interface GooglePayThreeDSecureResult {\n    three_ds_result: {\n        acs_url: string;\n        code: string;\n    };\n}\n\nexport interface GooglePayBuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody;\n}\n\nexport interface ExtraPaymentData {\n    deviceSessionId?: string;\n    browser_info?: BrowserInfo;\n}\n\nexport type GooglePayButtonColor = 'default' | 'black' | 'white';\nexport type GooglePayButtonType =\n    | 'book'\n    | 'buy'\n    | 'checkout'\n    | 'donate'\n    | 'order'\n    | 'pay'\n    | 'plain'\n    | 'subscribe'\n    | 'long'\n    | 'short';\n\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n","import { GooglePayCardNetwork } from '../types';\n\nexport default function isGooglePayCardNetworkKey(\n    card: string,\n): card is keyof typeof GooglePayCardNetwork {\n    return card in GooglePayCardNetwork;\n}\n","/**\n * A set of options that are required to initialize the GooglePay payment method\n *\n * If the customer chooses to pay with GooglePay, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n *\n * ```html\n * <!-- This is where the GooglePay button will be inserted -->\n * <div id=\"wallet-button\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     // Using GooglePay provided by Braintree as an example\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button'\n *     },\n * });\n * ```\n *\n * Additional event callbacks can be registered.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button',\n *         onError(error) {\n *             console.log(error);\n *         },\n *         onPaymentSelect() {\n *             console.log('Selected');\n *         },\n *     },\n * });\n * ```\n */\nexport default interface GooglePayPaymentInitializeOptions {\n    /**\n     * A container for loading spinner.\n     */\n    loadingContainerId?: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the GooglePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when GooglePay fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n\n/**\n * The recognized keys to pass the initialization options for Google Pay.\n */\nexport enum GooglePayKey {\n    ADYEN_V2 = 'googlepayadyenv2',\n    ADYEN_V3 = 'googlepayadyenv3',\n    AUTHORIZE_NET = 'googlepayauthorizenet',\n    BNZ = 'googlepaybnz',\n    BRAINTREE = 'googlepaybraintree',\n    PAYPAL_COMMERCE = 'googlepaypaypalcommerce',\n    BIGCOMMERCE_PAYMENTS = 'googlepay_bigcommerce_payments',\n    CHECKOUT_COM = 'googlepaycheckoutcom',\n    CYBERSOURCE_V2 = 'googlepaycybersourcev2',\n    ORBITAL = 'googlepayorbital',\n    STRIPE = 'googlepaystripe',\n    STRIPE_UPE = 'googlepaystripeupe',\n    STRIPE_OCS = 'googlepaystripeocs',\n    WORLDPAY_ACCESS = 'googlepayworldpayaccess',\n    TD_ONLINE_MART = 'googlepaytdonlinemart',\n}\n\n/**\n * The options that are required to initialize the GooglePay payment method.\n * They can be omitted unless you need to support GooglePay.\n */\nexport type WithGooglePayPaymentInitializeOptions = {\n    [k in GooglePayKey]?: GooglePayPaymentInitializeOptions;\n};\n","import { round } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    createCurrencyService,\n    CurrencyService,\n    guard,\n    InvalidArgumentError,\n    itemsRequireShipping,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isGooglePayCardNetworkKey from '../guards/is-google-pay-card-network-key';\nimport {\n    CallbackIntentsType,\n    CallbackTriggerType,\n    ErrorReasonType,\n    ExtraPaymentData,\n    GooglePayCardDataResponse,\n    GooglePayCardNetwork,\n    GooglePayCardParameters,\n    GooglePayError,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePayMerchantInfo,\n    GooglePayPaymentDataRequest,\n    GooglePayRequiredPaymentData,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTransactionInfo,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from '../types';\n\nexport default class GooglePayGateway {\n    private _getPaymentMethodFn?: () => PaymentMethod<GooglePayInitializationData>;\n    private _isBuyNowFlow = false;\n    private _currencyCode?: string;\n    private _currencyService?: CurrencyService;\n\n    constructor(\n        private _gatewayIdentifier: string,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    mapToShippingAddressRequestBody({\n        shippingAddress,\n    }: GooglePayCardDataResponse): AddressRequestBody | undefined {\n        if (!shippingAddress) {\n            return;\n        }\n\n        const { company = '', phone = '' } =\n            this._paymentIntegrationService.getState().getShippingAddress() || {};\n\n        return this._mapToAddressRequestBody(shippingAddress, company, phone);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        const { billingAddress } = response.paymentMethodData.info;\n\n        if (!billingAddress) {\n            return;\n        }\n\n        const {\n            company = '',\n            phone = '',\n            email,\n            customFields = [],\n        } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        return {\n            ...this._mapToAddressRequestBody(billingAddress, company, phone, customFields),\n            email: email || response.email,\n        };\n    }\n\n    mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const {\n            paymentMethodData: {\n                tokenizationData: { token: nonce },\n                info: { cardNetwork: type, cardDetails: number },\n            },\n        } = response;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve({\n            nonce,\n            card_information: { type, number },\n            ...(this._isBuyNowFlow && {\n                cart_id: this._paymentIntegrationService.getState().getCart()?.id,\n            }),\n        });\n    }\n\n    async getRequiredData(): Promise<GooglePayRequiredPaymentData> {\n        const data: GooglePayRequiredPaymentData = { emailRequired: true };\n\n        if (!this._isShippingAddressRequired()) {\n            return data;\n        }\n\n        const state = await this._paymentIntegrationService.loadShippingCountries();\n        const allowedCountryCodes = state.getShippingCountries()?.map((country) => country.code);\n\n        return {\n            ...data,\n            shippingAddressRequired: true,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n                ...(allowedCountryCodes && { allowedCountryCodes }),\n            },\n            shippingOptionRequired: true,\n        };\n    }\n\n    getCallbackIntents(): CallbackIntentsType[] {\n        if (this._isShippingAddressRequired()) {\n            return [\n                CallbackIntentsType.OFFER,\n                CallbackIntentsType.SHIPPING_ADDRESS,\n                CallbackIntentsType.SHIPPING_OPTION,\n            ];\n        }\n\n        return [CallbackIntentsType.OFFER];\n    }\n\n    getCallbackTriggers(): { [key: string]: CallbackTriggerType[] } {\n        const state = this._paymentIntegrationService.getState();\n        // TODO remove this experiment usage after we make sure that coupons handling works fine\n        const isGooglePayCouponsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-2875.googlepay_coupons_handling'\n            ] || false;\n\n        const availableTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n            CallbackTriggerType.SHIPPING_OPTION,\n            ...(isGooglePayCouponsExperimentOn ? [CallbackTriggerType.OFFER] : []),\n        ];\n\n        const initializationTrigger = [CallbackTriggerType.INITIALIZE];\n        const addressChangeTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n        ];\n        const shippingOptionsChangeTriggers = [CallbackTriggerType.SHIPPING_OPTION];\n        const offerChangeTriggers = isGooglePayCouponsExperimentOn\n            ? [CallbackTriggerType.OFFER]\n            : [];\n\n        return {\n            availableTriggers,\n            initializationTrigger,\n            addressChangeTriggers,\n            shippingOptionsChangeTriggers,\n            offerChangeTriggers,\n        };\n    }\n\n    getNonce(methodId: string) {\n        const nonce = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(methodId)\n            .initializationData?.nonce;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve(nonce);\n    }\n\n    extraPaymentData(): Promise<undefined | ExtraPaymentData> {\n        return Promise.resolve(undefined);\n    }\n\n    getMerchantInfo(): GooglePayMerchantInfo {\n        const {\n            googleMerchantName: merchantName,\n            googleMerchantId: merchantId,\n            platformToken: authJwt,\n        } = this.getGooglePayInitializationData();\n\n        return { merchantName, merchantId, authJwt };\n    }\n\n    getTransactionInfo(): GooglePayTransactionInfo {\n        let currencyCode: string;\n\n        if (this._isBuyNowFlow) {\n            currencyCode = this._getCurrencyCodeOrThrow();\n        } else {\n            const { getCartOrThrow } = this._paymentIntegrationService.getState();\n\n            currencyCode = getCartOrThrow().currency.code;\n        }\n\n        const countryCode = this.getGooglePayInitializationData().storeCountry;\n\n        return {\n            ...(countryCode && { countryCode }),\n            currencyCode,\n            totalPriceStatus: TotalPriceStatusType.ESTIMATED,\n            totalPrice: '0',\n        };\n    }\n\n    getPaymentGatewayParameters():\n        | Promise<GooglePayGatewayParameters>\n        | GooglePayGatewayParameters {\n        const gatewayMerchantId = this.getGooglePayInitializationData().gatewayMerchantId;\n\n        if (!gatewayMerchantId) {\n            throw new InvalidArgumentError('Unable to proceed, gatewayMerchantId is missing.');\n        }\n\n        return {\n            gateway: this._gatewayIdentifier,\n            gatewayMerchantId,\n        };\n    }\n\n    getCardParameters(): GooglePayCardParameters {\n        const allowedCardNetworks = this.getPaymentMethod()\n            .supportedCards.filter(isGooglePayCardNetworkKey)\n            .map((key) => GooglePayCardNetwork[key]);\n\n        return {\n            allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n            allowedCardNetworks,\n            billingAddressRequired: true,\n            billingAddressParameters: {\n                format: 'FULL',\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._getPaymentMethodFn = getPaymentMethod;\n        this._isBuyNowFlow = Boolean(isBuyNowFlow);\n        this._currencyCode = currencyCode;\n\n        if (this._isBuyNowFlow) {\n            this._getCurrencyCodeOrThrow();\n        }\n\n        return Promise.resolve();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress?: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        if (shippingAddress) {\n            shippingAddress.name = shippingAddress.name || '';\n            shippingAddress.address1 = shippingAddress.address1 || '';\n        }\n\n        const mappedShippingAddress = this.mapToShippingAddressRequestBody({\n            shippingAddress,\n        } as GooglePayCardDataResponse);\n\n        if (mappedShippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(mappedShippingAddress);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            // Info: we can not return an empty data because shippingOptions should contain at least one element, it caused a developer exception\n            return;\n        }\n\n        const consignment = consignments[0];\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!this._currencyService) {\n            this._currencyService = createCurrencyService(storeConfig);\n        }\n\n        const availableShippingOptions = (consignment.availableShippingOptions || []).map(\n            this._getGooglePayShippingOption.bind(this),\n        );\n\n        const recommendedShippingOption = consignment.availableShippingOptions?.find(\n            (shippingOption) => shippingOption.isRecommended,\n        );\n\n        if (availableShippingOptions.length) {\n            const selectedShippingOptionId =\n                consignment.selectedShippingOption?.id ||\n                recommendedShippingOption?.id ||\n                availableShippingOptions[0]?.id;\n\n            if (!consignment.selectedShippingOption?.id && availableShippingOptions[0]) {\n                await this.handleShippingOptionChange(\n                    recommendedShippingOption?.id || availableShippingOptions[0].id,\n                );\n            }\n\n            return {\n                defaultSelectedOptionId: selectedShippingOptionId,\n                shippingOptions: availableShippingOptions,\n            };\n        }\n    }\n\n    async handleShippingOptionChange(optionId: string) {\n        if (optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    getTotalPrice(): string {\n        const { getCheckoutOrThrow, getCartOrThrow } = this._paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return totalPrice;\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        const { redemptionCodes: newCouponsState = [] } = offerData;\n        const { offers: appliedCoupons } = this.getAppliedCoupons();\n        let error;\n\n        await newCouponsState.reduce(async (promise, code) => {\n            await promise;\n\n            const exists = appliedCoupons.some(({ redemptionCode }) => redemptionCode === code);\n\n            if (exists) {\n                return;\n            }\n\n            const appliedCouponError = await this.applyCoupon(code);\n\n            if (appliedCouponError) {\n                error = appliedCouponError;\n            }\n        }, Promise.resolve());\n\n        await appliedCoupons.reduce(async (promise, coupon) => {\n            await promise;\n\n            const stillExists = newCouponsState.includes(coupon.redemptionCode);\n\n            if (!stillExists) {\n                await this._paymentIntegrationService.removeCoupon(coupon.redemptionCode);\n            }\n        }, Promise.resolve());\n\n        return {\n            newOfferInfo: this.getAppliedCoupons(),\n            error,\n        };\n    }\n\n    getAppliedCoupons(): GooglePayPaymentDataRequest['offerInfo'] {\n        const state = this._paymentIntegrationService.getState();\n        const { coupons } = state.getCheckout() || {};\n\n        const offers = (coupons || []).map((coupon) => {\n            const { displayName, code } = coupon;\n\n            return {\n                redemptionCode: code,\n                description: displayName,\n            };\n        });\n\n        return {\n            offers,\n        };\n    }\n\n    async applyCoupon(code: string): Promise<GooglePayError | void> {\n        let error: GooglePayError | undefined;\n\n        try {\n            await this._paymentIntegrationService.applyCoupon(code);\n        } catch (e) {\n            if (e instanceof Error) {\n                error = {\n                    reason: ErrorReasonType.OFFER_INVALID,\n                    message: e.message,\n                    intent: CallbackTriggerType.OFFER,\n                };\n            }\n\n            return error;\n        }\n    }\n\n    protected getGooglePayInitializationData(): GooglePayInitializationData {\n        return guard(\n            this.getPaymentMethod().initializationData,\n            () => new InvalidArgumentError('Missing initialization data.'),\n        );\n    }\n\n    protected getPaymentMethod(): PaymentMethod<GooglePayInitializationData> {\n        return guard(\n            this._getPaymentMethodFn,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        )();\n    }\n\n    protected getGatewayIdentifier(): string {\n        return this._gatewayIdentifier;\n    }\n\n    protected setGatewayIdentifier(gateway?: string) {\n        this._gatewayIdentifier = gateway || this.getGatewayIdentifier();\n    }\n\n    private _isShippingAddressRequired(): boolean {\n        const { getCartOrThrow, getStoreConfig, getShippingAddress } =\n            this._paymentIntegrationService.getState();\n\n        return (\n            getShippingAddress() === undefined &&\n            itemsRequireShipping(getCartOrThrow(), getStoreConfig())\n        );\n    }\n\n    private _mapToAddressRequestBody(\n        address: GooglePayFullBillingAddress,\n        company: string,\n        phone: string,\n        customFields?: AddressRequestBody['customFields'],\n    ): AddressRequestBody {\n        const {\n            name,\n            address1,\n            address2,\n            address3,\n            locality: city,\n            administrativeArea: stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phoneNumber,\n        } = address;\n        const [firstName, lastName] = this._getFirstAndLastName(name);\n\n        return {\n            firstName,\n            lastName,\n            company,\n            address1,\n            address2: `${address2} ${address3}`.trim(),\n            city: city || stateOrProvinceCode,\n            stateOrProvince: stateOrProvinceCode,\n            stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phone: phoneNumber || phone,\n            customFields: customFields || [],\n        };\n    }\n\n    private _getFirstAndLastName(fullName: string): [string, string] {\n        const nameParts = fullName.split(' ');\n\n        if (nameParts.length === 1) {\n            return [fullName, ''];\n        }\n\n        const firstName = nameParts.slice(0, -1).join(' ');\n        const lastName = nameParts[nameParts.length - 1];\n\n        return [firstName, lastName];\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n\n    private _getGooglePayShippingOption({\n        id,\n        cost,\n        description,\n        additionalDescription,\n    }: ShippingOption) {\n        const formattedCost = this._currencyService?.toCustomerCurrency(cost);\n        const state = this._paymentIntegrationService.getState();\n        const isNewShippingOptionsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-3540.googlepay_new_shipping_options_description'\n            ];\n\n        if (isNewShippingOptionsExperimentOn) {\n            return {\n                id,\n                label: `${formattedCost || cost} ${description}`,\n                description: additionalDescription,\n            };\n        }\n\n        return {\n            id,\n            label: description,\n            description: formattedCost || cost,\n        };\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * param config - The config object containing the currency configuration\n * returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(config: StoreConfig): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Cart } from '../cart';\nimport { StoreConfig } from '../config';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (config && cart.lineItems.customItems) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { GooglePayErrorObject } from '../types';\n\nexport default function isGooglePayErrorObject(error: unknown): error is GooglePayErrorObject {\n    return typeof error === 'object' && error !== null && 'statusCode' in error;\n}\n","import { GooglePayKey } from '../google-pay-payment-initialize-options';\n\nexport default function isGooglePayKey(key: string): key is GooglePayKey {\n    return Object.values<string>(GooglePayKey).includes(key);\n}\n","import {\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    guard,\n    InvalidArgumentError,\n    NotImplementedError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCustomerInitializeOptions, {\n    WithGooglePayCustomerInitializeOptions,\n} from './google-pay-customer-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayCustomerInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options?: CustomerInitializeOptions & WithGooglePayCustomerInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        const googlePayOptions = options[this._getMethodId()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodId());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodId());\n        }\n\n        try {\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(paymentMethod.initializationData?.storeCountry),\n            );\n        } catch {\n            return;\n        }\n\n        this._addPaymentButton(googlePayOptions);\n    }\n\n    signIn(): Promise<void> {\n        return Promise.reject(\n            new NotImplementedError(\n                'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.',\n            ),\n        );\n    }\n\n    async signOut(): Promise<void> {\n        const providerId = this._paymentIntegrationService.getState().getPaymentId()?.providerId;\n\n        if (providerId) {\n            await this._googlePayPaymentProcessor.signOut(providerId);\n        }\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _getGooglePayClientOptions(countryCode?: string): GooglePayPaymentOptions {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                    offerData,\n                }) => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                        offerChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._googlePayPaymentProcessor.handleCoupons(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    await this._paymentIntegrationService.loadCheckout();\n\n                    const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n                    const { code: currencyCode } = this._paymentIntegrationService\n                        .getState()\n                        .getCartOrThrow().currency;\n\n                    return {\n                        newTransactionInfo: {\n                            ...(countryCode && { countryCode }),\n                            currencyCode,\n                            totalPriceStatus: TotalPriceStatusType.FINAL,\n                            totalPrice,\n                        },\n                        ...(availableShippingOptions && {\n                            newShippingOptionParameters: availableShippingOptions,\n                        }),\n                        ...(newOfferInfo && {\n                            newOfferInfo,\n                        }),\n                        ...(error && {\n                            error,\n                        }),\n                    };\n                },\n            },\n        };\n    }\n\n    private _addPaymentButton({\n        container,\n        buttonColor,\n        buttonType,\n        onClick,\n        onError,\n    }: GooglePayCustomerInitializeOptions): void {\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(container, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError, onClick),\n            });\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n        onClick: GooglePayCustomerInitializeOptions['onClick'],\n    ): (event: MouseEvent) => Promise<void> {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            if (onClick && typeof onClick === 'function') {\n                onClick();\n            }\n\n            // TODO: Dispatch Widget Actions\n            try {\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodId(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getMethodId(): keyof WithGooglePayCustomerInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Omit,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from './gateways/google-pay-gateway';\nimport GooglePayScriptLoader from './google-pay-script-loader';\nimport isGooglePayAdditionalActionProcessable from './guards/is-google-pay-additional-action-processable';\nimport {\n    GooglePayBaseCardPaymentMethod,\n    GooglePayButtonOptions,\n    GooglePayCardDataResponse,\n    GooglePayCardPaymentMethod,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayBaseRequest,\n    GooglePayInitializationData,\n    GooglePayIsReadyToPayRequest,\n    GooglePaymentsClient,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n} from './types';\n\nexport default class GooglePayPaymentProcessor {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _baseRequest: GooglePayGatewayBaseRequest = { apiVersion: 2, apiVersionMinor: 0 };\n    private _baseCardPaymentMethod?: GooglePayBaseCardPaymentMethod;\n    private _cardPaymentMethod?: GooglePayCardPaymentMethod;\n    private _paymentDataRequest?: GooglePayPaymentDataRequest;\n    private _isReadyToPayRequest?: GooglePayIsReadyToPayRequest;\n\n    constructor(\n        private _scriptLoader: GooglePayScriptLoader,\n        private _gateway: GooglePayGateway,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        googlePayPaymentOptions?: GooglePayPaymentOptions,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._paymentsClient = await this._scriptLoader.getGooglePaymentsClient(\n            getPaymentMethod().config.testMode,\n            googlePayPaymentOptions,\n        );\n\n        await this._gateway.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        this._buildButtonPayloads();\n    }\n\n    async initializeWidget() {\n        await this._buildWidgetPayloads();\n\n        await this._determineReadinessToPay();\n\n        this._prefetchGooglePaymentData();\n    }\n\n    getNonce(methodId: string) {\n        return this._gateway.getNonce(methodId);\n    }\n\n    async extraPaymentData() {\n        return this._gateway.extraPaymentData();\n    }\n\n    addPaymentButton(\n        containerId: string,\n        options: Omit<GooglePayButtonOptions, 'allowedPaymentMethods'>,\n    ): HTMLElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const paymentButton = this._getPaymentsClient().createButton({\n            ...options,\n            allowedPaymentMethods: [this._getBaseCardPaymentMethod()],\n        });\n\n        return container.appendChild(paymentButton);\n    }\n\n    async showPaymentSheet(): Promise<GooglePayCardDataResponse> {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        return this._getPaymentsClient().loadPaymentData(paymentDataRequest);\n    }\n\n    async setExternalCheckoutXhr(\n        provider: string,\n        response: GooglePayCardDataResponse,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response);\n    }\n\n    async setExternalCheckoutForm(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        siteLink?: string,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response, true, siteLink);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        return this._gateway.mapToBillingAddressRequestBody(response);\n    }\n\n    mapToShippingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): AddressRequestBody | undefined {\n        return this._gateway.mapToShippingAddressRequestBody(response);\n    }\n\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void> {\n        return isGooglePayAdditionalActionProcessable(this._gateway)\n            ? this._gateway.processAdditionalAction(error, methodId)\n            : Promise.reject(error);\n    }\n\n    async signOut(providerId: string): Promise<void> {\n        await this._requestSender.get(`/remote-checkout/${providerId}/signout`);\n    }\n\n    getCallbackTriggers() {\n        return this._gateway.getCallbackTriggers();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        return this._gateway.handleShippingAddressChange(shippingAddress);\n    }\n\n    async handleShippingOptionChange(optionId: string): Promise<void> {\n        await this._gateway.handleShippingOptionChange(optionId);\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        return this._gateway.handleCoupons(offerData);\n    }\n\n    getTotalPrice(): string {\n        return this._gateway.getTotalPrice();\n    }\n\n    async _setExternalCheckout(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        useFormPoster = false,\n        siteLink?: string,\n    ): Promise<void> {\n        const url = '/checkout.php';\n        const body = {\n            action: 'set_external_checkout',\n            provider,\n            ...(await this._gateway.mapToExternalCheckoutData(response)),\n        };\n\n        if (useFormPoster) {\n            return new Promise((resolve) => {\n                this._formPoster.postForm(\n                    siteLink ? `${siteLink}/checkout` : url,\n                    {\n                        ...body,\n                        card_information: JSON.stringify(body.card_information),\n                    },\n                    resolve,\n                );\n            });\n        }\n\n        await this._requestSender.post(url, {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body,\n        });\n    }\n\n    private _prefetchGooglePaymentData(): void {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo = this._gateway.getTransactionInfo();\n\n        this._getPaymentsClient().prefetchPaymentData(paymentDataRequest);\n    }\n\n    private async _determineReadinessToPay(): Promise<void> {\n        try {\n            const { result } = await this._getPaymentsClient().isReadyToPay(\n                this._getIsReadyToPayRequest(),\n            );\n\n            if (result === false) {\n                throw new PaymentMethodFailedError(\n                    'Google Pay is not supported by the current device and browser, please try another payment method.',\n                );\n            }\n        } catch (error) {\n            if (error instanceof PaymentMethodFailedError) {\n                throw error;\n            }\n\n            throw new PaymentMethodFailedError();\n        }\n    }\n\n    private _buildButtonPayloads() {\n        this._baseCardPaymentMethod = {\n            type: 'CARD',\n            parameters: this._gateway.getCardParameters(),\n        };\n    }\n\n    private async _buildWidgetPayloads(): Promise<void> {\n        const baseCardPaymentMethod = this._getBaseCardPaymentMethod();\n\n        this._cardPaymentMethod = {\n            ...baseCardPaymentMethod,\n            tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: await this._gateway.getPaymentGatewayParameters(),\n            },\n        };\n        this._paymentDataRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [this._cardPaymentMethod],\n            transactionInfo: this._gateway.getTransactionInfo(),\n            merchantInfo: this._gateway.getMerchantInfo(),\n            ...(await this._gateway.getRequiredData()),\n            callbackIntents: this._gateway.getCallbackIntents(),\n            offerInfo: this._gateway.getAppliedCoupons(),\n        };\n        this._isReadyToPayRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [baseCardPaymentMethod],\n        };\n    }\n\n    private _getBaseCardPaymentMethod(): GooglePayBaseCardPaymentMethod {\n        return this._getOrThrow(this._baseCardPaymentMethod);\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequest {\n        return this._getOrThrow(this._paymentDataRequest);\n    }\n\n    private _getIsReadyToPayRequest(): GooglePayIsReadyToPayRequest {\n        return this._getOrThrow(this._isReadyToPayRequest);\n    }\n\n    private _getPaymentsClient(): GooglePaymentsClient {\n        return this._getOrThrow(this._paymentsClient);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import GooglePayGateway from '../gateways/google-pay-gateway';\nimport { GooglePayAdditionalActionProcessable } from '../types';\n\nexport default function isGooglePayAdditionalActionProcessable(\n    gateway: GooglePayGateway,\n): gateway is GooglePayGateway & GooglePayAdditionalActionProcessable {\n    return 'processAdditionalAction' in gateway;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayHostWindow, GooglePaymentsClient, GooglePayPaymentOptions } from './types';\n\nexport const GOOGLE_PAY_LIBRARY = 'https://pay.google.com/gp/p/js/pay.js';\n\nexport default class GooglePayScriptLoader {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _window: GooglePayHostWindow = window;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async getGooglePaymentsClient(\n        testMode = false,\n        options?: GooglePayPaymentOptions,\n    ): Promise<GooglePaymentsClient> {\n        await this._scriptLoader.loadScript(GOOGLE_PAY_LIBRARY);\n\n        if (!this._window.google) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (this._paymentsClient === undefined) {\n            this._paymentsClient = new this._window.google.payments.api.PaymentsClient({\n                environment: testMode ? 'TEST' : 'PRODUCTION',\n                ...(options ?? {}),\n            });\n        }\n\n        return this._paymentsClient;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport GooglePayScriptLoader from '../google-pay-script-loader';\n\nexport default function createGooglePayScriptLoader() {\n    return new GooglePayScriptLoader(getScriptLoader());\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2CustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2CustomerStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3CustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3CustomerStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayAuthorizeNetInitializationData from '../guards/is-google-pay-authorizenet-initialization-data';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAuthorizeNetGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('authorizenet', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayAuthorizeNetInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.paymentGatewayId,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayAuthorizeNetInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayAuthorizeNetInitializationData {\n    return 'paymentGatewayId' in data;\n}\n\nexport default function assertsIsGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayAuthorizeNetInitializationData {\n    if (!isGooglePayAuthorizeNetInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeDotNetCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAuthorizeDotNetCustomerStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCheckoutComInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayCheckoutComInitializationData {\n    return 'checkoutcomkey' in data;\n}\n\nexport default function assertIsGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayCheckoutComInitializationData {\n    if (!isGooglePayCheckoutComInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    InvalidArgumentError,\n    isRequestError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayCheckoutComInitializationData from '../guards/is-google-pay-checkoutcom-initialization-data';\nimport { isGooglePayThreeDSecureResult } from '../guards/is-google-pay-threedsecure-result';\nimport assertIsGooglePayTokenObject from '../guards/is-google-pay-token-object';\nimport {\n    GooglePayAdditionalActionProcessable,\n    GooglePayCardDataResponse,\n    GooglePayCheckoutComTokenObject,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTokenObject,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCheckoutComGateway\n    extends GooglePayGateway\n    implements GooglePayAdditionalActionProcessable\n{\n    constructor(service: PaymentIntegrationService, private _requestSender: RequestSender) {\n        super('checkoutltd', service);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            if (\n                isRequestError(error) &&\n                isGooglePayThreeDSecureResult(error.body) &&\n                error.body.three_ds_result.code === 'three_d_secure_required'\n            ) {\n                return window.location.assign(error.body.three_ds_result.acs_url);\n            }\n\n            reject(error);\n        });\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayTokenObject(token);\n\n        data.nonce = await this._tokenize(token);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.checkoutcomkey,\n        };\n    }\n\n    private async _tokenize(token_data: GooglePayTokenObject): Promise<string> {\n        const url = this.getPaymentMethod().config.testMode\n            ? 'https://api.sandbox.checkout.com/tokens'\n            : 'https://api.checkout.com/tokens';\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        const { body } = await this._requestSender.post<GooglePayCheckoutComTokenObject>(url, {\n            credentials: false,\n            body: {\n                type: 'googlepay',\n                token_data,\n            },\n            headers: {\n                Authorization: data.checkoutcomkey,\n                'Content-Type': ContentType.Json,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return body.token;\n    }\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayThreeDSecureResult } from '../types';\n\nexport function isGooglePayThreeDSecureResult(\n    body: RequestError['body'],\n): body is GooglePayThreeDSecureResult {\n    if (typeof body !== 'object' || body === null) {\n        return false;\n    }\n\n    const threeDSBody = body as Partial<GooglePayThreeDSecureResult>;\n\n    return (\n        typeof threeDSBody.three_ds_result?.acs_url === 'string' &&\n        typeof threeDSBody.three_ds_result.code === 'string'\n    );\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayTokenObject } from '../types';\n\nfunction isGooglePayTokenObject(token: unknown): token is GooglePayTokenObject {\n    return (\n        typeof token === 'object' &&\n        token !== null &&\n        'protocolVersion' in token &&\n        'signature' in token &&\n        'signedMessage' in token\n    );\n}\n\nexport default function assertIsGooglePayTokenObject(\n    token: unknown,\n): asserts token is GooglePayTokenObject {\n    if (!isGooglePayTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComCustomerStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCybersourceGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('cybersource', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCybersourceCustomerStrategy, [\n    { id: 'googlepaycybersourcev2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBnzCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBnzCustomerStrategy, [{ id: 'googlepaybnz' }]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayOrbitalGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('chase', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayOrbitalCustomerStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayStripeInitializationData } from '../types';\n\nfunction isGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayStripeInitializationData {\n    return (\n        'stripeConnectedAccount' in data &&\n        'stripePublishableKey' in data &&\n        'stripeVersion' in data\n    );\n}\n\nexport default function assertsIsGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayStripeInitializationData {\n    if (!isGooglePayStripeInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    isRequestError,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayStripeInitializationData from '../guards/is-google-pay-stripe-initialization-data';\nimport isGooglePayStripeRequestError from '../guards/is-google-pay-stripe-request-error';\nimport assertIsGooglePayStripeTokenObject from '../guards/is-google-pay-stripe-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePaySetExternalCheckoutData,\n    GooglePayStripeGatewayParameters,\n} from '../types';\n\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\nimport { StripeError, StripeUPEClient } from './types';\n\nexport default class GooglePayStripeGateway extends GooglePayGateway {\n    private stripeUPEClient?: StripeUPEClient;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeUPEScriptLoader,\n    ) {\n        super('stripe', paymentIntegrationService);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayStripeTokenObject(token);\n\n        data.nonce = token.id;\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayStripeGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayStripeInitializationData(data);\n\n        const { stripeVersion, stripePublishableKey, stripeConnectedAccount } = data;\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            'stripe:version': stripeVersion,\n            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n        };\n    }\n\n    async processAdditionalAction(\n        error: unknown,\n        methodId?: string,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!isRequestError(error) || !isGooglePayStripeRequestError(error.body)) {\n            throw error;\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const isStripeGooglePay3dsExperimentIsOn =\n            state.getStoreConfig()?.checkoutSettings.features[\n                'STRIPE-476.enable_stripe_googlepay_3ds'\n            ];\n        const shouldTrigger3DS =\n            some(error.body.errors, { code: 'three_d_secure_required' }) &&\n            isStripeGooglePay3dsExperimentIsOn;\n\n        if (shouldTrigger3DS) {\n            const data = this.getGooglePayInitializationData();\n\n            assertsIsGooglePayStripeInitializationData(data);\n\n            const { stripePublishableKey, stripeConnectedAccount } = data;\n\n            this.stripeUPEClient = await this.loadStripeJs(\n                stripePublishableKey,\n                stripeConnectedAccount,\n            );\n\n            const clientSecret = error.body.three_ds_result.token;\n            let result;\n            let catchedConfirmError = false;\n\n            try {\n                result = await this.stripeUPEClient.confirmCardPayment(clientSecret);\n            } catch (_) {\n                try {\n                    result = await this.stripeUPEClient.retrievePaymentIntent(clientSecret);\n                } catch (__) {\n                    catchedConfirmError = true;\n                }\n            }\n\n            if (result?.error) {\n                this._throwDisplayableStripeError(result.error);\n\n                if (this._isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                throw new PaymentMethodFailedError();\n            }\n\n            if (!result?.paymentIntent && !catchedConfirmError) {\n                throw new RequestError();\n            }\n\n            return this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce: result?.paymentIntent?.id || clientSecret },\n            });\n        }\n\n        throw error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeUPEClient> {\n        if (this.stripeUPEClient) {\n            return this.stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(stripePublishableKey, stripeConnectedAccount);\n    }\n\n    private _isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private _throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayStripeTokenObject } from '../types';\n\nfunction isGooglePayStripeTokenObject(token: unknown): token is GooglePayStripeTokenObject {\n    return typeof token === 'object' && token !== null && 'id' in token;\n}\n\nexport default function assertIsGooglePayStripeTokenObject(\n    token: unknown,\n): asserts token is GooglePayStripeTokenObject {\n    if (!isGooglePayStripeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","interface AdditionalActionError {\n    three_ds_result: { token: string };\n    errors: Array<{ code: string }>;\n}\n\nconst isGooglePayStripeRequestError = (body: unknown): body is AdditionalActionError => {\n    return (\n        typeof body === 'object' && body !== null && 'three_ds_result' in body && 'errors' in body\n    );\n};\n\nexport default isGooglePayStripeRequestError;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeUPEClient } from './types';\n\nexport default class StripeUPEScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeUPEClient> {\n        let stripeClient = this.stripeWindow.bcStripeClient;\n\n        if (!stripeClient) {\n            const stripe = await this.load();\n\n            stripeClient = stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: [\n                    'payment_element_beta_2',\n                    'alipay_pm_beta_1',\n                    'link_default_integration_beta_1',\n                    'shipping_address_element_beta_1',\n                    'address_element_beta_1',\n                ],\n                apiVersion: '2020-03-02;alipay_beta=v1;link_beta=v1',\n            });\n\n            Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n        }\n\n        return stripeClient;\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n        }\n\n        if (!this.stripeWindow.Stripe) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayStripeCustomerStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeUpeCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayStripeUpeCustomerStrategy, [\n    { id: 'googlepaystripeupe' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayWorldpayAccessGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('worldpay', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayWorldpayAccessCustomerStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","export const BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION = '3.128.0';\nexport const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5809.braintree_hosted_fields_fix_version')) {\n            return BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n    nonce?: string;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    preventCursorJumps?: boolean;\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n    [BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh',\n        [BraintreeModuleName.Paypal]:\n            'sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv',\n        [BraintreeModuleName.Venmo]:\n            'sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr',\n    },\n};\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import {\n    BraintreeGooglePayment,\n    BraintreeGooglePayThreeDSecure,\n    BraintreeSdk,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CancellablePromise,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayKey } from '../google-pay-payment-initialize-options';\nimport assertIsGooglePayBraintreeTokenObject from '../guards/is-google-pay-braintree-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayBraintreeGateway extends GooglePayGateway {\n    private _braintreeGooglePayment?: BraintreeGooglePayment;\n    private _service: PaymentIntegrationService;\n    private _methodId = GooglePayKey.BRAINTREE;\n\n    constructor(service: PaymentIntegrationService, private _braintreeSdk: BraintreeSdk) {\n        super('braintree', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        let paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.clientToken) {\n            const state = await this._service.loadPaymentMethod(this._methodId);\n\n            paymentMethod = state.getPaymentMethodOrThrow(this._methodId);\n        }\n\n        if (!paymentMethod.clientToken || !paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSdk.initialize(paymentMethod.clientToken);\n        this._braintreeGooglePayment = await this._braintreeSdk.getBraintreeGooglePayment();\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n\n        const { clientToken, initializationData } = super.getPaymentMethod();\n\n        if (!clientToken || !initializationData || !initializationData.card_information?.bin) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            isThreeDSecureEnabled,\n            card_information: { bin, isNetworkTokenized },\n        } = initializationData;\n\n        if (isThreeDSecureEnabled && !isNetworkTokenized) {\n            const threeDSecure = await this._braintreeSdk.getBraintreeThreeDS();\n\n            const { orderAmount } = this._service.getState().getOrderOrThrow();\n\n            const verification = await this._braintreePresent3DSChallenge(\n                threeDSecure,\n                orderAmount,\n                nonce,\n                bin,\n            );\n\n            return verification.nonce;\n        }\n\n        return nonce;\n    }\n\n    async extraPaymentData() {\n        return {\n            deviceSessionId: await this._getBraintreeDeviceData(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayBraintreeTokenObject(token);\n\n        data.nonce = token.androidPayCards[0].nonce;\n        data.card_information.bin = token.androidPayCards[0].details.bin;\n        data.card_information.isNetworkTokenized =\n            token.androidPayCards[0].details.isNetworkTokenized;\n\n        return data;\n    }\n\n    getCardParameters() {\n        return super.getCardParameters();\n    }\n\n    async getPaymentGatewayParameters(): Promise<GooglePayGatewayParameters> {\n        const braintreeGooglePayment = this.getBraintreeGooglePayment();\n\n        const request = braintreeGooglePayment.createPaymentDataRequest({\n            merchantInfo: super.getMerchantInfo(),\n            transactionInfo: super.getTransactionInfo(),\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            ...(await super.getRequiredData()),\n        });\n\n        return request.paymentMethodTokenizationParameters.parameters;\n    }\n\n    private getBraintreeGooglePayment(): BraintreeGooglePayment {\n        if (!this._braintreeGooglePayment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._braintreeGooglePayment;\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n        return deviceData;\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n        bin: string,\n    ) {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                bin,\n                nonce,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayBraintreeTokenObject } from '../types';\n\nfunction isGooglePayBraintreeTokenObject(token: unknown): token is GooglePayBraintreeTokenObject {\n    return typeof token === 'object' && token !== null && 'androidPayCards' in token;\n}\n\nexport default function assertIsGooglePayBraintreeTokenObject(\n    token: unknown,\n): asserts token is GooglePayBraintreeTokenObject {\n    if (!isGooglePayBraintreeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreePaymentStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreePaymentStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: [\n                    'fastlane',\n                    'buttons',\n                    'payment-fields',\n                    'hosted-fields',\n                    'three-domain-secure',\n                ],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nfunction isGooglePayPaypalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (data.initializationData) {\n        return (\n            'attributionId' in data.initializationData &&\n            'isVenmoEnabled' in data.initializationData &&\n            'isGooglePayEnabled' in data.initializationData &&\n            'isPayPalCreditAvailable' in data.initializationData\n        );\n    }\n\n    return false;\n}\n\nexport default function assertsIsGooglePayPayPalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): asserts data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (!isGooglePayPaypalCommercePaymentMethod(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport { GooglePayConfig } from './types';\n\nexport default class GooglePayPaypalCommerceGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalCommerceSdk: PayPalCommerceSdk) {\n        super('paypalsb', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\n\nconst createGooglePayPayPalCommerceCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceSdk(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceCustomerStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './bigcommerce-payments-types';\n\nexport default class PayPalSdkHelper {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane', 'three-domain-secure'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayConfig,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nexport default class GooglePayBigCommercePaymentsGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalSdkHelper: PayPalSdkHelper) {\n        super('googlepay_bigcommerce_payments', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\n\nconst createGooglePayBigCommercePaymentsCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(\n                paymentIntegrationService,\n                new PayPalSdkHelper(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsCustomerStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { isTdOnlineMartAdditionalAction } from '../guards/is-google-pay-td-online-mart-additional-action';\nimport { ExtraPaymentData, TdOnlineMartThreeDSErrorBody } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayTdOnlineMartGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService, private formPoster: FormPoster) {\n        super('worldlinena', service);\n    }\n\n    async extraPaymentData(): Promise<ExtraPaymentData> {\n        return Promise.resolve({ browser_info: getBrowserInfo() });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from '../types';\n\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartCustomerStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV2HostWindow } from '../types';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV2HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-8ofgICZZ/k5cC5N7xegqFZOA73H9RQ7H13439JfAZW8Gj3qjuKL2isaTD3GMIhDE',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-wG2z9zSQo61EIvyXmiFCo+zB3y0ZB4hsrXVcANmpP8HLthjoQJQPBh7tZKJSV8jA',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import { AdyenAdditionalActionErrorResponse } from '../types';\n\nexport default function isAdditionalActionRequiredErrorResponse(\n    param: unknown,\n): param is AdyenAdditionalActionErrorResponse {\n    return (\n        typeof param === 'object' &&\n        param !== null &&\n        'errors' in (param as AdyenAdditionalActionErrorResponse) &&\n        Array.isArray((param as AdyenAdditionalActionErrorResponse).errors) &&\n        'code' in (param as AdyenAdditionalActionErrorResponse).errors[0] &&\n        typeof (param as AdyenAdditionalActionErrorResponse).errors[0].code === 'string' &&\n        'provider_data' in param &&\n        typeof (param as AdyenAdditionalActionErrorResponse).provider_data === 'object'\n    );\n}\n","import {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV2ScriptLoader,\n    isAdditionalActionRequiredErrorResponse,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAdyenV2 extends GooglePayGateway {\n    private _adyenClient?: AdyenClient;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _scriptLoader: AdyenV2ScriptLoader) {\n        super('adyen', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n        const state = this._service.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n        });\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n        const paymentMethod = super.getPaymentMethod();\n\n        return JSON.stringify({\n            type: paymentMethod.method,\n            googlePayToken: nonce,\n            browser_info: getBrowserInfo(),\n        });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<PaymentIntegrationSelectors | void> {\n        if (!isRequestError(error) || !isAdditionalActionRequiredErrorResponse(error.body)) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._service.submitPayment(payment);\n        } catch (e) {\n            return this.processAdditionalAction(e);\n        }\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","import { round } from 'lodash';\n\nimport {\n    guard,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Omit,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { DEFAULT_CONTAINER_STYLES, LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport GooglePayPaymentInitializeOptions, {\n    WithGooglePayPaymentInitializeOptions,\n} from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    CallbackTriggerType,\n    ErrorReasonType,\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _loadingIndicator: LoadingIndicator;\n    private _loadingIndicatorContainer?: string;\n    private _paymentButton?: HTMLElement;\n    private _clickListener?: (event: MouseEvent) => unknown;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n\n    constructor(\n        protected _paymentIntegrationService: PaymentIntegrationService,\n        protected _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {\n        this._loadingIndicator = new LoadingIndicator({\n            containerStyles: DEFAULT_CONTAINER_STYLES,\n        });\n    }\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithGooglePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        const googlePayOptions = options[this._getMethodId()];\n\n        if (!googlePayOptions?.walletButton) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { walletButton, loadingContainerId, ...callbacks } = googlePayOptions;\n\n        this._loadingIndicatorContainer = loadingContainerId;\n\n        await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(this._getMethodId());\n\n        await this._googlePayPaymentProcessor.initialize(\n            () => paymentMethod,\n            this._getGooglePayClientOptions(paymentMethod.initializationData?.storeCountry),\n        );\n\n        this._addPaymentButton(walletButton, callbacks);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this._paymentIntegrationService.submitOrder();\n\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n        const extraData = await this._googlePayPaymentProcessor.extraPaymentData();\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: { nonce, ...extraData },\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error, payment.methodId);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._clickListener) {\n            this._paymentButton?.removeEventListener('click', this._clickListener);\n        }\n\n        this._paymentButton = undefined;\n        this._clickListener = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    protected _addPaymentButton(\n        walletButton: string,\n        callbacks: Omit<GooglePayPaymentInitializeOptions, 'walletButton'>,\n    ): void {\n        if (this._paymentButton) {\n            return;\n        }\n\n        const paymentButton = document.getElementById(walletButton);\n\n        if (!paymentButton) {\n            throw new InvalidArgumentError('Unable to proceed without a walletButton.');\n        }\n\n        this._paymentButton = paymentButton;\n        this._clickListener = this._handleClick(callbacks);\n\n        this._paymentButton.addEventListener('click', this._clickListener);\n    }\n\n    protected _handleClick({\n        onPaymentSelect,\n        onError,\n    }: Omit<GooglePayPaymentInitializeOptions, 'walletButton'>): (event: MouseEvent) => unknown {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            // TODO: Dispatch Widget Actions\n            try {\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                this._toggleLoadingIndicator(false);\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n\n            onPaymentSelect?.();\n        };\n    }\n\n    protected async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n\n        this._toggleLoadingIndicator(true);\n\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutXhr(this._getMethodId(), response);\n\n        await this._paymentIntegrationService.loadCheckout();\n        await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n        this._toggleLoadingIndicator(false);\n    }\n\n    protected _getMethodId(): keyof WithGooglePayPaymentInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    protected async _getIsSignedInOrThrow(): Promise<boolean> {\n        try {\n            return !!(await this._googlePayPaymentProcessor.getNonce(this._getMethodId()));\n        } catch (e) {\n            if (\n                e instanceof MissingDataError &&\n                e.subtype === MissingDataErrorType.MissingPaymentToken\n            ) {\n                return false;\n            }\n\n            throw e;\n        }\n    }\n\n    protected async _handleOfferTrigger(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<Partial<HandleCouponsOut>> {\n        let isSignedIn = false;\n        let errorMessage = 'Sign in to Google Pay first to apply or remove promo codes.';\n\n        try {\n            isSignedIn = await this._getIsSignedInOrThrow();\n        } catch (error) {\n            if (error instanceof MissingDataError) {\n                errorMessage = error.message;\n            }\n        }\n\n        // We can only apply/remove coupons on the payment step only if we are logged into Google Pay, otherwise we will get an error\n        if (isSignedIn) {\n            const { newOfferInfo, error } = await this._googlePayPaymentProcessor.handleCoupons(\n                offerData,\n            );\n\n            return {\n                newOfferInfo,\n                error,\n            };\n        }\n\n        return {\n            error: {\n                reason: ErrorReasonType.OFFER_INVALID,\n                message: errorMessage,\n                intent: CallbackTriggerType.OFFER,\n            },\n        };\n    }\n\n    protected _getGooglePayClientOptions(countryCode?: string): GooglePayPaymentOptions {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({ callbackTrigger, offerData }) => {\n                    const state = this._paymentIntegrationService.getState();\n                    // TODO remove this experiment usage after we make sure that coupons handling works fine\n                    const isGooglePayCouponsExperimentOn =\n                        state.getStoreConfigOrThrow().checkoutSettings.features[\n                            'PI-2875.googlepay_coupons_handling'\n                        ] || false;\n\n                    if (\n                        callbackTrigger !== CallbackTriggerType.INITIALIZE &&\n                        (!isGooglePayCouponsExperimentOn ||\n                            callbackTrigger !== CallbackTriggerType.OFFER)\n                    ) {\n                        return;\n                    }\n\n                    const { offerChangeTriggers } =\n                        this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._handleOfferTrigger(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    await this._paymentIntegrationService.loadCheckout();\n\n                    const { getCheckoutOrThrow, getCartOrThrow } =\n                        this._paymentIntegrationService.getState();\n                    const { code: currencyCode, decimalPlaces } = getCartOrThrow().currency;\n                    const totalPrice = round(\n                        getCheckoutOrThrow().outstandingBalance,\n                        decimalPlaces,\n                    ).toFixed(decimalPlaces);\n\n                    return {\n                        newTransactionInfo: {\n                            ...(countryCode && { countryCode }),\n                            currencyCode,\n                            totalPriceStatus: TotalPriceStatusType.FINAL,\n                            totalPrice,\n                        },\n                        ...(newOfferInfo && {\n                            newOfferInfo,\n                        }),\n                        ...(error && {\n                            error,\n                        }),\n                    };\n                },\n            },\n        };\n    }\n\n    private _toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this._loadingIndicatorContainer) {\n            this._loadingIndicator.show(this._loadingIndicatorContainer);\n        } else {\n            this._loadingIndicator.hide();\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV2ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAdyenV2Gateway from '../../gateways/google-pay-adyenv2-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2PaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAdyenV2Gateway(\n                paymentIntegrationService,\n                new AdyenV2ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAdyenV2PaymentStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV3HostWindow } from '../types';\n\nexport default class AdyenV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV3HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-5MvB4RnzvviA3VBT4KYABZ4HXNZG5LRqREEgd41xt/pf/QvKmsj2O9GuNuywRXx9',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-yvY2yFNR4WqIjPqP9MzjI+gJimmaJnAvj4rLHKvgJbgFD5fMuf8zIJrFJOW8Lhhf',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const checkout = await this._window.AdyenCheckout(configuration);\n\n        return checkout;\n    }\n}\n","import {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV3ScriptLoader,\n    isAdditionalActionRequiredErrorResponse,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAdyenV3 extends GooglePayGateway {\n    private _adyenClient?: AdyenClient;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _scriptLoader: AdyenV3ScriptLoader) {\n        super('adyen', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n        const state = this._service.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n        });\n\n        return Promise.resolve();\n    }\n\n    async processAdditionalAction(error: unknown): Promise<PaymentIntegrationSelectors | void> {\n        if (!isRequestError(error) || !isAdditionalActionRequiredErrorResponse(error.body)) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._service.submitPayment(payment);\n        } catch (e) {\n            return this.processAdditionalAction(e);\n        }\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n        const paymentMethod = super.getPaymentMethod();\n\n        return JSON.stringify({\n            type: paymentMethod.method,\n            googlePayToken: nonce,\n            browser_info: getBrowserInfo(),\n        });\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV3ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAdyenV3Gateway from '../../gateways/google-pay-adyenv3-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3PaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAdyenV3Gateway(\n                paymentIntegrationService,\n                new AdyenV3ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAdyenV3PaymentStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetPaymentStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComPaymentStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourcePaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourcePaymentStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalPaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalPaymentStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripePaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripePaymentStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessPaymentStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreePaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreePaymentStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\nexport interface PayPalSDK {\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n        initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n    };\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport enum ConfirmOrderStatus {\n    Approved = 'APPROVED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n}\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-partner-attribution-id'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'card-fields'\n>;\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface PayPalGoogleSdk {\n    version: string;\n    getCorrelationID: () => void;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: Record<string, string>;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nimport { ConfirmOrderData, ConfirmOrderStatus } from './types';\n\nexport default class GooglePayPaypalCommercePaymentStrategy extends GooglePayPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _payPalCommerceSdk: PayPalCommerceSdk,\n        private _requestSender: RequestSender,\n    ) {\n        super(_paymentIntegrationService, _googlePayPaymentProcessor);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const { initializationData } = state.getPaymentMethodOrThrow<GooglePayInitializationData>(\n            this._getMethodId(),\n        );\n        const { orderId } = await this.getOrderId(cartId);\n\n        const { card_information } = initializationData || {};\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n\n        const confirmOrderData = {\n            tokenizationData: {\n                type: 'PAYMENT_GATEWAY',\n                token: atob(nonce),\n            },\n            info: {\n                cardNetwork: card_information?.type || '',\n                cardDetails: card_information?.number || '',\n            },\n            type: 'CARD',\n        };\n\n        await this.confirmOrder(orderId, confirmOrderData);\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            const paymentData = {\n                formattedPayload: {\n                    method_id: payment.methodId,\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error);\n        }\n    }\n\n    private async confirmOrder(orderId: string, confirmOrderData: ConfirmOrderData) {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<GooglePayPayPalCommerceInitializationData>(\n                this._getMethodId(),\n            );\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n\n        const payPalSDK = await this._payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currencyCode,\n            true,\n        );\n\n        const { status } = await payPalSDK\n            .Googlepay()\n            .confirmOrder({ orderId, paymentMethodData: confirmOrderData });\n\n        if (status === ConfirmOrderStatus.PayerActionRequired) {\n            await payPalSDK.Googlepay().initiatePayerAction({ orderId });\n\n            return Promise.resolve();\n        }\n\n        if (status !== ConfirmOrderStatus.Approved) {\n            throw new InvalidArgumentError('Payment is not approved.');\n        }\n\n        return Promise.resolve();\n    }\n\n    private async getOrderId(cartId: string): Promise<{ orderId: string }> {\n        const url = '/api/storefront/payments/googlepaypaypalcommercecheckout';\n        const requestData = {\n            cartId,\n            shouldSaveInstrument: false,\n        };\n\n        const { body } = await this._requestSender.post<{ orderId: string }>(url, {\n            headers: {\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                'Content-Type': ContentType.Json,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: requestData,\n        });\n\n        return body;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\nimport GooglePayPaypalCommercePaymentStrategy from './google-pay-paypal-commerce-payment-strategy';\n\nconst createGooglePayPayPalCommercePaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const payPalCommerceSdk = new PayPalCommerceSdk(getScriptLoader());\n\n    return new GooglePayPaypalCommercePaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(paymentIntegrationService, payPalCommerceSdk),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n        payPalCommerceSdk,\n        createRequestSender(),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommercePaymentStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { GooglePayConfig } from '../types';\n\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * BigCommercePayments SDK\n *\n */\nexport interface PayPalSDK {\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n        initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n    };\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport enum ConfirmOrderStatus {\n    Approved = 'APPROVED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n}\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-partner-attribution-id'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'card-fields'\n>;\n\nexport interface PayPalGoogleSdk {\n    version: string;\n    getCorrelationID: () => void;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: Record<string, string>;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\nimport {\n    GooglePayBigCommercePaymentsInitializationData,\n    GooglePayInitializationData,\n} from '../types';\n\nimport { ConfirmOrderData, ConfirmOrderStatus } from './types';\n\nexport default class GooglePayBigCommercePaymentsPaymentStrategy extends GooglePayPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _payPalSdkHelper: PayPalSdkHelper,\n        private _requestSender: RequestSender,\n    ) {\n        super(_paymentIntegrationService, _googlePayPaymentProcessor);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const { initializationData } = state.getPaymentMethodOrThrow<GooglePayInitializationData>(\n            this._getMethodId(),\n        );\n        const { orderId } = await this.getOrderId(cartId);\n\n        const { card_information } = initializationData || {};\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n\n        const confirmOrderData = {\n            tokenizationData: {\n                type: 'PAYMENT_GATEWAY',\n                token: atob(nonce),\n            },\n            info: {\n                cardNetwork: card_information?.type || '',\n                cardDetails: card_information?.number || '',\n            },\n            type: 'CARD',\n        };\n\n        await this.confirmOrder(orderId, confirmOrderData);\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            const paymentData = {\n                formattedPayload: {\n                    method_id: payment.methodId,\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error);\n        }\n    }\n\n    private async confirmOrder(orderId: string, confirmOrderData: ConfirmOrderData) {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<GooglePayBigCommercePaymentsInitializationData>(\n                this._getMethodId(),\n            );\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n\n        const payPalSDK = await this._payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currencyCode,\n            true,\n        );\n\n        const { status } = await payPalSDK\n            .Googlepay()\n            .confirmOrder({ orderId, paymentMethodData: confirmOrderData });\n\n        if (status === ConfirmOrderStatus.PayerActionRequired) {\n            await payPalSDK.Googlepay().initiatePayerAction({ orderId });\n\n            return Promise.resolve();\n        }\n\n        if (status !== ConfirmOrderStatus.Approved) {\n            throw new InvalidArgumentError('Payment is not approved.');\n        }\n\n        return Promise.resolve();\n    }\n\n    private async getOrderId(cartId: string): Promise<{ orderId: string }> {\n        const url = '/api/storefront/payments/googlepay_bigcommerce_paymentscheckout';\n        const requestData = {\n            cartId,\n            shouldSaveInstrument: false,\n        };\n\n        const { body } = await this._requestSender.post<{ orderId: string }>(url, {\n            headers: {\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                'Content-Type': ContentType.Json,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: requestData,\n        });\n\n        return body;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\nimport GooglePayBigCommercePaymentsPaymentStrategy from './google-pay-bigcommerce-payments-payment-strategy';\n\nconst createGooglePayBigCommercePaymentsPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const payPalSdkHelper = new PayPalSdkHelper(getScriptLoader());\n\n    return new GooglePayBigCommercePaymentsPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(paymentIntegrationService, payPalSdkHelper),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n        payPalSdkHelper,\n        createRequestSender(),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsPaymentStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartPaymentStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import {\n    BuyNowCartCreationError,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithGooglePayButtonInitializeOptions } from './google-pay-button-initialize-option';\nimport GooglePayCustomerInitializeOptions from './google-pay-customer-initialize-options';\nimport { WithGooglePayPaymentInitializeOptions } from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayBuyNowInitializeOptions,\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n    private _buyNowCart?: Cart;\n    private _currencyCode?: string;\n    private _buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions;\n    private _countryCode?: string;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithGooglePayButtonInitializeOptions,\n    ): Promise<void> {\n        if (!options.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        if (!options.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" is not a valid key.',\n            );\n        }\n\n        const googlePayOptions = options[this._getMethodOrThrow()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { buyNowInitializeOptions, currencyCode, buttonColor, buttonType, onError } =\n            googlePayOptions;\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(\n                this._getMethodOrThrow(),\n            );\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        }\n\n        this._countryCode = paymentMethod.initializationData?.storeCountry;\n\n        if (buyNowInitializeOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._currencyCode = currencyCode;\n            this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n                !!buyNowInitializeOptions,\n                currencyCode,\n            );\n        } else {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n            );\n        }\n\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(options.containerId, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError),\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n    ): (event: MouseEvent) => Promise<void> {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            try {\n                if (this._buyNowInitializeOptions) {\n                    await this._createBuyNowCartOrThrow(this._buyNowInitializeOptions);\n                } else {\n                    await this._paymentIntegrationService.loadDefaultCheckout();\n                }\n\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && !this._buyNowCart?.lineItems.digitalItems.length) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodOrThrow(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getGooglePayClientOptions(): GooglePayPaymentOptions | undefined {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                    offerData,\n                }) => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                        offerChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._googlePayPaymentProcessor.handleCoupons(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    if (this._buyNowInitializeOptions) {\n                        return this._getBuyNowTransactionInfo(\n                            availableShippingOptions,\n                            newOfferInfo,\n                            error,\n                        );\n                    }\n\n                    return this._getTransactionInfo(availableShippingOptions, newOfferInfo, error);\n                },\n            },\n        };\n    }\n\n    private async _createBuyNowCartOrThrow(\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            try {\n                this._buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                await this._paymentIntegrationService.loadCheckout(this._buyNowCart.id);\n            } catch (error) {\n                if (typeof error === 'string') {\n                    throw new BuyNowCartCreationError(error);\n                }\n\n                throw error;\n            }\n        }\n    }\n\n    private _getBuyNowTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        if (!this._buyNowCart) {\n            return;\n        }\n\n        const { cartAmount } = this._buyNowCart;\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode: this._getCurrencyCodeOrThrow(),\n                totalPrice: totalPrice || String(cartAmount),\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private async _getTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        await this._paymentIntegrationService.loadCheckout();\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n        const { code: currencyCode } = this._paymentIntegrationService\n            .getState()\n            .getCartOrThrow().currency;\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private _getMethodOrThrow(): keyof WithGooglePayButtonInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreeButtonStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\n\nconst createGooglePayPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceSdk(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceButtonStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\n\nconst createGooglePayBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(\n                paymentIntegrationService,\n                new PayPalSdkHelper(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsButtonStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2ButtonStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3ButtonStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetButtonStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComButtonStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourceButtonStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalButtonStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripeButtonStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessButtonStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartButtonStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n"],"names":["MissingDataErrorType","__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","InvalidArgumentError","bindMethodDecorator","_","descriptor","value","method","boundMethod","bind","set","CurrencyFormatter","currencySettings","decimalPlaces","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","amount","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","Math","abs","integerAmount","decimalAmount","_toFixed","split","parsedIntegerAmount","replace","join","toLowerCase","precision","round","toFixed","CurrencyService","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","currency","toCustomerCurrency","exchangeRate","toStoreCurrency","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","guard","errorFactory","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","PayPalCommerceIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","TotalPriceStatusType","GooglePayCardNetwork","CallbackIntentsType","ErrorReasonType","CallbackTriggerType","isGooglePayCardNetworkKey","card","GooglePayKey","GooglePayGateway","_gatewayIdentifier","_paymentIntegrationService","_isBuyNowFlow","mapToShippingAddressRequestBody","shippingAddress","company","phone","getState","getShippingAddress","_mapToAddressRequestBody","mapToBillingAddressRequestBody","response","billingAddress","paymentMethodData","info","email","customFields","getBillingAddress","mapToExternalCheckoutData","tokenizationData","token","nonce","cardNetwork","cardDetails","number","Promise","resolve","card_information","cart_id","getCart","id","getRequiredData","data","emailRequired","_isShippingAddressRequired","state","loadShippingCountries","allowedCountryCodes","getShippingCountries","map","country","code","shippingAddressRequired","shippingAddressParameters","phoneNumberRequired","shippingOptionRequired","getCallbackIntents","OFFER","SHIPPING_ADDRESS","SHIPPING_OPTION","getCallbackTriggers","isGooglePayCouponsExperimentOn","getStoreConfigOrThrow","checkoutSettings","features","availableTriggers","INITIALIZE","initializationTrigger","addressChangeTriggers","shippingOptionsChangeTriggers","offerChangeTriggers","getNonce","methodId","getPaymentMethodOrThrow","initializationData","extraPaymentData","undefined","getMerchantInfo","googleMerchantName","merchantName","googleMerchantId","merchantId","platformToken","authJwt","getGooglePayInitializationData","getTransactionInfo","currencyCode","_getCurrencyCodeOrThrow","getCartOrThrow","countryCode","storeCountry","totalPriceStatus","ESTIMATED","totalPrice","getPaymentGatewayParameters","gatewayMerchantId","gateway","getCardParameters","allowedAuthMethods","allowedCardNetworks","getPaymentMethod","supportedCards","filter","billingAddressRequired","billingAddressParameters","initialize","isBuyNowFlow","_getPaymentMethodFn","Boolean","_currencyCode","handleShippingAddressChange","address1","mappedShippingAddress","updateShippingAddress","consignments","getConsignments","consignment","storeConfig","_currencyService","availableShippingOptions","_getGooglePayShippingOption","recommendedShippingOption","find","shippingOption","isRecommended","length","selectedShippingOptionId","selectedShippingOption","handleShippingOptionChange","defaultSelectedOptionId","shippingOptions","optionId","selectShippingOption","getTotalPrice","getCheckoutOrThrow","outstandingBalance","handleCoupons","offerData","redemptionCodes","newCouponsState","offers","appliedCoupons","getAppliedCoupons","error","reduce","promise","some","redemptionCode","appliedCouponError","applyCoupon","coupon","includes","removeCoupon","newOfferInfo","coupons","getCheckout","displayName","description","e","reason","OFFER_INVALID","intent","getGatewayIdentifier","setGatewayIdentifier","getStoreConfig","cart","config","lineItems","physicalItems","lineItem","isShippingRequired","customItems","address","address2","address3","locality","city","administrativeArea","stateOrProvinceCode","postalCode","phoneNumber","firstName","lastName","_getFirstAndLastName","trim","stateOrProvince","fullName","nameParts","slice","cost","additionalDescription","formattedCost","label","NotImplementedError","PaymentMethodCancelledError","PaymentMethodFailedError","isGooglePayErrorObject","isGooglePayKey","values","GooglePayCustomerStrategy","_googlePayPaymentProcessor","options","_methodId","googlePayOptions","_getMethodId","paymentMethod","_e","loadPaymentMethod","_getGooglePayClientOptions","_addPaymentButton","signIn","reject","signOut","providerId","getPaymentId","executePaymentMethodCheckout","continueWithCheckoutCallback","deinitialize","_paymentButton","remove","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","shippingOptionData","couponsError","loadCheckout","newTransactionInfo","FINAL","newShippingOptionParameters","container","buttonColor","buttonType","onClick","onError","addPaymentButton","_handleClick","event","preventDefault","initializeWidget","_interactWithPaymentSheet","err","statusCode","JSON","stringify","showPaymentSheet","siteLink","window","location","pathname","links","updateBillingAddress","setExternalCheckoutForm","SDK_VERSION_HEADERS","GooglePayPaymentProcessor","_scriptLoader","_gateway","_requestSender","_formPoster","_baseRequest","apiVersion","apiVersionMinor","googlePayPaymentOptions","_paymentsClient","getGooglePaymentsClient","testMode","_buildButtonPayloads","_buildWidgetPayloads","_determineReadinessToPay","_prefetchGooglePaymentData","containerId","document","querySelector","paymentButton","_getPaymentsClient","createButton","allowedPaymentMethods","_getBaseCardPaymentMethod","appendChild","paymentDataRequest","_getPaymentDataRequest","loadPaymentData","setExternalCheckoutXhr","provider","_setExternalCheckout","processAdditionalAction","useFormPoster","url","body","action","postForm","post","headers","Accept","transactionInfo","prefetchPaymentData","result","isReadyToPay","_getIsReadyToPayRequest","_baseCardPaymentMethod","parameters","baseCardPaymentMethod","_cardPaymentMethod","tokenizationSpecification","_paymentDataRequest","merchantInfo","callbackIntents","offerInfo","_isReadyToPayRequest","_getOrThrow","PaymentMethodClientUnavailableError","GooglePayScriptLoader","_window","loadScript","google","payments","api","PaymentsClient","environment","createGooglePayScriptLoader","getScriptLoader","paymentIntegrationService","requestSender","createRequestSender","createFormPoster","GooglePayAuthorizeNetGateway","service","btoa","isGooglePayAuthorizeNetInitializationData","assertsIsGooglePayAuthorizeNetInitializationData","paymentGatewayId","ContentType","assertIsGooglePayCheckoutComInitializationData","isGooglePayCheckoutComInitializationData","GooglePayCheckoutComGateway","_resolve","threeDSBody","three_ds_result","acs_url","isGooglePayThreeDSecureResult","parse","isGooglePayTokenObject","assertIsGooglePayTokenObject","_tokenize","checkoutcomkey","token_data","credentials","Authorization","Json","GooglePayCybersourceGateway","GooglePayOrbitalGateway","PaymentArgumentInvalidError","invalidFields","DEFAULT_RESPONSE","status","RequestError","errors","assertsIsGooglePayStripeInitializationData","isGooglePayStripeInitializationData","GooglePayStripeGateway","scriptLoader","isGooglePayStripeTokenObject","assertIsGooglePayStripeTokenObject","stripeVersion","stripePublishableKey","stripeConnectedAccount","isStripeGooglePay3dsExperimentIsOn","stripeUPEClient","loadStripeJs","clientSecret","catchedConfirmError","confirmCardPayment","retrievePaymentIntent","__","_throwDisplayableStripeError","_isCancellationError","paymentIntent","submitPayment","paymentData","getStripeClient","stripeError","payment_intent","last_payment_error","indexOf","StripeUPEScriptLoader","stripeWindow","stripeAccount","locale","stripeClient","bcStripeClient","load","betas","Stripe","GooglePayWorldpayAccessGateway","isExperimentEnabled","experimentName","fallbackValue","BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BraintreeSDKVersionManager","braintreeWindow","getSDKVersion","getPreloadedSDKVersion","braintree","preloadedVersion","VERSION","UnsupportedBrowserError","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BraintreeSdk","braintreeScriptLoader","clientToken","setClientToken","teardownModule","dataCollector","getClient","client","getClientTokenOrThrow","clientCreator","loadClient","create","authorization","getDataCollectorOrThrow","emptyDataCollector","deviceData","teardown","loadDataCollector","dataCollectorConfig","kount","isBraintreeError","KountNotEnabled","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","all","loadGooglePayment","getBraintreeThreeDS","threeDS","threeDSecure","load3DS","version","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","loadLocalPayment","getUsBankAccount","usBankAccount","loadUsBankAccount","getBraintreeVisaCheckout","visaCheckout","loadVisaCheckout","then","paypal","getVisaCheckoutSdk","visaCheckoutSDK","loadVisaCheckoutSdk","getVenmoCheckoutOrThrow","braintreeVenmo","venmoCheckout","loadVenmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","BRAINTREE_SDK_SCRIPTS_INTEGRITY","Client","PaypalCheckout","Paypal","LocalPayment","DataCollector","UsBankAccount","GooglePayment","ThreeDSecure","VisaCheckout","Venmo","HostedFields","Fastlane","BraintreeScriptLoader","braintreeHostWindow","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadHostedFields","V","hash","async","attributes","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","moduleName","CancellablePromise","cancellable","cancel","race","GooglePayBraintreeGateway","_braintreeSdk","BRAINTREE","_service","_braintreeGooglePayment","bin","isThreeDSecureEnabled","isNetworkTokenized","orderAmount","getOrderOrThrow","_braintreePresent3DSChallenge","deviceSessionId","_getBraintreeDeviceData","isGooglePayBraintreeTokenObject","assertIsGooglePayBraintreeTokenObject","androidPayCards","details","createPaymentDataRequest","cardRequirements","billingAddressFormat","paymentMethodTokenizationParameters","verifyCard","onLookupComplete","_data","next","braintreeSdk","PayPalCommerceSdk","getPayPalFastlaneSdk","sessionId","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","loadPayPalSdk","getPayPalGooglePaySdk","initializesOnCheckoutPage","forceLoad","paypalGooglePay","paypalSdkScriptConfig","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","scriptOptions","transformConfig","scriptAttributes","scriptSrc","URLSearchParams","toString","clientId","attributionId","commit","components","buyerCountry","isHostedCheckoutEnabled","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","enableAPMsFunding","disableAPMsFunding","apm","transformedConfig","keys","Array","isArray","assertsIsGooglePayPayPalCommercePaymentMethod","isGooglePayPaypalCommercePaymentMethod","GooglePayPaypalCommerceGateway","payPalCommerceSdk","googlePaySdk","googlepayConfig","Googlepay","PayPalSdkHelper","GooglePayBigCommercePaymentsGateway","payPalSdkHelper","getBrowserInfo","navigator","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","Date","getTimezoneOffset","GooglePayTdOnlineMartGateway","formPoster","browser_info","errorBody","isObject","isTdOnlineMartAdditionalAction","threeDSResult","formUrl","payer_auth_request","threeDSSessionData","merchant_data","creq","AdyenV2ScriptLoader","_stylesheetLoader","configuration","loadStylesheet","prepend","AdyenCheckout","isAdditionalActionRequiredErrorResponse","param","provider_data","GooglePayAdyenV2","_adyenClient","storeProfile","storeLanguage","googlePayToken","payment","_handleAction","additionalAction","adyenAction","_getAdyenClient","createFromAction","onAdditionalDetails","additionalActionState","paymentPayload","paymentMethodType","size","mount","OrderFinalizationNotRequiredError","DEFAULT_STYLES","color","backgroundColor","DEFAULT_CONTAINER_STYLES","position","ROTATION_ANIMATION","LoadingIndicator","styles","containerStyles","defineAnimation","buildContainer","indicator","buildIndicator","show","parentId","parent","getElementById","style","visibility","opacity","hide","handleTransitionEnd","removeEventListener","addEventListener","createElement","display","bottom","left","right","top","transition","setStyleAttribute","borderRadius","border","borderColor","margin","transform","transformStyle","animation","element","attrs","k","setProperty","head","sheet","CSSStyleSheet","insertRule","GooglePayPaymentStrategy","_loadingIndicator","walletButton","loadingContainerId","callbacks","_loadingIndicatorContainer","execute","submitOrder","extraData","finalize","_clickListener","onPaymentSelect","_toggleLoadingIndicator","_getIsSignedInOrThrow","_handleOfferTrigger","isSignedIn","errorMessage","isLoading","getStylesheetLoader","AdyenV3ScriptLoader","GooglePayAdyenV3","INTERNAL_USE_ONLY","ConfirmOrderStatus","GooglePayPaypalCommercePaymentStrategy","_payPalCommerceSdk","cartId","orderId","getOrderId","confirmOrderData","atob","confirmOrder","formattedPayload","method_id","paypal_account","order_id","payPalSDK","PayerActionRequired","initiatePayerAction","Approved","requestData","shouldSaveInstrument","BigCommercePaymentsIntent","GooglePayBigCommercePaymentsPaymentStrategy","_payPalSdkHelper","BuyNowCartCreationError","GooglePayButtonStrategy","_getMethodOrThrow","buyNowInitializeOptions","_countryCode","_buyNowInitializeOptions","loadDefaultCheckout","_createBuyNowCartOrThrow","_buyNowCart","digitalItems","_getBuyNowTransactionInfo","_getTransactionInfo","getBuyNowCartRequestBody","cartRequestBody","createBuyNowCart","cartAmount","String"],"sourceRoot":""}