{"version":3,"file":"integrations/google-pay.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv2/adyenv2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-additional-action-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/bind-decorator/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-card-network-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/create-currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/items-require-shipping.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-adyenv2-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-additional-action-processable.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-error-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-initialize-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/create-google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-adyenv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv3/adyenv3-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-adyenv3-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-adyenv3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-authorizenet-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-authorizenet-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-authorizenet-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-checkoutcom-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-checkoutcom-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-threedsecure-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-checkoutcom-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-cybersource-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-cybersource-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-orbital-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-orbital-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/google-pay-stripe-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/stripe-upe-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-worldpayaccess-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-worldpayaccess-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-braintree-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-braintree-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-braintree-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-paypal-commerce-payment-method.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/paypal-sdk-helper.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-tdonlinemart-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-td-online-mart-additional-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-tdonlinemart-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-adyenv2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-adyenv3-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-authorizenet-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-checkoutcom-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-cybersource-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-bnz-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-orbital-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripeupe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-worldpayaccess-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-braintree-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-tdonlinemart-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-braintree-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv3-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-authorizenet-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-checkoutcom-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-cybersource-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-orbital-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-worldpayaccess-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-tdonlinemart-button-strategy.ts"],"sourcesContent":["import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV2HostWindow } from '../types';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV2HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-8ofgICZZ/k5cC5N7xegqFZOA73H9RQ7H13439JfAZW8Gj3qjuKL2isaTD3GMIhDE',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-wG2z9zSQo61EIvyXmiFCo+zB3y0ZB4hsrXVcANmpP8HLthjoQJQPBh7tZKJSV8jA',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { AdyenAdditionalActionErrorResponse } from '../types';\n\nexport default function isAdditionalActionRequiredErrorResponse(\n    param: unknown,\n): param is AdyenAdditionalActionErrorResponse {\n    return (\n        typeof param === 'object' &&\n        param !== null &&\n        'errors' in (param as AdyenAdditionalActionErrorResponse) &&\n        Array.isArray((param as AdyenAdditionalActionErrorResponse).errors) &&\n        'code' in (param as AdyenAdditionalActionErrorResponse).errors[0] &&\n        typeof (param as AdyenAdditionalActionErrorResponse).errors[0].code === 'string' &&\n        'provider_data' in param &&\n        typeof (param as AdyenAdditionalActionErrorResponse).provider_data === 'object'\n    );\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { InvalidArgumentError } from '../errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(currencySettings: CurrencyConfig) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const { decimalPlaces, symbolLocation, symbol, thousandsSeparator, decimalSeparator } =\n            currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ? `-${formattedCurrency}` : formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [integerAmount, decimalAmount = ''] = this._toFixed(\n            positiveAmount,\n            this._decimalPlaces,\n        ).split('.');\n        const parsedIntegerAmount = integerAmount.replace(\n            /\\B(?=(\\d{3})+(?!\\d))/g,\n            this._thousandsSeparator,\n        );\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [parsedIntegerAmount, decimalAmount].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return this._symbolLocation.toLowerCase() === 'left'\n            ? `${this._symbol}${formattedNumber}`\n            : `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+`${Math.round(+`${value}e${precision}`)}e${-precision}`).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(private _storeConfig: StoreConfig) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { BigCommercePaymentsIntent } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    BrowserInfo,\n    BuyNowCartRequestBody,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { FundingType } from './google-pay-paypal-commerce/types';\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\nexport interface GooglePayGatewayBaseRequest {\n    apiVersion: 2;\n    apiVersionMinor: 0;\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\ntype GooglePayGatewayBaseResponse = GooglePayGatewayBaseRequest;\n\ninterface GooglePayPaymentMethod<T> {\n    type: string;\n    parameters: T;\n}\n\ntype GooglePayAuthMethod = 'PAN_ONLY' | 'CRYPTOGRAM_3DS';\n\nexport enum GooglePayCardNetwork {\n    AMEX = 'AMEX',\n    DISCOVER = 'DISCOVER',\n    INTERAC = 'INTERAC',\n    JCB = 'JCB',\n    MC = 'MASTERCARD',\n    VISA = 'VISA',\n}\n\nexport interface GooglePayCardParameters {\n    allowedAuthMethods: GooglePayAuthMethod[];\n    allowedCardNetworks: GooglePayCardNetwork[];\n    billingAddressRequired?: boolean;\n    billingAddressParameters?: {\n        format?: 'MIN' | 'FULL';\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface GooglePayBaseCardPaymentMethod\n    extends GooglePayPaymentMethod<GooglePayCardParameters> {\n    type: 'CARD';\n    parameters: GooglePayCardParameters;\n}\n\nexport interface GooglePayIsReadyToPayRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n}\n\ninterface GooglePayGatewayBaseParameters {\n    gateway: string;\n}\n\nexport interface GooglePayRegularGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId: string;\n}\n\nexport interface GooglePayStripeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'stripe:version'?: string;\n    'stripe:publishableKey'?: string;\n}\n\nexport interface GooglePayBraintreeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'braintree:apiVersion'?: string;\n    'braintree:authorizationFingerprint'?: string;\n    'braintree:merchantId'?: string;\n    'braintree:sdkVersion'?: string;\n}\n\nexport interface GooglePayPayPalCommerceGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId?: string;\n}\n\nexport type GooglePayGatewayParameters =\n    | GooglePayRegularGatewayParameters\n    | GooglePayStripeGatewayParameters\n    | GooglePayBraintreeGatewayParameters;\n\nexport interface GooglePayCardPaymentMethod extends GooglePayBaseCardPaymentMethod {\n    tokenizationSpecification: {\n        type: 'PAYMENT_GATEWAY';\n        parameters: GooglePayGatewayParameters;\n    };\n}\n\nexport interface GooglePayTransactionInfo {\n    /** [!] Required for EEA countries */\n    countryCode?: string;\n    currencyCode: string;\n    totalPriceStatus: TotalPriceStatusType;\n    totalPrice: string;\n}\n\nexport interface GooglePayMerchantInfo {\n    merchantName: string;\n    merchantId: string;\n    authJwt: string;\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport interface GooglePayPaymentDataRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayCardPaymentMethod];\n    transactionInfo: GooglePayTransactionInfo;\n    merchantInfo: GooglePayMerchantInfo;\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n    offerInfo: Offers;\n    shippingOptionRequired?: boolean;\n    callbackIntents?: CallbackIntentsType[];\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport interface ShippingOptionParameters {\n    defaultSelectedOptionId?: string;\n    shippingOptions?: GoogleShippingOption[];\n}\n\nexport interface NewShippingOptionParameters {\n    newShippingOptionParameters?: ShippingOptionParameters;\n}\n\nexport interface NewOfferInfo {\n    newOfferInfo?: Offers;\n}\n\nexport interface Offers {\n    offers: OfferInfoItem[];\n}\n\nexport interface GooglePayError {\n    message: string;\n    reason: ErrorReasonType;\n    intent: CallbackTriggerType;\n}\n\nexport enum ErrorReasonType {\n    OFFER_INVALID = 'OFFER_INVALID',\n    PAYMENT_DATA_INVALID = 'PAYMENT_DATA_INVALID',\n    SHIPPING_ADDRESS_INVALID = 'SHIPPING_ADDRESS_INVALID',\n    SHIPPING_ADDRESS_UNSERVICEABLE = 'SHIPPING_ADDRESS_UNSERVICEABLE',\n    SHIPPING_OPTION_INVALID = 'SHIPPING_OPTION_INVALID',\n    OTHER_ERROR = 'OTHER_ERROR',\n}\n\nexport interface OfferInfoItem {\n    redemptionCode: string;\n    description: string;\n}\n\nexport interface HandleCouponsOut {\n    newOfferInfo: GooglePayPaymentDataRequest['offerInfo'];\n    error?: GooglePayError;\n}\n\nexport interface GoogleShippingOption {\n    id: string;\n    label?: string;\n}\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n    shippingAddress: GooglePayFullBillingAddress;\n    shippingOptionData: GoogleShippingOption;\n    offerData: {\n        redemptionCodes: string[];\n    };\n}\n\nexport interface GooglePayPaymentOptions {\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): onPaymentDataChangedOut;\n    };\n}\n\nexport type onPaymentDataChangedOut = Promise<\n    | (NewTransactionInfo & NewShippingOptionParameters & NewOfferInfo & { error?: GooglePayError })\n    | void\n>;\n\nexport type GooglePayRequiredPaymentData = Pick<\n    GooglePayPaymentDataRequest,\n    | 'emailRequired'\n    | 'shippingAddressRequired'\n    | 'shippingAddressParameters'\n    | 'shippingOptionRequired'\n>;\n\ninterface GooglePayMinBillingAddress {\n    name: string;\n    postalCode: string;\n    countryCode: string;\n    phoneNumber?: string;\n}\n\nexport interface GooglePayFullBillingAddress extends GooglePayMinBillingAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    locality: string;\n    administrativeArea: string;\n    sortingCode: string;\n}\n\ninterface GooglePayCardInfo {\n    cardNetwork: GooglePayCardNetwork;\n    cardDetails: string;\n    billingAddress?: GooglePayFullBillingAddress;\n}\n\ninterface GooglePayPaymentMethodData<T> {\n    description: string;\n    tokenizationData: {\n        type: 'PAYMENT_GATEWAY';\n        token: string;\n    };\n    type: string;\n    info: T;\n}\n\ninterface GooglePayCardData extends GooglePayPaymentMethodData<GooglePayCardInfo> {\n    type: 'CARD';\n}\n\ninterface GooglePayPaymentDataResponse<T> extends GooglePayGatewayBaseResponse {\n    paymentMethodData: GooglePayPaymentMethodData<T>;\n    shippingAddress?: GooglePayFullBillingAddress;\n    email?: string;\n}\n\nexport interface GooglePayCardDataResponse extends GooglePayPaymentDataResponse<GooglePayCardInfo> {\n    paymentMethodData: GooglePayCardData;\n}\n\ninterface GooglePayIsReadyToPayResponse {\n    result: boolean;\n}\n\nexport interface GooglePayButtonOptions {\n    onClick: (event: MouseEvent) => Promise<void>;\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n    buttonColor?: GooglePayButtonColor;\n    buttonType?: GooglePayButtonType;\n}\n\nexport interface GooglePaymentsClient {\n    isReadyToPay(request: GooglePayIsReadyToPayRequest): Promise<GooglePayIsReadyToPayResponse>;\n    createButton(options: GooglePayButtonOptions): HTMLElement;\n    loadPaymentData(request: GooglePayPaymentDataRequest): Promise<GooglePayCardDataResponse>;\n    prefetchPaymentData(request: GooglePayPaymentDataRequest): void;\n}\n\ntype GooglePayEnvironment = 'TEST' | 'PRODUCTION';\n\nexport type GooglePaymentsClientConstructor = new (paymentOptions: {\n    environment: GooglePayEnvironment;\n}) => GooglePaymentsClient;\n\nexport interface GooglePayHostWindow extends Window {\n    google?: {\n        payments: {\n            api: {\n                PaymentsClient: GooglePaymentsClientConstructor;\n            };\n        };\n    };\n}\n\ninterface GooglePayBaseInitializationData {\n    card_information?: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    gateway: string;\n    gatewayMerchantId?: string;\n    googleMerchantId: string;\n    googleMerchantName: string;\n    isThreeDSecureEnabled: boolean;\n    nonce?: string;\n    platformToken: string;\n    storeCountry?: string;\n}\n\nexport interface GooglePayPayPalCommerceInitializationData extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayBigCommercePaymentsInitializationData\n    extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayAuthorizeNetInitializationData extends GooglePayBaseInitializationData {\n    paymentGatewayId: string;\n}\n\nexport interface GooglePayStripeInitializationData extends GooglePayBaseInitializationData {\n    stripeConnectedAccount: string;\n    stripePublishableKey: string;\n    stripeVersion: string;\n}\n\nexport interface GooglePayCheckoutComInitializationData extends GooglePayBaseInitializationData {\n    checkoutcomkey: string;\n}\n\nexport interface GooglePayAdyenV2InitializationData extends GooglePayBaseInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface GooglePayAdyenV3InitializationData extends GooglePayBaseInitializationData {\n    clientKey: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport type GooglePayInitializationData =\n    | GooglePayBaseInitializationData\n    | GooglePayAdyenV2InitializationData\n    | GooglePayAdyenV3InitializationData\n    | GooglePayAuthorizeNetInitializationData\n    | GooglePayStripeInitializationData\n    | GooglePayCheckoutComInitializationData\n    | GooglePayPayPalCommerceInitializationData\n    | GooglePayBigCommercePaymentsInitializationData;\n\nexport interface GooglePaySetExternalCheckoutData {\n    nonce: string;\n    card_information: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    cart_id?: string;\n}\n\nexport interface GooglePayAdditionalActionProcessable {\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void>;\n}\n\nexport interface GooglePayErrorObject {\n    errorCode?: number;\n    statusCode: 'CANCELED' | 'DEVELOPER_ERROR';\n    statusMessage?: string;\n}\n\nexport interface GooglePayTokenObject {\n    protocolVersion: string;\n    signature: string;\n    signedMessage: string;\n}\n\nexport interface GooglePayStripeTokenObject {\n    id: string;\n}\n\nexport interface GooglePayBraintreeTokenObject {\n    androidPayCards: [\n        {\n            nonce: string;\n            details: {\n                bin: string;\n                isNetworkTokenized?: boolean;\n            };\n        },\n    ];\n}\n\nexport interface GooglePayCheckoutComTokenObject {\n    token: string;\n}\n\nexport interface GooglePayThreeDSecureResult {\n    three_ds_result: {\n        acs_url: string;\n        code: string;\n    };\n}\n\nexport interface GooglePayBuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody;\n}\n\nexport interface ExtraPaymentData {\n    deviceSessionId?: string;\n    browser_info?: BrowserInfo;\n}\n\nexport type GooglePayButtonColor = 'default' | 'black' | 'white';\nexport type GooglePayButtonType =\n    | 'book'\n    | 'buy'\n    | 'checkout'\n    | 'donate'\n    | 'order'\n    | 'pay'\n    | 'plain'\n    | 'subscribe'\n    | 'long'\n    | 'short';\n\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n","import { GooglePayCardNetwork } from '../types';\n\nexport default function isGooglePayCardNetworkKey(\n    card: string,\n): card is keyof typeof GooglePayCardNetwork {\n    return card in GooglePayCardNetwork;\n}\n","import { round } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    createCurrencyService,\n    CurrencyService,\n    guard,\n    InvalidArgumentError,\n    itemsRequireShipping,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isGooglePayCardNetworkKey from '../guards/is-google-pay-card-network-key';\nimport {\n    CallbackIntentsType,\n    CallbackTriggerType,\n    ErrorReasonType,\n    ExtraPaymentData,\n    GooglePayCardDataResponse,\n    GooglePayCardNetwork,\n    GooglePayCardParameters,\n    GooglePayError,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePayMerchantInfo,\n    GooglePayPaymentDataRequest,\n    GooglePayRequiredPaymentData,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTransactionInfo,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from '../types';\n\nexport default class GooglePayGateway {\n    private _getPaymentMethodFn?: () => PaymentMethod<GooglePayInitializationData>;\n    private _isBuyNowFlow = false;\n    private _currencyCode?: string;\n    private _currencyService?: CurrencyService;\n\n    constructor(\n        private _gatewayIdentifier: string,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    mapToShippingAddressRequestBody({\n        shippingAddress,\n    }: GooglePayCardDataResponse): AddressRequestBody | undefined {\n        if (!shippingAddress) {\n            return;\n        }\n\n        const { company = '', phone = '' } =\n            this._paymentIntegrationService.getState().getShippingAddress() || {};\n\n        return this._mapToAddressRequestBody(shippingAddress, company, phone);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        const { billingAddress } = response.paymentMethodData.info;\n\n        if (!billingAddress) {\n            return;\n        }\n\n        const {\n            company = '',\n            phone = '',\n            email,\n            customFields = [],\n        } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        return {\n            ...this._mapToAddressRequestBody(billingAddress, company, phone, customFields),\n            email: email || response.email,\n        };\n    }\n\n    mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const {\n            paymentMethodData: {\n                tokenizationData: { token: nonce },\n                info: { cardNetwork: type, cardDetails: number },\n            },\n        } = response;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve({\n            nonce,\n            card_information: { type, number },\n            ...(this._isBuyNowFlow && {\n                cart_id: this._paymentIntegrationService.getState().getCart()?.id,\n            }),\n        });\n    }\n\n    async getRequiredData(): Promise<GooglePayRequiredPaymentData> {\n        const data: GooglePayRequiredPaymentData = { emailRequired: true };\n\n        if (!this._isShippingAddressRequired()) {\n            return data;\n        }\n\n        const state = await this._paymentIntegrationService.loadShippingCountries();\n        const allowedCountryCodes = state.getShippingCountries()?.map((country) => country.code);\n\n        return {\n            ...data,\n            shippingAddressRequired: true,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n                ...(allowedCountryCodes && { allowedCountryCodes }),\n            },\n            shippingOptionRequired: true,\n        };\n    }\n\n    getCallbackIntents(): CallbackIntentsType[] {\n        if (this._isShippingAddressRequired()) {\n            return [\n                CallbackIntentsType.OFFER,\n                CallbackIntentsType.SHIPPING_ADDRESS,\n                CallbackIntentsType.SHIPPING_OPTION,\n            ];\n        }\n\n        return [CallbackIntentsType.OFFER];\n    }\n\n    getCallbackTriggers(): { [key: string]: CallbackTriggerType[] } {\n        const state = this._paymentIntegrationService.getState();\n        // TODO remove this experiment usage after we make sure that coupons handling works fine\n        const isGooglePayCouponsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-2875.googlepay_coupons_handling'\n            ] || false;\n\n        const availableTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n            CallbackTriggerType.SHIPPING_OPTION,\n            ...(isGooglePayCouponsExperimentOn ? [CallbackTriggerType.OFFER] : []),\n        ];\n\n        const initializationTrigger = [CallbackTriggerType.INITIALIZE];\n        const addressChangeTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n        ];\n        const shippingOptionsChangeTriggers = [CallbackTriggerType.SHIPPING_OPTION];\n        const offerChangeTriggers = isGooglePayCouponsExperimentOn\n            ? [CallbackTriggerType.OFFER]\n            : [];\n\n        return {\n            availableTriggers,\n            initializationTrigger,\n            addressChangeTriggers,\n            shippingOptionsChangeTriggers,\n            offerChangeTriggers,\n        };\n    }\n\n    getNonce(methodId: string) {\n        const nonce = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(methodId)\n            .initializationData?.nonce;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve(nonce);\n    }\n\n    extraPaymentData(): Promise<undefined | ExtraPaymentData> {\n        return Promise.resolve(undefined);\n    }\n\n    getMerchantInfo(): GooglePayMerchantInfo {\n        const {\n            googleMerchantName: merchantName,\n            googleMerchantId: merchantId,\n            platformToken: authJwt,\n        } = this.getGooglePayInitializationData();\n\n        return { merchantName, merchantId, authJwt };\n    }\n\n    getTransactionInfo(): GooglePayTransactionInfo {\n        let currencyCode: string;\n\n        if (this._isBuyNowFlow) {\n            currencyCode = this._getCurrencyCodeOrThrow();\n        } else {\n            const { getCartOrThrow } = this._paymentIntegrationService.getState();\n\n            currencyCode = getCartOrThrow().currency.code;\n        }\n\n        const countryCode = this.getGooglePayInitializationData().storeCountry;\n\n        return {\n            ...(countryCode && { countryCode }),\n            currencyCode,\n            totalPriceStatus: TotalPriceStatusType.ESTIMATED,\n            totalPrice: '0',\n        };\n    }\n\n    getPaymentGatewayParameters():\n        | Promise<GooglePayGatewayParameters>\n        | GooglePayGatewayParameters {\n        const gatewayMerchantId = this.getGooglePayInitializationData().gatewayMerchantId;\n\n        if (!gatewayMerchantId) {\n            throw new InvalidArgumentError('Unable to proceed, gatewayMerchantId is missing.');\n        }\n\n        return {\n            gateway: this._gatewayIdentifier,\n            gatewayMerchantId,\n        };\n    }\n\n    getCardParameters(): GooglePayCardParameters {\n        const allowedCardNetworks = this.getPaymentMethod()\n            .supportedCards.filter(isGooglePayCardNetworkKey)\n            .map((key) => GooglePayCardNetwork[key]);\n\n        return {\n            allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n            allowedCardNetworks,\n            billingAddressRequired: true,\n            billingAddressParameters: {\n                format: 'FULL',\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._getPaymentMethodFn = getPaymentMethod;\n        this._isBuyNowFlow = Boolean(isBuyNowFlow);\n        this._currencyCode = currencyCode;\n\n        if (this._isBuyNowFlow) {\n            this._getCurrencyCodeOrThrow();\n        }\n\n        return Promise.resolve();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress?: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        if (shippingAddress) {\n            shippingAddress.name = shippingAddress.name || '';\n            shippingAddress.address1 = shippingAddress.address1 || '';\n        }\n\n        const mappedShippingAddress = this.mapToShippingAddressRequestBody({\n            shippingAddress,\n        } as GooglePayCardDataResponse);\n\n        if (mappedShippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(mappedShippingAddress);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            // Info: we can not return an empty data because shippingOptions should contain at least one element, it caused a developer exception\n            return;\n        }\n\n        const consignment = consignments[0];\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!this._currencyService) {\n            this._currencyService = createCurrencyService(storeConfig);\n        }\n\n        const availableShippingOptions = (consignment.availableShippingOptions || []).map(\n            this._getGooglePayShippingOption.bind(this),\n        );\n\n        const recommendedShippingOption = consignment.availableShippingOptions?.find(\n            (shippingOption) => shippingOption.isRecommended,\n        );\n\n        if (availableShippingOptions.length) {\n            const selectedShippingOptionId =\n                consignment.selectedShippingOption?.id ||\n                recommendedShippingOption?.id ||\n                availableShippingOptions[0]?.id;\n\n            if (!consignment.selectedShippingOption?.id && availableShippingOptions[0]) {\n                await this.handleShippingOptionChange(\n                    recommendedShippingOption?.id || availableShippingOptions[0].id,\n                );\n            }\n\n            return {\n                defaultSelectedOptionId: selectedShippingOptionId,\n                shippingOptions: availableShippingOptions,\n            };\n        }\n    }\n\n    async handleShippingOptionChange(optionId: string) {\n        if (optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    getTotalPrice(): string {\n        const { getCheckoutOrThrow, getCartOrThrow } = this._paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return totalPrice;\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        const { redemptionCodes: newCouponsState = [] } = offerData;\n        const { offers: appliedCoupons } = this.getAppliedCoupons();\n        let error;\n\n        await newCouponsState.reduce(async (promise, code) => {\n            await promise;\n\n            const exists = appliedCoupons.some(({ redemptionCode }) => redemptionCode === code);\n\n            if (exists) {\n                return;\n            }\n\n            const appliedCouponError = await this.applyCoupon(code);\n\n            if (appliedCouponError) {\n                error = appliedCouponError;\n            }\n        }, Promise.resolve());\n\n        await appliedCoupons.reduce(async (promise, coupon) => {\n            await promise;\n\n            const stillExists = newCouponsState.includes(coupon.redemptionCode);\n\n            if (!stillExists) {\n                await this._paymentIntegrationService.removeCoupon(coupon.redemptionCode);\n            }\n        }, Promise.resolve());\n\n        return {\n            newOfferInfo: this.getAppliedCoupons(),\n            error,\n        };\n    }\n\n    getAppliedCoupons(): GooglePayPaymentDataRequest['offerInfo'] {\n        const state = this._paymentIntegrationService.getState();\n        const { coupons } = state.getCheckout() || {};\n\n        const offers = (coupons || []).map((coupon) => {\n            const { displayName, code } = coupon;\n\n            return {\n                redemptionCode: code,\n                description: displayName,\n            };\n        });\n\n        return {\n            offers,\n        };\n    }\n\n    async applyCoupon(code: string): Promise<GooglePayError | void> {\n        let error: GooglePayError | undefined;\n\n        try {\n            await this._paymentIntegrationService.applyCoupon(code);\n        } catch (e) {\n            if (e instanceof Error) {\n                error = {\n                    reason: ErrorReasonType.OFFER_INVALID,\n                    message: e.message,\n                    intent: CallbackTriggerType.OFFER,\n                };\n            }\n\n            return error;\n        }\n    }\n\n    protected getGooglePayInitializationData(): GooglePayInitializationData {\n        return guard(\n            this.getPaymentMethod().initializationData,\n            () => new InvalidArgumentError('Missing initialization data.'),\n        );\n    }\n\n    protected getPaymentMethod(): PaymentMethod<GooglePayInitializationData> {\n        return guard(\n            this._getPaymentMethodFn,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        )();\n    }\n\n    protected getGatewayIdentifier(): string {\n        return this._gatewayIdentifier;\n    }\n\n    protected setGatewayIdentifier(gateway?: string) {\n        this._gatewayIdentifier = gateway || this.getGatewayIdentifier();\n    }\n\n    private _isShippingAddressRequired(): boolean {\n        const { getCartOrThrow, getStoreConfig, getShippingAddress } =\n            this._paymentIntegrationService.getState();\n\n        return (\n            getShippingAddress() === undefined &&\n            itemsRequireShipping(getCartOrThrow(), getStoreConfig())\n        );\n    }\n\n    private _mapToAddressRequestBody(\n        address: GooglePayFullBillingAddress,\n        company: string,\n        phone: string,\n        customFields?: AddressRequestBody['customFields'],\n    ): AddressRequestBody {\n        const {\n            name,\n            address1,\n            address2,\n            address3,\n            locality: city,\n            administrativeArea: stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phoneNumber,\n        } = address;\n        const [firstName, lastName] = this._getFirstAndLastName(name);\n\n        return {\n            firstName,\n            lastName,\n            company,\n            address1,\n            address2: `${address2} ${address3}`.trim(),\n            city: city || stateOrProvinceCode,\n            stateOrProvince: stateOrProvinceCode,\n            stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phone: phoneNumber || phone,\n            customFields: customFields || [],\n        };\n    }\n\n    private _getFirstAndLastName(fullName: string): [string, string] {\n        const nameParts = fullName.split(' ');\n\n        if (nameParts.length === 1) {\n            return [fullName, ''];\n        }\n\n        const firstName = nameParts.slice(0, -1).join(' ');\n        const lastName = nameParts[nameParts.length - 1];\n\n        return [firstName, lastName];\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n\n    private _getGooglePayShippingOption({\n        id,\n        cost,\n        description,\n        additionalDescription,\n    }: ShippingOption) {\n        const formattedCost = this._currencyService?.toCustomerCurrency(cost);\n        const state = this._paymentIntegrationService.getState();\n        const isNewShippingOptionsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-3540.googlepay_new_shipping_options_description'\n            ];\n\n        if (isNewShippingOptionsExperimentOn) {\n            return {\n                id,\n                label: `${formattedCost || cost} ${description}`,\n                description: additionalDescription,\n            };\n        }\n\n        return {\n            id,\n            label: description,\n            description: formattedCost || cost,\n        };\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * param config - The config object containing the currency configuration\n * returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(config: StoreConfig): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Cart } from '../cart';\nimport { StoreConfig } from '../config';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (config && cart.lineItems.customItems) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV2ScriptLoader,\n    isAdditionalActionRequiredErrorResponse,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAdyenV2 extends GooglePayGateway {\n    private _adyenClient?: AdyenClient;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _scriptLoader: AdyenV2ScriptLoader) {\n        super('adyen', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n        const state = this._service.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n        });\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n        const paymentMethod = super.getPaymentMethod();\n\n        return JSON.stringify({\n            type: paymentMethod.method,\n            googlePayToken: nonce,\n            browser_info: getBrowserInfo(),\n        });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<PaymentIntegrationSelectors | void> {\n        if (!isRequestError(error) || !isAdditionalActionRequiredErrorResponse(error.body)) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._service.submitPayment(payment);\n        } catch (e) {\n            return this.processAdditionalAction(e);\n        }\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Omit,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from './gateways/google-pay-gateway';\nimport GooglePayScriptLoader from './google-pay-script-loader';\nimport isGooglePayAdditionalActionProcessable from './guards/is-google-pay-additional-action-processable';\nimport {\n    GooglePayBaseCardPaymentMethod,\n    GooglePayButtonOptions,\n    GooglePayCardDataResponse,\n    GooglePayCardPaymentMethod,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayBaseRequest,\n    GooglePayInitializationData,\n    GooglePayIsReadyToPayRequest,\n    GooglePaymentsClient,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n} from './types';\n\nexport default class GooglePayPaymentProcessor {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _baseRequest: GooglePayGatewayBaseRequest = { apiVersion: 2, apiVersionMinor: 0 };\n    private _baseCardPaymentMethod?: GooglePayBaseCardPaymentMethod;\n    private _cardPaymentMethod?: GooglePayCardPaymentMethod;\n    private _paymentDataRequest?: GooglePayPaymentDataRequest;\n    private _isReadyToPayRequest?: GooglePayIsReadyToPayRequest;\n\n    constructor(\n        private _scriptLoader: GooglePayScriptLoader,\n        private _gateway: GooglePayGateway,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        googlePayPaymentOptions?: GooglePayPaymentOptions,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._paymentsClient = await this._scriptLoader.getGooglePaymentsClient(\n            getPaymentMethod().config.testMode,\n            googlePayPaymentOptions,\n        );\n\n        await this._gateway.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        this._buildButtonPayloads();\n    }\n\n    async initializeWidget() {\n        await this._buildWidgetPayloads();\n\n        await this._determineReadinessToPay();\n\n        this._prefetchGooglePaymentData();\n    }\n\n    getNonce(methodId: string) {\n        return this._gateway.getNonce(methodId);\n    }\n\n    async extraPaymentData() {\n        return this._gateway.extraPaymentData();\n    }\n\n    addPaymentButton(\n        containerId: string,\n        options: Omit<GooglePayButtonOptions, 'allowedPaymentMethods'>,\n    ): HTMLElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const paymentButton = this._getPaymentsClient().createButton({\n            ...options,\n            allowedPaymentMethods: [this._getBaseCardPaymentMethod()],\n        });\n\n        return container.appendChild(paymentButton);\n    }\n\n    async showPaymentSheet(): Promise<GooglePayCardDataResponse> {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        return this._getPaymentsClient().loadPaymentData(paymentDataRequest);\n    }\n\n    async setExternalCheckoutXhr(\n        provider: string,\n        response: GooglePayCardDataResponse,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response);\n    }\n\n    async setExternalCheckoutForm(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        siteLink?: string,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response, true, siteLink);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        return this._gateway.mapToBillingAddressRequestBody(response);\n    }\n\n    mapToShippingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): AddressRequestBody | undefined {\n        return this._gateway.mapToShippingAddressRequestBody(response);\n    }\n\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void> {\n        return isGooglePayAdditionalActionProcessable(this._gateway)\n            ? this._gateway.processAdditionalAction(error, methodId)\n            : Promise.reject(error);\n    }\n\n    async signOut(providerId: string): Promise<void> {\n        await this._requestSender.get(`/remote-checkout/${providerId}/signout`);\n    }\n\n    getCallbackTriggers() {\n        return this._gateway.getCallbackTriggers();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        return this._gateway.handleShippingAddressChange(shippingAddress);\n    }\n\n    async handleShippingOptionChange(optionId: string): Promise<void> {\n        await this._gateway.handleShippingOptionChange(optionId);\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        return this._gateway.handleCoupons(offerData);\n    }\n\n    getTotalPrice(): string {\n        return this._gateway.getTotalPrice();\n    }\n\n    async _setExternalCheckout(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        useFormPoster = false,\n        siteLink?: string,\n    ): Promise<void> {\n        const url = '/checkout.php';\n        const body = {\n            action: 'set_external_checkout',\n            provider,\n            ...(await this._gateway.mapToExternalCheckoutData(response)),\n        };\n\n        if (useFormPoster) {\n            return new Promise((resolve) => {\n                this._formPoster.postForm(\n                    siteLink ? `${siteLink}/checkout` : url,\n                    {\n                        ...body,\n                        card_information: JSON.stringify(body.card_information),\n                    },\n                    resolve,\n                );\n            });\n        }\n\n        await this._requestSender.post(url, {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body,\n        });\n    }\n\n    private _prefetchGooglePaymentData(): void {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo = this._gateway.getTransactionInfo();\n\n        this._getPaymentsClient().prefetchPaymentData(paymentDataRequest);\n    }\n\n    private async _determineReadinessToPay(): Promise<void> {\n        try {\n            const { result } = await this._getPaymentsClient().isReadyToPay(\n                this._getIsReadyToPayRequest(),\n            );\n\n            if (result === false) {\n                throw new PaymentMethodFailedError(\n                    'Google Pay is not supported by the current device and browser, please try another payment method.',\n                );\n            }\n        } catch (error) {\n            if (error instanceof PaymentMethodFailedError) {\n                throw error;\n            }\n\n            throw new PaymentMethodFailedError();\n        }\n    }\n\n    private _buildButtonPayloads() {\n        this._baseCardPaymentMethod = {\n            type: 'CARD',\n            parameters: this._gateway.getCardParameters(),\n        };\n    }\n\n    private async _buildWidgetPayloads(): Promise<void> {\n        const baseCardPaymentMethod = this._getBaseCardPaymentMethod();\n\n        this._cardPaymentMethod = {\n            ...baseCardPaymentMethod,\n            tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: await this._gateway.getPaymentGatewayParameters(),\n            },\n        };\n        this._paymentDataRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [this._cardPaymentMethod],\n            transactionInfo: this._gateway.getTransactionInfo(),\n            merchantInfo: this._gateway.getMerchantInfo(),\n            ...(await this._gateway.getRequiredData()),\n            callbackIntents: this._gateway.getCallbackIntents(),\n            offerInfo: this._gateway.getAppliedCoupons(),\n        };\n        this._isReadyToPayRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [baseCardPaymentMethod],\n        };\n    }\n\n    private _getBaseCardPaymentMethod(): GooglePayBaseCardPaymentMethod {\n        return this._getOrThrow(this._baseCardPaymentMethod);\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequest {\n        return this._getOrThrow(this._paymentDataRequest);\n    }\n\n    private _getIsReadyToPayRequest(): GooglePayIsReadyToPayRequest {\n        return this._getOrThrow(this._isReadyToPayRequest);\n    }\n\n    private _getPaymentsClient(): GooglePaymentsClient {\n        return this._getOrThrow(this._paymentsClient);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import GooglePayGateway from '../gateways/google-pay-gateway';\nimport { GooglePayAdditionalActionProcessable } from '../types';\n\nexport default function isGooglePayAdditionalActionProcessable(\n    gateway: GooglePayGateway,\n): gateway is GooglePayGateway & GooglePayAdditionalActionProcessable {\n    return 'processAdditionalAction' in gateway;\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","import { GooglePayErrorObject } from '../types';\n\nexport default function isGooglePayErrorObject(error: unknown): error is GooglePayErrorObject {\n    return typeof error === 'object' && error !== null && 'statusCode' in error;\n}\n","/**\n * A set of options that are required to initialize the GooglePay payment method\n *\n * If the customer chooses to pay with GooglePay, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n *\n * ```html\n * <!-- This is where the GooglePay button will be inserted -->\n * <div id=\"wallet-button\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     // Using GooglePay provided by Braintree as an example\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button'\n *     },\n * });\n * ```\n *\n * Additional event callbacks can be registered.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button',\n *         onError(error) {\n *             console.log(error);\n *         },\n *         onPaymentSelect() {\n *             console.log('Selected');\n *         },\n *     },\n * });\n * ```\n */\nexport default interface GooglePayPaymentInitializeOptions {\n    /**\n     * A container for loading spinner.\n     */\n    loadingContainerId?: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the GooglePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when GooglePay fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n\n/**\n * The recognized keys to pass the initialization options for Google Pay.\n */\nexport enum GooglePayKey {\n    ADYEN_V2 = 'googlepayadyenv2',\n    ADYEN_V3 = 'googlepayadyenv3',\n    AUTHORIZE_NET = 'googlepayauthorizenet',\n    BNZ = 'googlepaybnz',\n    BRAINTREE = 'googlepaybraintree',\n    PAYPAL_COMMERCE = 'googlepaypaypalcommerce',\n    BIGCOMMERCE_PAYMENTS = 'googlepay_bigcommerce_payments',\n    CHECKOUT_COM = 'googlepaycheckoutcom',\n    CYBERSOURCE_V2 = 'googlepaycybersourcev2',\n    ORBITAL = 'googlepayorbital',\n    STRIPE = 'googlepaystripe',\n    STRIPE_UPE = 'googlepaystripeupe',\n    STRIPE_OCS = 'googlepaystripeocs',\n    WORLDPAY_ACCESS = 'googlepayworldpayaccess',\n    TD_ONLINE_MART = 'googlepaytdonlinemart',\n}\n\n/**\n * The options that are required to initialize the GooglePay payment method.\n * They can be omitted unless you need to support GooglePay.\n */\nexport type WithGooglePayPaymentInitializeOptions = {\n    [k in GooglePayKey]?: GooglePayPaymentInitializeOptions;\n};\n","import { GooglePayKey } from '../google-pay-payment-initialize-options';\n\nexport default function isGooglePayKey(key: string): key is GooglePayKey {\n    return Object.values<string>(GooglePayKey).includes(key);\n}\n","import { round } from 'lodash';\n\nimport {\n    guard,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Omit,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { DEFAULT_CONTAINER_STYLES, LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport GooglePayPaymentInitializeOptions, {\n    WithGooglePayPaymentInitializeOptions,\n} from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    CallbackTriggerType,\n    ErrorReasonType,\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _loadingIndicator: LoadingIndicator;\n    private _loadingIndicatorContainer?: string;\n    private _paymentButton?: HTMLElement;\n    private _clickListener?: (event: MouseEvent) => unknown;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n\n    constructor(\n        protected _paymentIntegrationService: PaymentIntegrationService,\n        protected _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {\n        this._loadingIndicator = new LoadingIndicator({\n            containerStyles: DEFAULT_CONTAINER_STYLES,\n        });\n    }\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithGooglePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        const googlePayOptions = options[this._getMethodId()];\n\n        if (!googlePayOptions?.walletButton) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { walletButton, loadingContainerId, ...callbacks } = googlePayOptions;\n\n        this._loadingIndicatorContainer = loadingContainerId;\n\n        await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(this._getMethodId());\n\n        await this._googlePayPaymentProcessor.initialize(\n            () => paymentMethod,\n            this._getGooglePayClientOptions(paymentMethod.initializationData?.storeCountry),\n        );\n\n        this._addPaymentButton(walletButton, callbacks);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this._paymentIntegrationService.submitOrder();\n\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n        const extraData = await this._googlePayPaymentProcessor.extraPaymentData();\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: { nonce, ...extraData },\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error, payment.methodId);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._clickListener) {\n            this._paymentButton?.removeEventListener('click', this._clickListener);\n        }\n\n        this._paymentButton = undefined;\n        this._clickListener = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    protected _addPaymentButton(\n        walletButton: string,\n        callbacks: Omit<GooglePayPaymentInitializeOptions, 'walletButton'>,\n    ): void {\n        if (this._paymentButton) {\n            return;\n        }\n\n        const paymentButton = document.getElementById(walletButton);\n\n        if (!paymentButton) {\n            throw new InvalidArgumentError('Unable to proceed without a walletButton.');\n        }\n\n        this._paymentButton = paymentButton;\n        this._clickListener = this._handleClick(callbacks);\n\n        this._paymentButton.addEventListener('click', this._clickListener);\n    }\n\n    protected _handleClick({\n        onPaymentSelect,\n        onError,\n    }: Omit<GooglePayPaymentInitializeOptions, 'walletButton'>): (event: MouseEvent) => unknown {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            // TODO: Dispatch Widget Actions\n            try {\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                this._toggleLoadingIndicator(false);\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n\n            onPaymentSelect?.();\n        };\n    }\n\n    protected async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n\n        this._toggleLoadingIndicator(true);\n\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutXhr(this._getMethodId(), response);\n\n        await this._paymentIntegrationService.loadCheckout();\n        await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n        this._toggleLoadingIndicator(false);\n    }\n\n    protected _getMethodId(): keyof WithGooglePayPaymentInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    protected async _getIsSignedInOrThrow(): Promise<boolean> {\n        try {\n            return !!(await this._googlePayPaymentProcessor.getNonce(this._getMethodId()));\n        } catch (e) {\n            if (\n                e instanceof MissingDataError &&\n                e.subtype === MissingDataErrorType.MissingPaymentToken\n            ) {\n                return false;\n            }\n\n            throw e;\n        }\n    }\n\n    protected async _handleOfferTrigger(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<Partial<HandleCouponsOut>> {\n        let isSignedIn = false;\n        let errorMessage = 'Sign in to Google Pay first to apply or remove promo codes.';\n\n        try {\n            isSignedIn = await this._getIsSignedInOrThrow();\n        } catch (error) {\n            if (error instanceof MissingDataError) {\n                errorMessage = error.message;\n            }\n        }\n\n        // We can only apply/remove coupons on the payment step only if we are logged into Google Pay, otherwise we will get an error\n        if (isSignedIn) {\n            const { newOfferInfo, error } = await this._googlePayPaymentProcessor.handleCoupons(\n                offerData,\n            );\n\n            return {\n                newOfferInfo,\n                error,\n            };\n        }\n\n        return {\n            error: {\n                reason: ErrorReasonType.OFFER_INVALID,\n                message: errorMessage,\n                intent: CallbackTriggerType.OFFER,\n            },\n        };\n    }\n\n    protected _getGooglePayClientOptions(countryCode?: string): GooglePayPaymentOptions {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({ callbackTrigger, offerData }) => {\n                    const state = this._paymentIntegrationService.getState();\n                    // TODO remove this experiment usage after we make sure that coupons handling works fine\n                    const isGooglePayCouponsExperimentOn =\n                        state.getStoreConfigOrThrow().checkoutSettings.features[\n                            'PI-2875.googlepay_coupons_handling'\n                        ] || false;\n\n                    if (\n                        callbackTrigger !== CallbackTriggerType.INITIALIZE &&\n                        (!isGooglePayCouponsExperimentOn ||\n                            callbackTrigger !== CallbackTriggerType.OFFER)\n                    ) {\n                        return;\n                    }\n\n                    const { offerChangeTriggers } =\n                        this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._handleOfferTrigger(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    await this._paymentIntegrationService.loadCheckout();\n\n                    const { getCheckoutOrThrow, getCartOrThrow } =\n                        this._paymentIntegrationService.getState();\n                    const { code: currencyCode, decimalPlaces } = getCartOrThrow().currency;\n                    const totalPrice = round(\n                        getCheckoutOrThrow().outstandingBalance,\n                        decimalPlaces,\n                    ).toFixed(decimalPlaces);\n\n                    return {\n                        newTransactionInfo: {\n                            ...(countryCode && { countryCode }),\n                            currencyCode,\n                            totalPriceStatus: TotalPriceStatusType.FINAL,\n                            totalPrice,\n                        },\n                        ...(newOfferInfo && {\n                            newOfferInfo,\n                        }),\n                        ...(error && {\n                            error,\n                        }),\n                    };\n                },\n            },\n        };\n    }\n\n    private _toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this._loadingIndicatorContainer) {\n            this._loadingIndicator.show(this._loadingIndicatorContainer);\n        } else {\n            this._loadingIndicator.hide();\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayHostWindow, GooglePaymentsClient, GooglePayPaymentOptions } from './types';\n\nexport const GOOGLE_PAY_LIBRARY = 'https://pay.google.com/gp/p/js/pay.js';\n\nexport default class GooglePayScriptLoader {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _window: GooglePayHostWindow = window;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async getGooglePaymentsClient(\n        testMode = false,\n        options?: GooglePayPaymentOptions,\n    ): Promise<GooglePaymentsClient> {\n        await this._scriptLoader.loadScript(GOOGLE_PAY_LIBRARY);\n\n        if (!this._window.google) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (this._paymentsClient === undefined) {\n            this._paymentsClient = new this._window.google.payments.api.PaymentsClient({\n                environment: testMode ? 'TEST' : 'PRODUCTION',\n                ...(options ?? {}),\n            });\n        }\n\n        return this._paymentsClient;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport GooglePayScriptLoader from '../google-pay-script-loader';\n\nexport default function createGooglePayScriptLoader() {\n    return new GooglePayScriptLoader(getScriptLoader());\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV2ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAdyenV2Gateway from '../../gateways/google-pay-adyenv2-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2PaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAdyenV2Gateway(\n                paymentIntegrationService,\n                new AdyenV2ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAdyenV2PaymentStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV3HostWindow } from '../types';\n\nexport default class AdyenV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV3HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-5MvB4RnzvviA3VBT4KYABZ4HXNZG5LRqREEgd41xt/pf/QvKmsj2O9GuNuywRXx9',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-yvY2yFNR4WqIjPqP9MzjI+gJimmaJnAvj4rLHKvgJbgFD5fMuf8zIJrFJOW8Lhhf',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const checkout = await this._window.AdyenCheckout(configuration);\n\n        return checkout;\n    }\n}\n","import {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV3ScriptLoader,\n    isAdditionalActionRequiredErrorResponse,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAdyenV3 extends GooglePayGateway {\n    private _adyenClient?: AdyenClient;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _scriptLoader: AdyenV3ScriptLoader) {\n        super('adyen', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n        const state = this._service.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n        });\n\n        return Promise.resolve();\n    }\n\n    async processAdditionalAction(error: unknown): Promise<PaymentIntegrationSelectors | void> {\n        if (!isRequestError(error) || !isAdditionalActionRequiredErrorResponse(error.body)) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._service.submitPayment(payment);\n        } catch (e) {\n            return this.processAdditionalAction(e);\n        }\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n        const paymentMethod = super.getPaymentMethod();\n\n        return JSON.stringify({\n            type: paymentMethod.method,\n            googlePayToken: nonce,\n            browser_info: getBrowserInfo(),\n        });\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV3ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAdyenV3Gateway from '../../gateways/google-pay-adyenv3-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3PaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAdyenV3Gateway(\n                paymentIntegrationService,\n                new AdyenV3ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAdyenV3PaymentStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayAuthorizeNetInitializationData from '../guards/is-google-pay-authorizenet-initialization-data';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAuthorizeNetGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('authorizenet', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayAuthorizeNetInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.paymentGatewayId,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayAuthorizeNetInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayAuthorizeNetInitializationData {\n    return 'paymentGatewayId' in data;\n}\n\nexport default function assertsIsGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayAuthorizeNetInitializationData {\n    if (!isGooglePayAuthorizeNetInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetPaymentStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCheckoutComInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayCheckoutComInitializationData {\n    return 'checkoutcomkey' in data;\n}\n\nexport default function assertIsGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayCheckoutComInitializationData {\n    if (!isGooglePayCheckoutComInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    InvalidArgumentError,\n    isRequestError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayCheckoutComInitializationData from '../guards/is-google-pay-checkoutcom-initialization-data';\nimport { isGooglePayThreeDSecureResult } from '../guards/is-google-pay-threedsecure-result';\nimport assertIsGooglePayTokenObject from '../guards/is-google-pay-token-object';\nimport {\n    GooglePayAdditionalActionProcessable,\n    GooglePayCardDataResponse,\n    GooglePayCheckoutComTokenObject,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTokenObject,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCheckoutComGateway\n    extends GooglePayGateway\n    implements GooglePayAdditionalActionProcessable\n{\n    constructor(service: PaymentIntegrationService, private _requestSender: RequestSender) {\n        super('checkoutltd', service);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            if (\n                isRequestError(error) &&\n                isGooglePayThreeDSecureResult(error.body) &&\n                error.body.three_ds_result.code === 'three_d_secure_required'\n            ) {\n                return window.location.assign(error.body.three_ds_result.acs_url);\n            }\n\n            reject(error);\n        });\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayTokenObject(token);\n\n        data.nonce = await this._tokenize(token);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.checkoutcomkey,\n        };\n    }\n\n    private async _tokenize(token_data: GooglePayTokenObject): Promise<string> {\n        const url = this.getPaymentMethod().config.testMode\n            ? 'https://api.sandbox.checkout.com/tokens'\n            : 'https://api.checkout.com/tokens';\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        const { body } = await this._requestSender.post<GooglePayCheckoutComTokenObject>(url, {\n            credentials: false,\n            body: {\n                type: 'googlepay',\n                token_data,\n            },\n            headers: {\n                Authorization: data.checkoutcomkey,\n                'Content-Type': ContentType.Json,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return body.token;\n    }\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayThreeDSecureResult } from '../types';\n\nexport function isGooglePayThreeDSecureResult(\n    body: RequestError['body'],\n): body is GooglePayThreeDSecureResult {\n    if (typeof body !== 'object' || body === null) {\n        return false;\n    }\n\n    const threeDSBody = body as Partial<GooglePayThreeDSecureResult>;\n\n    return (\n        typeof threeDSBody.three_ds_result?.acs_url === 'string' &&\n        typeof threeDSBody.three_ds_result.code === 'string'\n    );\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayTokenObject } from '../types';\n\nfunction isGooglePayTokenObject(token: unknown): token is GooglePayTokenObject {\n    return (\n        typeof token === 'object' &&\n        token !== null &&\n        'protocolVersion' in token &&\n        'signature' in token &&\n        'signedMessage' in token\n    );\n}\n\nexport default function assertIsGooglePayTokenObject(\n    token: unknown,\n): asserts token is GooglePayTokenObject {\n    if (!isGooglePayTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComPaymentStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCybersourceGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('cybersource', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourcePaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourcePaymentStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayOrbitalGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('chase', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalPaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalPaymentStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayStripeInitializationData } from '../types';\n\nfunction isGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayStripeInitializationData {\n    return (\n        'stripeConnectedAccount' in data &&\n        'stripePublishableKey' in data &&\n        'stripeVersion' in data\n    );\n}\n\nexport default function assertsIsGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayStripeInitializationData {\n    if (!isGooglePayStripeInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    isRequestError,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayStripeInitializationData from '../guards/is-google-pay-stripe-initialization-data';\nimport isGooglePayStripeRequestError from '../guards/is-google-pay-stripe-request-error';\nimport assertIsGooglePayStripeTokenObject from '../guards/is-google-pay-stripe-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePaySetExternalCheckoutData,\n    GooglePayStripeGatewayParameters,\n} from '../types';\n\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\nimport { StripeError, StripeUPEClient } from './types';\n\nexport default class GooglePayStripeGateway extends GooglePayGateway {\n    private stripeUPEClient?: StripeUPEClient;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeUPEScriptLoader,\n    ) {\n        super('stripe', paymentIntegrationService);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayStripeTokenObject(token);\n\n        data.nonce = token.id;\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayStripeGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayStripeInitializationData(data);\n\n        const { stripeVersion, stripePublishableKey, stripeConnectedAccount } = data;\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            'stripe:version': stripeVersion,\n            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n        };\n    }\n\n    async processAdditionalAction(\n        error: unknown,\n        methodId?: string,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!isRequestError(error) || !isGooglePayStripeRequestError(error.body)) {\n            throw error;\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const isStripeGooglePay3dsExperimentIsOn =\n            state.getStoreConfig()?.checkoutSettings.features[\n                'STRIPE-476.enable_stripe_googlepay_3ds'\n            ];\n        const shouldTrigger3DS =\n            some(error.body.errors, { code: 'three_d_secure_required' }) &&\n            isStripeGooglePay3dsExperimentIsOn;\n\n        if (shouldTrigger3DS) {\n            const data = this.getGooglePayInitializationData();\n\n            assertsIsGooglePayStripeInitializationData(data);\n\n            const { stripePublishableKey, stripeConnectedAccount } = data;\n\n            this.stripeUPEClient = await this.loadStripeJs(\n                stripePublishableKey,\n                stripeConnectedAccount,\n            );\n\n            const clientSecret = error.body.three_ds_result.token;\n            let result;\n            let catchedConfirmError = false;\n\n            try {\n                result = await this.stripeUPEClient.confirmCardPayment(clientSecret);\n            } catch (_) {\n                try {\n                    result = await this.stripeUPEClient.retrievePaymentIntent(clientSecret);\n                } catch (__) {\n                    catchedConfirmError = true;\n                }\n            }\n\n            if (result?.error) {\n                this._throwDisplayableStripeError(result.error);\n\n                if (this._isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                throw new PaymentMethodFailedError();\n            }\n\n            if (!result?.paymentIntent && !catchedConfirmError) {\n                throw new RequestError();\n            }\n\n            return this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce: result?.paymentIntent?.id || clientSecret },\n            });\n        }\n\n        throw error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeUPEClient> {\n        if (this.stripeUPEClient) {\n            return this.stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(stripePublishableKey, stripeConnectedAccount);\n    }\n\n    private _isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private _throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayStripeTokenObject } from '../types';\n\nfunction isGooglePayStripeTokenObject(token: unknown): token is GooglePayStripeTokenObject {\n    return typeof token === 'object' && token !== null && 'id' in token;\n}\n\nexport default function assertIsGooglePayStripeTokenObject(\n    token: unknown,\n): asserts token is GooglePayStripeTokenObject {\n    if (!isGooglePayStripeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","interface AdditionalActionError {\n    three_ds_result: { token: string };\n    errors: Array<{ code: string }>;\n}\n\nconst isGooglePayStripeRequestError = (body: unknown): body is AdditionalActionError => {\n    return (\n        typeof body === 'object' && body !== null && 'three_ds_result' in body && 'errors' in body\n    );\n};\n\nexport default isGooglePayStripeRequestError;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeUPEClient } from './types';\n\nexport default class StripeUPEScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeUPEClient> {\n        let stripeClient = this.stripeWindow.bcStripeClient;\n\n        if (!stripeClient) {\n            const stripe = await this.load();\n\n            stripeClient = stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: [\n                    'payment_element_beta_2',\n                    'alipay_pm_beta_1',\n                    'link_default_integration_beta_1',\n                    'shipping_address_element_beta_1',\n                    'address_element_beta_1',\n                ],\n                apiVersion: '2020-03-02;alipay_beta=v1;link_beta=v1',\n            });\n\n            Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n        }\n\n        return stripeClient;\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n        }\n\n        if (!this.stripeWindow.Stripe) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripePaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripePaymentStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayWorldpayAccessGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('worldpay', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessPaymentStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","export const BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION = '3.128.0';\nexport const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5809.braintree_hosted_fields_fix_version')) {\n            return BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    preventCursorJumps?: boolean;\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n    [BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh',\n        [BraintreeModuleName.Paypal]:\n            'sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv',\n        [BraintreeModuleName.Venmo]:\n            'sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr',\n    },\n};\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import {\n    BraintreeGooglePayment,\n    BraintreeGooglePayThreeDSecure,\n    BraintreeSdk,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CancellablePromise,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayKey } from '../google-pay-payment-initialize-options';\nimport assertIsGooglePayBraintreeTokenObject from '../guards/is-google-pay-braintree-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayBraintreeGateway extends GooglePayGateway {\n    private _braintreeGooglePayment?: BraintreeGooglePayment;\n    private _service: PaymentIntegrationService;\n    private _methodId = GooglePayKey.BRAINTREE;\n\n    constructor(service: PaymentIntegrationService, private _braintreeSdk: BraintreeSdk) {\n        super('braintree', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        let paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.clientToken) {\n            const state = await this._service.loadPaymentMethod(this._methodId);\n\n            paymentMethod = state.getPaymentMethodOrThrow(this._methodId);\n        }\n\n        if (!paymentMethod.clientToken || !paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSdk.initialize(paymentMethod.clientToken);\n        this._braintreeGooglePayment = await this._braintreeSdk.getBraintreeGooglePayment();\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n\n        const { clientToken, initializationData } = super.getPaymentMethod();\n\n        if (!clientToken || !initializationData || !initializationData.card_information?.bin) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            isThreeDSecureEnabled,\n            card_information: { bin, isNetworkTokenized },\n        } = initializationData;\n\n        if (isThreeDSecureEnabled && !isNetworkTokenized) {\n            const threeDSecure = await this._braintreeSdk.getBraintreeThreeDS();\n\n            const { orderAmount } = this._service.getState().getOrderOrThrow();\n\n            const verification = await this._braintreePresent3DSChallenge(\n                threeDSecure,\n                orderAmount,\n                nonce,\n                bin,\n            );\n\n            return verification.nonce;\n        }\n\n        return nonce;\n    }\n\n    async extraPaymentData() {\n        return {\n            deviceSessionId: await this._getBraintreeDeviceData(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayBraintreeTokenObject(token);\n\n        data.nonce = token.androidPayCards[0].nonce;\n        data.card_information.bin = token.androidPayCards[0].details.bin;\n        data.card_information.isNetworkTokenized =\n            token.androidPayCards[0].details.isNetworkTokenized;\n\n        return data;\n    }\n\n    getCardParameters() {\n        return super.getCardParameters();\n    }\n\n    async getPaymentGatewayParameters(): Promise<GooglePayGatewayParameters> {\n        const braintreeGooglePayment = this.getBraintreeGooglePayment();\n\n        const request = braintreeGooglePayment.createPaymentDataRequest({\n            merchantInfo: super.getMerchantInfo(),\n            transactionInfo: super.getTransactionInfo(),\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            ...(await super.getRequiredData()),\n        });\n\n        return request.paymentMethodTokenizationParameters.parameters;\n    }\n\n    private getBraintreeGooglePayment(): BraintreeGooglePayment {\n        if (!this._braintreeGooglePayment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._braintreeGooglePayment;\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n        return deviceData;\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n        bin: string,\n    ) {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                bin,\n                nonce,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayBraintreeTokenObject } from '../types';\n\nfunction isGooglePayBraintreeTokenObject(token: unknown): token is GooglePayBraintreeTokenObject {\n    return typeof token === 'object' && token !== null && 'androidPayCards' in token;\n}\n\nexport default function assertIsGooglePayBraintreeTokenObject(\n    token: unknown,\n): asserts token is GooglePayBraintreeTokenObject {\n    if (!isGooglePayBraintreeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreePaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreePaymentStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: [\n                    'fastlane',\n                    'buttons',\n                    'payment-fields',\n                    'hosted-fields',\n                    'three-domain-secure',\n                ],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nfunction isGooglePayPaypalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (data.initializationData) {\n        return (\n            'attributionId' in data.initializationData &&\n            'isVenmoEnabled' in data.initializationData &&\n            'isGooglePayEnabled' in data.initializationData &&\n            'isPayPalCreditAvailable' in data.initializationData\n        );\n    }\n\n    return false;\n}\n\nexport default function assertsIsGooglePayPayPalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): asserts data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (!isGooglePayPaypalCommercePaymentMethod(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport { GooglePayConfig } from './types';\n\nexport default class GooglePayPaypalCommerceGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalCommerceSdk: PayPalCommerceSdk) {\n        super('paypalsb', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\nexport interface PayPalSDK {\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n        initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n    };\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport enum ConfirmOrderStatus {\n    Approved = 'APPROVED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n}\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-partner-attribution-id'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'card-fields'\n>;\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface PayPalGoogleSdk {\n    version: string;\n    getCorrelationID: () => void;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: Record<string, string>;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nimport { ConfirmOrderData, ConfirmOrderStatus } from './types';\n\nexport default class GooglePayPaypalCommercePaymentStrategy extends GooglePayPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _payPalCommerceSdk: PayPalCommerceSdk,\n        private _requestSender: RequestSender,\n    ) {\n        super(_paymentIntegrationService, _googlePayPaymentProcessor);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const { initializationData } = state.getPaymentMethodOrThrow<GooglePayInitializationData>(\n            this._getMethodId(),\n        );\n        const { orderId } = await this.getOrderId(cartId);\n\n        const { card_information } = initializationData || {};\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n\n        const confirmOrderData = {\n            tokenizationData: {\n                type: 'PAYMENT_GATEWAY',\n                token: atob(nonce),\n            },\n            info: {\n                cardNetwork: card_information?.type || '',\n                cardDetails: card_information?.number || '',\n            },\n            type: 'CARD',\n        };\n\n        await this.confirmOrder(orderId, confirmOrderData);\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            const paymentData = {\n                formattedPayload: {\n                    method_id: payment.methodId,\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error);\n        }\n    }\n\n    private async confirmOrder(orderId: string, confirmOrderData: ConfirmOrderData) {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<GooglePayPayPalCommerceInitializationData>(\n                this._getMethodId(),\n            );\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n\n        const payPalSDK = await this._payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currencyCode,\n            true,\n        );\n\n        const { status } = await payPalSDK\n            .Googlepay()\n            .confirmOrder({ orderId, paymentMethodData: confirmOrderData });\n\n        if (status === ConfirmOrderStatus.PayerActionRequired) {\n            await payPalSDK.Googlepay().initiatePayerAction({ orderId });\n\n            return Promise.resolve();\n        }\n\n        if (status !== ConfirmOrderStatus.Approved) {\n            throw new InvalidArgumentError('Payment is not approved.');\n        }\n\n        return Promise.resolve();\n    }\n\n    private async getOrderId(cartId: string): Promise<{ orderId: string }> {\n        const url = '/api/storefront/payments/googlepaypaypalcommercecheckout';\n        const requestData = {\n            cartId,\n            shouldSaveInstrument: false,\n        };\n\n        const { body } = await this._requestSender.post<{ orderId: string }>(url, {\n            headers: {\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                'Content-Type': ContentType.Json,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: requestData,\n        });\n\n        return body;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\nimport GooglePayPaypalCommercePaymentStrategy from './google-pay-paypal-commerce-payment-strategy';\n\nconst createGooglePayPayPalCommercePaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const payPalCommerceSdk = new PayPalCommerceSdk(getScriptLoader());\n\n    return new GooglePayPaypalCommercePaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(paymentIntegrationService, payPalCommerceSdk),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n        payPalCommerceSdk,\n        createRequestSender(),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommercePaymentStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './bigcommerce-payments-types';\n\nexport default class PayPalSdkHelper {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane', 'three-domain-secure'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { GooglePayConfig } from '../types';\n\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * BigCommercePayments SDK\n *\n */\nexport interface PayPalSDK {\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n        initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n    };\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport enum ConfirmOrderStatus {\n    Approved = 'APPROVED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n}\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-partner-attribution-id'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'card-fields'\n>;\n\nexport interface PayPalGoogleSdk {\n    version: string;\n    getCorrelationID: () => void;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: Record<string, string>;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n","import {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayConfig,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nexport default class GooglePayBigCommercePaymentsGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalSdkHelper: PayPalSdkHelper) {\n        super('googlepay_bigcommerce_payments', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\nimport {\n    GooglePayBigCommercePaymentsInitializationData,\n    GooglePayInitializationData,\n} from '../types';\n\nimport { ConfirmOrderData, ConfirmOrderStatus } from './types';\n\nexport default class GooglePayBigCommercePaymentsPaymentStrategy extends GooglePayPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _payPalSdkHelper: PayPalSdkHelper,\n        private _requestSender: RequestSender,\n    ) {\n        super(_paymentIntegrationService, _googlePayPaymentProcessor);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const { initializationData } = state.getPaymentMethodOrThrow<GooglePayInitializationData>(\n            this._getMethodId(),\n        );\n        const { orderId } = await this.getOrderId(cartId);\n\n        const { card_information } = initializationData || {};\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n\n        const confirmOrderData = {\n            tokenizationData: {\n                type: 'PAYMENT_GATEWAY',\n                token: atob(nonce),\n            },\n            info: {\n                cardNetwork: card_information?.type || '',\n                cardDetails: card_information?.number || '',\n            },\n            type: 'CARD',\n        };\n\n        await this.confirmOrder(orderId, confirmOrderData);\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            const paymentData = {\n                formattedPayload: {\n                    method_id: payment.methodId,\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error);\n        }\n    }\n\n    private async confirmOrder(orderId: string, confirmOrderData: ConfirmOrderData) {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<GooglePayBigCommercePaymentsInitializationData>(\n                this._getMethodId(),\n            );\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n\n        const payPalSDK = await this._payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currencyCode,\n            true,\n        );\n\n        const { status } = await payPalSDK\n            .Googlepay()\n            .confirmOrder({ orderId, paymentMethodData: confirmOrderData });\n\n        if (status === ConfirmOrderStatus.PayerActionRequired) {\n            await payPalSDK.Googlepay().initiatePayerAction({ orderId });\n\n            return Promise.resolve();\n        }\n\n        if (status !== ConfirmOrderStatus.Approved) {\n            throw new InvalidArgumentError('Payment is not approved.');\n        }\n\n        return Promise.resolve();\n    }\n\n    private async getOrderId(cartId: string): Promise<{ orderId: string }> {\n        const url = '/api/storefront/payments/googlepay_bigcommerce_paymentscheckout';\n        const requestData = {\n            cartId,\n            shouldSaveInstrument: false,\n        };\n\n        const { body } = await this._requestSender.post<{ orderId: string }>(url, {\n            headers: {\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                'Content-Type': ContentType.Json,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: requestData,\n        });\n\n        return body;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\nimport GooglePayBigCommercePaymentsPaymentStrategy from './google-pay-bigcommerce-payments-payment-strategy';\n\nconst createGooglePayBigCommercePaymentsPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const payPalSdkHelper = new PayPalSdkHelper(getScriptLoader());\n\n    return new GooglePayBigCommercePaymentsPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(paymentIntegrationService, payPalSdkHelper),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n        payPalSdkHelper,\n        createRequestSender(),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsPaymentStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { isTdOnlineMartAdditionalAction } from '../guards/is-google-pay-td-online-mart-additional-action';\nimport { ExtraPaymentData, TdOnlineMartThreeDSErrorBody } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayTdOnlineMartGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService, private formPoster: FormPoster) {\n        super('worldlinena', service);\n    }\n\n    async extraPaymentData(): Promise<ExtraPaymentData> {\n        return Promise.resolve({ browser_info: getBrowserInfo() });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from '../types';\n\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartPaymentStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    guard,\n    InvalidArgumentError,\n    NotImplementedError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCustomerInitializeOptions, {\n    WithGooglePayCustomerInitializeOptions,\n} from './google-pay-customer-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayCustomerInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options?: CustomerInitializeOptions & WithGooglePayCustomerInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        const googlePayOptions = options[this._getMethodId()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodId());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodId());\n        }\n\n        try {\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(paymentMethod.initializationData?.storeCountry),\n            );\n        } catch {\n            return;\n        }\n\n        this._addPaymentButton(googlePayOptions);\n    }\n\n    signIn(): Promise<void> {\n        return Promise.reject(\n            new NotImplementedError(\n                'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.',\n            ),\n        );\n    }\n\n    async signOut(): Promise<void> {\n        const providerId = this._paymentIntegrationService.getState().getPaymentId()?.providerId;\n\n        if (providerId) {\n            await this._googlePayPaymentProcessor.signOut(providerId);\n        }\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _getGooglePayClientOptions(countryCode?: string): GooglePayPaymentOptions {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                    offerData,\n                }) => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                        offerChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._googlePayPaymentProcessor.handleCoupons(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    await this._paymentIntegrationService.loadCheckout();\n\n                    const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n                    const { code: currencyCode } = this._paymentIntegrationService\n                        .getState()\n                        .getCartOrThrow().currency;\n\n                    return {\n                        newTransactionInfo: {\n                            ...(countryCode && { countryCode }),\n                            currencyCode,\n                            totalPriceStatus: TotalPriceStatusType.FINAL,\n                            totalPrice,\n                        },\n                        ...(availableShippingOptions && {\n                            newShippingOptionParameters: availableShippingOptions,\n                        }),\n                        ...(newOfferInfo && {\n                            newOfferInfo,\n                        }),\n                        ...(error && {\n                            error,\n                        }),\n                    };\n                },\n            },\n        };\n    }\n\n    private _addPaymentButton({\n        container,\n        buttonColor,\n        buttonType,\n        onClick,\n        onError,\n    }: GooglePayCustomerInitializeOptions): void {\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(container, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError, onClick),\n            });\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n        onClick: GooglePayCustomerInitializeOptions['onClick'],\n    ): (event: MouseEvent) => Promise<void> {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            if (onClick && typeof onClick === 'function') {\n                onClick();\n            }\n\n            // TODO: Dispatch Widget Actions\n            try {\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodId(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getMethodId(): keyof WithGooglePayCustomerInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2CustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2CustomerStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3CustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3CustomerStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeDotNetCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAuthorizeDotNetCustomerStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComCustomerStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCybersourceCustomerStrategy, [\n    { id: 'googlepaycybersourcev2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBnzCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBnzCustomerStrategy, [{ id: 'googlepaybnz' }]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayOrbitalCustomerStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayStripeCustomerStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeUpeCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayStripeUpeCustomerStrategy, [\n    { id: 'googlepaystripeupe' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayWorldpayAccessCustomerStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreePaymentStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreePaymentStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\n\nconst createGooglePayPayPalCommerceCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceSdk(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceCustomerStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\n\nconst createGooglePayBigCommercePaymentsCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(\n                paymentIntegrationService,\n                new PayPalSdkHelper(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsCustomerStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartCustomerStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import {\n    BuyNowCartCreationError,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithGooglePayButtonInitializeOptions } from './google-pay-button-initialize-option';\nimport GooglePayCustomerInitializeOptions from './google-pay-customer-initialize-options';\nimport { WithGooglePayPaymentInitializeOptions } from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayBuyNowInitializeOptions,\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n    private _buyNowCart?: Cart;\n    private _currencyCode?: string;\n    private _buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions;\n    private _countryCode?: string;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithGooglePayButtonInitializeOptions,\n    ): Promise<void> {\n        if (!options.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        if (!options.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" is not a valid key.',\n            );\n        }\n\n        const googlePayOptions = options[this._getMethodOrThrow()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { buyNowInitializeOptions, currencyCode, buttonColor, buttonType, onError } =\n            googlePayOptions;\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(\n                this._getMethodOrThrow(),\n            );\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        }\n\n        this._countryCode = paymentMethod.initializationData?.storeCountry;\n\n        if (buyNowInitializeOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._currencyCode = currencyCode;\n            this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n                !!buyNowInitializeOptions,\n                currencyCode,\n            );\n        } else {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n            );\n        }\n\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(options.containerId, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError),\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n    ): (event: MouseEvent) => Promise<void> {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            try {\n                if (this._buyNowInitializeOptions) {\n                    await this._createBuyNowCartOrThrow(this._buyNowInitializeOptions);\n                } else {\n                    await this._paymentIntegrationService.loadDefaultCheckout();\n                }\n\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && !this._buyNowCart?.lineItems.digitalItems.length) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodOrThrow(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getGooglePayClientOptions(): GooglePayPaymentOptions | undefined {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                    offerData,\n                }) => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                        offerChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._googlePayPaymentProcessor.handleCoupons(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    if (this._buyNowInitializeOptions) {\n                        return this._getBuyNowTransactionInfo(\n                            availableShippingOptions,\n                            newOfferInfo,\n                            error,\n                        );\n                    }\n\n                    return this._getTransactionInfo(availableShippingOptions, newOfferInfo, error);\n                },\n            },\n        };\n    }\n\n    private async _createBuyNowCartOrThrow(\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            try {\n                this._buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                await this._paymentIntegrationService.loadCheckout(this._buyNowCart.id);\n            } catch (error) {\n                if (typeof error === 'string') {\n                    throw new BuyNowCartCreationError(error);\n                }\n\n                throw error;\n            }\n        }\n    }\n\n    private _getBuyNowTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        if (!this._buyNowCart) {\n            return;\n        }\n\n        const { cartAmount } = this._buyNowCart;\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode: this._getCurrencyCodeOrThrow(),\n                totalPrice: totalPrice || String(cartAmount),\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private async _getTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        await this._paymentIntegrationService.loadCheckout();\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n        const { code: currencyCode } = this._paymentIntegrationService\n            .getState()\n            .getCartOrThrow().currency;\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private _getMethodOrThrow(): keyof WithGooglePayButtonInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreeButtonStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\n\nconst createGooglePayPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceSdk(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceButtonStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\n\nconst createGooglePayBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(\n                paymentIntegrationService,\n                new PayPalSdkHelper(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsButtonStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2ButtonStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3ButtonStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetButtonStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComButtonStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourceButtonStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalButtonStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripeButtonStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessButtonStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartButtonStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n"],"names":["StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","PaymentMethodClientUnavailableError","MissingDataErrorType","AdyenV2ScriptLoader","_scriptLoader","_stylesheetLoader","_window","window","load","configuration","Promise","all","loadStylesheet","environment","prepend","attributes","integrity","crossorigin","loadScript","async","AdyenCheckout","toResolvableModule","module","resolveIds","assign","isAdditionalActionRequiredErrorResponse","param","Array","isArray","errors","code","provider_data","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","getBrowserInfo","navigator","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","Date","getTimezoneOffset","toString","error","PaymentMethodCancelledError","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","InvalidArgumentError","bindMethodDecorator","_","key","descriptor","value","method","get","boundMethod","bind","defineProperty","set","CurrencyFormatter","currencySettings","decimalPlaces","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","amount","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","Math","abs","integerAmount","decimalAmount","_toFixed","split","parsedIntegerAmount","replace","join","toLowerCase","precision","round","toFixed","CurrencyService","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","currency","toCustomerCurrency","exchangeRate","toStoreCurrency","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","guard","errorFactory","PayPalCommerceIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","TotalPriceStatusType","GooglePayCardNetwork","CallbackIntentsType","ErrorReasonType","CallbackTriggerType","isGooglePayCardNetworkKey","card","GooglePayGateway","_gatewayIdentifier","_paymentIntegrationService","_isBuyNowFlow","mapToShippingAddressRequestBody","shippingAddress","company","phone","getState","getShippingAddress","_mapToAddressRequestBody","mapToBillingAddressRequestBody","response","billingAddress","paymentMethodData","info","email","customFields","getBillingAddress","mapToExternalCheckoutData","tokenizationData","token","nonce","cardNetwork","cardDetails","number","resolve","card_information","cart_id","getCart","id","getRequiredData","data","emailRequired","_isShippingAddressRequired","state","loadShippingCountries","allowedCountryCodes","getShippingCountries","map","country","shippingAddressRequired","shippingAddressParameters","phoneNumberRequired","shippingOptionRequired","getCallbackIntents","OFFER","SHIPPING_ADDRESS","SHIPPING_OPTION","getCallbackTriggers","isGooglePayCouponsExperimentOn","getStoreConfigOrThrow","checkoutSettings","features","availableTriggers","INITIALIZE","initializationTrigger","addressChangeTriggers","shippingOptionsChangeTriggers","offerChangeTriggers","getNonce","methodId","getPaymentMethodOrThrow","initializationData","extraPaymentData","undefined","getMerchantInfo","googleMerchantName","merchantName","googleMerchantId","merchantId","platformToken","authJwt","getGooglePayInitializationData","getTransactionInfo","currencyCode","_getCurrencyCodeOrThrow","getCartOrThrow","countryCode","storeCountry","totalPriceStatus","ESTIMATED","totalPrice","getPaymentGatewayParameters","gatewayMerchantId","gateway","getCardParameters","allowedAuthMethods","allowedCardNetworks","getPaymentMethod","supportedCards","filter","billingAddressRequired","billingAddressParameters","initialize","isBuyNowFlow","_getPaymentMethodFn","Boolean","_currencyCode","handleShippingAddressChange","address1","mappedShippingAddress","updateShippingAddress","consignments","getConsignments","consignment","storeConfig","_currencyService","availableShippingOptions","_getGooglePayShippingOption","recommendedShippingOption","find","shippingOption","isRecommended","length","selectedShippingOptionId","selectedShippingOption","handleShippingOptionChange","defaultSelectedOptionId","shippingOptions","optionId","selectShippingOption","getTotalPrice","getCheckoutOrThrow","outstandingBalance","handleCoupons","offerData","redemptionCodes","newCouponsState","offers","appliedCoupons","getAppliedCoupons","reduce","promise","some","redemptionCode","appliedCouponError","applyCoupon","coupon","includes","removeCoupon","newOfferInfo","coupons","getCheckout","displayName","description","e","reason","OFFER_INVALID","intent","getGatewayIdentifier","setGatewayIdentifier","getStoreConfig","cart","config","lineItems","physicalItems","lineItem","isShippingRequired","customItems","address","address2","address3","locality","city","administrativeArea","stateOrProvinceCode","postalCode","phoneNumber","firstName","lastName","_getFirstAndLastName","trim","stateOrProvince","fullName","nameParts","slice","cost","additionalDescription","formattedCost","label","GooglePayAdyenV2","service","_service","paymentMethod","_adyenClient","testMode","locale","storeProfile","storeLanguage","JSON","stringify","googlePayToken","browser_info","processAdditionalAction","body","payment","_handleAction","submitPayment","additionalAction","reject","adyenAction","parse","action","_getAdyenClient","createFromAction","onAdditionalDetails","additionalActionState","paymentPayload","paymentMethodType","paymentData","size","onError","mount","SDK_VERSION_HEADERS","PaymentMethodFailedError","GooglePayPaymentProcessor","_gateway","_requestSender","_formPoster","_baseRequest","apiVersion","apiVersionMinor","googlePayPaymentOptions","_paymentsClient","getGooglePaymentsClient","_buildButtonPayloads","initializeWidget","_buildWidgetPayloads","_determineReadinessToPay","_prefetchGooglePaymentData","addPaymentButton","containerId","options","container","document","querySelector","paymentButton","_getPaymentsClient","createButton","allowedPaymentMethods","_getBaseCardPaymentMethod","appendChild","showPaymentSheet","paymentDataRequest","_getPaymentDataRequest","loadPaymentData","setExternalCheckoutXhr","provider","_setExternalCheckout","setExternalCheckoutForm","siteLink","signOut","providerId","useFormPoster","url","postForm","post","headers","Accept","transactionInfo","prefetchPaymentData","result","isReadyToPay","_getIsReadyToPayRequest","_baseCardPaymentMethod","parameters","baseCardPaymentMethod","_cardPaymentMethod","tokenizationSpecification","_paymentDataRequest","merchantInfo","callbackIntents","offerInfo","_isReadyToPayRequest","_getOrThrow","PaymentArgumentInvalidError","invalidFields","OrderFinalizationNotRequiredError","DEFAULT_STYLES","color","backgroundColor","DEFAULT_CONTAINER_STYLES","position","ROTATION_ANIMATION","LoadingIndicator","styles","containerStyles","defineAnimation","buildContainer","indicator","buildIndicator","show","parentId","parent","getElementById","style","visibility","opacity","hide","handleTransitionEnd","removeEventListener","addEventListener","createElement","display","bottom","left","right","top","transition","setStyleAttribute","borderRadius","border","borderColor","margin","transform","transformStyle","animation","element","attrs","keys","k","setProperty","head","sheet","CSSStyleSheet","insertRule","isGooglePayErrorObject","GooglePayKey","isGooglePayKey","values","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_loadingIndicator","_methodId","googlePayOptions","_getMethodId","walletButton","loadingContainerId","callbacks","_loadingIndicatorContainer","loadPaymentMethod","_getGooglePayClientOptions","_addPaymentButton","execute","submitOrder","extraData","finalize","deinitialize","_clickListener","_paymentButton","_handleClick","onPaymentSelect","event","preventDefault","_interactWithPaymentSheet","err","_toggleLoadingIndicator","statusCode","updateBillingAddress","loadCheckout","_getIsSignedInOrThrow","_handleOfferTrigger","isSignedIn","errorMessage","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","couponsError","newTransactionInfo","FINAL","isLoading","GooglePayScriptLoader","google","payments","api","PaymentsClient","createGooglePayScriptLoader","getScriptLoader","paymentIntegrationService","getStylesheetLoader","createRequestSender","createFormPoster","AdyenV3ScriptLoader","GooglePayAdyenV3","GooglePayAuthorizeNetGateway","btoa","isGooglePayAuthorizeNetInitializationData","assertsIsGooglePayAuthorizeNetInitializationData","paymentGatewayId","ContentType","assertIsGooglePayCheckoutComInitializationData","isGooglePayCheckoutComInitializationData","GooglePayCheckoutComGateway","_resolve","threeDSBody","three_ds_result","acs_url","isGooglePayThreeDSecureResult","location","isGooglePayTokenObject","assertIsGooglePayTokenObject","_tokenize","checkoutcomkey","token_data","credentials","Authorization","Json","requestSender","GooglePayCybersourceGateway","GooglePayOrbitalGateway","DEFAULT_RESPONSE","status","RequestError","assertsIsGooglePayStripeInitializationData","isGooglePayStripeInitializationData","GooglePayStripeGateway","scriptLoader","isGooglePayStripeTokenObject","assertIsGooglePayStripeTokenObject","stripeVersion","stripePublishableKey","stripeConnectedAccount","isStripeGooglePay3dsExperimentIsOn","stripeUPEClient","loadStripeJs","clientSecret","catchedConfirmError","confirmCardPayment","retrievePaymentIntent","__","_throwDisplayableStripeError","_isCancellationError","paymentIntent","getStripeClient","stripeError","payment_intent","last_payment_error","indexOf","StripeUPEScriptLoader","stripeWindow","stripeAccount","stripeClient","bcStripeClient","betas","Stripe","GooglePayWorldpayAccessGateway","isExperimentEnabled","experimentName","fallbackValue","BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BraintreeSDKVersionManager","braintreeWindow","getSDKVersion","getPreloadedSDKVersion","braintree","preloadedVersion","VERSION","UnsupportedBrowserError","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BraintreeSdk","braintreeScriptLoader","clientToken","setClientToken","teardownModule","dataCollector","getClient","client","getClientTokenOrThrow","clientCreator","loadClient","create","authorization","getDataCollectorOrThrow","emptyDataCollector","deviceData","teardown","loadDataCollector","dataCollectorConfig","kount","isBraintreeError","KountNotEnabled","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","loadGooglePayment","getBraintreeThreeDS","threeDS","threeDSecure","load3DS","version","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","loadLocalPayment","getUsBankAccount","usBankAccount","loadUsBankAccount","getBraintreeVisaCheckout","visaCheckout","loadVisaCheckout","then","paypal","getVisaCheckoutSdk","visaCheckoutSDK","loadVisaCheckoutSdk","getVenmoCheckoutOrThrow","braintreeVenmo","venmoCheckout","loadVenmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","BRAINTREE_SDK_SCRIPTS_INTEGRITY","Client","PaypalCheckout","Paypal","LocalPayment","DataCollector","UsBankAccount","GooglePayment","ThreeDSecure","VisaCheckout","Venmo","HostedFields","Fastlane","BraintreeScriptLoader","braintreeHostWindow","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadHostedFields","V","hash","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","moduleName","CancellablePromise","cancellable","cancel","race","GooglePayBraintreeGateway","_braintreeSdk","BRAINTREE","_braintreeGooglePayment","bin","isThreeDSecureEnabled","isNetworkTokenized","orderAmount","getOrderOrThrow","_braintreePresent3DSChallenge","deviceSessionId","_getBraintreeDeviceData","isGooglePayBraintreeTokenObject","assertIsGooglePayBraintreeTokenObject","androidPayCards","details","createPaymentDataRequest","cardRequirements","billingAddressFormat","paymentMethodTokenizationParameters","verifyCard","onLookupComplete","_data","next","braintreeSdk","PayPalCommerceSdk","getPayPalFastlaneSdk","sessionId","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","loadPayPalSdk","getPayPalGooglePaySdk","initializesOnCheckoutPage","forceLoad","paypalGooglePay","paypalSdkScriptConfig","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","scriptOptions","transformConfig","scriptAttributes","scriptSrc","URLSearchParams","clientId","attributionId","commit","components","buyerCountry","isHostedCheckoutEnabled","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","enableAPMsFunding","disableAPMsFunding","apm","transformedConfig","assertsIsGooglePayPayPalCommercePaymentMethod","isGooglePayPaypalCommercePaymentMethod","GooglePayPaypalCommerceGateway","payPalCommerceSdk","googlePaySdk","googlepayConfig","Googlepay","INTERNAL_USE_ONLY","ConfirmOrderStatus","GooglePayPaypalCommercePaymentStrategy","_payPalCommerceSdk","cartId","orderId","getOrderId","confirmOrderData","atob","confirmOrder","formattedPayload","method_id","paypal_account","order_id","payPalSDK","PayerActionRequired","initiatePayerAction","Approved","requestData","shouldSaveInstrument","PayPalSdkHelper","BigCommercePaymentsIntent","GooglePayBigCommercePaymentsGateway","payPalSdkHelper","GooglePayBigCommercePaymentsPaymentStrategy","_payPalSdkHelper","GooglePayTdOnlineMartGateway","formPoster","errorBody","isObject","isTdOnlineMartAdditionalAction","threeDSResult","formUrl","payer_auth_request","threeDSSessionData","merchant_data","creq","NotImplementedError","GooglePayCustomerStrategy","_e","signIn","getPaymentId","executePaymentMethodCheckout","continueWithCheckoutCallback","remove","shippingOptionData","newShippingOptionParameters","buttonColor","buttonType","onClick","pathname","links","BuyNowCartCreationError","GooglePayButtonStrategy","_getMethodOrThrow","buyNowInitializeOptions","_countryCode","_buyNowInitializeOptions","loadDefaultCheckout","_createBuyNowCartOrThrow","_buyNowCart","digitalItems","_getBuyNowTransactionInfo","_getTransactionInfo","getBuyNowCartRequestBody","cartRequestBody","createBuyNowCart","cartAmount","String"],"sourceRoot":""}