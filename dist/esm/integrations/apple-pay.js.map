{"version":3,"file":"integrations/apple-pay.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts"],"sourcesContent":["export const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n};\n","export enum ApplePayGatewayType {\n    BRAINTREE = 'braintree',\n    BRAINTREE_FASTLANE = 'braintreeacceleratedcheckout',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayPaymentInitializeOptions } from './apple-pay-payment-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\ninterface ApplePayPromise {\n    resolve(): void;\n    reject(reason?: Error): void;\n}\n\nenum DefaultLabels {\n    Shipping = 'Shipping',\n    Subtotal = 'Subtotal',\n    StoreCredit = 'Store Credit',\n}\n\nexport default class ApplePayPaymentStrategy implements PaymentStrategy {\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _storeCreditLabel: string = DefaultLabels.StoreCredit;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithApplePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const { methodId } = options;\n\n        await this._applePayScriptLoader.loadSdk();\n\n        this._shippingLabel = options.applepay?.shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = options.applepay?.subtotalLabel || DefaultLabels.Subtotal;\n        this._storeCreditLabel = options.applepay?.storeCreditLabel || DefaultLabels.StoreCredit;\n\n        const state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n        const state = this._paymentIntegrationService.getState();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const request = this._getBaseRequest(state, paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        await this._paymentIntegrationService.submitOrder(\n            {\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n\n        applePaySession.begin();\n\n        return new Promise((resolve, reject) => {\n            this._handleApplePayEvents(applePaySession, paymentMethod, {\n                resolve,\n                reject,\n            });\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _getBaseRequest(\n        state: PaymentIntegrationSelectors,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const checkout = state.getCheckoutOrThrow();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const { grandTotal, isStoreCreditApplied, outstandingBalance } = checkout;\n\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        if (isStoreCreditApplied) {\n            const { storeCredit } = state.getCustomerOrThrow();\n\n            lineItems.push({\n                label: this._storeCreditLabel,\n                amount: `-${Math.min(grandTotal, storeCredit).toFixed(decimalPlaces)}`,\n            });\n        }\n\n        return {\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems,\n            total: {\n                label: storeName,\n                amount: `${outstandingBalance.toFixed(decimalPlaces)}`,\n                type: 'final',\n            },\n        };\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.oncancel = async () =>\n            promise.reject(new PaymentMethodCancelledError('Continue with applepay'));\n\n        applePaySession.onpaymentauthorized = (event: ApplePayJS.ApplePayPaymentAuthorizedEvent) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod, promise);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        const { token } = event.payment;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        try {\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return promise.resolve();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return promise.reject(\n                new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n            );\n        }\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        const state = this._paymentIntegrationService.getState();\n        let braintreePaymentMethod =\n            state.getPaymentMethod(ApplePayGatewayType.BRAINTREE_FASTLANE) ||\n            state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (!braintreePaymentMethod) {\n            await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n            braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n        }\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { assertApplePayWindow } from './apple-pay-session-factory';\n\nexport default class ApplePayScriptLoader {\n    private sdkVersion = '1.latest';\n\n    constructor(private scriptLoader: ScriptLoader) {}\n\n    async loadSdk() {\n        await this.scriptLoader.loadScript(\n            `https://applepay.cdn-apple.com/jsapi/${this.sdkVersion}/apple-pay-sdk.js`,\n        );\n\n        assertApplePayWindow(window);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayPaymentStrategy from './apple-pay-payment-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayPaymentStrategy: PaymentStrategyFactory<ApplePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayPaymentStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayPaymentStrategy, [{ id: 'applepay' }]);\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayCustomerInitializeOptions } from './apple-pay-customer-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _onError = noop;\n    private _onClick = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _hasApplePaySession = false;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithApplePayCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            container,\n            shippingLabel,\n            subtotalLabel,\n            onError = noop,\n            onClick = noop,\n            onPaymentAuthorize,\n        } = applepay;\n\n        this._shippingLabel = shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = subtotalLabel || DefaultLabels.Subtotal;\n        this._onAuthorizeCallback = onPaymentAuthorize;\n        this._onError = onError;\n        this._onClick = onClick;\n\n        let state = this._paymentIntegrationService.getState();\n\n        await this._applePayScriptLoader.loadSdk();\n\n        try {\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n\n        this._applePayButton = this._createButton(container);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Apple, the shopper must click on \"Apple Pay\" button.',\n        );\n    }\n\n    signOut(): Promise<void> {\n        throw new NotImplementedError('Need to do signout via apple.');\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement();\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', 'black');\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 36px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (this._hasApplePaySession) {\n            return;\n        }\n\n        this._onClick();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n        this._hasApplePaySession = true;\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                this._onError(err);\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            this._hasApplePaySession = false;\n\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                return this._onError(new PaymentMethodCancelledError());\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            return this._onError(error);\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return this._onError(error);\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayCustomerStrategy from './apple-pay-customer-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayCustomerStrategy: CustomerStrategyFactory<ApplePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayCustomerStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayCustomerStrategy, [{ id: 'applepay' }]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport ApplePayButtonInitializeOptions, {\n    WithApplePayButtonInitializeOptions,\n} from './apple-pay-button-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nexport enum ButtonStyleOption {\n    Black = 'black',\n    White = 'white',\n    WhiteBorder = 'white-border',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nconst getButtonStyle = (buttonStyle?: ButtonStyleOption): string => {\n    switch (buttonStyle) {\n        case ButtonStyleOption.White:\n            return 'white';\n\n        case ButtonStyleOption.WhiteBorder:\n            return 'white-outline';\n\n        case ButtonStyleOption.Black:\n        default:\n            return 'black';\n    }\n};\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _requiresShipping?: boolean;\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await this._applePayScriptLoader.loadSdk();\n\n        const { onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } = applepay;\n\n        this._requiresShipping = requiresShipping;\n\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        if (!buyNowInitializeOptions) {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const cart = state.getCart();\n\n        if (cart) {\n            await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n        }\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n\n        this._applePayButton = this._createButton(\n            containerId,\n            this._paymentMethod.initializationData?.styleOption,\n        );\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string, styleOption?: ButtonStyleOption): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement(styleOption);\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(styleOption?: ButtonStyleOption): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', getButtonStyle(styleOption));\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 40px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private async _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this._buyNowInitializeOptions &&\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const {\n                countryCode,\n                currencyCode,\n                merchantCapabilities,\n                supportedNetworks,\n                storeName,\n            } = this._paymentMethod.initializationData;\n\n            const request = this._getRequestWithEmptyTotal(\n                countryCode,\n                currencyCode,\n                supportedNetworks,\n                merchantCapabilities,\n            );\n\n            if (this._requiresShipping) {\n                request.requiredShippingContactFields?.push('postalAddress');\n            }\n\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\n\n            applePaySession.begin();\n        } else {\n            const state = this._paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const config = state.getStoreConfigOrThrow();\n            const checkout = state.getCheckoutOrThrow();\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(\n                applePaySession,\n                this._paymentMethod,\n                config.storeProfile.storeName,\n            );\n\n            applePaySession.begin();\n        }\n    }\n\n    private _getRequestWithEmptyTotal(\n        countryCode: string,\n        currencyCode: string,\n        supportedNetworks: string[],\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\n    ): ApplePayJS.ApplePayPaymentRequest {\n        return {\n            countryCode,\n            currencyCode,\n            supportedNetworks,\n            merchantCapabilities,\n            total: { label: '', amount: '0', type: 'pending' },\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n        };\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        storeName: string,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\n            applePaySession.onpaymentmethodselected = async () => {\n                await this._createBuyNowCart();\n                this._handlePaymentMethodSelected(applePaySession);\n            };\n        }\n\n        applePaySession.onshippingcontactselected = async (event) => {\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\n                await this._createBuyNowCart();\n            }\n\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.onshippingmethodselected = async (event) => {\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _createBuyNowCart() {\n        try {\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                cartRequestBody,\n            );\n\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\n\n            const state = this._paymentIntegrationService.getState();\n            const { shouldExecuteSpamCheck } = state.getCheckoutOrThrow();\n\n            if (shouldExecuteSpamCheck) {\n                await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n            }\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n\n        delete request.total.type;\n\n        applePaySession.completePaymentMethodSelection({\n            newTotal: request.total,\n            newLineItems: request.lineItems,\n        });\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n"],"names":["BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BraintreeSDKVersionManager","constructor","paymentIntegrationService","braintreeWindow","window","getSDKVersion","storeConfig","this","getState","getStoreConfig","features","checkoutSettings","getPreloadedSDKVersion","experimentName","fallbackValue","isExperimentEnabled","braintree","preloadedVersion","find","Object","values","module","VERSION","StandardError","Error","message","prototype","super","name","type","setPrototypeOf","__proto__","captureStackTrace","stack","UnsupportedBrowserError","NotInitializedErrorType","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","NotInitializedError","subtype","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","getErrorMessage","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BraintreeSdk","braintreeScriptLoader","initialize","clientToken","setClientToken","deinitialize","teardownModule","dataCollector","undefined","getClient","client","getClientTokenOrThrow","clientCreator","loadClient","create","authorization","getDataCollectorOrThrow","options","emptyDataCollector","deviceData","teardown","Promise","resolve","loadDataCollector","dataCollectorConfig","kount","error","Boolean","isBraintreeError","code","KountNotEnabled","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","all","loadGooglePayment","getBraintreeThreeDS","threeDS","threeDSecure","load3DS","version","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","loadLocalPayment","reject","getUsBankAccount","usBankAccount","loadUsBankAccount","getBraintreeVisaCheckout","visaCheckout","loadVisaCheckout","then","paypal","getVisaCheckoutSdk","testMode","visaCheckoutSDK","loadVisaCheckoutSdk","getVenmoCheckoutOrThrow","braintreeVenmo","venmoCheckout","loadVenmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","PaymentMethodClientUnavailableError","BRAINTREE_SDK_SCRIPTS_INTEGRITY","Client","PaypalCheckout","Paypal","LocalPayment","DataCollector","UsBankAccount","GooglePayment","ThreeDSecure","VisaCheckout","Venmo","HostedFields","Fastlane","ApplePayGatewayType","BraintreeScriptLoader","scriptLoader","braintreeHostWindow","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadHostedFields","V","hash","loadScript","async","attributes","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","moduleName","toResolvableModule","resolveIds","assign","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","OrderFinalizationNotRequiredError","PaymentMethodCancelledError","DefaultLabels","ApplePayPaymentStrategy","_requestSender","_paymentIntegrationService","_sessionFactory","_braintreeSdk","_applePayScriptLoader","_shippingLabel","Shipping","_subTotalLabel","Subtotal","_storeCreditLabel","StoreCredit","methodId","loadSdk","applepay","shippingLabel","subtotalLabel","storeCreditLabel","paymentMethod","loadPaymentMethod","getPaymentMethodOrThrow","initializationData","gateway","BRAINTREE","_initializeBraintreeSdk","execute","payload","payment","state","request","_getBaseRequest","applePaySession","submitOrder","useStoreCredit","begin","_handleApplePayEvents","finalize","checkout","getCheckoutOrThrow","cart","getCartOrThrow","config","getStoreConfigOrThrow","storeProfile","storeCountryCode","storeName","currency","decimalPlaces","merchantCapabilities","supportedNetworks","grandTotal","isStoreCreditApplied","outstandingBalance","lineItems","label","amount","subtotal","toFixed","taxes","forEach","tax","push","shippingCostTotal","storeCredit","getCustomerOrThrow","Math","min","countryCode","currencyCode","total","promise","onvalidatemerchant","event","body","merchantSession","_onValidateMerchant","completeMerchantValidation","err","oncancel","onpaymentauthorized","_onPaymentAuthorized","paymentData","validationURL","merchantId","location","hostname","post","paymentsUrl","credentials","headers","Accept","token","deviceSessionId","_getBraintreeDeviceData","id","formattedPayload","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","submitPayment","completePayment","ApplePaySession","STATUS_SUCCESS","STATUS_FAILURE","_","braintreePaymentMethod","getPaymentMethod","BRAINTREE_FASTLANE","assertApplePayWindow","isApplePayWindow","ApplePaySessionFactory","ApplePayScriptLoader","sdkVersion","getHost","createRequestSender","host","getScriptLoader","ScriptLoader","MissingDataErrorType","MissingDataError","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","NotImplementedError","ApplePayCustomerStrategy","_onAuthorizeCallback","noop","_onError","_onClick","_hasApplePaySession","container","onError","onClick","onPaymentAuthorize","_paymentMethod","_e","verifyCheckoutSpamProtection","_applePayButton","_createButton","addEventListener","_handleWalletButtonClick","bind","signIn","signOut","executePaymentMethodCheckout","continueWithCheckoutCallback","containerId","document","getElementById","applePayButton","_createApplePayButtonElement","appendChild","createElement","setAttribute","preventDefault","requiresShipping","physicalItems","length","requiredBillingContactFields","requiredShippingContactFields","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","url","get","loadCheckout","shippingAddress","_transformContactToAddress","shippingContact","updateShippingAddress","abort","selectionShippingOptionId","consignments","selectedShippingOption","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","filter","option","shippingOptions","description","cost","detail","additionalDescription","identifier","isRecommended","Array","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","shippingMethod","completeShippingMethodSelection","selectShippingOption","billingContact","transformedBillingAddress","transformedShippingAddress","emailAddress","phone","phoneNumber","updateBillingAddress","email","contact","firstName","givenName","lastName","familyName","city","locality","company","address1","addressLines","address2","postalCode","stateOrProvince","administrativeArea","stateOrProvinceCode","customFields","BuyNowCartCreationError","ButtonStyleOption","ApplePayButtonStrategy","buyNowInitializeOptions","_requiresShipping","_buyNowInitializeOptions","loadDefaultCheckout","getCart","styleOption","buttonStyle","White","WhiteBorder","Black","getButtonStyle","getBuyNowCartRequestBody","_getRequestWithEmptyTotal","onpaymentmethodselected","_createBuyNowCart","_handlePaymentMethodSelected","cartRequestBody","buyNowCart","createBuyNowCart","shouldExecuteSpamCheck","completePaymentMethodSelection"],"sourceRoot":""}