{"version":3,"file":"integrations/td-bank.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-base-instrument/is-base-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/td-online-mart.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/td-online-mart-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/isTdOnlineMartAdditionalAction.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/is-create-token-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/td-online-mart-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/create-td-online-mart-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","export interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport function isBaseInstrument(instrument: unknown): instrument is BaseInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    return (\n        'bigpayToken' in instrument &&\n        'defaultInstrument' in instrument &&\n        'provider' in instrument &&\n        'trustedShippingAddress' in instrument &&\n        'method' in instrument &&\n        'type' in instrument\n    );\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface TdOnlineMartHostWindow extends Window {\n    customcheckout?(): TDCustomCheckoutSDK;\n}\n\nexport interface TDCustomCheckoutSDK {\n    create(fieldType: FieldType, options?: FieldOptions): TdOnlineMartElement;\n    createToken(callback: (result: CreateTokenResponse) => void): void;\n}\n\nexport interface TdOnlineMartElement {\n    mount(cssSelector: string): void;\n    unmount(): void;\n}\n\nexport enum FieldType {\n    CARD_NUMBER = 'card-number',\n    CVV = 'cvv',\n    EXPIRY = 'expiry',\n}\n\nexport interface TDOnlineMartInput {\n    id: string;\n    fieldType: FieldType;\n    inputElement?: TdOnlineMartElement;\n}\n\ninterface CreateTokenResponse {\n    code: string;\n    error?: CreateTokenError;\n    token?: string;\n    last4?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nexport interface CreateTokenError {\n    field: string;\n    type: string;\n    message: string;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n\n// Note: The style property affects the remote styling of text inside the iframe input. The classes property updates the class list of the element the field is mounted to on your page.\ninterface FieldOptions {\n    placeholder?: string;\n    style?: Styles;\n    classes?: Classes;\n    brands?: string[];\n}\n\ninterface Classes {\n    base?: string;\n    complete?: string;\n    empty?: string;\n    focus?: string;\n    error?: string;\n}\n\ninterface Styles {\n    base?: CssStyles;\n    complete?: CssStyles;\n    empty?: CssStyles;\n    error?: CssStyles;\n}\n\ninterface CssStyles {\n    color?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontStyle?: string;\n    fontWeight?: string;\n    textDecoration?: string;\n    padding?: string;\n    paddingLeft?: string;\n    paddingTop?: string;\n    paddingRight?: string;\n    paddingBottom?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isBaseInstrument } from '@bigcommerce/checkout-sdk/utility';\n\nimport isCreateTokenError from './is-create-token-error';\nimport { isTdOnlineMartAdditionalAction } from './isTdOnlineMartAdditionalAction';\nimport {\n    FieldType,\n    TDCustomCheckoutSDK,\n    TDOnlineMartInput,\n    TdOnlineMartThreeDSErrorBody,\n} from './td-online-mart';\nimport TDOnlineMartScriptLoader from './td-online-mart-script-loader';\n\nexport default class TDOnlineMartPaymentStrategy implements PaymentStrategy {\n    private tdOnlineMartClient?: TDCustomCheckoutSDK;\n    private tdInputs: TDOnlineMartInput[] = [\n        {\n            id: 'ccNumber',\n            fieldType: FieldType.CARD_NUMBER,\n        },\n        {\n            id: 'ccCvv',\n            fieldType: FieldType.CVV,\n        },\n        {\n            id: 'ccExpiry',\n            fieldType: FieldType.EXPIRY,\n        },\n    ];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private tdOnlineMartScriptLoader: TDOnlineMartScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        const { methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.tdOnlineMartClient = await this.loadTDOnlineMartJs();\n\n        this.mountHostedFields(methodId);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!payment.methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paymentPayload = await this.getPaymentPayloadOrThrow(payment);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            await this.processWithAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.tdOnlineMartClient = undefined;\n\n        this.tdInputs.forEach(({ inputElement }: TDOnlineMartInput) => {\n            inputElement?.unmount();\n        });\n\n        return Promise.resolve();\n    }\n\n    private async getPaymentPayloadOrThrow(payment: OrderPaymentRequestBody) {\n        const { methodId, paymentData } = payment;\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n        const commonPaymentData = {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            browser_info: getBrowserInfo(),\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        };\n\n        if (\n            isHostedInstrumentLike(paymentData) &&\n            isVaultedInstrument(paymentData) &&\n            paymentData.instrumentId\n        ) {\n            const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n            const digitalItemsInCart = !!cart.lineItems.digitalItems.length;\n\n            const shouldAddVerificationToken =\n                !this.isTrustedVaultingInstrument(paymentData.instrumentId) || digitalItemsInCart;\n\n            return {\n                methodId,\n                paymentData: {\n                    ...commonPaymentData,\n                    instrumentId: paymentData.instrumentId,\n                    ...(shouldAddVerificationToken ? { nonce: paymentData.instrumentId } : {}),\n                },\n            };\n        }\n\n        let nonce: string;\n\n        try {\n            nonce = await this.getTokenOrThrow();\n        } catch (error) {\n            this.throwTokenizationError(error);\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                ...commonPaymentData,\n                nonce,\n            },\n        };\n    }\n\n    private mountHostedFields(methodId: string): void {\n        const options = this.getHostedFieldsOptions();\n        const tdOnlineMartClient = this.getTDOnlineMartClientOrThrow();\n\n        this.tdInputs.forEach((input: TDOnlineMartInput) => {\n            const inputId = `${methodId}-${input.id}`;\n\n            if (!document.getElementById(inputId)) {\n                return;\n            }\n\n            input.inputElement = tdOnlineMartClient.create(input.fieldType, options);\n            input.inputElement.mount(`#${inputId}`);\n        });\n    }\n\n    private async loadTDOnlineMartJs(): Promise<TDCustomCheckoutSDK> {\n        if (this.tdOnlineMartClient) {\n            return this.tdOnlineMartClient;\n        }\n\n        return this.tdOnlineMartScriptLoader.load();\n    }\n\n    private getTokenOrThrow(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.getTDOnlineMartClientOrThrow().createToken((result) => {\n                const { error, token } = result;\n\n                if (error || !token) {\n                    return reject(error);\n                }\n\n                resolve(token);\n            });\n        });\n    }\n\n    private getTDOnlineMartClientOrThrow(): TDCustomCheckoutSDK {\n        if (!this.tdOnlineMartClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.tdOnlineMartClient;\n    }\n\n    private async processWithAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n\n    private throwTokenizationError(error: unknown): never {\n        if (!isCreateTokenError(error)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        throw new Error(error.message);\n    }\n\n    private getHostedFieldsOptions() {\n        const style = {\n            error: {\n                color: '#d14343',\n            },\n        };\n\n        const classes = {\n            error: 'form-input--error',\n        };\n\n        return {\n            style,\n            classes,\n        };\n    }\n\n    private isTrustedVaultingInstrument(instrumentId: string): boolean {\n        const instruments = this.paymentIntegrationService.getState().getInstruments();\n\n        const findInstrument = instruments?.find(\n            (instrument) => isBaseInstrument(instrument) && instrument.bigpayToken === instrumentId,\n        );\n        const trustedShippingAddress = isBaseInstrument(findInstrument)\n            ? findInstrument.trustedShippingAddress\n            : {};\n\n        return !!trustedShippingAddress;\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from './td-online-mart';\n\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n/* eslint-enable @typescript-eslint/consistent-type-assertions */\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { CreateTokenError } from './td-online-mart';\n\nexport default function isCreateTokenError(error: unknown): error is CreateTokenError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'field' in error &&\n        'type' in error &&\n        'message' in error\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TDCustomCheckoutSDK, TdOnlineMartHostWindow } from './td-online-mart';\n\nexport default class TDOnlineMartScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private tdOnlineMartWindow: TdOnlineMartHostWindow = window,\n    ) {}\n\n    async load(): Promise<TDCustomCheckoutSDK> {\n        if (!this.tdOnlineMartWindow.customcheckout) {\n            await this.scriptLoader.loadScript(\n                'https://libs.na.bambora.com/customcheckout/1/customcheckout.js',\n            );\n        }\n\n        if (!this.tdOnlineMartWindow.customcheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.tdOnlineMartWindow.customcheckout();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport TDOnlineMartPaymentStrategy from './td-online-mart-payment-strategy';\nimport TDOnlineMartScriptLoader from './td-online-mart-script-loader';\n\nconst createTDOnlineMartPaymentStrategy: PaymentStrategyFactory<TDOnlineMartPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new TDOnlineMartPaymentStrategy(\n        paymentIntegrationService,\n        new TDOnlineMartScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createTDOnlineMartPaymentStrategy, [{ id: 'tdonlinemart' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["MissingDataErrorType","NotInitializedErrorType","StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","OrderFinalizationNotRequiredError","isHostedInstrumentLike","instrument","shouldSaveInstrument","shouldSetAsDefaultInstrument","getBrowserInfo","navigator","window","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","Date","getTimezoneOffset","toString","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","isBaseInstrument","FieldType","TDOnlineMartPaymentStrategy","paymentIntegrationService","tdOnlineMartScriptLoader","formPoster","tdInputs","id","fieldType","CARD_NUMBER","CVV","EXPIRY","initialize","options","methodId","tdOnlineMartClient","loadTDOnlineMartJs","mountHostedFields","execute","payload","payment","order","paymentPayload","getPaymentPayloadOrThrow","submitOrder","submitPayment","error","processWithAdditionalAction","finalize","Promise","reject","deinitialize","undefined","forEach","inputElement","unmount","resolve","paymentData","commonPaymentData","browser_info","Boolean","instrumentId","digitalItemsInCart","getState","getCartOrThrow","lineItems","digitalItems","length","shouldAddVerificationToken","isTrustedVaultingInstrument","nonce","getTokenOrThrow","throwTokenizationError","getHostedFieldsOptions","getTDOnlineMartClientOrThrow","input","inputId","document","getElementById","create","mount","load","createToken","result","token","errorBody","body","isObject","isArray","errors","some","code","isTdOnlineMartAdditionalAction","three_ds_result","threeDSResult","acs_url","formUrl","payer_auth_request","threeDSSessionData","merchant_data","creq","postForm","isCreateTokenError","style","color","classes","instruments","getInstruments","findInstrument","find","bigpayToken","trustedShippingAddress","PaymentMethodClientUnavailableError","TDOnlineMartScriptLoader","scriptLoader","tdOnlineMartWindow","customcheckout","loadScript","module","getScriptLoader","createFormPoster","resolveIds","assign"],"sourceRoot":""}