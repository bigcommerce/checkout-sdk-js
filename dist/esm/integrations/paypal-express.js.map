{"version":3,"file":"integrations/paypal-express.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/create-paypal-express-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/create-paypal-express-button-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","export interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithPaypalExpressPaymentInitializeOptions } from './paypal-express-payment-initialize-options';\nimport PaypalScriptLoader from './paypal-express-script-loader';\nimport { PaymentStatusTypes, PaypalHostWindow, PaypalSDK } from './paypal-express-types';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private paypalSdk?: PaypalSDK;\n    private paymentMethod?: PaymentMethod;\n    private useRedirectFlow = false;\n    private window: PaypalHostWindow;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: PaypalScriptLoader,\n    ) {\n        this.window = window;\n    }\n\n    async initialize(\n        options: PaymentInitializeOptions & WithPaypalExpressPaymentInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n        this.useRedirectFlow =\n            (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        const merchantId = this.paymentMethod.config.merchantId;\n\n        if (!this.isInContextEnabled() || !merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalSdk = await this.scriptLoader.loadPaypalSDK();\n\n        this.paypalSdk = paypalSdk;\n\n        this.paypalSdk.checkout.setup(merchantId, {\n            button: 'paypal-button',\n            environment: this.paymentMethod.config.testMode ? 'sandbox' : 'production',\n        });\n    }\n\n    deinitialize() {\n        if (this.isInContextEnabled() && this.paypalSdk) {\n            this.paypalSdk.checkout.closeFlow();\n            this.paypalSdk = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions) {\n        let state: PaymentIntegrationSelectors;\n        let redirectUrl: string | undefined;\n        const paypal = this.paypalSdk;\n\n        if (this.isAcknowledgedOrFinalized()) {\n            await this.paymentIntegrationService.submitOrder(payload, options);\n\n            return;\n        }\n\n        if (!this.isInContextEnabled() || this.useRedirectFlow) {\n            state = await this.paymentIntegrationService.submitOrder(payload, options);\n            redirectUrl = state.getPaymentRedirectUrl();\n\n            if (redirectUrl && this.window.top) {\n                this.window.top.location.href = redirectUrl;\n            }\n\n            // We need to hold execution so the consumer does not redirect us somewhere else\n            return new Promise<never>(noop);\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        try {\n            state = await this.paymentIntegrationService.submitOrder(payload, options);\n        } catch (error) {\n            paypal.checkout.closeFlow();\n\n            return Promise.reject(error);\n        }\n\n        redirectUrl = state.getPaymentRedirectUrl();\n\n        if (redirectUrl) {\n            paypal.checkout.startFlow(redirectUrl);\n        }\n\n        // We need to hold execution so the consumer does not redirect us somewhere else\n        return new Promise<never>(noop);\n    }\n\n    async finalize(options?: PaymentRequestOptions) {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && this.isAcknowledgedOrFinalized()) {\n            await this.paymentIntegrationService.finalizeOrder(options);\n\n            return Promise.resolve();\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private isAcknowledgedOrFinalized(): boolean {\n        const state = this.paymentIntegrationService.getState();\n\n        return (\n            state.getPaymentStatus() === PaymentStatusTypes.ACKNOWLEDGE ||\n            state.getPaymentStatus() === PaymentStatusTypes.FINALIZE\n        );\n    }\n\n    private isInContextEnabled(): boolean {\n        return !!(this.paymentMethod && this.paymentMethod.config.merchantId);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-express-types';\n\nexport default class PaypalScriptLoader {\n    private window: PaypalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async loadPaypalSDK(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n            ...(merchantId && {\n                attributes: { 'data-merchant-id': merchantId },\n            }),\n        };\n\n        await this.scriptLoader.loadScript(scriptSrc, options);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PaypalExpressPaymentStrategy from './paypal-express-payment-strategy';\nimport PaypalExpressScriptLoader from './paypal-express-script-loader';\n\nconst createPaypalExpressPaymentStrategy: PaymentStrategyFactory<PaypalExpressPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new PaypalExpressPaymentStrategy(\n        paymentIntegrationService,\n        new PaypalExpressScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createPaypalExpressPaymentStrategy, [\n    { id: 'paypalexpress', type: 'PAYMENT_TYPE_HOSTED' },\n    { id: 'paypalexpresscredit', type: 'PAYMENT_TYPE_HOSTED' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithPaypalExpressButtonInitializeOptions } from './paypal-express-button-initialize-options';\nimport PaypalScriptLoader from './paypal-express-script-loader';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal-express-types';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalExpressScriptLoader: PaypalScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!options.paypal) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalSDK = await this.paypalExpressScriptLoader.loadPaypalSDK(\n            paymentMethod.config.merchantId,\n        );\n\n        this.renderButton(options, paypalSDK);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n        paypalSDK: PaypalSDK,\n    ) {\n        const { containerId, methodId, paypal } = options;\n        const { allowCredit, clientId, onPaymentError, shouldProcessPayment, style } = paypal;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const merchantId = paymentMethod.config.merchantId;\n        const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n        const clientToken: PaypalClientToken = { [env]: clientId };\n        const fundingCreditOption = paypalSDK.FUNDING.CREDIT || 'credit';\n        const allowedSources = allowCredit ? [fundingCreditOption] : [];\n        const disallowedSources = !allowCredit ? [fundingCreditOption] : [];\n\n        return paypalSDK.Button.render(\n            {\n                env,\n                client: clientToken,\n                commit: shouldProcessPayment,\n                funding: {\n                    allowed: allowedSources,\n                    disallowed: disallowedSources,\n                },\n                style: this.getStyle(style),\n                payment: (_, actions) => this.setupPayment(merchantId, actions, onPaymentError),\n                onAuthorize: (data, actions) =>\n                    this.tokenizePayment(data, methodId, actions, shouldProcessPayment),\n            },\n            containerId,\n        );\n    }\n\n    private getStyle(style?: Omit<PaypalStyleOptions, 'height'>): PaypalStyleOptions {\n        const { color, fundingicons, label, layout, shape, size, tagline } = style || {};\n\n        return {\n            color,\n            fundingicons,\n            label,\n            layout,\n            shape: shape || PaypalButtonStyleShapeOption.RECT,\n            size: size === 'small' ? PaypalButtonStyleSizeOption.RESPONSIVE : size,\n            tagline,\n        };\n    }\n\n    private async setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        try {\n            const state = await this.paymentIntegrationService.loadDefaultCheckout();\n            const { id: cartId } = state.getCartOrThrow();\n            const host = state.getHost() || '';\n\n            const paymentRequest = await actions.request.post(\n                `${host}/api/storefront/payment/paypalexpress`,\n                { merchantId, cartId },\n                {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                },\n            );\n\n            return paymentRequest.id;\n        } catch (error) {\n            if (onError && error instanceof StandardError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        data: PaypalAuthorizeData,\n        methodId: string,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n    ): Promise<void> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const getPaymentData = await actions.payment.get(data.paymentID);\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            provider: paymentMethod.id,\n            action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n            paymentId: data.paymentID,\n            payerId: data.payerID,\n            payerInfo: JSON.stringify(getPaymentData.payer.payer_info),\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalExpressButtonStrategy, PaypalExpressScriptLoader } from './index';\n\nconst createPaypalExpressButtonStrategy: CheckoutButtonStrategyFactory<\n    PaypalExpressButtonStrategy\n> = (paymentIntegrationService) => {\n    return new PaypalExpressButtonStrategy(\n        paymentIntegrationService,\n        new PaypalExpressScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createPaypalExpressButtonStrategy, [{ id: 'paypalexpress' }]);\n"],"names":["MissingDataErrorType","NotInitializedErrorType","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","PaymentStatusTypes","__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","OrderFinalizationNotRequiredError","PaypalExpressPaymentStrategy","paymentIntegrationService","scriptLoader","useRedirectFlow","window","initialize","options","state","getState","paymentMethod","getPaymentMethodOrThrow","methodId","paypalexpress","merchantId","config","isInContextEnabled","paypalSdk","loadPaypalSDK","checkout","setup","button","environment","testMode","deinitialize","closeFlow","undefined","Promise","resolve","execute","payload","redirectUrl","paypal","isAcknowledgedOrFinalized","submitOrder","getPaymentRedirectUrl","top","location","href","noop","initXO","error","reject","startFlow","finalize","getOrder","finalizeOrder","getPaymentStatus","ACKNOWLEDGE","FINALIZE","PaymentMethodClientUnavailableError","PaypalScriptLoader","async","attributes","loadScript","getScriptLoader","id","InvalidArgumentError","SDK_VERSION_HEADERS","PaypalButtonStrategy","paypalExpressScriptLoader","formPoster","paypalSDK","renderButton","containerId","allowCredit","clientId","onPaymentError","shouldProcessPayment","style","env","clientToken","fundingCreditOption","FUNDING","CREDIT","allowedSources","disallowedSources","Button","render","client","commit","funding","allowed","disallowed","getStyle","payment","_","actions","setupPayment","onAuthorize","data","tokenizePayment","color","fundingicons","label","layout","shape","size","tagline","RECT","RESPONSIVE","onError","CheckoutButtonNotInitialized","loadDefaultCheckout","cartId","getCartOrThrow","host","getHost","request","post","headers","paymentID","payerID","getPaymentData","postForm","payment_type","provider","action","paymentId","payerId","payerInfo","JSON","stringify","payer","payer_info","createFormPoster"],"sourceRoot":""}