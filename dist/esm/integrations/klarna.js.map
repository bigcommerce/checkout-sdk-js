{"version":3,"file":"integrations/klarna.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarna-supported-countries.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarna/klarna-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarna/klarna-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarna/create-klarna-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarnav2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarnav2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarnav2-token-updater.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/create-klarnav2-payment-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","export const supportedCountries = [\n    'AT',\n    'BE',\n    'CA',\n    'CH',\n    'CZ',\n    'DE',\n    'DK',\n    'ES',\n    'FI',\n    'FR',\n    'GB',\n    'GR',\n    'IE',\n    'IT',\n    'NL',\n    'NO',\n    'NZ',\n    'PL',\n    'PT',\n    'SE',\n];\nexport const supportedCountriesRequiringStates = ['AU'];\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { includes } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    supportedCountries,\n    supportedCountriesRequiringStates,\n} from '../klarnav2/klarna-supported-countries';\n\nimport KlarnaCredit, {\n    KlarnaAddress,\n    KlarnaAuthorizationResponse,\n    KlarnaLoadResponse,\n    KlarnaUpdateSessionParams,\n} from './klarna-credit';\nimport { WithKlarnaPaymentInitializeOptions } from './klarna-payment-initialize-options';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy {\n    private klarnaCredit?: KlarnaCredit;\n    private unsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private klarnaScriptLoader: KlarnaScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithKlarnaPaymentInitializeOptions,\n    ): Promise<void> {\n        this.klarnaCredit = await this.klarnaScriptLoader.load();\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        this.unsubscribe = this.paymentIntegrationService.subscribe(\n            (state) => {\n                if (\n                    state.isPaymentMethodInitialized({\n                        methodId: options.methodId,\n                        gatewayId: options.gatewayId,\n                    })\n                ) {\n                    void this.loadWidget(options);\n                }\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        await this.loadWidget(options);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        const {\n            payment: { paymentData, ...paymentPayload },\n        } = payload;\n\n        const { authorization_token: authorizationToken } = await this.authorize();\n\n        await this.paymentIntegrationService.initializePayment(paymentPayload.methodId, {\n            authorizationToken,\n        });\n\n        await this.paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: paymentPayload,\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private async loadWidget(\n        options: PaymentInitializeOptions & WithKlarnaPaymentInitializeOptions,\n    ): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError(\n                'Unable to load widget because \"options.klarna\" argument is not provided.',\n            );\n        }\n\n        const {\n            methodId,\n            klarna: { container, onLoad },\n        } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        return new Promise<KlarnaLoadResponse>((resolve) => {\n            const paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethod(methodId);\n\n            if (!paymentMethod) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (!this.klarnaCredit || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this.klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n            this.klarnaCredit.load({ container }, (response) => {\n                if (onLoad) {\n                    onLoad(response);\n                }\n\n                resolve(response);\n            });\n        });\n    }\n\n    private getUpdateSessionData(\n        billingAddress: BillingAddress,\n        shippingAddress?: Address,\n    ): KlarnaUpdateSessionParams {\n        if (\n            !includes(\n                [...supportedCountries, ...supportedCountriesRequiringStates],\n                billingAddress.countryCode,\n            )\n        ) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this.mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this.mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this.needsStateCode(address.countryCode)\n                ? address.stateOrProvinceCode\n                : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private authorize(): Promise<KlarnaAuthorizationResponse> {\n        return new Promise((resolve, reject) => {\n            const state = this.paymentIntegrationService.getState();\n            const billingAddress = state.getBillingAddress();\n            const shippingAddress = state.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this.klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this.getUpdateSessionData(billingAddress, shippingAddress);\n\n            this.klarnaCredit.authorize(updateSessionData, (res) => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(private scriptLoader: ScriptLoader, private klarnaWindow: KlarnaWindow = window) {}\n\n    async load(): Promise<KlarnaCredit> {\n        if (!this.klarnaWindow.Klarna?.Credit) {\n            await this.scriptLoader.loadScript(SDK_URL);\n        }\n\n        if (!this.klarnaWindow.Klarna?.Credit) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.klarnaWindow.Klarna.Credit;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaPaymentStrategy from './klarna-payment-strategy';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nconst createKlarnaPaymentStrategy: PaymentStrategyFactory<KlarnaPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new KlarnaPaymentStrategy(\n        paymentIntegrationService,\n        new KlarnaScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createKlarnaPaymentStrategy, [{ id: 'klarna' }]);\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { includes } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport KlarnaPayments, {\n    KlarnaAddress,\n    KlarnaAuthorizationResponse,\n    KlarnaInitializationData,\n    KlarnaLoadResponse,\n    KlarnaUpdateSessionParams,\n} from './klarna-payments';\nimport {\n    supportedCountries,\n    supportedCountriesRequiringStates,\n} from './klarna-supported-countries';\nimport { WithKlarnaV2PaymentInitializeOptions } from './klarnav2-payment-initialize-options';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\nimport KlarnaV2TokenUpdater from './klarnav2-token-updater';\n\nexport default class KlarnaV2PaymentStrategy {\n    private klarnaPayments?: KlarnaPayments;\n    private unsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private klarnav2ScriptLoader: KlarnaV2ScriptLoader,\n        private klarnav2TokenUpdater: KlarnaV2TokenUpdater,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithKlarnaV2PaymentInitializeOptions,\n    ): Promise<void> {\n        this.klarnaPayments = await this.klarnav2ScriptLoader.load();\n\n        this.unsubscribe = this.paymentIntegrationService.subscribe(\n            (state) => {\n                if (\n                    state.isPaymentMethodInitialized({\n                        methodId: options.methodId,\n                        gatewayId: options.gatewayId,\n                    })\n                ) {\n                    void this.loadPaymentsWidget(options);\n                }\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        await this.loadPaymentsWidget(options);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        const {\n            payment: { ...paymentPayload },\n        } = payload;\n        const { gatewayId, methodId } = paymentPayload;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { id: cartId } = state.getCartOrThrow();\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n\n        await this.klarnav2TokenUpdater.klarnaOrderInitialization(cartId, clientToken);\n\n        const paymentMethodСategory = this.isKlarnaSingleRadioButtonEnabled()\n            ? gatewayId\n            : methodId;\n        const { authorization_token: authorizationToken } = await this.authorizeOrThrow(\n            paymentMethodСategory,\n            methodId,\n        );\n\n        await this.paymentIntegrationService.initializePayment(gatewayId, {\n            authorizationToken,\n        });\n\n        await this.paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: paymentPayload,\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private async loadPaymentsWidget(\n        options: PaymentInitializeOptions & WithKlarnaV2PaymentInitializeOptions,\n    ): Promise<KlarnaLoadResponse> {\n        if (!options.klarnav2) {\n            throw new InvalidArgumentError(\n                'Unable to load widget because \"options.klarnav2\" argument is not provided.',\n            );\n        }\n\n        const {\n            methodId,\n            gatewayId,\n            klarnav2: { container, onLoad },\n        } = options;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const params = { params: cartId };\n\n        await this.klarnav2TokenUpdater.updateClientToken(gatewayId, { params }).catch(() => {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        });\n\n        return new Promise<KlarnaLoadResponse>((resolve) => {\n            const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n            if (!this.klarnaPayments || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this.klarnaPayments.init({ client_token: paymentMethod.clientToken });\n            this.klarnaPayments.load(\n                {\n                    container,\n                    payment_method_category: this.isKlarnaSingleRadioButtonEnabled()\n                        ? paymentMethod.gateway\n                        : methodId,\n                },\n                (response) => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    resolve(response);\n                },\n            );\n        });\n    }\n\n    private getUpdateSessionData(\n        methodId: string,\n        billingAddress: BillingAddress,\n        shippingAddress?: Address,\n    ): KlarnaUpdateSessionParams {\n        if (\n            !includes(\n                [...supportedCountries, ...supportedCountriesRequiringStates],\n                billingAddress.countryCode,\n            )\n        ) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this.mapToKlarnaAddress(\n                methodId,\n                billingAddress,\n                billingAddress.email,\n            ),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this.mapToKlarnaAddress(\n                methodId,\n                shippingAddress,\n                billingAddress.email,\n            );\n        }\n\n        return data;\n    }\n\n    private needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private mapToKlarnaAddress(methodId: string, address: Address, email?: string): KlarnaAddress {\n        const state = this.paymentIntegrationService.getState();\n        const { checkoutSettings } = state.getStoreConfigOrThrow();\n        const paymentMethod = state.getPaymentMethodOrThrow<KlarnaInitializationData>(methodId);\n        const { enableBillie } = paymentMethod.initializationData || {};\n\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this.needsStateCode(address.countryCode)\n                ? address.stateOrProvinceCode\n                : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        if (\n            address.company &&\n            enableBillie &&\n            isExperimentEnabled(checkoutSettings.features, 'PI-3915.b2b_payment_session_for_klarna')\n        ) {\n            klarnaAddress.organization_name = address.company;\n        }\n\n        return klarnaAddress;\n    }\n\n    private async authorizeOrThrow(\n        paymentMethodСategory: string,\n        methodId: string,\n    ): Promise<KlarnaAuthorizationResponse> {\n        await this.paymentIntegrationService.loadCheckout();\n\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n\n        const updateSessionData = this.getUpdateSessionData(\n            methodId,\n            billingAddress,\n            shippingAddress,\n        );\n\n        return new Promise<KlarnaAuthorizationResponse>((resolve, reject) => {\n            if (!this.klarnaPayments) {\n                return reject(\n                    new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                );\n            }\n\n            this.klarnaPayments.authorize(\n                {\n                    payment_method_category: paymentMethodСategory,\n                },\n                updateSessionData,\n                (res) => {\n                    if (res.approved) {\n                        return resolve(res);\n                    }\n\n                    if (res.show_form) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n            );\n        });\n    }\n\n    private isKlarnaSingleRadioButtonEnabled(): boolean {\n        const { features } = this.paymentIntegrationService\n            .getState()\n            .getStoreConfigOrThrow().checkoutSettings;\n\n        return features['PI-4025.klarna_single_radio_button'];\n    }\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(features: Features, experimentName: string): boolean {\n    return features[experimentName] ?? true;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaPayments from './klarna-payments';\nimport KlarnaV2Window from './klarnav2-window';\n\nconst SDK_URL = 'https://x.klarnacdn.net/kp/lib/v1/api.js';\n\nexport default class KlarnaV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private klarnaWindow: KlarnaV2Window = window,\n    ) {}\n\n    async load(): Promise<KlarnaPayments> {\n        if (!this.klarnaWindow.Klarna?.Payments) {\n            await this.scriptLoader.loadScript(SDK_URL);\n        }\n\n        if (!this.klarnaWindow.Klarna?.Payments) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.klarnaWindow.Klarna.Payments;\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    PaymentMethod,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class KlarnaV2TokenUpdater {\n    constructor(private requestSender: RequestSender) {}\n\n    updateClientToken(\n        gatewayId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${gatewayId}`;\n\n        return this.requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    async klarnaOrderInitialization(\n        cartId: string,\n        clientToken: string | undefined,\n    ): Promise<void> {\n        const url = `/api/storefront/initialization/klarna`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                cartId,\n                clientToken,\n            },\n        };\n\n        await this.requestSender.put(url, options);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaV2PaymentStrategy from './klarnav2-payment-strategy';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\nimport KlarnaV2TokenUpdater from './klarnav2-token-updater';\n\nconst createKlarnaV2PaymentStrategy: PaymentStrategyFactory<KlarnaV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const requestSender = createRequestSender({ host: getHost() });\n\n    return new KlarnaV2PaymentStrategy(\n        paymentIntegrationService,\n        new KlarnaV2ScriptLoader(getScriptLoader()),\n        new KlarnaV2TokenUpdater(requestSender),\n    );\n};\n\nexport default toResolvableModule(createKlarnaV2PaymentStrategy, [{ gateway: 'klarna' }]);\n"],"names":["MissingDataErrorType","NotInitializedErrorType","__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","OrderFinalizationNotRequiredError","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","PaymentMethodCancelledError","DEFAULT_RESPONSE","body","headers","status","RequestError","response","errors","PaymentMethodInvalidError","supportedCountries","supportedCountriesRequiringStates","KlarnaPaymentStrategy","paymentIntegrationService","klarnaScriptLoader","initialize","options","klarnaCredit","load","unsubscribe","subscribe","state","isPaymentMethodInitialized","methodId","gatewayId","loadWidget","checkout","getCheckout","outstandingBalance","coupons","deinitialize","Promise","resolve","execute","payload","payment","paymentData","paymentPayload","authorization_token","authorizationToken","authorize","initializePayment","submitOrder","useStoreCredit","finalize","reject","klarna","container","onLoad","loadPaymentMethod","paymentMethod","getState","getPaymentMethod","clientToken","init","client_token","getUpdateSessionData","billingAddress","shippingAddress","includes","countryCode","data","billing_address","mapToKlarnaAddress","email","shipping_address","needsStateCode","address","klarnaAddress","street_address","address1","city","country","given_name","firstName","family_name","lastName","postal_code","postalCode","region","stateOrProvinceCode","stateOrProvince","address2","street_address2","phone","getBillingAddress","getShippingAddress","updateSessionData","res","approved","show_form","PaymentMethodClientUnavailableError","KlarnaScriptLoader","scriptLoader","klarnaWindow","window","Klarna","Credit","loadScript","getScriptLoader","id","KlarnaV2PaymentStrategy","klarnav2ScriptLoader","klarnav2TokenUpdater","klarnaPayments","loadPaymentsWidget","cartId","getCartOrThrow","getPaymentMethodOrThrow","klarnaOrderInitialization","isKlarnaSingleRadioButtonEnabled","authorizeOrThrow","klarnav2","params","updateClientToken","catch","payment_method_category","gateway","checkoutSettings","getStoreConfigOrThrow","enableBillie","initializationData","company","features","organization_name","loadCheckout","getBillingAddressOrThrow","ContentType","KlarnaV2ScriptLoader","Payments","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","KlarnaV2TokenUpdater","requestSender","timeout","url","Accept","JsonV1","put","getHost","createRequestSender","host"],"sourceRoot":""}