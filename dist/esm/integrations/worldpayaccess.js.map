{"version":3,"file":"integrations/worldpayaccess.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/worldpayaccess-integration/src/worldpayaccess-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/worldpayaccess-integration/src/create-worldpayaccess-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { merge, some } from 'lodash';\n\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    WithWorldpayAccessPaymentInitializeOptions,\n    WorldpayAccess3DSOptions,\n    WorldpayAccessAdditionalAction,\n    WorldpayAccessPaymentInitializeOptions,\n} from './worldpayaccess-payment-options';\n\nconst IFRAME_NAME = 'worldpay_hosted_payment_page';\nconst IFRAME_HIDDEN_NAME = 'worldpay_hosted_hidden_payment_page';\nconst PAYMENT_CANNOT_CONTINUE = 'Payment cannot continue';\n\nlet submit: (paymentPayload: OrderPaymentRequestBody) => Promise<void>;\n\nexport default class WorldpayAccessPaymentStrategy extends CreditCardPaymentStrategy {\n    private _initializeOptions?: WorldpayAccessPaymentInitializeOptions;\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithWorldpayAccessPaymentInitializeOptions,\n    ): Promise<void> {\n        this._initializeOptions = options && options.worldpay;\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return super.initialize(options);\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentInitializeOptions,\n    ): Promise<void> {\n        const { payment } = orderRequest;\n\n        submit = this._submitAdditionalAction();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            return await super.execute(orderRequest, options);\n        } catch (error) {\n            return this._processAdditionalAction(error, payment);\n        }\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        payment: OrderPaymentRequestBody,\n    ): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            return Promise.reject(error);\n        }\n\n        return new Promise((resolve, reject) => {\n            const messageEvent = async (event: MessageEvent) => {\n                if (typeof event.data !== 'string' || !this._isValidJsonWithSessionId(event.data)) {\n                    return reject(new Error(PAYMENT_CANNOT_CONTINUE));\n                }\n\n                window.removeEventListener('message', messageEvent);\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                iframeHidden.remove();\n\n                const data = JSON.parse(event.data);\n                const paymentPayload = merge({}, payment, {\n                    paymentData: { threeDSecure: { token: data.SessionId } },\n                });\n\n                try {\n                    resolve(await submit(paymentPayload));\n                } catch (submitError) {\n                    if (\n                        !isRequestError(submitError) ||\n                        !some(submitError.body.errors, { code: 'three_d_secure_required' })\n                    ) {\n                        return reject(submitError);\n                    }\n\n                    if (!this._initializeOptions) {\n                        return reject(\n                            new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                        );\n                    }\n\n                    const { onLoad } = this._initializeOptions;\n\n                    const frame = this._createIframe(submitError.body.three_ds_result);\n\n                    try {\n                        onLoad(frame, () => reject(new Error('Payment was cancelled')));\n                    } catch (onLoadError) {\n                        reject(new Error(PAYMENT_CANNOT_CONTINUE));\n                    }\n                }\n            };\n\n            window.addEventListener('message', messageEvent);\n\n            let iframeHidden: HTMLIFrameElement;\n\n            try {\n                iframeHidden = this._createHiddenIframe(error.body);\n            } catch (e) {\n                window.removeEventListener('message', messageEvent);\n                throw new Error(PAYMENT_CANNOT_CONTINUE);\n            }\n        });\n    }\n\n    private _createHiddenIframe(body: WorldpayAccessAdditionalAction): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        document.body.appendChild(iframe);\n\n        if (!iframe.contentWindow) {\n            throw new Error();\n        }\n\n        iframe.id = IFRAME_HIDDEN_NAME;\n        iframe.height = '0px';\n        iframe.width = '0px';\n\n        const form = document.createElement('form');\n        const formId = 'collectionForm';\n\n        form.id = formId;\n        form.name = 'devicedata';\n        form.method = 'post';\n\n        const url = body.additional_action_required.data.redirect_url;\n\n        form.action = url;\n\n        const inputBin = document.createElement('input');\n\n        inputBin.name = 'Bin';\n        inputBin.type = 'hidden';\n        inputBin.value = body.provider_data.source_id;\n        form.appendChild(inputBin);\n\n        const inputJWT = document.createElement('input');\n\n        inputJWT.name = 'JWT';\n        inputJWT.type = 'hidden';\n        inputJWT.value = body.provider_data.data;\n        form.appendChild(inputJWT);\n\n        const button = document.createElement('button');\n\n        button.type = 'submit';\n        button.id = 'btnsubmit';\n        form.appendChild(button);\n\n        if (navigator.userAgent.match('Firefox')) {\n            iframe.srcdoc = form.outerHTML;\n        } else {\n            iframe.contentWindow.document.body.appendChild(form);\n        }\n\n        const script = document.createElement('script');\n\n        script.innerHTML = `\n            document.getElementById('${formId}').submit();\n        `;\n        iframe.contentWindow.document.body.appendChild(script);\n\n        return iframe;\n    }\n\n    private _createIframe(data: WorldpayAccess3DSOptions): HTMLIFrameElement {\n        const form = document.createElement('form');\n\n        form.id = 'challengeForm';\n        form.method = 'POST';\n        form.action = data.acs_url;\n\n        const inputJWT = document.createElement('input');\n\n        inputJWT.name = 'JWT';\n        inputJWT.type = 'hidden';\n        inputJWT.value = data.payer_auth_request;\n        form.appendChild(inputJWT);\n\n        const merchant = document.createElement('input');\n\n        merchant.name = 'MD';\n        merchant.type = 'hidden';\n        merchant.value = `merchantSessionId=${data.merchant_data}`;\n        form.appendChild(merchant);\n\n        const script = document.createElement('script');\n\n        script.type = 'text/javascript';\n        script.innerHTML =\n            \"window.onload = function() { document.getElementById('challengeForm').submit(); }\";\n\n        const iframe = document.createElement('iframe');\n\n        iframe.name = IFRAME_NAME;\n        iframe.height = '400';\n        iframe.width = '100%';\n        iframe.srcdoc = `${form.outerHTML} ${script.outerHTML}`;\n\n        return iframe;\n    }\n\n    private _submitAdditionalAction() {\n        if (this._shouldRenderHostedForm) {\n            if (!this._hostedForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const hostedForm = this._hostedForm;\n\n            return async (paymentPayload: OrderPaymentRequestBody) => {\n                await hostedForm.submit(paymentPayload);\n            };\n        }\n\n        return async (paymentPayload: OrderPaymentRequestBody) => {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        };\n    }\n\n    private _isValidJsonWithSessionId(str: string) {\n        try {\n            const data = JSON.parse(str);\n\n            if (data.SessionId) {\n                return true;\n            }\n\n            return false;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport WorldpayAccessPaymetStrategy from './worldpayaccess-payment-strategy';\n\nconst createWorldpayAccessPaymentStrategy: PaymentStrategyFactory<WorldpayAccessPaymetStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new WorldpayAccessPaymetStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createWorldpayAccessPaymentStrategy, [{ id: 'worldpayaccess' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["NotInitializedErrorType","StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","OrderFinalizationNotRequiredError","PaymentArgumentInvalidError","invalidFields","join","NotInitializedError","subtype","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","getErrorMessage","CreditCardPaymentStrategy","_paymentIntegrationService","execute","payload","options","_isHostedPaymentFormEnabled","payment","methodId","gatewayId","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","initialize","_isHostedFieldAvailable","Promise","resolve","formOptions","creditCard","form","state","getState","paymentSettings","bigpayBaseUrl","host","getStoreConfigOrThrow","createHostedForm","attach","then","_hostedForm","deinitialize","detach","finalize","reject","order","paymentData","submitOrder","submitPayment","validate","submit","getPaymentMethodOrThrow","config","isHostedFormEnabled","values","fields","every","isNil","error","PAYMENT_CANNOT_CONTINUE","WorldpayAccessPaymentStrategy","_initializeOptions","worldpay","orderRequest","_submitAdditionalAction","_processAdditionalAction","some","body","errors","code","messageEvent","event","data","_isValidJsonWithSessionId","window","removeEventListener","iframeHidden","remove","JSON","parse","paymentPayload","merge","threeDSecure","token","SessionId","submitError","onLoad","frame","_createIframe","three_ds_result","onLoadError","addEventListener","_createHiddenIframe","e","iframe","document","createElement","appendChild","contentWindow","id","height","width","formId","method","url","additional_action_required","redirect_url","action","inputBin","value","provider_data","source_id","inputJWT","button","navigator","userAgent","match","srcdoc","outerHTML","script","innerHTML","acs_url","payer_auth_request","merchant","merchant_data","hostedForm","str","module","paymentIntegrationService","resolveIds","assign"],"sourceRoot":""}