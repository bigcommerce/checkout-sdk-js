{"version":3,"file":"integrations/cybersource.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-three-d-secure-flow.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/cybersource-integration/src/cybersource/cybersource-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/cybersource-integration/src/cybersource/create-cybersource-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-three-d-secure-flow-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-credit-card-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/cybersource-integration/src/cybersourcev2/cybersourcev2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/cybersource-integration/src/cybersourcev2/create-cybersourcev2-payment-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport {\n    HostedForm,\n    isRequestError,\n    isVaultedInstrument,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlow {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n        await this._cardinalClient.configure(await this._getClientToken(method));\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const { getCardInstrument, getPaymentMethodOrThrow } =\n            this._paymentIntegrationService.getState();\n\n        const { payment: { methodId = '', paymentData = {} } = {} } = payload;\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const bin = instrument ? instrument.iin : hostedForm && hostedForm.getBin();\n\n        if (bin) {\n            await this._cardinalClient.runBinProcess(bin);\n        }\n\n        try {\n            return await execute(\n                merge(payload, {\n                    payment: {\n                        paymentData: {\n                            threeDSecure: { token: getPaymentMethodOrThrow(methodId).clientToken },\n                        },\n                    },\n                }),\n                options,\n            );\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                throw error;\n            }\n\n            const threeDSecure = await this._cardinalClient.getThreeDSecureData(\n                error.body.three_ds_result,\n                this._getOrderData(),\n            );\n\n            if (!hostedForm) {\n                await this._paymentIntegrationService.submitPayment(\n                    merge(payload.payment, {\n                        paymentData: { threeDSecure },\n                    }),\n                );\n\n                return;\n            }\n\n            await hostedForm.submit(\n                merge(payload.payment, {\n                    paymentData: { threeDSecure },\n                }),\n            );\n        }\n    }\n\n    private async _getClientToken(method: PaymentMethod): Promise<string> {\n        if (method.clientToken) {\n            return method.clientToken;\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(method.id);\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(method.id);\n\n        return paymentMethod.clientToken || '';\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const state = this._paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n        const checkout = state.getCheckoutOrThrow();\n        const order = state.getOrderOrThrow();\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { ThreeDSecure, ThreeDSecureToken } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(\n        initializationType: K,\n        initializationData: CardinalInitializationDataMap[K],\n    ): void;\n    trigger(\n        event: CardinalTriggerEvents,\n        data?: string,\n    ): Promise<CardinalBinProcessResponse | void>;\n    continue(\n        paymentBrand: CardinalPaymentBrand,\n        continueObject: CardinalContinue,\n        order: CardinalPartialOrder,\n    ): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport type setupCompleteFn = (setupCompleteData: CardinalSetupCompletedData) => void;\nexport type validatedFn = (data: CardinalValidatedData, jwt?: string) => void;\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted]: setupCompleteFn;\n    [CardinalEventType.Validated]: validatedFn;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated?: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n    ChallengeCancel: string;\n}>;\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n\nexport type CardinalThreeDSecureToken = Pick<ThreeDSecure, 'xid'> | ThreeDSecureToken;\n","import { includes, noop } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    CreditCardInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethodFailedError,\n    ThreeDSecureToken,\n    ThreeDsResult,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalSDK,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData,\n} from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _provider = '';\n    private _testMode = false;\n    private _sdk?: Promise<CardinalSDK>;\n    private _configurationToken = '';\n\n    constructor(private _scriptLoader: CardinalScriptLoader) {}\n\n    load(provider: string, testMode = false): Promise<void> {\n        this._provider = provider;\n        this._testMode = testMode;\n\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(noop);\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._configurationToken) {\n            if (this._configurationToken === clientToken) {\n                return Promise.resolve();\n            }\n\n            this._sdk = this._scriptLoader.load(`${this._provider}.${Date.now()}`, this._testMode);\n        }\n\n        return this._getClientSDK().then(\n            (client) =>\n                new Promise<void>((resolve, reject) => {\n                    client.on(CardinalEventType.SetupCompleted, () => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        this._configurationToken = clientToken;\n\n                        resolve();\n                    });\n\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Error:\n                                if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                    reject(\n                                        new MissingDataError(\n                                            MissingDataErrorType.MissingPaymentMethod,\n                                        ),\n                                    );\n                                }\n\n                                reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                break;\n                        }\n                    });\n\n                    client.setup(CardinalInitializationType.Init, {\n                        jwt: clientToken,\n                    });\n                }),\n        );\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then((client) =>\n                client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(noop),\n            )\n            .then((result) => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(\n        threeDSecureData: ThreeDsResult,\n        orderData: CardinalOrderData,\n    ): Promise<ThreeDSecureToken> {\n        return this._getClientSDK().then((client) => {\n            return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                client.on(\n                    CardinalEventType.Validated,\n                    (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n\n                        if (!jwt) {\n                            return reject(\n                                new PaymentMethodFailedError(\n                                    data.ErrorDescription\n                                        ? data.ErrorDescription\n                                        : 'An error was encountered while processing the transaction.',\n                                ),\n                            );\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(\n                                        new PaymentMethodFailedError(data.ErrorDescription),\n                                    );\n                                } else if (\n                                    !data.Payment ||\n                                    !data.Payment.ExtendedData ||\n                                    data.Payment.ExtendedData.SignatureVerification !==\n                                        CardinalSignatureVerification.Yes\n                                ) {\n                                    return reject(\n                                        new PaymentMethodFailedError(\n                                            'Transaction signature could not be validated.',\n                                        ),\n                                    );\n                                }\n\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.Failure:\n                                return reject(\n                                    new PaymentMethodFailedError(\n                                        'User failed authentication or an error was encountered while processing the transaction.',\n                                    ),\n                                );\n\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    },\n                );\n\n                const continueObject = {\n                    AcsUrl: threeDSecureData.acs_url,\n                    Payload: threeDSecureData.merchant_data,\n                };\n\n                const partialOrder = this._mapToPartialOrder(\n                    orderData,\n                    threeDSecureData.payer_auth_request,\n                );\n\n                client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n            });\n        });\n    }\n\n    private _mapToPartialOrder(\n        orderData: CardinalOrderData,\n        transactionId: string,\n    ): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CardinalWindow = window) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader.loadScript(`${url}?v=${provider}`).then(() => {\n            if (!this._window.Cardinal) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.Cardinal;\n        });\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import { CardinalThreeDSecureFlow } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class CyberSourcePaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow,\n    ) {\n        super(_paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CyberSourcePaymentStrategy from './cybersource-payment-strategy';\n\nconst createCyberSourcePaymentStrategy: PaymentStrategyFactory<CyberSourcePaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CyberSourcePaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlow(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n};\n\nexport default toResolvableModule(createCyberSourcePaymentStrategy, [{ id: 'cybersource' }]);\n","import { merge, some } from 'lodash';\n\nimport {\n    HostedForm,\n    isCreditCardInstrument,\n    isRequestError,\n    isVaultedInstrument,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CardinalThreeDSecureToken } from './cardinal';\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlowV2 {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const { getCardInstrument } = this._paymentIntegrationService.getState();\n        const { payment = { methodId: '' } } = payload;\n        const { paymentData = {} } = payment;\n\n        try {\n            return await execute(payload, options);\n        } catch (error) {\n            if (isRequestError(error) && error.body?.status === 'additional_action_required') {\n                const token = error.body.additional_action_required?.data?.token;\n                const xid = error.body.three_ds_result?.payer_auth_request;\n\n                await this._cardinalClient.configure(token);\n\n                const bin = this._getBin(paymentData, getCardInstrument, hostedForm);\n\n                if (bin) {\n                    await this._cardinalClient.runBinProcess(bin);\n                }\n\n                try {\n                    return await this._submitPayment(payment, { xid }, hostedForm);\n                } catch (err) {\n                    if (\n                        isRequestError(err) &&\n                        some(err.body.errors, { code: 'three_d_secure_required' })\n                    ) {\n                        const threeDsResult = err.body.three_ds_result;\n                        const threeDsToken = threeDsResult?.payer_auth_request;\n\n                        await this._cardinalClient.getThreeDSecureData(\n                            threeDsResult,\n                            this._getOrderData(),\n                        );\n\n                        return this._submitPayment(payment, { token: threeDsToken }, hostedForm);\n                    }\n\n                    throw err;\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const store = this._paymentIntegrationService.getState();\n        const billingAddress = store.getBillingAddressOrThrow();\n        const shippingAddress = store.getShippingAddress();\n        const {\n            cart: {\n                currency: { code: currencyCode },\n                cartAmount: amount,\n            },\n        } = store.getCheckoutOrThrow();\n        const id = store.getOrderOrThrow().orderId.toString();\n\n        return { billingAddress, shippingAddress, currencyCode, id, amount };\n    }\n\n    private async _submitPayment(\n        payment: OrderPaymentRequestBody,\n        threeDSecure: CardinalThreeDSecureToken,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const paymentPayload = merge({}, payment, { paymentData: { threeDSecure } });\n\n        if (!hostedForm) {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        }\n\n        await hostedForm?.submit(paymentPayload);\n    }\n\n    private _getBin(\n        paymentData: NonNullable<OrderPaymentRequestBody['paymentData']>,\n        getCardInstrument: PaymentIntegrationSelectors['getCardInstrument'],\n        hostedForm?: HostedForm,\n    ): string {\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const ccNumber = isCreditCardInstrument(paymentData) && paymentData.ccNumber;\n        const hostedFormBin = hostedForm ? hostedForm.getBin() : ccNumber;\n        const bin = instrument ? instrument.iin : hostedFormBin;\n\n        return bin || '';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument } from './payment';\n\nexport default function isCreditCardInstrument(\n    instrument: unknown,\n): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return (\n        !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string'\n    );\n}\n","import { CardinalThreeDSecureFlowV2 } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class CyberSourceV2PaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        private _threeDSecureFlow: CardinalThreeDSecureFlowV2,\n    ) {\n        super(_paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlowV2,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CyberSourceV2PaymentStrategy from './cybersourcev2-payment-strategy';\n\nconst createCyberSourceV2PaymentStrategy: PaymentStrategyFactory<CyberSourceV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CyberSourceV2PaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlowV2(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n};\n\nexport default toResolvableModule(createCyberSourceV2PaymentStrategy, [\n    { id: 'cybersourcev2' },\n    { id: 'bnz' },\n    { id: 'barclays' },\n]);\n"],"names":["__webpack_require__","isVaultedInstrument","instrument","Boolean","instrumentId","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","error","MissingDataErrorType","NotInitializedErrorType","CardinalThreeDSecureFlow","constructor","_paymentIntegrationService","_cardinalClient","prepare","method","this","load","id","config","testMode","configure","_getClientToken","start","execute","payload","options","hostedForm","getCardInstrument","getPaymentMethodOrThrow","getState","payment","methodId","paymentData","bin","iin","getBin","runBinProcess","merge","threeDSecure","token","clientToken","some","body","errors","code","getThreeDSecureData","three_ds_result","_getOrderData","submitPayment","submit","loadPaymentMethod","state","billingAddress","getBillingAddressOrThrow","shippingAddress","getShippingAddress","checkout","getCheckoutOrThrow","order","getOrderOrThrow","currencyCode","cart","currency","orderId","toString","amount","cartAmount","StandardError","Error","message","super","name","type","setPrototypeOf","__proto__","captureStackTrace","stack","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","PaymentMethodFailedError","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","CardinalSignatureValidationErrors","CardinalEventType","CardinalInitializationType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","CardinalClient","_scriptLoader","_provider","_testMode","_configurationToken","provider","_sdk","then","noop","Promise","resolve","Date","now","_getClientSDK","client","reject","on","SetupCompleted","off","Validated","data","ActionCode","includes","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","trigger","BinProcess","catch","result","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","email","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ccNumber","ExpirationMonth","ccExpiry","month","ExpirationYear","year","NameOnAccount","ccName","CardCode","ccCvv","address","cardinalAddress","FirstName","firstName","LastName","lastName","Address1","address1","City","city","State","stateOrProvince","PostalCode","postalCode","CountryCode","countryCode","address2","Address2","phone","Phone1","PaymentMethodClientUnavailableError","CardinalScriptLoader","_window","window","url","loadScript","Cardinal","toResolvableModule","module","resolveIds","assign","InvalidArgumentError","OrderFinalizationNotRequiredError","PaymentArgumentInvalidError","invalidFields","join","CreditCardPaymentStrategy","_isHostedPaymentFormEnabled","gatewayId","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","initialize","_isHostedFieldAvailable","formOptions","creditCard","form","paymentSettings","bigpayBaseUrl","host","getStoreConfigOrThrow","createHostedForm","attach","_hostedForm","deinitialize","detach","finalize","submitOrder","validate","isHostedFormEnabled","values","fields","every","isNil","CyberSourcePaymentStrategy","_threeDSecureFlow","paymentMethod","is3dsEnabled","bind","paymentIntegrationService","getScriptLoader","CardinalThreeDSecureFlowV2","status","additional_action_required","xid","_getBin","_submitPayment","err","threeDsResult","threeDsToken","store","paymentPayload","card","isCreditCardInstrument","hostedFormBin","CyberSourceV2PaymentStrategy"],"sourceRoot":""}