{"version":3,"file":"integrations/bigcommerce-payments.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/create-bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-base-instrument/is-base-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-payments-provider-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/bigcommerce-payments-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/paypal-sdk-helper.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/storage/src/cookie-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/bigcommerce-payments-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-fastlane-styles.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-paypal-fastlane-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/bigcommerce-payments-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-fastlane-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/create-bigcommerce-payments-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-ratepay/bigcommerce-payments-ratepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-ratepay/create-bigcommerce-payments-ratepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/hosted-field-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/is-credit-card-form-fields.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/is-credit-card-vaulted-form-fields.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-credit-cards/bigcommerce-payments-credit-cards-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-payments-fastlane-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-credit-cards/create-bigcommerce-payments-credit-cards-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/bigcommerce-payments-alternative-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/create-bigcommerce-payments-alternative-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/checkout-buttons/default-checkout-button-height.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/bigcommerce-payments-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/create-bigcommerce-payments-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/create-bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-button-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n// TODO: rename BigCommercePaymentsSDKFunding to PayPalSDKFunding\nexport interface BigCommercePaymentsSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * BigCommerce Payments SDK\n *\n */\n\nexport interface BigCommercePaymentsCardFieldsConfig {\n    inputEvents: {\n        onChange(data: BigCommercePaymentsCardFieldsState): void;\n        onFocus(data: BigCommercePaymentsCardFieldsState): void;\n        onBlur(data: BigCommercePaymentsCardFieldsState): void;\n        onInputSubmitRequest(data: BigCommercePaymentsCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: BigCommercePaymentsCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: BigCommercePaymentsHostedFieldsRenderOptions['styles'];\n    onApprove(data: BigCommercePaymentsCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface BigCommercePaymentsCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface BigCommercePaymentsCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype BigCommercePaymentsCardFieldsCard = BigCommercePaymentsHostedFieldsCard;\n\nexport interface BigCommercePaymentsCardFieldsState {\n    cards: BigCommercePaymentsCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: BigCommercePaymentsCardFieldsFieldData;\n        cardNumberField: BigCommercePaymentsCardFieldsFieldData;\n        cardNameField?: BigCommercePaymentsCardFieldsFieldData;\n        cardExpiryField: BigCommercePaymentsCardFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface BigCommercePaymentsFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsCardFields {\n    isEligible(): boolean;\n    CVVField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    ExpiryField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NameField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NumberField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    submit(config?: BigCommercePaymentsCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<BigCommercePaymentsCardFieldsState>;\n}\n\nexport interface BigCommercePaymentsCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (\n        data: BigCommercePaymentsCardFieldsConfig,\n    ) => Promise<BigCommercePaymentsCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: BigCommercePaymentsSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(\n            data: BigCommercePaymentsHostedFieldsRenderOptions,\n        ): Promise<BigCommercePaymentsHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n    Messages(options: BigCommercePaymentsMessagesOptions): BigCommercePaymentsMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\n/**\n *\n * BigCommerce Payments BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * BigCommerce Payments Hosted Fields\n *\n */\nexport interface BigCommercePaymentsHostedFieldsRenderOptions {\n    fields?: {\n        number?: BigCommercePaymentsHostedFieldOption;\n        cvv?: BigCommercePaymentsHostedFieldOption;\n        expirationDate?: BigCommercePaymentsHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface BigCommercePaymentsHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsHostedFields {\n    submit(\n        options?: BigCommercePaymentsHostedFieldsSubmitOptions,\n    ): Promise<BigCommercePaymentsHostedFieldsApprove>;\n    getState(): BigCommercePaymentsHostedFieldsState;\n    on(eventName: string, callback: (event: BigCommercePaymentsHostedFieldsState) => void): void;\n}\n\nexport interface BigCommercePaymentsHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface BigCommercePaymentsHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface BigCommercePaymentsHostedFieldsState {\n    cards: BigCommercePaymentsHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationDate?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationMonth?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationYear?: BigCommercePaymentsHostedFieldsFieldData;\n        cvv?: BigCommercePaymentsHostedFieldsFieldData;\n        postalCode?: BigCommercePaymentsHostedFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments Payment fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * BigCommercePayments Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: BigCommercePaymentsMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from './bigcommerce-payments-request-sender';\nimport BigCommercePaymentsScriptLoader from './bigcommerce-payments-script-loader';\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsScriptLoader: BigCommercePaymentsScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.paypalSdk = await this.bigCommercePaymentsScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.bigCommercePaymentsRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.bigCommercePaymentsRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.bigCommercePaymentsRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/bigcommerce_payments`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'bigcommerce_payments',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsHostWindow,\n    BigCommercePaymentsInitializationData,\n    BigCommercePaymentsScriptParams,\n    ComponentsScriptType,\n    FundingType,\n    PayPalSDK,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsScriptLoader {\n    private window: BigCommercePaymentsHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: BigCommercePaymentsScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<BigCommercePaymentsScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<BigCommercePaymentsScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): BigCommercePaymentsScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'bigcommerce_payments_creditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsIntegrationService,\n    BigCommercePaymentsRequestSender,\n    BigCommercePaymentsScriptLoader,\n} from './index';\n\nconst createBigCommercePaymentsIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        new BigCommercePaymentsScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createBigCommercePaymentsIntegrationService;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","export interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport function isBaseInstrument(instrument: unknown): instrument is BaseInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    return (\n        'bigpayToken' in instrument &&\n        'defaultInstrument' in instrument &&\n        'provider' in instrument &&\n        'trustedShippingAddress' in instrument &&\n        'method' in instrument &&\n        'type' in instrument\n    );\n}\n","import { isBigCommercePaymentsProviderError } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    HostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentPayload,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isBaseInstrument } from '@bigcommerce/checkout-sdk/utility';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPaymentInitializeOptions, {\n    WithBigCommercePaymentsPaymentInitializeOptions,\n} from './bigcommerce-payments-payment-initialize-options';\n\nexport default class BigCommercePaymentsPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: BigCommercePaymentsButtons;\n    private bigcommerce_payments?: BigCommercePaymentsPaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBigCommercePaymentsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments } = options || {};\n\n        this.bigcommerce_payments = bigcommerce_payments;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.loadingIndicatorContainer = bigcommerce_payments.container.split('#')[1];\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (bigcommerce_payments.onInit && typeof bigcommerce_payments.onInit === 'function') {\n            bigcommerce_payments.onInit(() => this.renderButton(methodId, bigcommerce_payments));\n        }\n\n        if (\n            bigcommerce_payments.shouldRenderPayPalButtonOnInitialization === undefined ||\n            bigcommerce_payments.shouldRenderPayPalButtonOnInitialization\n        ) {\n            this.renderButton(methodId, bigcommerce_payments);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { onError } = this.bigcommerce_payments || {};\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const shouldHandleInstrumentDeclinedError =\n            features && features['PAYPAL-3438.handling_instrument_declined_error_ppc'];\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (this.isPayPalVaultedInstrumentPaymentData(paymentData) && !this.orderId) {\n            this.orderId = await this.createOrder();\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        const paymentPayload = this.isPayPalVaultedInstrumentPaymentData(paymentData)\n            ? this.prepareVaultedInstrumentPaymentPayload(methodId, this.orderId, paymentData)\n            : this.preparePaymentPayload(methodId, this.orderId, paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            if (this.isProviderError(error) && shouldHandleInstrumentDeclinedError) {\n                await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(payment.methodId);\n\n                await new Promise((_resolve, reject) => {\n                    if (this.bigcommerce_payments) {\n                        this.paypalButton?.close();\n                        this.renderButton(payment.methodId, this.bigcommerce_payments);\n                        this.handleError(new Error('INSTRUMENT_DECLINED'), onError);\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error, onError);\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    private prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: VaultedInstrument & HostedInstrument,\n    ): Payment {\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        const shouldConfirmInstrument = !this.isTrustedVaultingFlow(paymentData);\n\n        if (shouldConfirmInstrument) {\n            return {\n                methodId,\n                paymentData: {\n                    shouldSaveInstrument: shouldConfirmInstrument,\n                    shouldSetAsDefaultInstrument,\n                    formattedPayload: {\n                        paypal_account: {\n                            order_id: paypalOrderId,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                    bigpay_token: {\n                        token: instrumentId,\n                    },\n                },\n            },\n        };\n    }\n\n    private preparePaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n        const { container, onError, onRenderButton, onValidate, submitForm } = bigcommerce_payments;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () => this.createOrder(),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onError: (error) => this.handleError(error, onError),\n            onCancel: () => this.toggleLoadingIndicator(false),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleError(\n        error: unknown,\n        onError: BigCommercePaymentsPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private async createOrder(): Promise<string> {\n        const fieldsValues = this.getFieldsValues();\n\n        return this.bigCommercePaymentsIntegrationService.createOrder(\n            'bigcommerce_paymentscheckout',\n            {\n                shouldSaveInstrument: fieldsValues?.shouldSaveInstrument || false,\n            },\n        );\n    }\n\n    /**\n     *\n     * Vaulting flow methods\n     *\n     * */\n    private getFieldsValues(): HostedInstrument | undefined {\n        const { getFieldsValues } = this.bigcommerce_payments || {};\n\n        return typeof getFieldsValues === 'function' ? getFieldsValues() : undefined;\n    }\n\n    private isTrustedVaultingFlow(paymentData?: PaymentInstrumentPayload): boolean {\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            const state = this.paymentIntegrationService.getState();\n\n            const instruments = state.getInstruments();\n\n            const findInstrument = instruments?.find(\n                (instrument) =>\n                    isBaseInstrument(instrument) &&\n                    instrument.bigpayToken === paymentData.instrumentId,\n            );\n            const trustedShippingAddress = isBaseInstrument(findInstrument)\n                ? findInstrument.trustedShippingAddress\n                : {};\n\n            return !!trustedShippingAddress;\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Guards\n     *\n     */\n    private isPayPalVaultedInstrumentPaymentData(\n        paymentData?: PaymentInstrumentPayload,\n    ): paymentData is VaultedInstrument & HostedInstrument {\n        return (\n            !!paymentData && isVaultedInstrument(paymentData) && isHostedInstrumentLike(paymentData)\n        );\n    }\n\n    private isProviderError(error: unknown): boolean {\n        if (isBigCommercePaymentsProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === 'INSTRUMENT_DECLINED';\n        }\n\n        return false;\n    }\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isBigCommercePaymentsProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPaymentStrategy from './bigcommerce-payments-payment-strategy';\n\nconst createBigCommercePaymentsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPaymentStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import { HostedInstrument, NonceInstrument } from './payment';\n\ntype PaymentInstrument = CardInstrument | AccountInstrument | HostedInstrument | NonceInstrument;\n\nexport default PaymentInstrument;\n\nexport interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport interface CardInstrument extends BaseInstrument {\n    brand: string;\n    expiryMonth: string;\n    expiryYear: string;\n    iin: string;\n    last4: string;\n    type: 'card';\n    untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType;\n}\n\ninterface BaseAccountInstrument extends BaseInstrument {\n    method: string;\n    type: 'account' | 'bank';\n}\n\nexport interface PayPalInstrument extends BaseAccountInstrument {\n    externalId: string;\n    method: 'paypal';\n}\n\nexport interface AchInstrument extends BaseAccountInstrument {\n    issuer: string;\n    accountNumber: string;\n    type: 'bank';\n    method: 'ach' | 'ecp';\n}\n\nexport interface BankInstrument extends BaseAccountInstrument {\n    accountNumber: string;\n    issuer: string;\n    iban: string;\n    method: string;\n    type: 'bank';\n}\n\nexport type AccountInstrument = PayPalInstrument | BankInstrument | AchInstrument;\n\nexport interface VaultAccessToken {\n    vaultAccessToken: string;\n    vaultAccessExpiry: number;\n}\n\nexport interface SessionContext {\n    customerId: number;\n    storeId: string;\n    currencyCode?: string;\n}\n\nexport interface InstrumentRequestContext extends SessionContext {\n    authToken: string;\n}\n","import { CardInstrument, CustomerAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    fastlaneStyles?: FastlaneStylesSettings;\n    connectClientToken?: string; // TODO: remove when BCP Fastlane A/B test will be finished\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneStylingEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isBigCommercePaymentsAnalyticsV2Enabled?: boolean; // PayPal Fastlane related\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: remove when BCP Fastlane A/B test will be finished\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    threeDSVerificationMethod?: string;\n}\n\n/**\n *\n * PayPalHostWindow contains different\n * PayPal Sdk instances for different purposes\n *\n */\nexport interface PayPalHostWindow extends Window {\n    paypalFastlane?: PayPalFastlane;\n    paypalFastlaneSdk?: PayPalFastlaneSdk;\n    paypalMessages?: PayPalMessagesSdk;\n    paypalApms?: PayPalApmSdk;\n    paypalGooglePay?: PayPalGooglePaySdk;\n}\n\n/**\n *\n * PayPal SDK config\n *\n */\nexport interface PayPalSdkConfig {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'enable-funding'?: EnableFundingType;\n        'disable-funding'?: FundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: PayPalSdkComponents;\n    };\n    attributes: {\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n        'data-namespace'?: string;\n        'data-client-token'?: string;\n        'data-sdk-client-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type PayPalSdkComponents = Array<\n    'fastlane' | 'messages' | 'buttons' | 'payment-fields' | 'googlepay' | 'three-domain-secure'\n>;\n\n/**\n *\n * PayPal Sdk instances\n *\n */\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\nexport interface threeDSecureParameters {\n    amount: string;\n    currency: string;\n    nonce: string;\n    threeDSRequested: boolean;\n    transactionContext: {\n        experience_context: {\n            brand_name?: string;\n            locale: string;\n            return_url: string;\n            cancel_url: string;\n        };\n    };\n}\n\nexport interface PayPalFastlaneSdk {\n    ThreeDomainSecureClient: {\n        isEligible(params: threeDSecureParameters): Promise<boolean>;\n        show(): Promise<ThreeDomainSecureClientShowResponse>;\n    };\n    Fastlane(options?: PayPalFastlaneOptions): Promise<PayPalFastlane>;\n}\n\ninterface ThreeDomainSecureClientShowResponse {\n    liabilityShift: LiabilityShiftEnum;\n    authenticationState: TDSecureAuthenticationState;\n    nonce: string; // Enriched nonce or the original nonce\n}\n\nexport interface PayPalMessagesSdk {\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PayPalApmSdk {\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n}\n\nexport interface PayPalGooglePaySdk {\n    Googlepay(): GooglePay;\n}\n\nexport enum TDSecureAuthenticationState {\n    Succeeded = 'succeeded',\n    Cancelled = 'cancelled',\n    Errored = 'errored',\n}\n\n/**\n *\n * Google Pay related types\n *\n */\n\ninterface GooglePay {\n    config: () => Promise<GooglePayConfig>;\n    confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n    initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: PayPalButtonApproveCallbackPayload,\n        actions: PayPalButtonApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(\n        data: PayPalButtonInitCallbackPayload,\n        actions: PayPalButtonInitCallbackActions,\n    ): Promise<void>;\n    onClick?(\n        data: PayPalButtonClickCallbackPayload,\n        actions: PayPalButtonClickCallbackActions,\n    ): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n}\n\nexport interface PayPalButtonClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface PayPalButtonClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface PayPalButtonInitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface PayPalButtonInitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalButtonApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface PayPalButtonApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments PaymentFields fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayLater Messages related types\n * doc: https://developer.paypal.com/docs/checkout/pay-later/us/integrate/reference\n */\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Fastlane related types\n *\n */\nexport interface PayPalFastlane {\n    identity: PayPalFastlaneIdentity;\n    events: PayPalFastlaneEvents;\n    profile: PayPalFastlaneProfile;\n    FastlaneCardComponent(\n        options: PayPalFastlaneCardComponentOptions,\n    ): Promise<PayPalFastlaneCardComponentMethods>;\n}\n\nexport interface PayPalFastlaneOptions {\n    styles?: PayPalFastlaneStylesOption;\n}\n\nexport interface PayPalFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerContextId: string,\n    ): Promise<PayPalFastlaneAuthenticationResult>;\n}\n\nexport interface PayPalFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface PayPalFastlaneAuthenticationResult {\n    authenticationState?: PayPalFastlaneAuthenticationState;\n    profileData?: PayPalFastlaneProfileData;\n}\n\nexport enum PayPalFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'canceled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface PayPalFastlaneProfileData {\n    name: PayPalFastlaneProfileName;\n    shippingAddress: PayPalFastlaneShippingAddress;\n    card: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface PayPalFastlaneProfilePhone {\n    countryCode: string;\n    nationalNumber: string;\n}\n\nexport interface PayPalFastlaneShippingAddress {\n    name: PayPalFastlaneProfileName;\n    phoneNumber: PayPalFastlaneProfilePhone;\n    address: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneProfileCard {\n    id: string; // nonce / token\n    paymentSource: PayPalFastlanePaymentSource;\n}\n\nexport interface PayPalFastlanePaymentSource {\n    card: PayPalFastlaneCardSource;\n}\n\nexport interface PayPalFastlaneCardSource {\n    brand: string;\n    expiry: string; // \"YYYY-MM\"\n    lastDigits: string; // \"1111\"\n    name: string;\n    billingAddress: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneAddress {\n    company?: string;\n    addressLine1: string;\n    addressLine2?: string;\n    adminArea1: string; // State\n    adminArea2: string; // City\n    postalCode: string;\n    countryCode?: string;\n}\n\nexport interface PayPalFastlaneProfileToBcCustomerDataMappingResult {\n    authenticationState: PayPalFastlaneAuthenticationState;\n    addresses: CustomerAddress[];\n    billingAddress?: CustomerAddress;\n    shippingAddress?: CustomerAddress;\n    instruments: CardInstrument[];\n}\n\nexport interface PayPalFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport interface PayPalFastlaneProfile {\n    showCardSelector(): Promise<PayPalFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<PayPalFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface PayPalFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: PayPalFastlaneShippingAddress;\n}\n\nexport interface PayPalFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneCardComponentMethods {\n    getPaymentToken(\n        options: PayPalFastlaneGetPaymentTokenOptions,\n    ): Promise<PayPalFastlaneProfileCard>;\n    render(element: string): void;\n}\n\nexport interface PayPalFastlaneGetPaymentTokenOptions {\n    name?: PayPalFastlaneProfileName;\n    billingAddress?: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneCardComponentOptions {\n    fields?: PayPalFastlaneCardComponentFields;\n}\n\nexport interface PayPalFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface PayPalFastlaneEvents {\n    apmSelected: (options: PayPalFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: PayPalFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: PayPalFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface PayPalFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface PayPalFastlaneApmSelectedEventOptions extends PayPalFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface PayPalFastlaneEmailEnteredEventOptions extends PayPalFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface PayPalFastlaneOrderPlacedEventOptions extends PayPalFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface PayPalFastlanePaymentFormattedPayload {\n    paypal_connect_token?: {\n        order_id?: string;\n        token: string;\n    };\n    paypal_fastlane_token?: {\n        order_id?: string;\n        token: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './bigcommerce-payments-types';\n\nexport default class PayPalSdkHelper {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane', 'three-domain-secure'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalSdkHelper from './paypal-sdk-helper';\n\nexport default function createBigCommercePaymentsSdk(): PayPalSdkHelper {\n    return new PayPalSdkHelper(createScriptLoader());\n}\n","interface CookieOptions {\n    expires?: Date;\n    path?: string;\n    domain?: string;\n    secure?: boolean;\n}\n\nexport default class CookieStorage {\n    static get(name: string): string | null {\n        const cookieKey = `${encodeURIComponent(`${name}`)}=`;\n        const cookie = document.cookie;\n\n        let value = null;\n\n        const firstIndex = cookie.indexOf(cookieKey);\n\n        if (firstIndex > -1) {\n            let lastIndex = cookie.indexOf(';', firstIndex);\n\n            if (lastIndex === -1) {\n                lastIndex = cookie.length;\n            }\n\n            value = decodeURIComponent(cookie.substring(firstIndex + cookieKey.length, lastIndex));\n        }\n\n        return value;\n    }\n\n    static set(name: string, value: string, options: CookieOptions = { secure: true }) {\n        let cookieText = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`;\n\n        const { expires, path, domain, secure } = options;\n\n        if (expires) {\n            cookieText += `; expires=${expires.toUTCString()}`;\n        } else {\n            const now = new Date();\n            // info: default cookie expiration time after setup\n            const minutes = 60;\n\n            now.setTime(now.getTime() + minutes * 60 * 1000);\n\n            cookieText += `; expires=${now.toUTCString()}`;\n        }\n\n        if (path) {\n            cookieText += `; path=${path}`;\n        }\n\n        if (domain) {\n            cookieText += `; domain=${domain}`;\n        }\n\n        if (secure) {\n            cookieText += '; secure';\n        }\n\n        document.cookie = cookieText;\n    }\n\n    static remove(name: string, options?: CookieOptions) {\n        CookieStorage.set(name, '', { expires: new Date(0), ...options });\n    }\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    Address,\n    CardInstrument,\n    CustomerAddress,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport {\n    PayPalFastlane,\n    PayPalFastlaneAddress,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneLookupCustomerByEmailResult,\n    PayPalFastlaneProfileCard,\n    PayPalFastlaneProfileName,\n    PayPalFastlaneProfilePhone,\n    PayPalFastlaneProfileToBcCustomerDataMappingResult,\n    PayPalFastlaneSdk,\n    PayPalFastlaneStylesOption,\n    PayPalHostWindow,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsFastlaneUtils {\n    private window: PayPalHostWindow;\n\n    constructor() {\n        this.window = window;\n    }\n\n    async initializePayPalFastlane(\n        paypalFastlaneSdk: PayPalFastlaneSdk,\n        isTestModeEnabled: boolean,\n        styles?: PayPalFastlaneStylesOption,\n    ): Promise<PayPalFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n            window.localStorage.setItem('axoEnv', 'sandbox'); // TODO: remove if this key does not use on PayPal side\n        }\n\n        if (!this.window.paypalFastlane) {\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.window.paypalFastlane = await paypalFastlaneSdk.Fastlane({\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    getPayPalFastlaneOrThrow(): PayPalFastlane {\n        if (!this.window.paypalFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    /**\n     *\n     * Detects the customer to PayPal Fastlane relation and\n     * returns customerContextId to use it for authentication\n     *\n     */\n    async lookupCustomerOrThrow(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult> {\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.lookupCustomerByEmail(email);\n    }\n\n    /**\n     *\n     * Triggers authentication flow (shows OTP popup) if the customer recognised as PayPal Fastlane user\n     * and returns PayPal Fastlane Profile data to use it in BC checkout\n     *\n     */\n    async triggerAuthenticationFlowOrThrow(\n        customerContextId?: string,\n    ): Promise<PayPalFastlaneAuthenticationResult> {\n        if (!customerContextId) {\n            return {};\n        }\n\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.triggerAuthenticationFlow(customerContextId);\n    }\n\n    /**\n     *\n     * 'updateStorageSessionId' method is used to:\n     * - set session id after user was authenticated (or unrecognised) to trigger authentication after page refresh\n     *\n     * Flow info:\n     * If user unrecognised then the lookup method will be working but the OTP will not be shown\n     * If user recognised and not canceled then the lookup method will be working and the OTP will be shown only if needed\n     * If user cancels the OPT then OTP will not be triggered after page refresh\n     *\n     */\n    updateStorageSessionId(sessionId: string): void {\n        const expires = new Date();\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        const cookiesOption = {\n            expires,\n            secure: true,\n        };\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, cookiesOption);\n    }\n\n    removeStorageSessionId(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    getStorageSessionId(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    /**\n     *\n     * 'mapPayPalFastlaneProfileToBcCustomerData' method is responsible for:\n     * - mapping PayPal Fastlane Profile data to BC data shape\n     * - returning mapped data to use for updating PaymentProviderCustomer state and\n     * update shipping and billing addresses\n     *\n     */\n    mapPayPalFastlaneProfileToBcCustomerData(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): PayPalFastlaneProfileToBcCustomerDataMappingResult {\n        const { authenticationState, profileData } = authenticationResult;\n\n        const paypalBillingAddress = profileData?.card?.paymentSource?.card?.billingAddress;\n        const paypalShippingAddress = profileData?.shippingAddress;\n        const paypalProfileName = profileData?.name;\n        const paypalInstrument = profileData?.card;\n\n        const shippingAddress = paypalShippingAddress\n            ? this.mapPayPalToBcAddress(\n                  paypalShippingAddress.address,\n                  paypalShippingAddress.name,\n                  paypalShippingAddress.phoneNumber,\n              )\n            : undefined;\n        const billingAddress =\n            paypalBillingAddress && paypalProfileName\n                ? this.mapPayPalToBcAddress(\n                      paypalBillingAddress,\n                      paypalProfileName,\n                      paypalShippingAddress?.phoneNumber,\n                  )\n                : undefined;\n        const instruments = paypalInstrument\n            ? this.mapPayPalToBcInstrument(methodId, paypalInstrument)\n            : [];\n\n        const addresses = this.filterAddresses([shippingAddress, billingAddress]);\n\n        return {\n            authenticationState:\n                authenticationState || PayPalFastlaneAuthenticationState.UNRECOGNIZED,\n            addresses,\n            billingAddress,\n            shippingAddress,\n            instruments,\n        };\n    }\n\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instrument: PayPalFastlaneProfileCard,\n    ): CardInstrument[] {\n        const { id, paymentSource } = instrument;\n        const { brand, expiry, lastDigits } = paymentSource.card;\n\n        const [expiryYear, expiryMonth] = expiry.split('-');\n\n        return [\n            {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n                type: 'card',\n            },\n        ];\n    }\n\n    mapBcToPayPalAddress(address?: Address): PayPalFastlaneAddress {\n        return {\n            company: address?.company || '',\n            addressLine1: address?.address1 || '',\n            addressLine2: address?.address2 || '',\n            adminArea1: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            adminArea2: address?.city || '',\n            postalCode: address?.postalCode || '',\n            countryCode: address?.countryCode || '',\n        };\n    }\n\n    mapPayPalToBcAddress(\n        address: PayPalFastlaneAddress,\n        profileName: PayPalFastlaneProfileName,\n        phone?: PayPalFastlaneProfilePhone,\n        customFields?: CustomerAddress['customFields'],\n    ): CustomerAddress {\n        const [firstName, lastName] = profileName.fullName.split(' ');\n\n        const phoneData = {\n            nationalNumber: phone?.nationalNumber || '',\n            countryCode: phone?.countryCode || '',\n        };\n\n        return {\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: profileName.firstName || firstName || '',\n            lastName: profileName.lastName || lastName || '',\n            company: address.company || '',\n            address1: address.addressLine1,\n            address2: address.addressLine2 || '',\n            city: address.adminArea2,\n            stateOrProvince: address.adminArea1,\n            stateOrProvinceCode: address.adminArea1,\n            country: address.countryCode || '', // TODO: update country with valid naming\n            countryCode: address.countryCode || '',\n            postalCode: address.postalCode,\n            phone: phoneData.countryCode + phoneData.nationalNumber,\n            customFields: customFields || [],\n        };\n    }\n\n    /**\n     *\n     * This method is responsible for filtering PayPal Fastlane addresses if they are the same\n     * and returns an array of addresses to use them for shipping and/or billing address selections\n     * so the customer will be able to use addresses from PayPal Fastlane in checkout flow\n     *\n     */\n    filterAddresses(addresses: Array<CustomerAddress | undefined>): CustomerAddress[] {\n        return addresses.reduce(\n            (customerAddresses: CustomerAddress[], currentAddress: CustomerAddress | undefined) => {\n                if (!currentAddress) {\n                    return customerAddresses;\n                }\n\n                const sameAddressInTheArray = customerAddresses.some((customerAddress) =>\n                    this.isEqualAddresses(customerAddress, currentAddress),\n                );\n\n                return sameAddressInTheArray\n                    ? customerAddresses\n                    : [...customerAddresses, currentAddress];\n            },\n            [],\n        );\n    }\n\n    private isEqualAddresses(\n        firstAddress: CustomerAddress,\n        secondAddress: CustomerAddress,\n    ): boolean {\n        return isEqual(this.normalizeAddress(firstAddress), this.normalizeAddress(secondAddress));\n    }\n\n    private normalizeAddress(address: CustomerAddress) {\n        return omit(address, ['id', 'phone']);\n    }\n}\n","import BigCommercePaymentsFastlaneUtils from './bigcommerce-payments-fastlane-utils';\n\nexport default function createBigCommercePaymentsFastlaneUtils(): BigCommercePaymentsFastlaneUtils {\n    return new BigCommercePaymentsFastlaneUtils();\n}\n","import { omitBy } from 'lodash';\n\nimport { FastlaneStylesSettings, PayPalFastlaneStylesOption } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n) {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n): PayPalFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: PayPalFastlaneStylesOption) {\n    const fastlaneStyles: PayPalFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n// TODO: update PayPalConnectCustomer with PayPalFastlaneCustomer\nexport default function isPayPalFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(features: Features, experimentName: string): boolean {\n    return features[experimentName] ?? true;\n}\n","import {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    getFastlaneStyles,\n    isBigcommerceFastlaneRequestError,\n    isPayPalFastlaneCustomer,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneCardComponentMethods,\n    PayPalFastlaneCardComponentOptions,\n    PayPalFastlanePaymentFormattedPayload,\n    PayPalFastlaneSdk,\n    PayPalSdkHelper,\n    TDSecureAuthenticationState,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CardInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from '../bigcommerce-payments-request-sender';\n\nimport BigCommercePaymentsFastlanePaymentInitializeOptions, {\n    WithBigCommercePaymentsFastlanePaymentInitializeOptions,\n} from './bigcommerce-payments-fastlane-payment-initialize-options';\nimport { LiabilityShiftEnum } from '../bigcommerce-payments-types';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nexport default class BigCommercePaymentsFastlanePaymentStrategy implements PaymentStrategy {\n    private paypalComponentMethods?: PayPalFastlaneCardComponentMethods;\n    private threeDSVerificationMethod?: string;\n    private paypalFastlaneSdk?: PayPalFastlaneSdk;\n    private bigcommerce_payments_fastlane?: BigCommercePaymentsFastlanePaymentInitializeOptions;\n    private methodId?: string;\n    private orderId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     * */\n    async initialize(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_fastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.methodId = methodId;\n\n        if (!bigcommerce_payments_fastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane\" argument is not provided.',\n            );\n        }\n\n        this.bigcommerce_payments_fastlane = bigcommerce_payments_fastlane;\n\n        if (\n            !bigcommerce_payments_fastlane.onInit ||\n            typeof bigcommerce_payments_fastlane.onInit !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (\n            !bigcommerce_payments_fastlane.onChange ||\n            typeof bigcommerce_payments_fastlane.onChange !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isDeveloperModeApplicable, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        this.threeDSVerificationMethod =\n            paymentMethod.initializationData?.threeDSVerificationMethod;\n\n        this.paypalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n            paymentMethod,\n            cart.currency.code,\n            cart.id,\n        );\n\n        const paypalFastlaneStyling = isFastlaneStylingEnabled\n            ? paymentMethod?.initializationData?.fastlaneStyles\n            : {};\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyling,\n            bigcommerce_payments_fastlane?.styles,\n        );\n\n        await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n            this.paypalFastlaneSdk,\n            !!isDeveloperModeApplicable,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.runPayPalAuthenticationFlowOrThrow(methodId);\n        }\n\n        await this.initializePayPalPaymentComponent();\n\n        bigcommerce_payments_fastlane.onInit((container: string) =>\n            this.renderPayPalPaymentComponent(container),\n        );\n        bigcommerce_payments_fastlane.onChange(() =>\n            this.handlePayPalStoredInstrumentChange(methodId),\n        );\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData, methodId } = payment;\n\n        const isVaultedFlow = paymentData && isVaultedInstrument(paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            const paymentPayload = isVaultedFlow\n                ? await this.prepareVaultedInstrumentPaymentPayload(methodId, paymentData)\n                : await this.preparePaymentPayload(methodId, paymentData);\n\n            await this.paymentIntegrationService.submitPayment<PayPalFastlanePaymentFormattedPayload>(\n                paymentPayload,\n            );\n\n            this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n        } catch (error) {\n            if (\n                isBigcommerceFastlaneRequestError(error) &&\n                error.response.name === 'INVALID_REQUEST'\n            ) {\n                const invalidRequestError = {\n                    translationKey: 'payment.errors.invalid_request_error',\n                };\n\n                this.handleError(invalidRequestError);\n\n                return Promise.reject();\n            }\n\n            if (error instanceof Error && error.name !== 'FastlaneError') {\n                throw error;\n            }\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.bigCommercePaymentsFastlaneUtils.getStorageSessionId();\n\n        if (\n            !customer.isGuest ||\n            paypalFastlaneCustomer?.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return !paypalFastlaneCustomer?.authenticationState && paypalFastlaneSessionId === cart.id;\n    }\n\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const customerEmail = customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } =\n                await this.bigCommercePaymentsFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n            const authenticationResult =\n                await this.bigCommercePaymentsFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                    customerContextId,\n                );\n\n            const { authenticationState, addresses, instruments } =\n                this.bigCommercePaymentsFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                    methodId,\n                    authenticationResult,\n                );\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            const isAuthenticationFlowCanceled =\n                authenticationResult.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED;\n\n            if (isAuthenticationFlowCanceled) {\n                this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n            } else {\n                this.bigCommercePaymentsFastlaneUtils.updateStorageSessionId(cart.id);\n            }\n        } catch (error) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n    }\n\n    /**\n     *\n     * BigCommercePayments Fastlane Card Component rendering method\n     *\n     */\n    private async initializePayPalPaymentComponent(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const phone = billingAddress.phone;\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const paypalFastlane = this.bigCommercePaymentsFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const cardComponentOptions: PayPalFastlaneCardComponentOptions = {\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        this.paypalComponentMethods = await paypalFastlane.FastlaneCardComponent(\n            cardComponentOptions,\n        );\n    }\n\n    private renderPayPalPaymentComponent(container?: string): void {\n        const paypalComponentMethods = this.getPayPalComponentMethodsOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render card component because \"container\" argument is not provided.',\n            );\n        }\n\n        paypalComponentMethods.render(container);\n    }\n\n    private getPayPalComponentMethodsOrThrow(): PayPalFastlaneCardComponentMethods {\n        if (!this.paypalComponentMethods) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalComponentMethods;\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paymentData: VaultedInstrument,\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const { instrumentId } = paymentData;\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const is3DSEnabled =\n            this.isBigcommercePaymentsFastlaneThreeDSAvailable() &&\n            paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(instrumentId);\n        }\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(instrumentId) : instrumentId;\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const { getPaymentToken } = this.getPayPalComponentMethodsOrThrow();\n\n        const { id } = await getPaymentToken({\n            name: { fullName },\n            billingAddress:\n                this.bigCommercePaymentsFastlaneUtils.mapBcToPayPalAddress(billingAddress),\n        });\n\n        const is3DSEnabled =\n            this.isBigcommercePaymentsFastlaneThreeDSAvailable() &&\n            paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(id);\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(id) : id;\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async createOrder(id: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        if (this.methodId) {\n            const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(\n                this.methodId,\n                {\n                    cartId,\n                    fastlaneToken: id,\n                },\n            );\n\n            this.orderId = orderId;\n        }\n    }\n\n    /**\n     *\n     * 3DSecure methods\n     *\n     * */\n    private async get3DSNonce(paypalNonce: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const order = state.getOrderOrThrow();\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        const threeDomainSecureComponent = this.paypalFastlaneSdk?.ThreeDomainSecureClient;\n\n        if (!threeDomainSecureComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const threeDomainSecureParameters = {\n            amount: order.orderAmount.toFixed(2),\n            currency: cart.currency.code,\n            nonce: paypalNonce,\n            threeDSRequested: this.threeDSVerificationMethod === 'SCA_ALWAYS',\n            transactionContext: {\n                experience_context: {\n                    locale: 'en-US',\n                    return_url: checkoutUrl,\n                    cancel_url: checkoutUrl,\n                },\n            },\n        };\n\n        const isThreeDomainSecureEligible = await threeDomainSecureComponent.isEligible(\n            threeDomainSecureParameters,\n        );\n\n        if (isThreeDomainSecureEligible) {\n            const { liabilityShift, authenticationState, nonce } =\n                await threeDomainSecureComponent.show();\n\n            if (\n                liabilityShift === LiabilityShiftEnum.No ||\n                liabilityShift === LiabilityShiftEnum.Unknown\n            ) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            await this.createOrder(paypalNonce);\n\n            if (authenticationState === TDSecureAuthenticationState.Succeeded) {\n                return nonce;\n            }\n\n            // Cancelled or errored, merchant can choose to send the customer back to 3D Secure or submit a payment and or vault the payment token.\n            if (authenticationState === TDSecureAuthenticationState.Errored) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            if (authenticationState === TDSecureAuthenticationState.Cancelled) {\n                console.error('3DS check was canceled');\n                throw new PaymentMethodInvalidError();\n            }\n        }\n\n        return paypalNonce;\n    }\n\n    /**\n     *\n     * BigCommercePayments Fastlane instrument change\n     *\n     */\n    private async handlePayPalStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.bigCommercePaymentsFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstrument =\n                this.bigCommercePaymentsFastlaneUtils.mapPayPalToBcInstrument(\n                    methodId,\n                    selectedCard,\n                )[0];\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                ...paypalFastlaneCustomer,\n                instruments: [selectedInstrument],\n            });\n\n            return selectedInstrument;\n        }\n\n        return undefined;\n    }\n\n    /**\n     *\n     * Bigcommerce Payments Fastlane experiments handling\n     *\n     */\n    private isBigcommercePaymentsFastlaneThreeDSAvailable(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        return isExperimentEnabled(features, 'PROJECT-7080.bcp_fastlane_three_ds');\n    }\n\n    private handleError(error: unknown): void {\n        if (\n            this.bigcommerce_payments_fastlane?.onError &&\n            typeof this.bigcommerce_payments_fastlane.onError === 'function'\n        ) {\n            this.bigcommerce_payments_fastlane.onError(error);\n        }\n    }\n}\n","export interface BigcommerceFastlaneRequestError {\n    name: string;\n    message: string;\n    response: {\n        name: string;\n    };\n}\n\nexport default function isBigcommerceFastlaneRequestError(\n    error: unknown,\n): error is BigcommerceFastlaneRequestError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'message' in error &&\n        'response' in error &&\n        'name' in (error as BigcommerceFastlaneRequestError).response\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from '../bigcommerce-payments-request-sender';\n\nimport BigCommercePaymentsFastlanePaymentStrategy from './bigcommerce-payments-fastlane-payment-strategy';\n\nconst createBigCommercePaymentsFastlanePaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsFastlanePaymentStrategy(\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n};\n\nexport default toResolvableModule(createBigCommercePaymentsFastlanePaymentStrategy, [\n    { id: 'bigcommerce_payments_fastlane' }, // BigCommercePayments Fastlane relates to 'bigcommerce_payments_fastlane' method id\n]);\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../bigcommerce-payments-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    BigCommercePaymentsInitializationData,\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalMessagesSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterPaymentInitializeOptions, {\n    WithBigCommercePaymentsPayLaterPaymentInitializeOptions,\n} from './bigcommerce-payments-paylater-payment-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private bigCommercePaymentsButtons?: BigCommercePaymentsButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private paypalSdkHelper: PayPalSdkHelper,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions &\n            WithBigCommercePaymentsPayLaterPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_paylater } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paypalBNPLConfiguration = [], orderId } = paymentMethod.initializationData || {};\n        const { bannerContainerId, container } = bigcommerce_payments_paylater;\n\n        if (bannerContainerId !== undefined) {\n            if (!document.getElementById(bannerContainerId)) {\n                // eslint-disable-next-line no-console\n                console.error('Unable to create banner without valid banner container ID.');\n\n                return;\n            }\n\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === 'checkout');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            const paypalMessages = await this.paypalSdkHelper.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            return this.renderMessages(paypalMessages, bannerContainerId, bannerConfiguration);\n        }\n\n        // Info:\n        // The BigCommercePayments button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render BigCommercePayments button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = container?.split('#')[1];\n\n        this.renderButton(methodId, bigcommerce_payments_paylater);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            payment.methodId,\n            this.orderId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.bigCommercePaymentsButtons?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_paylater: BigCommercePaymentsPayLaterPaymentInitializeOptions,\n    ): void {\n        if (!bigcommerce_payments_paylater?.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const bigCommerceSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } =\n            bigcommerce_payments_paylater;\n\n        const fundingSources = [bigCommerceSdk.FUNDING.PAYLATER, bigCommerceSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (hasRenderedSmartButton) {\n                return;\n            }\n\n            const buttonOptions: BigCommercePaymentsButtonsOptions = {\n                fundingSource,\n                style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                    checkoutPaymentButtonStyles,\n                ),\n                createOrder: () =>\n                    this.bigCommercePaymentsIntegrationService.createOrder(\n                        'bigcommerce_payments_paylater',\n                    ),\n                onClick: (_, actions) => this.handleClick(actions, onValidate),\n                onApprove: (data) => this.handleApprove(data, submitForm),\n                onCancel: () => this.toggleLoadingIndicator(false),\n                onError: (error) => this.handleError(error, onError),\n            };\n\n            this.bigCommercePaymentsButtons = bigCommerceSdk.Buttons(buttonOptions);\n\n            if (\n                !this.bigCommercePaymentsButtons.isEligible() &&\n                fundingSource === bigCommerceSdk.FUNDING.PAYLATER\n            ) {\n                return;\n            }\n\n            if (\n                !this.bigCommercePaymentsButtons.isEligible() &&\n                fundingSource === bigCommerceSdk.FUNDING.CREDIT\n            ) {\n                throw new NotImplementedError(\n                    `BigCommercePayments ${fundingSource} is not available for your region. Please use BigCommercePayments Checkout instead.`,\n                );\n            }\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            this.bigCommercePaymentsButtons.render(container);\n            hasRenderedSmartButton = true;\n        });\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsPayLaterPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        if (onValidate && typeof onValidate === 'function') {\n            await onValidate(onValidationPassed, reject);\n        }\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsPayLaterPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        if (submitForm && typeof submitForm === 'function') {\n            submitForm();\n        }\n    }\n\n    private handleError(\n        error: Error,\n        onError: BigCommercePaymentsPayLaterPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(\n        paypalMessages: PayPalMessagesSdk,\n        bannerContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'payment',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterPaymentStrategy from './bigcommerce-payments-paylater-payment-strategy';\n\nconst createBigCommercePaymentsPayLaterPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsPayLaterPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n        createBigCommercePaymentsSdk(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterPaymentStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    BigCommercePaymentsInitializationData,\n    BirthDate,\n    PayPalOrderStatus,\n} from '../bigcommerce-payments-types';\n\nimport {\n    BigCommercePaymentsRatePayPaymentInitializeOptions,\n    WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n} from './bigcommerce-payments-ratepay-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BigCommercePaymentsRatePayPaymentStrategy implements PaymentStrategy {\n    private guid?: string;\n    private bigcommerce_payments_ratepay?: BigCommercePaymentsRatePayPaymentInitializeOptions;\n    private loadingIndicatorContainer?: string;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, bigcommerce_payments_ratepay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_ratepay) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_ratepay\" argument is not provided.`,\n            );\n        }\n\n        const { legalTextContainer, container, loadingContainerId } = bigcommerce_payments_ratepay;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.container\" argument is not provided.`,\n            );\n        }\n\n        if (!legalTextContainer) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.legalTextContainer\" argument is not provided.`,\n            );\n        }\n\n        if (!loadingContainerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.loadingContainerId\" argument is not provided.`,\n            );\n        }\n\n        this.loadingIndicatorContainer = loadingContainerId;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { merchantId } = paymentMethod.initializationData || {};\n\n        if (!merchantId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because merchantId argument is not provided.`,\n            );\n        }\n\n        this.bigcommerce_payments_ratepay = bigcommerce_payments_ratepay;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.createFraudNetScript(merchantId, methodId, gatewayId);\n\n        this.loadFraudnetConfig();\n\n        this.renderLegalText(legalTextContainer, container);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        const { getFieldsValues } = this.bigcommerce_payments_ratepay || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!getFieldsValues || typeof getFieldsValues !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.getFieldsValues\" argument is not provided.`,\n            );\n        }\n\n        this.toggleLoadingIndicator(true);\n\n        try {\n            const orderId = await this.bigCommercePaymentsIntegrationService.createOrder(\n                'bigcommerce_payments_apmscheckout',\n                { metadataId: this.guid },\n            );\n\n            const { ratepayBirthDate, ratepayPhoneNumber, ratepayPhoneCountryCode } =\n                getFieldsValues();\n\n            const paymentData = {\n                formattedPayload: {\n                    vault_payment_instrument: null,\n                    set_as_default_stored_instrument: null,\n                    device_info: null,\n                    method_id: payment.methodId,\n                    rate_pay: {\n                        birth_date: this.normalizeDate(ratepayBirthDate),\n                        phone: {\n                            national_number: ratepayPhoneNumber,\n                            country_code: ratepayPhoneCountryCode.split('+')[1],\n                        },\n                    },\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n\n            return await new Promise((resolve, reject) => {\n                this.initializePollingMechanism(\n                    payment.methodId,\n                    resolve,\n                    reject,\n                    payment.gatewayId,\n                );\n            });\n        } catch (error: unknown) {\n            this.handleError(error);\n\n            return new Promise((_resolve, reject) => reject());\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const { legalTextContainer } = this.bigcommerce_payments_ratepay || {};\n        const fraudNetScript = document.querySelectorAll('[data-id=\"fraudnetScript\"]')[0];\n        const fraudNetConfig = document.querySelectorAll('[data-id=\"fraudnetConfig\"]')[0];\n\n        this.deinitializePollingMechanism();\n\n        fraudNetScript.remove();\n        fraudNetConfig.remove();\n\n        if (legalTextContainer) {\n            const legalTextContainerElement = document.getElementById(legalTextContainer);\n\n            legalTextContainerElement?.remove();\n        }\n\n        return Promise.resolve();\n    }\n\n    private normalizeDate(date: BirthDate) {\n        const formattedDate = this.formatDate(date.getDate());\n        const formattedMonth = this.formatDate(date.getMonth() + 1);\n\n        return `${date.getFullYear()}-${formattedMonth}-${formattedDate}`;\n    }\n\n    private formatDate(date: number): string {\n        return `${date < 10 ? 0 : ''}${date}`;\n    }\n\n    private renderLegalText(legalTextContainerElementId: string, container: string) {\n        const legalTextContainerId = legalTextContainerElementId;\n        const buttonContainerId = container.split('#')[1];\n        const buttonContainer = document.getElementById(buttonContainerId);\n        const buttonContainerParent = buttonContainer?.parentNode;\n        const legalTextContainer = document.createElement('div');\n\n        legalTextContainer.style.marginBottom = '20px';\n        legalTextContainer.setAttribute('id', legalTextContainerId);\n        buttonContainerParent?.prepend(legalTextContainer);\n\n        const bigCommercePaymentsSdk =\n            this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const ratePayButton = bigCommercePaymentsSdk.Legal({\n            fundingSource: bigCommercePaymentsSdk.Legal.FUNDING.PAY_UPON_INVOICE,\n        });\n        const legalTextContainerElement = document.getElementById(legalTextContainerId);\n\n        if (legalTextContainerElement) {\n            ratePayButton.render(`#${legalTextContainerId}`);\n        } else {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"legalTextContainerElement\" argument is not found.`,\n            );\n        }\n    }\n\n    private handleError(error: unknown): void {\n        const { onError } = this.bigcommerce_payments_ratepay || {};\n\n        this.resetPollingMechanism();\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private createFraudNetScript(merchantId: string, methodId: string, gatewayId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { testMode } = paymentMethod.config;\n        const scriptElement = document.createElement('script');\n\n        scriptElement.setAttribute('type', 'application/json');\n        scriptElement.setAttribute('fncls', 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99');\n        scriptElement.setAttribute('data-id', 'fraudnetScript');\n        this.guid = this.generateGUID();\n\n        const fraudNetConfig = {\n            f: this.guid,\n            s: `${merchantId}_checkout-page`,\n            sandbox: testMode,\n        };\n\n        scriptElement.innerHTML = JSON.stringify(fraudNetConfig);\n        document.body.appendChild(scriptElement);\n    }\n\n    private generateGUID() {\n        let guid = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < 32; i += 1) {\n            const randomIndex = Math.floor(Math.random() * characters.length);\n\n            guid += characters[randomIndex];\n        }\n\n        return guid;\n    }\n\n    private loadFraudnetConfig() {\n        const script = document.createElement('script');\n\n        script.setAttribute('data-id', 'fraudnetConfig');\n        script.src = 'https://c.paypal.com/da/r/fb.js';\n        document.body.appendChild(script);\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.bigCommercePaymentsIntegrationService.getOrderStatus(\n                'bigcommerce_payments_apms',\n                {\n                    params: {\n                        useMetadata: true,\n                    },\n                },\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.PollingStop;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                bigcommerce_payments_ratepay: this.bigcommerce_payments_ratepay,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            this.handleError(error);\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsRatePayPaymentStrategy from './bigcommerce-payments-ratepay-payment-strategy';\n\nconst createBigCommercePaymentsRatePayPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsRatePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsRatePayPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: { ...LOADING_INDICATOR_STYLES, position: 'fixed' },\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsRatePayPaymentStrategy, [\n    { gateway: 'bigcommerce_payments_apms', id: 'ratepay' },\n]);\n","// copied from packages/core/src/hosted-form/hosted-field-type.ts\n\nenum HostedFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n    CardExpiryVerification = 'cardExpiryVerification',\n}\n\nexport default HostedFieldType;\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumber in fields &&\n        HostedFieldType.CardName in fields &&\n        HostedFieldType.CardExpiry in fields\n    );\n}\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardVaultedFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedStoredCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumberVerification in fields &&\n        HostedFieldType.CardCodeVerification in fields &&\n        HostedFieldType.CardExpiryVerification in fields\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    isBigCommercePaymentsFastlaneCustomer,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    HostedCardFieldOptions,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldStylesMap,\n    HostedFieldType,\n    HostedFieldValidateEventData,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInstrument,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    isCreditCardFormFields,\n    isCreditCardVaultedFormFields,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    BigCommercePaymentsCardFields,\n    BigCommercePaymentsCardFieldsConfig,\n    BigCommercePaymentsCardFieldsOnApproveData,\n    BigCommercePaymentsCardFieldsState,\n    BigCommercePaymentsFields,\n    BigCommercePaymentsHostedFieldsRenderOptions,\n    LiabilityShiftEnum,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsCreditCardsPaymentInitializeOptions, {\n    WithBigCommercePaymentsCreditCardsPaymentInitializeOptions,\n} from './bigcommerce-payments-credit-cards-payment-initialize-options';\n\nexport default class BigCommercePaymentsCreditCardsPaymentStrategy implements PaymentStrategy {\n    private executionPaymentData?: OrderPaymentRequestBody['paymentData'];\n    private isCreditCardForm?: boolean;\n    private isCreditCardVaultedForm?: boolean;\n\n    private cardFields?: BigCommercePaymentsCardFields;\n    private cvvField?: BigCommercePaymentsFields;\n    private expiryField?: BigCommercePaymentsFields;\n    private numberField?: BigCommercePaymentsFields;\n    private nameField?: BigCommercePaymentsFields;\n\n    private hostedFormOptions?: HostedFormOptions;\n    private returnedOrderId?: string;\n    private returnedVaultedToken?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsCreditCardsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_creditcards } = options;\n        const bigCommercePaymentsInitializationOptions = bigcommerce_payments_creditcards;\n\n        const { form, onCreditCardFieldsRenderingError } =\n            bigCommercePaymentsInitializationOptions || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!form) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.bigcommerce_payments_creditcards.form\" argument is not provided.',\n            );\n        }\n\n        this.hostedFormOptions = form;\n\n        this.isCreditCardForm = isCreditCardFormFields(form.fields);\n        this.isCreditCardVaultedForm =\n            isCreditCardVaultedFormFields(form.fields) && !this.hasUndefinedValues();\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            undefined,\n            true,\n            true,\n        );\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.initializeFields(form, onCreditCardFieldsRenderingError);\n        }\n\n        if (this.shouldInitializePayPalFastlane(methodId)) {\n            await this.initializePayPalFastlaneOrThrow(methodId);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n\n        if (!payment || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        this.executionPaymentData = paymentData;\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.validateHostedFormOrThrow();\n            await this.submitHostedForm();\n        } else {\n            // The condition gets triggered when customer pays with vaulted instrument and shipping address is trusted\n            const { orderId } =\n                await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                    'bigcommerce_payments_creditcardscheckout',\n                    this.getInstrumentParams(),\n                );\n\n            this.returnedOrderId = orderId;\n        }\n\n        const submitPaymentPayload = this.preparePaymentPayload(\n            methodId,\n            paymentData,\n            this.returnedOrderId,\n            this.returnedVaultedToken,\n        );\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.cvvField?.close();\n        await this.expiryField?.close();\n        await this.numberField?.close();\n        await this.nameField?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Submit Payment Payload preparing method\n     *\n     * `vaultedToken` is used when we pay with vaulted instrument (with trusted shipping address and untrusted)\n     * `setupToken` is used when we pay with vaulted instrument (untrusted shipping address)\n     * `orderId` is used in every case (basic card payment, trusted shipping address and untrusted)\n     */\n    private preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n        orderId?: string,\n        nonce?: string,\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const instrumentId =\n            paymentData && isVaultedInstrument(paymentData) ? paymentData.instrumentId : undefined;\n\n        const bigpay_token = omitBy(\n            {\n                verification_nonce: nonce,\n                token: instrumentId,\n            },\n            isNil,\n        );\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                instrumentId,\n                formattedPayload: {\n                    ...(nonce || instrumentId ? { bigpay_token } : {}),\n                    ...(orderId ? { card_with_order: { order_id: orderId } } : {}),\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Card fields initialize\n     *\n     */\n    private async initializeFields(\n        formOptions: HostedFormOptions,\n        onCreditCardFieldsRenderingError?: BigCommercePaymentsCreditCardsPaymentInitializeOptions['onCreditCardFieldsRenderingError'],\n    ): Promise<void> {\n        const { fields, styles } = formOptions;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const executeCallback = this.getExecuteCallback(fields);\n\n        const cardFieldsConfig: BigCommercePaymentsCardFieldsConfig = {\n            style: this.getInputStyles(styles),\n            onApprove: ({\n                orderID,\n                vaultSetupToken,\n                liabilityShift,\n            }: BigCommercePaymentsCardFieldsOnApproveData) => {\n                if (\n                    liabilityShift === LiabilityShiftEnum.No ||\n                    liabilityShift === LiabilityShiftEnum.Unknown\n                ) {\n                    throw new Error();\n                }\n\n                return this.handleApprove({ orderID, vaultSetupToken });\n            },\n            onError: () => {\n                throw new PaymentMethodFailedError();\n            },\n            inputEvents: {\n                onChange: (event) => this.onChangeHandler(formOptions, event),\n                onFocus: (event) => this.onFocusHandler(formOptions, event),\n                onBlur: (event) => this.onBlurHandler(formOptions, event),\n                onInputSubmitRequest: (event) => this.onInputSubmitRequest(formOptions, event),\n            },\n            ...executeCallback,\n        };\n\n        this.cardFields = await paypalSdk.CardFields(cardFieldsConfig);\n\n        if (!this.cardFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            this.stylizeInputContainers(fields);\n\n            if (isCreditCardFormFields(fields)) {\n                await this.renderFields(fields);\n            }\n\n            if (isCreditCardVaultedFormFields(fields)) {\n                await this.renderVaultedFields(fields);\n            }\n        } catch (error: unknown) {\n            if (typeof onCreditCardFieldsRenderingError === 'function') {\n                onCreditCardFieldsRenderingError(error);\n            }\n        }\n    }\n\n    /**\n     *\n     * Get execute callback method\n     * Depends on shipping address is trusted or not we should pass to PP\n     * `createVaultSetupToken` callback if address is untrusted or\n     * `createOrder` if address is trusted\n     *\n     */\n    private getExecuteCallback(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ) {\n        const isVaultedForm = isCreditCardVaultedFormFields(fields);\n\n        return isVaultedForm ? this.createVaultSetupTokenCallback() : this.createOrderCallback();\n    }\n\n    private createVaultSetupTokenCallback() {\n        return {\n            createVaultSetupToken: async () => {\n                const { setupToken } =\n                    (await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                        'bigcommerce_payments_creditcardscheckout',\n                        {\n                            ...this.getInstrumentParams(),\n                            setupToken: true,\n                        },\n                    )) || {};\n\n                return setupToken;\n            },\n        };\n    }\n\n    private createOrderCallback() {\n        return {\n            createOrder: async () => {\n                const { orderId } =\n                    (await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                        'bigcommerce_payments_creditcardscheckout',\n                        this.getInstrumentParams(),\n                    )) || {};\n\n                return orderId;\n            },\n        };\n    }\n\n    /**\n     *\n     * onApprove method\n     * When submitting a form with a `submitHostedForm` method if there is no error\n     * then onApprove callback is triggered and depends on the flow\n     * we will receive an `orderID` if it's basic paying and `vaultSetupToken` if we are paying\n     * with vaulted instrument and shipping address is untrusted\n     *\n     */\n    private handleApprove({\n        orderID,\n        vaultSetupToken,\n    }: BigCommercePaymentsCardFieldsOnApproveData) {\n        if (orderID) {\n            this.returnedOrderId = orderID;\n        }\n\n        if (vaultSetupToken) {\n            this.returnedVaultedToken = vaultSetupToken;\n        }\n    }\n\n    /**\n     *\n     * Rendering Card Fields methods\n     *\n     */\n    private async renderFields(fieldsOptions: HostedCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCode?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCode.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiry?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiry.containerId}`);\n        }\n\n        if (fieldsOptions.cardName?.containerId) {\n            this.nameField = cardFields.NameField({\n                placeholder: '',\n            });\n            await this.nameField.render(`#${fieldsOptions.cardName.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumber?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumber.containerId}`);\n        }\n    }\n\n    private async renderVaultedFields(fieldsOptions: HostedStoredCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCodeVerification?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCodeVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiryVerification?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiryVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumberVerification?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumberVerification.containerId}`);\n        }\n    }\n\n    /**\n     *\n     * Instrument params method\n     *\n     */\n    private getInstrumentParams(): HostedInstrument | VaultedInstrument {\n        if (!this.executionPaymentData) {\n            return {};\n        }\n\n        if (isHostedInstrumentLike(this.executionPaymentData)) {\n            const { shouldSaveInstrument, shouldSetAsDefaultInstrument } =\n                this.executionPaymentData;\n\n            return {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            };\n        }\n\n        if (isVaultedInstrument(this.executionPaymentData)) {\n            const { instrumentId } = this.executionPaymentData;\n\n            return {\n                instrumentId,\n            };\n        }\n\n        return {};\n    }\n\n    private getFieldTypeByEmittedField({\n        emittedBy,\n    }: BigCommercePaymentsCardFieldsState):\n        | HostedFieldBlurEventData\n        | HostedFieldEnterEventData\n        | HostedFieldFocusEventData {\n        return {\n            fieldType: this.mapFieldType(emittedBy),\n        };\n    }\n\n    /**\n     *\n     * Form submit method\n     * Triggers a form submit\n     *\n     * */\n    private async submitHostedForm() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const submitConfig = {\n            billingAddress: {\n                company: billingAddress.company,\n                addressLine1: billingAddress.address1,\n                addressLine2: billingAddress.address2,\n                adminArea1: billingAddress.stateOrProvinceCode,\n                adminArea2: billingAddress.city,\n                postalCode: billingAddress.postalCode,\n                countryCode: billingAddress.countryCode,\n            },\n        };\n\n        try {\n            if (this.isCreditCardVaultedForm) {\n                await cardFields.submit();\n            } else {\n                await cardFields.submit(submitConfig);\n            }\n        } catch (_) {\n            throw new PaymentMethodFailedError(\n                'Failed authentication. Please try to authorize again.',\n            );\n        }\n    }\n\n    /**\n     *\n     * Validation and errors\n     *\n     */\n    private async validateHostedFormOrThrow() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const cardFieldsState = await cardFields.getState().then((data) => data);\n        const validationData = this.getValidityData(cardFieldsState);\n\n        if (validationData.isValid) {\n            return;\n        }\n\n        this.hostedFormOptions?.onValidate?.(validationData);\n\n        throw new PaymentInvalidFormError(this.mapValidationErrors(validationData.errors));\n    }\n\n    private getValidityData({\n        fields,\n    }: BigCommercePaymentsCardFieldsState): HostedFieldValidateEventData {\n        const updatedFields = { ...fields };\n\n        delete updatedFields.cardNameField;\n\n        const fieldsKeys = Object.keys(updatedFields) as Array<\n            keyof BigCommercePaymentsCardFieldsState['fields']\n        >;\n\n        const isValid = fieldsKeys.every((key) => updatedFields[key]?.isValid);\n\n        const errors = fieldsKeys.reduce((fieldsErrors, key) => {\n            const fieldType = this.mapFieldType(key);\n\n            return {\n                ...fieldsErrors,\n                [fieldType]: updatedFields[key]?.isValid\n                    ? undefined\n                    : [this.getInvalidErrorByFieldType(fieldType)],\n            };\n        }, {});\n\n        return { isValid, errors };\n    }\n\n    private getInvalidErrorByFieldType(fieldType: string): HostedInputValidateErrorData {\n        switch (fieldType) {\n            case HostedFieldType.CardCode:\n            case HostedFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case HostedFieldType.CardNumber:\n            case HostedFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case HostedFieldType.CardExpiry:\n            case HostedFieldType.CardExpiryVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private mapValidationErrors(\n        validationErrors: HostedInputValidateErrorDataMap = {},\n    ): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n        const validationErrorsKeys = Object.keys(validationErrors) as Array<\n            keyof HostedInputValidateErrorDataMap\n        >;\n\n        validationErrorsKeys.forEach((key) => {\n            errors[key] = [\n                {\n                    message: validationErrors[key]?.[0]?.message || '',\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    /**\n     *\n     * Fields mappers\n     *\n     */\n    private mapFieldType(type: string): HostedFieldType {\n        switch (type) {\n            case 'name':\n                return HostedFieldType.CardName;\n\n            case 'cardNumberField':\n            case 'number':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardNumber\n                    : HostedFieldType.CardNumberVerification;\n\n            case 'cardExpiryField':\n            case 'expiry':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardExpiry\n                    : HostedFieldType.CardExpiryVerification;\n\n            case 'cardCvvField':\n            case 'cvv':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardCode\n                    : HostedFieldType.CardCodeVerification;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     */\n    private getCardFieldsOrThrow(): BigCommercePaymentsCardFields {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.cardFields;\n    }\n\n    private getInputStyles(\n        styles?: HostedFieldStylesMap,\n    ): BigCommercePaymentsHostedFieldsRenderOptions['styles'] {\n        const commonStyles = {\n            'font-size': styles?.default?.fontSize || '1rem',\n            'font-family':\n                styles?.default?.fontFamily || 'Montserrat, Arial, Helvetica, sans-serif',\n            'font-weight': styles?.default?.fontWeight || '400',\n            outline: 'none',\n            padding: '9px 13px',\n        };\n\n        const defaultStyles = { ...commonStyles, color: '#333333' };\n        const errorStyles = { ...commonStyles, color: 'red' };\n\n        return {\n            input: defaultStyles,\n            '.invalid': errorStyles,\n            '.valid': defaultStyles,\n            ':focus': defaultStyles,\n        };\n    }\n\n    private stylizeInputContainers(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ): void {\n        Object.values(fields || {}).forEach((id: HostedCardFieldOptions) => {\n            const element = document.getElementById(`${id?.containerId || ''}`);\n\n            if (element) {\n                element.style.padding = '0px';\n                element.style.boxShadow = 'none';\n                element.style.border = 'none';\n                element.style.background = 'transparent';\n                element.style.marginBottom = '10px';\n                element.style.marginLeft = '-5px';\n            }\n        });\n    }\n\n    private hasUndefinedValues() {\n        if (this.hostedFormOptions) {\n            return Object.values(this.hostedFormOptions.fields).some(\n                (value) => value === undefined,\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * Input events methods\n     *\n     */\n    private onChangeHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onValidate?.(this.getValidityData(event));\n    }\n\n    private onFocusHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onFocus?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onBlurHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onBlur?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onInputSubmitRequest(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onEnter?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    /**\n     *\n     * BigCommercePayments Accelerated checkout related methods\n     *\n     */\n    // TODO: remove this part when BCP Fastlane A/B testing will be finished\n    private shouldInitializePayPalFastlane(methodId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const bigCommercePaymentsPaymentProviderCustomer = isBigCommercePaymentsFastlaneCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return (\n            paymentMethod?.initializationData?.isAcceleratedCheckoutEnabled &&\n            paymentMethod?.initializationData?.isBigCommercePaymentsAnalyticsV2Enabled &&\n            !bigCommercePaymentsPaymentProviderCustomer?.authenticationState\n        );\n    }\n\n    // TODO: remove this part when BCP Fastlane A/B testing will be finished\n    private async initializePayPalFastlaneOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n            const { initializationData } = paymentMethod;\n\n            if (!initializationData?.connectClientToken) {\n                return;\n            }\n\n            const payPalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n                payPalFastlaneSdk,\n                !!initializationData?.isDeveloperModeApplicable,\n            );\n        } catch (_: unknown) {\n            // We should avoid throwing any error from this flow to do no brake default flow\n            // This flow is optional\n        }\n    }\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isBigCommercePaymentsFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsCreditCardsPaymentStrategy from './bigcommerce-payments-credit-cards-payment-strategy';\n\nconst createBigCommercePaymentsCreditCardsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsCreditCardsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsCreditCardsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsCreditCardsPaymentStrategy, [\n    { id: 'bigcommerce_payments_creditcards' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    PayPalApmSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    NonInstantAlternativePaymentMethods,\n    PayPalOrderStatus,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions, {\n    WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n} from './bigcommerce-payments-alternative-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BigCommercePaymentsAlternativeMethodsPaymentStrategy\n    implements PaymentStrategy\n{\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private bigCommercePaymentsButton?: BigCommercePaymentsButtons;\n    private paypalApms?: PayPalApmSdk;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n    private bigCommercePaymentsAlternativeMethods?: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private bigCommercePaymentsSdkHelper: PayPalSdkHelper,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, bigcommerce_payments_apms } = options;\n\n        this.bigCommercePaymentsAlternativeMethods = bigcommerce_payments_apms;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_apms) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { orderId, shouldRenderFields } = paymentMethod.initializationData || {};\n\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(features, 'PAYPAL-5624.bcp_ideal_polling');\n\n        // Info:\n        // The APM button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render the button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        this.paypalApms = await this.bigCommercePaymentsSdkHelper.getPayPalApmsSdk(\n            paymentMethod,\n            state.getCartOrThrow().currency.code,\n        );\n\n        this.loadingIndicatorContainer = bigcommerce_payments_apms.container.split('#')[1];\n\n        this.renderButton(methodId, gatewayId, bigcommerce_payments_apms);\n\n        if (shouldRenderFields) {\n            this.renderFields(methodId, bigcommerce_payments_apms);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (this.isPollingEnabled && methodId === 'ideal') {\n            await new Promise((resolve, reject) => {\n                void this.initializePollingMechanism(methodId, resolve, reject, gatewayId);\n            });\n        }\n\n        if (!this.isNonInstantPaymentMethod(methodId)) {\n            await this.paymentIntegrationService.submitOrder(order, options);\n        }\n\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            methodId,\n            this.orderId,\n            gatewayId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.bigCommercePaymentsButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: (value?: unknown) => void,\n        rejectPromise: (value?: unknown) => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.bigCommercePaymentsIntegrationService.getOrderStatus(\n                gatewayId,\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.Approved;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deInitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                bigCommercePaymentsAlternativeMethods: this.bigCommercePaymentsAlternativeMethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deInitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deInitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.bigCommercePaymentsAlternativeMethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        gatewayId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { buttonStyle } = paymentMethod.initializationData || {};\n\n        const { container, onError, onRenderButton, submitForm } = bigcommerce_payments_apms;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: methodId,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(buttonStyle),\n            onInit: (_, actions) => bigcommerce_payments_apms.onInitButton(actions),\n            createOrder: () => this.onCreateOrder(methodId, gatewayId, bigcommerce_payments_apms),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => {\n                this.toggleLoadingIndicator(false);\n                this.deInitializePollingMechanism();\n            },\n            onError: (error) => {\n                this.deInitializePollingMechanism();\n                this.handleFailure(error, onError);\n            },\n            onClick: async (_, actions) =>\n                bigcommerce_payments_apms.onValidate(actions.resolve, actions.reject),\n        };\n\n        this.bigCommercePaymentsButton = paypalAmpsSdk.Buttons(buttonOptions);\n\n        if (!this.bigCommercePaymentsButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.bigCommercePaymentsButton.render(container);\n    }\n\n    private async onCreateOrder(\n        methodId: string,\n        gatewayId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<string> {\n        const { onValidate } = bigcommerce_payments_apms;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return () => Promise.resolve();\n        };\n\n        await onValidate(onValidationPassed, noop);\n\n        const orderId = await this.bigCommercePaymentsIntegrationService.createOrder(\n            'bigcommerce_payments_apms',\n        );\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            const order = { useStoreCredit: false };\n            const options = {\n                params: {\n                    methodId,\n                    gatewayId,\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.bigCommercePaymentsIntegrationService.submitPayment(\n                methodId,\n                orderId,\n                gatewayId,\n            );\n        }\n\n        return orderId;\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleFailure(\n        error: Error,\n        onError: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Fields methods\n     *\n     * */\n    private renderFields(\n        methodId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const { firstName, lastName, email } = state.getBillingAddressOrThrow();\n\n        const { apmFieldsContainer, apmFieldsStyles } = bigcommerce_payments_apms;\n\n        if (!apmFieldsContainer) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument should contain \"apmFieldsContainer\".',\n            );\n        }\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        const fieldsOptions = {\n            fundingSource: methodId,\n            style: apmFieldsStyles || {},\n            fields: {\n                name: {\n                    value: `${firstName} ${lastName}`,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        const paypalPaymentFields = paypalAmpsSdk.PaymentFields(fieldsOptions);\n\n        paypalPaymentFields.render(apmFieldsContainer);\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantAlternativePaymentMethods;\n    }\n\n    private getPaypalAmpsSdkOrThrow() {\n        if (!this.paypalApms) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalApms;\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsAlternativeMethodsPaymentStrategy from './bigcommerce-payments-alternative-methods-payment-strategy';\n\nconst createBigCommercePaymentsAlternativeMethodsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsAlternativeMethodsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsAlternativeMethodsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsAlternativeMethodsPaymentStrategy, [\n    { gateway: 'bigcommerce_payments_apms' },\n]);\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoPaymentInitializeOptions, {\n    WithBigCommercePaymentsVenmoPaymentInitializeOptions,\n} from './bigcommerce-payments-venmo-payment-initialize-options';\n\nexport default class BigCommercePaymentsVenmoPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: BigCommercePaymentsButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBigCommercePaymentsVenmoPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_venmo } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = bigcommerce_payments_venmo.container.split('#')[1];\n\n        this.renderButton(methodId, bigcommerce_payments_venmo);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            payment.methodId,\n            this.orderId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } =\n            bigcommerce_payments_venmo;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo_checkout',\n                ),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => this.toggleLoadingIndicator(false),\n            onError: (error) => this.handleError(error, onError),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            throw new NotImplementedError(\n                `Venmo is not available for your region. Please another payment method instead.`,\n            );\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsVenmoPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsVenmoPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n        this.toggleLoadingIndicator(false);\n    }\n\n    private handleError(\n        error: Error,\n        onError: BigCommercePaymentsVenmoPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoPaymentStrategy from './bigcommerce-payments-venmo-payment-strategy';\n\nconst createBigCommercePaymentsVenmoPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsVenmoPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoPaymentStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsCustomerInitializeOptions, {\n    WithBigCommercePaymentsCustomerInitializeOptions,\n} from './bigcommerce-payments-customer-initialize-options';\n\nexport default class BigCommercePaymentsCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBigCommercePaymentsCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments.container\" argument is not provided.',\n            );\n        }\n\n        if (bigcommerce_payments.onClick && typeof bigcommerce_payments.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = bigcommerce_payments.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsCustomerInitializeOptions,\n    ): void {\n        const { container, onClick, onComplete } = bigcommerce_payments;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            ...defaultCallbacks,\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${container}`);\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","const DefaultCheckoutButtonHeight = 36;\n\nexport default DefaultCheckoutButtonHeight;\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsCustomerStrategy from './bigcommerce-payments-customer-strategy';\n\nconst createBigCommercePaymentsCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsCustomerStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    getFastlaneStyles,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneStylesOption,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsFastlaneCustomerInitializeOptions, {\n    WithBigCommercePaymentsFastlaneCustomerInitializeOptions,\n} from './bigcommerce-payments-fastlane-customer-initialize-options';\n\nexport default class BigCommercePaymentsFastlaneCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions &\n            WithBigCommercePaymentsFastlaneCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_fastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n            const isTestModeEnabled = !!paymentMethod.initializationData?.isDeveloperModeApplicable;\n\n            const paypalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n                paypalFastlaneSdk,\n                isTestModeEnabled,\n                this.getFastlaneStyles(methodId, bigcommerce_payments_fastlane),\n            );\n        } catch (_) {\n            // TODO: add logger to be able to debug issues if there any\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback, methodId } =\n            options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (customer.isGuest) {\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            try {\n                await this.runPayPalAuthenticationFlowOrThrow(methodId);\n            } catch (_) {\n                // TODO: add logger to be able to debug issues if there any\n                // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n        const customerEmail = customer?.email || billingAddress?.email || '';\n\n        const { customerContextId } =\n            await this.bigCommercePaymentsFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n        const authenticationResult =\n            await this.bigCommercePaymentsFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                customerContextId,\n            );\n\n        const isAuthenticationFlowCanceled =\n            authenticationResult.authenticationState === PayPalFastlaneAuthenticationState.CANCELED;\n\n        await this.updateCustomerDataState(methodId, authenticationResult);\n\n        if (isAuthenticationFlowCanceled) {\n            this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n        } else {\n            this.bigCommercePaymentsFastlaneUtils.updateStorageSessionId(cartId);\n        }\n    }\n\n    private async updateCustomerDataState(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        const { authenticationState, addresses, billingAddress, shippingAddress, instruments } =\n            this.bigCommercePaymentsFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                methodId,\n                authenticationResult,\n            );\n\n        await this.paymentIntegrationService.updatePaymentProviderCustomer({\n            authenticationState,\n            addresses,\n            instruments,\n        });\n\n        if (billingAddress) {\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && cart.lineItems.physicalItems.length > 0) {\n            const updatedState = await this.paymentIntegrationService.updateShippingAddress(\n                shippingAddress,\n            );\n\n            const paymentMethod =\n                updatedState.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n                    methodId,\n                );\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                paymentMethod.initializationData || {};\n            const consignments = updatedState.getConsignments() || [];\n            const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n            const firstShippingOption = availableShippingOptions[0];\n            const recommendedShippingOption = availableShippingOptions.find(\n                (option) => option.isRecommended,\n            );\n\n            if (\n                (recommendedShippingOption || firstShippingOption) &&\n                isFastlaneShippingOptionAutoSelectEnabled\n            ) {\n                const shippingOptionId = recommendedShippingOption?.id || firstShippingOption.id;\n\n                await this.paymentIntegrationService.selectShippingOption(shippingOptionId);\n            }\n        }\n    }\n\n    /**\n     *\n     * Fastlane styling methods\n     *\n     */\n    private getFastlaneStyles(\n        methodId: string,\n        bigcommerce_payments_fastlane:\n            | BigCommercePaymentsFastlaneCustomerInitializeOptions\n            | undefined,\n    ): PayPalFastlaneStylesOption | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const { fastlaneStyles, isFastlaneStylingEnabled } = paymentMethod.initializationData || {};\n\n        return getFastlaneStyles(\n            isFastlaneStylingEnabled ? fastlaneStyles : {},\n            bigcommerce_payments_fastlane?.styles,\n        );\n    }\n}\n","import {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsFastlaneCustomerStrategy from './bigcommerce-payments-fastlane-customer-strategy';\n\nconst createBigCommercePaymentsFastlaneCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsFastlaneCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsFastlaneCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsFastlaneCustomerStrategy, [\n    { id: 'bigcommerce_payments_fastlane' }, // this method id will be provided for users from test group\n    { id: 'bigcommerce_payments_creditcards' }, // this method id will be provided for users from control group\n]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterCustomerInitializeOptions, {\n    WithBigCommercePaymentsPayLaterCustomerInitializeOptions,\n} from './bigcommerce-payments-paylater-customer-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions &\n            WithBigCommercePaymentsPayLaterCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_paylater, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater.container\" argument is not provided.',\n            );\n        }\n\n        if (\n            bigcommerce_payments_paylater.onClick &&\n            typeof bigcommerce_payments_paylater.onClick !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = bigcommerce_payments_paylater.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC BigCommercePayments PayLater]: button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments_paylater);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigCommercePaymentsPayLater: BigCommercePaymentsPayLaterCustomerInitializeOptions,\n    ): void {\n        const { container, onComplete, onClick } = bigCommercePaymentsPayLater;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_paylater',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n                    fundingSource,\n                    style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                        ...checkoutTopButtonStyles,\n                        height: DefaultCheckoutButtonHeight,\n                    }),\n                    ...defaultCallbacks,\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${container}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterCustomerStrategy from './bigcommerce-payments-paylater-customer-strategy';\n\nconst createBigCommercePaymentsPayLaterCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsPayLaterCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterCustomerStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoCustomerInitializeOptions, {\n    WithBigCommercePaymentsVenmoCustomerInitializeOptions,\n} from './bigcommerce-payments-venmo-customer-initialize-options';\n\nexport default class BigCommercePaymentsVenmoCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBigCommercePaymentsVenmoCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_venmo, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo.container\" argument is not provided.',\n            );\n        }\n\n        if (\n            bigcommerce_payments_venmo.onClick &&\n            typeof bigcommerce_payments_venmo.onClick !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo.onClick\" argument is not a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC Payments Venmo]: Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments_venmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoCustomerInitializeOptions,\n    ): void {\n        const { container, onClick } = bigcommerce_payments_venmo;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${container}`);\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoCustomerStrategy from './bigcommerce-payments-venmo-customer-strategy';\n\nconst createBigCommercePaymentsVenmoCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsVenmoCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoCustomerStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsButtonInitializeOptions, {\n    WithBigCommercePaymentsButtonInitializeOptions,\n} from './bigcommerce-payments-button-initialize-options';\n\nexport default class BigCommercePaymentsButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBigCommercePaymentsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(bigcommerce_payments?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !bigcommerce_payments.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof bigcommerce_payments.buyNowInitializeOptions?.getBuyNowCartRequestBody !==\n                'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? bigcommerce_payments.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsButtonStrategy from './bigcommerce-payments-button-strategy';\n\nconst createBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsButtonStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import {\n    BigCommercePaymentsInitializationData,\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalMessagesSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterButtonInitializeOptions, {\n    WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n} from './bigcommerce-payments-paylater-button-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private payPalSdkHelper: PayPalSdkHelper,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_paylater, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = bigcommerce_payments_paylater || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_paylater);\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this when data attributes will be removed from related cart banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const payPalSdkHelper = await this.payPalSdkHelper.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(payPalSdkHelper, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_paylater: BigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments_paylater;\n\n        const bigCommercePaymentsSdk =\n            this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_paylater',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [\n            bigCommercePaymentsSdk.FUNDING.PAYLATER,\n            bigCommercePaymentsSdk.FUNDING.CREDIT,\n        ];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n                    fundingSource,\n                    style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = bigCommercePaymentsSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterButtonStrategy from './bigcommerce-payments-paylater-button-strategy';\n\nconst createBigCommercePaymentsPayLaterButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsPayLaterButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterButtonStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsAlternativeMethodsButtonInitializeOptions, {\n    WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n} from './bigcommerce-payments-alternative-methods-button-initialize-options';\n\nexport default class BigCommercePaymentsAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_apms, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = bigcommerce_payments_apms || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_apms) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_apms);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            bigcommerce_payments_apms;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.bigcommerce_payments_apms.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments_apms'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: apm,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsAlternativeMethodsButtonStrategy from './bigcommerce-payments-alternative-methods-button-strategy';\n\nconst createBigCommercePaymentsAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsAlternativeMethodsButtonStrategy, [\n    { id: 'bigcommerce_payments_apms' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    StyleButtonColor,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoButtonInitializeOptions, {\n    WithBigCommercePaymentsVenmoButtonInitializeOptions,\n} from './bigcommerce-payments-venmo-button-initialize-options';\n\nexport default class BigCommercePaymentsVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_venmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            bigcommerce_payments_venmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_venmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = bigcommerce_payments_venmo;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle =\n            this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoButtonStrategy from './bigcommerce-payments-venmo-button-strategy';\n\nconst createBigCommercePaymentsVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoButtonStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n"],"names":["__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","constructor","options","this","styles","containerStyles","defineAnimation","container","buildContainer","indicator","buildIndicator","appendChild","show","parentId","parent","document","getElementById","Error","style","visibility","opacity","hide","handleTransitionEnd","removeEventListener","addEventListener","createElement","display","bottom","left","height","width","position","right","top","transition","setStyleAttribute","borderRadius","border","borderColor","margin","transform","transformStyle","animation","element","attrs","keys","forEach","k","setProperty","id","head","sheet","CSSStyleSheet","insertRule","LOADING_INDICATOR_STYLES","StandardError","message","super","name","type","setPrototypeOf","__proto__","captureStackTrace","stack","PaymentMethodClientUnavailableError","MissingDataErrorType","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","BuyNowCartCreationError","DEFAULT_RESPONSE","body","headers","status","RequestError","response","errors","CartSource","LiabilityShiftEnum","BigCommercePaymentsIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","NonInstantAlternativePaymentMethods","PayPalOrderStatus","BigCommercePaymentsIntegrationService","formPoster","paymentIntegrationService","bigCommercePaymentsRequestSender","bigCommercePaymentsScriptLoader","loadPayPalSdk","methodId","providedCurrencyCode","initializesOnCheckoutPage","forceLoad","state","getState","currencyCode","getCartOrThrow","currency","code","paymentMethod","getPaymentMethodOrThrow","paypalSdk","getPayPalSDK","getPayPalSdkOrThrow","createBuyNowCartOrThrow","buyNowInitializeOptions","cartRequestBody","getBuyNowCartRequestBody","createBuyNowCart","error","createOrder","providerId","requestBody","cartId","orderId","createOrderCardFields","setupToken","updateOrder","cart","consignment","getConsignmentsOrThrow","availableShippingOptions","selectedShippingOption","_error","getOrderStatus","tokenizePayment","postForm","payment_type","action","provider","order_id","source","BuyNow","cart_id","submitPayment","gatewayId","paymentData","formattedPayload","vault_payment_instrument","set_as_default_stored_instrument","device_info","method_id","paypal_account","getShippingOptionOrThrow","selectedShippingOptionId","recommendedShippingOption","find","option","isRecommended","shippingOptionToSelect","getAddress","address","firstName","lastName","email","phone","company","address1","address2","city","countryCode","postalCode","stateOrProvince","stateOrProvinceCode","customFields","getBillingAddressFromOrderDetails","payer","given_name","surname","email_address","address_line_1","address_line_2","admin_area_2","country_code","postal_code","admin_area_1","phone_number","national_number","getShippingAddressFromOrderDetails","orderDetails","purchase_units","full_name","shipping","split","join","getValidButtonStyle","label","shape","validStyles","undefined","getValidHeight","omitBy","isNil","removeElement","elementId","INTERNAL_USE_ONLY","ContentType","SDK_VERSION_HEADERS","BigCommercePaymentsRequestSender","requestSender","url","Json","post","put","BigCommercePaymentsScriptLoader","scriptLoader","window","paypalSdkScriptConfig","getPayPalSdkScriptConfigOrThrow","loadPayPalSDK","paypal","transformConfig","attributes","scriptSrc","URLSearchParams","toString","loadScript","async","clientToken","initializationData","clientId","intent","merchantId","buyerCountry","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isPayPalCreditAvailable","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","isGooglePayEnabled","commit","shouldEnableCard","enableCardFunding","enableCreditFunding","shouldEnableAPMs","enableVenmoFunding","enableAPMsFunding","googlePayComponent","cardFieldsComponent","disableFunding","filter","apm","includes","enableFunding","length","components","config","transformedConfig","value","Array","isArray","getHost","createFormPoster","createRequestSender","host","getScriptLoader","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","PaymentMethodInvalidError","OrderFinalizationNotRequiredError","isHostedInstrumentLike","instrument","shouldSaveInstrument","shouldSetAsDefaultInstrument","isVaultedInstrument","Boolean","instrumentId","isBaseInstrument","BigCommercePaymentsPaymentStrategy","bigCommercePaymentsIntegrationService","loadingIndicator","initialize","bigcommerce_payments","loadPaymentMethod","loadingIndicatorContainer","onInit","renderButton","shouldRenderPayPalButtonOnInitialization","execute","payload","payment","order","onError","features","getStoreConfigOrThrow","checkoutSettings","shouldHandleInstrumentDeclinedError","isPayPalVaultedInstrumentPaymentData","paymentPayload","prepareVaultedInstrumentPaymentPayload","preparePaymentPayload","submitOrder","isProviderError","Promise","_resolve","reject","paypalButton","close","handleError","finalize","deinitialize","resolve","paypalOrderId","shouldConfirmInstrument","isTrustedVaultingFlow","bigpay_token","token","paymentButtonStyles","checkoutPaymentButtonStyles","onRenderButton","onValidate","submitForm","buttonOptions","fundingSource","FUNDING","PAYPAL","onClick","_","actions","handleClick","onApprove","data","handleApprove","onCancel","toggleLoadingIndicator","Buttons","isEligible","render","orderID","fieldsValues","getFieldsValues","instruments","getInstruments","findInstrument","bigpayToken","trustedShippingAddress","isLoading","isBigCommercePaymentsProviderError","e","provider_error","UntrustedShippingCardVerificationType","TDSecureAuthenticationState","PayPalFastlaneAuthenticationState","PayPalSdkHelper","getPayPalFastlaneSdk","sessionId","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","getPayPalGooglePaySdk","paypalGooglePay","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","scriptOptions","scriptAttributes","replace","disableAPMsFunding","createBigCommercePaymentsSdk","createScriptLoader","CookieStorage","cookieKey","encodeURIComponent","cookie","firstIndex","indexOf","lastIndex","decodeURIComponent","substring","set","secure","cookieText","expires","path","domain","toUTCString","now","Date","minutes","setTime","getTime","remove","BigCommercePaymentsFastlaneUtils","initializePayPalFastlane","isTestModeEnabled","localStorage","setItem","paypalFastlane","defaultStyles","root","backgroundColorPrimary","Fastlane","getPayPalFastlaneOrThrow","lookupCustomerOrThrow","identity","lookupCustomerByEmail","triggerAuthenticationFlowOrThrow","customerContextId","triggerAuthenticationFlow","updateStorageSessionId","setDate","getDate","cookiesOption","removeStorageSessionId","getStorageSessionId","mapPayPalFastlaneProfileToBcCustomerData","authenticationResult","authenticationState","profileData","paypalBillingAddress","card","paymentSource","billingAddress","paypalShippingAddress","shippingAddress","paypalProfileName","paypalInstrument","mapPayPalToBcAddress","phoneNumber","mapPayPalToBcInstrument","addresses","filterAddresses","UNRECOGNIZED","brand","expiry","lastDigits","expiryYear","expiryMonth","defaultInstrument","iin","last4","method","untrustedShippingCardVerificationMode","PAN","mapBcToPayPalAddress","addressLine1","addressLine2","adminArea1","adminArea2","profileName","fullName","phoneData","nationalNumber","country","reduce","customerAddresses","currentAddress","some","customerAddress","isEqualAddresses","firstAddress","secondAddress","isEqual","normalizeAddress","omit","createBigCommercePaymentsFastlaneUtils","isInvalidStyleOption","styleOption","getFastlaneStyles","styleSettings","uiStyles","fastlaneStyles","input","toggle","textBody","text","textCaption","caption","branding","cleanUpFastlaneStyles","fastlaneRootSettingsBackgroundColor","errorColor","fastlaneRootSettingsErrorColor","fontFamily","fastlaneRootSettingsFontFamily","fontSizeBase","fastlaneRootSettingsFontSize","padding","fastlaneRootSettingsPadding","primaryColor","fastlaneRootSettingsPrimaryColor","fastlaneInputSettingsBorderRadius","fastlaneInputSettingsBorderColor","focusBorderColor","fastlaneInputSettingsFocusBorderBase","fastlaneInputSettingsBackgroundColor","borderWidth","fastlaneInputSettingsBorderWidth","textColorBase","fastlaneInputSettingsTextColorBase","colorPrimary","fastlaneToggleSettingsColorPrimary","colorSecondary","fastlaneToggleSettingsColorSecondary","fastlaneTextBodySettingsColor","fontSize","fastlaneTextBodySettingsFontSize","fastlaneTextCaptionSettingsColor","fastlaneTextCaptionSettingsFontSize","fastlaneBrandingSettings","mergeFastlaneStyles","isPayPalFastlaneCustomer","customer","isExperimentEnabled","experimentName","BigCommercePaymentsFastlanePaymentStrategy","bigCommercePaymentsSdk","bigCommercePaymentsFastlaneUtils","bigcommerce_payments_fastlane","onChange","isFastlaneStylingEnabled","threeDSVerificationMethod","shouldRunAuthenticationFlow","runPayPalAuthenticationFlowOrThrow","initializePayPalPaymentComponent","renderPayPalPaymentComponent","handlePayPalStoredInstrumentChange","orderRequest","isVaultedFlow","isBigcommerceFastlaneRequestError","invalidRequestError","translationKey","getCustomerOrThrow","paymentProviderCustomer","getPaymentProviderCustomer","paypalFastlaneCustomer","paypalFastlaneSessionId","isGuest","CANCELED","getCustomer","getBillingAddress","customerEmail","updatePaymentProviderCustomer","getBillingAddressOrThrow","trim","cardComponentOptions","fields","cardholderName","prefill","enabled","paypalComponentMethods","FastlaneCardComponent","getPayPalComponentMethodsOrThrow","is3DSEnabled","isBigcommercePaymentsFastlaneThreeDSAvailable","is3dsEnabled","fastlaneToken","get3DSNonce","paypal_fastlane_token","getPaymentToken","paypalNonce","getOrderOrThrow","checkoutUrl","links","checkoutLink","threeDomainSecureComponent","ThreeDomainSecureClient","threeDomainSecureParameters","amount","orderAmount","toFixed","nonce","threeDSRequested","transactionContext","experience_context","locale","return_url","cancel_url","liabilityShift","No","Unknown","Succeeded","Errored","Cancelled","console","paypalAxoSdk","selectionChanged","selectedCard","profile","showCardSelector","selectedInstrument","messagesStyles","layout","logo","ratio","NotImplementedError","BigCommercePaymentsPayLaterPaymentStrategy","paypalSdkHelper","bigcommerce_payments_paylater","paypalBNPLConfiguration","bannerContainerId","bannerConfiguration","renderMessages","bigCommercePaymentsButtons","bigCommerceSdk","fundingSources","PAYLATER","CREDIT","hasRenderedSmartButton","paypalMessagesOptions","getCheckoutOrThrow","outstandingBalance","placement","Messages","TimeoutError","BigCommercePaymentsRatePayPaymentStrategy","pollingInterval","maxPollingIntervalTime","pollingTimer","stopPolling","noop","bigcommerce_payments_ratepay","legalTextContainer","loadingContainerId","createFraudNetScript","loadFraudnetConfig","renderLegalText","metadataId","guid","ratepayBirthDate","ratepayPhoneNumber","ratepayPhoneCountryCode","rate_pay","birth_date","normalizeDate","initializePollingMechanism","fraudNetScript","querySelectorAll","fraudNetConfig","deinitializePollingMechanism","legalTextContainerElement","date","formattedDate","formatDate","formattedMonth","getMonth","getFullYear","legalTextContainerElementId","legalTextContainerId","buttonContainerId","buttonContainer","buttonContainerParent","parentNode","marginBottom","setAttribute","prepend","ratePayButton","Legal","PAY_UPON_INVOICE","resetPollingMechanism","testMode","scriptElement","generateGUID","f","s","sandbox","innerHTML","JSON","stringify","i","Math","floor","characters","random","script","src","reinitializeStrategy","resolvePromise","rejectPromise","timeout","setTimeout","clearTimeout","orderStatus","params","useMetadata","isOrderApproved","PollingStop","isPollingError","PollingError","gateway","HostedFieldType","isCreditCardFormFields","CardNumber","CardName","CardExpiry","isCreditCardVaultedFormFields","CardNumberVerification","CardCodeVerification","CardExpiryVerification","PaymentMethodFailedError","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","PaymentInvalidFormError","details","BigCommercePaymentsCreditCardsPaymentStrategy","bigcommerce_payments_creditcards","bigCommercePaymentsInitializationOptions","form","onCreditCardFieldsRenderingError","hostedFormOptions","isCreditCardForm","isCreditCardVaultedForm","hasUndefinedValues","initializeFields","shouldInitializePayPalFastlane","initializePayPalFastlaneOrThrow","executionPaymentData","validateHostedFormOrThrow","submitHostedForm","getInstrumentParams","returnedOrderId","submitPaymentPayload","returnedVaultedToken","cvvField","expiryField","numberField","nameField","verification_nonce","card_with_order","formOptions","executeCallback","getExecuteCallback","cardFieldsConfig","getInputStyles","vaultSetupToken","inputEvents","event","onChangeHandler","onFocus","onFocusHandler","onBlur","onBlurHandler","onInputSubmitRequest","cardFields","CardFields","stylizeInputContainers","renderFields","renderVaultedFields","createVaultSetupTokenCallback","createOrderCallback","createVaultSetupToken","fieldsOptions","getCardFieldsOrThrow","cardCode","containerId","CVVField","placeholder","cardExpiry","ExpiryField","cardName","NameField","cardNumber","NumberField","cardCodeVerification","cardExpiryVerification","cardNumberVerification","getFieldTypeByEmittedField","emittedBy","fieldType","mapFieldType","submitConfig","submit","cardFieldsState","then","validationData","getValidityData","isValid","mapValidationErrors","updatedFields","cardNameField","fieldsKeys","every","fieldsErrors","getInvalidErrorByFieldType","CardCode","validationErrors","commonStyles","default","fontWeight","outline","values","boxShadow","background","marginLeft","onEnter","bigCommercePaymentsPaymentProviderCustomer","isAcceleratedCheckoutEnabled","isBigCommercePaymentsAnalyticsV2Enabled","connectClientToken","payPalFastlaneSdk","BigCommercePaymentsAlternativeMethodsPaymentStrategy","bigCommercePaymentsSdkHelper","isPollingEnabled","bigcommerce_payments_apms","bigCommercePaymentsAlternativeMethods","shouldRenderFields","isNonInstantPaymentMethod","bigCommercePaymentsButton","Approved","deInitializePollingMechanism","paypalAmpsSdk","getPaypalAmpsSdkOrThrow","buttonStyle","onInitButton","onCreateOrder","handleFailure","useStoreCredit","apmFieldsContainer","apmFieldsStyles","fieldContainerElement","querySelector","PaymentFields","toUpperCase","BigCommercePaymentsVenmoPaymentStrategy","bigcommerce_payments_venmo","VENMO","BigCommercePaymentsCustomerStrategy","getPaymentMethod","signIn","credentials","signInCustomer","signOut","signOutCustomer","executePaymentMethodCheckout","continueWithCheckoutCallback","onComplete","checkoutTopButtonStyles","defaultCallbacks","hostedCheckoutCallbacks","onShippingAddressChange","onShippingOptionsChange","onHostedCheckoutApprove","buttonRenderOptions","updateBillingAddress","lineItems","physicalItems","updateShippingAddress","shippingOption","selectShippingOption","BigCommercePaymentsFastlaneCustomerStrategy","checkoutPaymentMethodExecuted","isAuthenticationFlowCanceled","updateCustomerDataState","updatedState","isFastlaneShippingOptionAutoSelectEnabled","consignments","getConsignments","firstShippingOption","shippingOptionId","BigCommercePaymentsPayLaterCustomerStrategy","bigCommercePaymentsPayLater","BigCommercePaymentsVenmoCustomerStrategy","paypalButtonRender","BigCommercePaymentsButtonStrategy","isBuyNowFlow","loadDefaultCheckout","onEligibilityFailure","buyNowFlowCallbacks","buyNowCart","loadCheckout","BigCommercePaymentsPayLaterButtonStrategy","payPalSdkHelper","messagingContainerId","messagingContainer","removeAttribute","paypalMessagesSdk","BigCommercePaymentsAlternativeMethodsButtonStrategy","BigCommercePaymentsVenmoButtonStrategy","getValidVenmoButtonStyles","validButtonStyle","gold"],"sourceRoot":""}