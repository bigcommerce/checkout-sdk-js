{"version":3,"file":"integrations/bigcommerce-payments.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/create-bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/checkout-buttons/default-checkout-button-height.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/bigcommerce-payments-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/paypal-sdk-helper.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/storage/src/cookie-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/bigcommerce-payments-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-fastlane-styles.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/bigcommerce-payments-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/create-bigcommerce-payments-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-base-instrument/is-base-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-payments-provider-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-paypal-fastlane-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/bigcommerce-payments-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-fastlane-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/create-bigcommerce-payments-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-ratepay/bigcommerce-payments-ratepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-ratepay/create-bigcommerce-payments-ratepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/hosted-field-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/is-credit-card-form-fields.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/is-credit-card-vaulted-form-fields.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-credit-cards/bigcommerce-payments-credit-cards-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-payments-fastlane-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-credit-cards/create-bigcommerce-payments-credit-cards-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/bigcommerce-payments-alternative-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/create-bigcommerce-payments-alternative-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/create-bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-button-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n// TODO: rename BigCommercePaymentsSDKFunding to PayPalSDKFunding\nexport interface BigCommercePaymentsSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * BigCommerce Payments SDK\n *\n */\n\nexport interface BigCommercePaymentsCardFieldsConfig {\n    inputEvents: {\n        onChange(data: BigCommercePaymentsCardFieldsState): void;\n        onFocus(data: BigCommercePaymentsCardFieldsState): void;\n        onBlur(data: BigCommercePaymentsCardFieldsState): void;\n        onInputSubmitRequest(data: BigCommercePaymentsCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: BigCommercePaymentsCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: BigCommercePaymentsHostedFieldsRenderOptions['styles'];\n    onApprove(data: BigCommercePaymentsCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface BigCommercePaymentsCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface BigCommercePaymentsCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype BigCommercePaymentsCardFieldsCard = BigCommercePaymentsHostedFieldsCard;\n\nexport interface BigCommercePaymentsCardFieldsState {\n    cards: BigCommercePaymentsCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: BigCommercePaymentsCardFieldsFieldData;\n        cardNumberField: BigCommercePaymentsCardFieldsFieldData;\n        cardNameField?: BigCommercePaymentsCardFieldsFieldData;\n        cardExpiryField: BigCommercePaymentsCardFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface BigCommercePaymentsFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsCardFields {\n    isEligible(): boolean;\n    CVVField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    ExpiryField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NameField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NumberField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    submit(config?: BigCommercePaymentsCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<BigCommercePaymentsCardFieldsState>;\n}\n\nexport interface BigCommercePaymentsCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (\n        data: BigCommercePaymentsCardFieldsConfig,\n    ) => Promise<BigCommercePaymentsCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: BigCommercePaymentsSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(\n            data: BigCommercePaymentsHostedFieldsRenderOptions,\n        ): Promise<BigCommercePaymentsHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n    Messages(options: BigCommercePaymentsMessagesOptions): BigCommercePaymentsMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\n/**\n *\n * BigCommerce Payments BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * BigCommerce Payments Hosted Fields\n *\n */\nexport interface BigCommercePaymentsHostedFieldsRenderOptions {\n    fields?: {\n        number?: BigCommercePaymentsHostedFieldOption;\n        cvv?: BigCommercePaymentsHostedFieldOption;\n        expirationDate?: BigCommercePaymentsHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface BigCommercePaymentsHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsHostedFields {\n    submit(\n        options?: BigCommercePaymentsHostedFieldsSubmitOptions,\n    ): Promise<BigCommercePaymentsHostedFieldsApprove>;\n    getState(): BigCommercePaymentsHostedFieldsState;\n    on(eventName: string, callback: (event: BigCommercePaymentsHostedFieldsState) => void): void;\n}\n\nexport interface BigCommercePaymentsHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface BigCommercePaymentsHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface BigCommercePaymentsHostedFieldsState {\n    cards: BigCommercePaymentsHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationDate?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationMonth?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationYear?: BigCommercePaymentsHostedFieldsFieldData;\n        cvv?: BigCommercePaymentsHostedFieldsFieldData;\n        postalCode?: BigCommercePaymentsHostedFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments Payment fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * BigCommercePayments Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: BigCommercePaymentsMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from './bigcommerce-payments-request-sender';\nimport BigCommercePaymentsScriptLoader from './bigcommerce-payments-script-loader';\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsScriptLoader: BigCommercePaymentsScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.paypalSdk = await this.bigCommercePaymentsScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.bigCommercePaymentsRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.bigCommercePaymentsRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.bigCommercePaymentsRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/bigcommerce_payments`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'bigcommerce_payments',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsHostWindow,\n    BigCommercePaymentsInitializationData,\n    BigCommercePaymentsScriptParams,\n    ComponentsScriptType,\n    FundingType,\n    PayPalSDK,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsScriptLoader {\n    private window: BigCommercePaymentsHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: BigCommercePaymentsScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<BigCommercePaymentsScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<BigCommercePaymentsScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): BigCommercePaymentsScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'bigcommerce_payments_creditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsIntegrationService,\n    BigCommercePaymentsRequestSender,\n    BigCommercePaymentsScriptLoader,\n} from './index';\n\nconst createBigCommercePaymentsIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        new BigCommercePaymentsScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createBigCommercePaymentsIntegrationService;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsCustomerInitializeOptions, {\n    WithBigCommercePaymentsCustomerInitializeOptions,\n} from './bigcommerce-payments-customer-initialize-options';\n\nexport default class BigCommercePaymentsCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBigCommercePaymentsCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments.container\" argument is not provided.',\n            );\n        }\n\n        if (bigcommerce_payments.onClick && typeof bigcommerce_payments.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = bigcommerce_payments.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsCustomerInitializeOptions,\n    ): void {\n        const { container, onClick, onComplete } = bigcommerce_payments;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            ...defaultCallbacks,\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${container}`);\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","const DefaultCheckoutButtonHeight = 36;\n\nexport default DefaultCheckoutButtonHeight;\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsCustomerStrategy from './bigcommerce-payments-customer-strategy';\n\nconst createBigCommercePaymentsCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsCustomerStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import { HostedInstrument, NonceInstrument } from './payment';\n\ntype PaymentInstrument = CardInstrument | AccountInstrument | HostedInstrument | NonceInstrument;\n\nexport default PaymentInstrument;\n\nexport interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport interface CardInstrument extends BaseInstrument {\n    brand: string;\n    expiryMonth: string;\n    expiryYear: string;\n    iin: string;\n    last4: string;\n    type: 'card';\n    untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType;\n}\n\ninterface BaseAccountInstrument extends BaseInstrument {\n    method: string;\n    type: 'account' | 'bank';\n}\n\nexport interface PayPalInstrument extends BaseAccountInstrument {\n    externalId: string;\n    method: 'paypal';\n}\n\nexport interface AchInstrument extends BaseAccountInstrument {\n    issuer: string;\n    accountNumber: string;\n    type: 'bank';\n    method: 'ach' | 'ecp';\n}\n\nexport interface BankInstrument extends BaseAccountInstrument {\n    accountNumber: string;\n    issuer: string;\n    iban: string;\n    method: string;\n    type: 'bank';\n}\n\nexport type AccountInstrument = PayPalInstrument | BankInstrument | AchInstrument;\n\nexport interface VaultAccessToken {\n    vaultAccessToken: string;\n    vaultAccessExpiry: number;\n}\n\nexport interface SessionContext {\n    customerId: number;\n    storeId: string;\n    currencyCode?: string;\n}\n\nexport interface InstrumentRequestContext extends SessionContext {\n    authToken: string;\n}\n","import { CardInstrument, CustomerAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    fastlaneStyles?: FastlaneStylesSettings;\n    connectClientToken?: string; // TODO: remove when BCP Fastlane A/B test will be finished\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneStylingEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isBigCommercePaymentsAnalyticsV2Enabled?: boolean; // PayPal Fastlane related\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: remove when BCP Fastlane A/B test will be finished\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    threeDSVerificationMethod?: string;\n}\n\n/**\n *\n * PayPalHostWindow contains different\n * PayPal Sdk instances for different purposes\n *\n */\nexport interface PayPalHostWindow extends Window {\n    paypalFastlane?: PayPalFastlane;\n    paypalFastlaneSdk?: PayPalFastlaneSdk;\n    paypalMessages?: PayPalMessagesSdk;\n    paypalApms?: PayPalApmSdk;\n    paypalGooglePay?: PayPalGooglePaySdk;\n}\n\n/**\n *\n * PayPal SDK config\n *\n */\nexport interface PayPalSdkConfig {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'enable-funding'?: EnableFundingType;\n        'disable-funding'?: FundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: PayPalSdkComponents;\n    };\n    attributes: {\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n        'data-namespace'?: string;\n        'data-client-token'?: string;\n        'data-sdk-client-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type PayPalSdkComponents = Array<\n    'fastlane' | 'messages' | 'buttons' | 'payment-fields' | 'googlepay' | 'three-domain-secure'\n>;\n\n/**\n *\n * PayPal Sdk instances\n *\n */\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\nexport interface threeDSecureParameters {\n    amount: string;\n    currency: string;\n    nonce: string;\n    threeDSRequested: boolean;\n    transactionContext: {\n        experience_context: {\n            brand_name?: string;\n            locale: string;\n            return_url: string;\n            cancel_url: string;\n        };\n    };\n}\n\nexport interface PayPalFastlaneSdk {\n    ThreeDomainSecureClient: {\n        isEligible(params: threeDSecureParameters): Promise<boolean>;\n        show(): Promise<ThreeDomainSecureClientShowResponse>;\n    };\n    Fastlane(options?: PayPalFastlaneOptions): Promise<PayPalFastlane>;\n}\n\ninterface ThreeDomainSecureClientShowResponse {\n    liabilityShift: LiabilityShiftEnum;\n    authenticationState: TDSecureAuthenticationState;\n    nonce: string; // Enriched nonce or the original nonce\n}\n\nexport interface PayPalMessagesSdk {\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PayPalApmSdk {\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n}\n\nexport interface PayPalGooglePaySdk {\n    Googlepay(): GooglePay;\n}\n\nexport enum TDSecureAuthenticationState {\n    Succeeded = 'succeeded',\n    Cancelled = 'cancelled',\n    Errored = 'errored',\n}\n\n/**\n *\n * Google Pay related types\n *\n */\n\ninterface GooglePay {\n    config: () => Promise<GooglePayConfig>;\n    confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n    initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: PayPalButtonApproveCallbackPayload,\n        actions: PayPalButtonApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(\n        data: PayPalButtonInitCallbackPayload,\n        actions: PayPalButtonInitCallbackActions,\n    ): Promise<void>;\n    onClick?(\n        data: PayPalButtonClickCallbackPayload,\n        actions: PayPalButtonClickCallbackActions,\n    ): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n}\n\nexport interface PayPalButtonClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface PayPalButtonClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface PayPalButtonInitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface PayPalButtonInitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalButtonApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface PayPalButtonApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments PaymentFields fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayLater Messages related types\n * doc: https://developer.paypal.com/docs/checkout/pay-later/us/integrate/reference\n */\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Fastlane related types\n *\n */\nexport interface PayPalFastlane {\n    identity: PayPalFastlaneIdentity;\n    events: PayPalFastlaneEvents;\n    profile: PayPalFastlaneProfile;\n    FastlaneCardComponent(\n        options: PayPalFastlaneCardComponentOptions,\n    ): Promise<PayPalFastlaneCardComponentMethods>;\n}\n\nexport interface PayPalFastlaneOptions {\n    styles?: PayPalFastlaneStylesOption;\n}\n\nexport interface PayPalFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerContextId: string,\n    ): Promise<PayPalFastlaneAuthenticationResult>;\n}\n\nexport interface PayPalFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface PayPalFastlaneAuthenticationResult {\n    authenticationState?: PayPalFastlaneAuthenticationState;\n    profileData?: PayPalFastlaneProfileData;\n}\n\nexport enum PayPalFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'canceled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface PayPalFastlaneProfileData {\n    name: PayPalFastlaneProfileName;\n    shippingAddress: PayPalFastlaneShippingAddress;\n    card: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface PayPalFastlaneProfilePhone {\n    countryCode: string;\n    nationalNumber: string;\n}\n\nexport interface PayPalFastlaneShippingAddress {\n    name: PayPalFastlaneProfileName;\n    phoneNumber: PayPalFastlaneProfilePhone;\n    address: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneProfileCard {\n    id: string; // nonce / token\n    paymentSource: PayPalFastlanePaymentSource;\n}\n\nexport interface PayPalFastlanePaymentSource {\n    card: PayPalFastlaneCardSource;\n}\n\nexport interface PayPalFastlaneCardSource {\n    brand: string;\n    expiry: string; // \"YYYY-MM\"\n    lastDigits: string; // \"1111\"\n    name: string;\n    billingAddress: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneAddress {\n    company?: string;\n    addressLine1: string;\n    addressLine2?: string;\n    adminArea1: string; // State\n    adminArea2: string; // City\n    postalCode: string;\n    countryCode?: string;\n}\n\nexport interface PayPalFastlaneProfileToBcCustomerDataMappingResult {\n    authenticationState: PayPalFastlaneAuthenticationState;\n    addresses: CustomerAddress[];\n    billingAddress?: CustomerAddress;\n    shippingAddress?: CustomerAddress;\n    instruments: CardInstrument[];\n}\n\nexport interface PayPalFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport interface PayPalFastlaneProfile {\n    showCardSelector(): Promise<PayPalFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<PayPalFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface PayPalFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: PayPalFastlaneShippingAddress;\n}\n\nexport interface PayPalFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneCardComponentMethods {\n    getPaymentToken(\n        options: PayPalFastlaneGetPaymentTokenOptions,\n    ): Promise<PayPalFastlaneProfileCard>;\n    render(element: string): void;\n}\n\nexport interface PayPalFastlaneGetPaymentTokenOptions {\n    name?: PayPalFastlaneProfileName;\n    billingAddress?: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneCardComponentOptions {\n    fields?: PayPalFastlaneCardComponentFields;\n}\n\nexport interface PayPalFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface PayPalFastlaneEvents {\n    apmSelected: (options: PayPalFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: PayPalFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: PayPalFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface PayPalFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface PayPalFastlaneApmSelectedEventOptions extends PayPalFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface PayPalFastlaneEmailEnteredEventOptions extends PayPalFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface PayPalFastlaneOrderPlacedEventOptions extends PayPalFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface PayPalFastlanePaymentFormattedPayload {\n    paypal_connect_token?: {\n        order_id?: string;\n        token: string;\n    };\n    paypal_fastlane_token?: {\n        order_id?: string;\n        token: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './bigcommerce-payments-types';\n\nexport default class PayPalSdkHelper {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane', 'three-domain-secure'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalSdkHelper from './paypal-sdk-helper';\n\nexport default function createBigCommercePaymentsSdk(): PayPalSdkHelper {\n    return new PayPalSdkHelper(createScriptLoader());\n}\n","interface CookieOptions {\n    expires?: Date;\n    path?: string;\n    domain?: string;\n    secure?: boolean;\n}\n\nexport default class CookieStorage {\n    static get(name: string): string | null {\n        const cookieKey = `${encodeURIComponent(`${name}`)}=`;\n        const cookie = document.cookie;\n\n        let value = null;\n\n        const firstIndex = cookie.indexOf(cookieKey);\n\n        if (firstIndex > -1) {\n            let lastIndex = cookie.indexOf(';', firstIndex);\n\n            if (lastIndex === -1) {\n                lastIndex = cookie.length;\n            }\n\n            value = decodeURIComponent(cookie.substring(firstIndex + cookieKey.length, lastIndex));\n        }\n\n        return value;\n    }\n\n    static set(name: string, value: string, options: CookieOptions = { secure: true }) {\n        let cookieText = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`;\n\n        const { expires, path, domain, secure } = options;\n\n        if (expires) {\n            cookieText += `; expires=${expires.toUTCString()}`;\n        } else {\n            const now = new Date();\n            // info: default cookie expiration time after setup\n            const minutes = 60;\n\n            now.setTime(now.getTime() + minutes * 60 * 1000);\n\n            cookieText += `; expires=${now.toUTCString()}`;\n        }\n\n        if (path) {\n            cookieText += `; path=${path}`;\n        }\n\n        if (domain) {\n            cookieText += `; domain=${domain}`;\n        }\n\n        if (secure) {\n            cookieText += '; secure';\n        }\n\n        document.cookie = cookieText;\n    }\n\n    static remove(name: string, options?: CookieOptions) {\n        CookieStorage.set(name, '', { expires: new Date(0), ...options });\n    }\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    Address,\n    CardInstrument,\n    CustomerAddress,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport {\n    PayPalFastlane,\n    PayPalFastlaneAddress,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneLookupCustomerByEmailResult,\n    PayPalFastlaneProfileCard,\n    PayPalFastlaneProfileName,\n    PayPalFastlaneProfilePhone,\n    PayPalFastlaneProfileToBcCustomerDataMappingResult,\n    PayPalFastlaneSdk,\n    PayPalFastlaneStylesOption,\n    PayPalHostWindow,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsFastlaneUtils {\n    private window: PayPalHostWindow;\n\n    constructor() {\n        this.window = window;\n    }\n\n    async initializePayPalFastlane(\n        paypalFastlaneSdk: PayPalFastlaneSdk,\n        isTestModeEnabled: boolean,\n        styles?: PayPalFastlaneStylesOption,\n    ): Promise<PayPalFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n            window.localStorage.setItem('axoEnv', 'sandbox'); // TODO: remove if this key does not use on PayPal side\n        }\n\n        if (!this.window.paypalFastlane) {\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.window.paypalFastlane = await paypalFastlaneSdk.Fastlane({\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    getPayPalFastlaneOrThrow(): PayPalFastlane {\n        if (!this.window.paypalFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    /**\n     *\n     * Detects the customer to PayPal Fastlane relation and\n     * returns customerContextId to use it for authentication\n     *\n     */\n    async lookupCustomerOrThrow(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult> {\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.lookupCustomerByEmail(email);\n    }\n\n    /**\n     *\n     * Triggers authentication flow (shows OTP popup) if the customer recognised as PayPal Fastlane user\n     * and returns PayPal Fastlane Profile data to use it in BC checkout\n     *\n     */\n    async triggerAuthenticationFlowOrThrow(\n        customerContextId?: string,\n    ): Promise<PayPalFastlaneAuthenticationResult> {\n        if (!customerContextId) {\n            return {};\n        }\n\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.triggerAuthenticationFlow(customerContextId);\n    }\n\n    /**\n     *\n     * 'updateStorageSessionId' method is used to:\n     * - set session id after user was authenticated (or unrecognised) to trigger authentication after page refresh\n     *\n     * Flow info:\n     * If user unrecognised then the lookup method will be working but the OTP will not be shown\n     * If user recognised and not canceled then the lookup method will be working and the OTP will be shown only if needed\n     * If user cancels the OPT then OTP will not be triggered after page refresh\n     *\n     */\n    updateStorageSessionId(sessionId: string): void {\n        const expires = new Date();\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        const cookiesOption = {\n            expires,\n            secure: true,\n        };\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, cookiesOption);\n    }\n\n    removeStorageSessionId(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    getStorageSessionId(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    /**\n     *\n     * 'mapPayPalFastlaneProfileToBcCustomerData' method is responsible for:\n     * - mapping PayPal Fastlane Profile data to BC data shape\n     * - returning mapped data to use for updating PaymentProviderCustomer state and\n     * update shipping and billing addresses\n     *\n     */\n    mapPayPalFastlaneProfileToBcCustomerData(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): PayPalFastlaneProfileToBcCustomerDataMappingResult {\n        const { authenticationState, profileData } = authenticationResult;\n\n        const paypalBillingAddress = profileData?.card?.paymentSource?.card?.billingAddress;\n        const paypalShippingAddress = profileData?.shippingAddress;\n        const paypalProfileName = profileData?.name;\n        const paypalInstrument = profileData?.card;\n\n        const shippingAddress = paypalShippingAddress\n            ? this.mapPayPalToBcAddress(\n                  paypalShippingAddress.address,\n                  paypalShippingAddress.name,\n                  paypalShippingAddress.phoneNumber,\n              )\n            : undefined;\n        const billingAddress =\n            paypalBillingAddress && paypalProfileName\n                ? this.mapPayPalToBcAddress(\n                      paypalBillingAddress,\n                      paypalProfileName,\n                      paypalShippingAddress?.phoneNumber,\n                  )\n                : undefined;\n        const instruments = paypalInstrument\n            ? this.mapPayPalToBcInstrument(methodId, paypalInstrument)\n            : [];\n\n        const addresses = this.filterAddresses([shippingAddress, billingAddress]);\n\n        return {\n            authenticationState:\n                authenticationState || PayPalFastlaneAuthenticationState.UNRECOGNIZED,\n            addresses,\n            billingAddress,\n            shippingAddress,\n            instruments,\n        };\n    }\n\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instrument: PayPalFastlaneProfileCard,\n    ): CardInstrument[] {\n        const { id, paymentSource } = instrument;\n        const { brand, expiry, lastDigits } = paymentSource.card;\n\n        const [expiryYear, expiryMonth] = expiry.split('-');\n\n        return [\n            {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n                type: 'card',\n            },\n        ];\n    }\n\n    mapBcToPayPalAddress(address?: Address): PayPalFastlaneAddress {\n        return {\n            company: address?.company || '',\n            addressLine1: address?.address1 || '',\n            addressLine2: address?.address2 || '',\n            adminArea1: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            adminArea2: address?.city || '',\n            postalCode: address?.postalCode || '',\n            countryCode: address?.countryCode || '',\n        };\n    }\n\n    mapPayPalToBcAddress(\n        address: PayPalFastlaneAddress,\n        profileName: PayPalFastlaneProfileName,\n        phone?: PayPalFastlaneProfilePhone,\n        customFields?: CustomerAddress['customFields'],\n    ): CustomerAddress {\n        const [firstName, lastName] = profileName.fullName.split(' ');\n\n        const phoneData = {\n            nationalNumber: phone?.nationalNumber || '',\n            countryCode: phone?.countryCode || '',\n        };\n\n        return {\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: profileName.firstName || firstName || '',\n            lastName: profileName.lastName || lastName || '',\n            company: address.company || '',\n            address1: address.addressLine1,\n            address2: address.addressLine2 || '',\n            city: address.adminArea2,\n            stateOrProvince: address.adminArea1,\n            stateOrProvinceCode: address.adminArea1,\n            country: address.countryCode || '', // TODO: update country with valid naming\n            countryCode: address.countryCode || '',\n            postalCode: address.postalCode,\n            phone: phoneData.countryCode + phoneData.nationalNumber,\n            customFields: customFields || [],\n        };\n    }\n\n    /**\n     *\n     * This method is responsible for filtering PayPal Fastlane addresses if they are the same\n     * and returns an array of addresses to use them for shipping and/or billing address selections\n     * so the customer will be able to use addresses from PayPal Fastlane in checkout flow\n     *\n     */\n    filterAddresses(addresses: Array<CustomerAddress | undefined>): CustomerAddress[] {\n        return addresses.reduce(\n            (customerAddresses: CustomerAddress[], currentAddress: CustomerAddress | undefined) => {\n                if (!currentAddress) {\n                    return customerAddresses;\n                }\n\n                const sameAddressInTheArray = customerAddresses.some((customerAddress) =>\n                    this.isEqualAddresses(customerAddress, currentAddress),\n                );\n\n                return sameAddressInTheArray\n                    ? customerAddresses\n                    : [...customerAddresses, currentAddress];\n            },\n            [],\n        );\n    }\n\n    private isEqualAddresses(\n        firstAddress: CustomerAddress,\n        secondAddress: CustomerAddress,\n    ): boolean {\n        return isEqual(this.normalizeAddress(firstAddress), this.normalizeAddress(secondAddress));\n    }\n\n    private normalizeAddress(address: CustomerAddress) {\n        return omit(address, ['id', 'phone']);\n    }\n}\n","import BigCommercePaymentsFastlaneUtils from './bigcommerce-payments-fastlane-utils';\n\nexport default function createBigCommercePaymentsFastlaneUtils(): BigCommercePaymentsFastlaneUtils {\n    return new BigCommercePaymentsFastlaneUtils();\n}\n","import { omitBy } from 'lodash';\n\nimport { FastlaneStylesSettings, PayPalFastlaneStylesOption } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n) {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n): PayPalFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: PayPalFastlaneStylesOption) {\n    const fastlaneStyles: PayPalFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    getFastlaneStyles,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneStylesOption,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsFastlaneCustomerInitializeOptions, {\n    WithBigCommercePaymentsFastlaneCustomerInitializeOptions,\n} from './bigcommerce-payments-fastlane-customer-initialize-options';\n\nexport default class BigCommercePaymentsFastlaneCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions &\n            WithBigCommercePaymentsFastlaneCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_fastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n            const isTestModeEnabled = !!paymentMethod.initializationData?.isDeveloperModeApplicable;\n\n            const paypalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n                paypalFastlaneSdk,\n                isTestModeEnabled,\n                this.getFastlaneStyles(methodId, bigcommerce_payments_fastlane),\n            );\n        } catch (_) {\n            // TODO: add logger to be able to debug issues if there any\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback, methodId } =\n            options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (customer.isGuest) {\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            try {\n                await this.runPayPalAuthenticationFlowOrThrow(methodId);\n            } catch (_) {\n                // TODO: add logger to be able to debug issues if there any\n                // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n        const customerEmail = customer?.email || billingAddress?.email || '';\n\n        const { customerContextId } =\n            await this.bigCommercePaymentsFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n        const authenticationResult =\n            await this.bigCommercePaymentsFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                customerContextId,\n            );\n\n        const isAuthenticationFlowCanceled =\n            authenticationResult.authenticationState === PayPalFastlaneAuthenticationState.CANCELED;\n\n        await this.updateCustomerDataState(methodId, authenticationResult);\n\n        if (isAuthenticationFlowCanceled) {\n            this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n        } else {\n            this.bigCommercePaymentsFastlaneUtils.updateStorageSessionId(cartId);\n        }\n    }\n\n    private async updateCustomerDataState(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        const { authenticationState, addresses, billingAddress, shippingAddress, instruments } =\n            this.bigCommercePaymentsFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                methodId,\n                authenticationResult,\n            );\n\n        await this.paymentIntegrationService.updatePaymentProviderCustomer({\n            authenticationState,\n            addresses,\n            instruments,\n        });\n\n        if (billingAddress) {\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && cart.lineItems.physicalItems.length > 0) {\n            const updatedState = await this.paymentIntegrationService.updateShippingAddress(\n                shippingAddress,\n            );\n\n            const paymentMethod =\n                updatedState.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n                    methodId,\n                );\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                paymentMethod.initializationData || {};\n            const consignments = updatedState.getConsignments() || [];\n            const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n            const firstShippingOption = availableShippingOptions[0];\n            const recommendedShippingOption = availableShippingOptions.find(\n                (option) => option.isRecommended,\n            );\n\n            if (\n                (recommendedShippingOption || firstShippingOption) &&\n                isFastlaneShippingOptionAutoSelectEnabled\n            ) {\n                const shippingOptionId = recommendedShippingOption?.id || firstShippingOption.id;\n\n                await this.paymentIntegrationService.selectShippingOption(shippingOptionId);\n            }\n        }\n    }\n\n    /**\n     *\n     * Fastlane styling methods\n     *\n     */\n    private getFastlaneStyles(\n        methodId: string,\n        bigcommerce_payments_fastlane:\n            | BigCommercePaymentsFastlaneCustomerInitializeOptions\n            | undefined,\n    ): PayPalFastlaneStylesOption | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const { fastlaneStyles, isFastlaneStylingEnabled } = paymentMethod.initializationData || {};\n\n        return getFastlaneStyles(\n            isFastlaneStylingEnabled ? fastlaneStyles : {},\n            bigcommerce_payments_fastlane?.styles,\n        );\n    }\n}\n","import {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsFastlaneCustomerStrategy from './bigcommerce-payments-fastlane-customer-strategy';\n\nconst createBigCommercePaymentsFastlaneCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsFastlaneCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsFastlaneCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsFastlaneCustomerStrategy, [\n    { id: 'bigcommerce_payments_fastlane' }, // this method id will be provided for users from test group\n    { id: 'bigcommerce_payments_creditcards' }, // this method id will be provided for users from control group\n]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterCustomerInitializeOptions, {\n    WithBigCommercePaymentsPayLaterCustomerInitializeOptions,\n} from './bigcommerce-payments-paylater-customer-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions &\n            WithBigCommercePaymentsPayLaterCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_paylater, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater.container\" argument is not provided.',\n            );\n        }\n\n        if (\n            bigcommerce_payments_paylater.onClick &&\n            typeof bigcommerce_payments_paylater.onClick !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = bigcommerce_payments_paylater.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC BigCommercePayments PayLater]: button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments_paylater);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigCommercePaymentsPayLater: BigCommercePaymentsPayLaterCustomerInitializeOptions,\n    ): void {\n        const { container, onComplete, onClick } = bigCommercePaymentsPayLater;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_paylater',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n                    fundingSource,\n                    style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                        ...checkoutTopButtonStyles,\n                        height: DefaultCheckoutButtonHeight,\n                    }),\n                    ...defaultCallbacks,\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${container}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterCustomerStrategy from './bigcommerce-payments-paylater-customer-strategy';\n\nconst createBigCommercePaymentsPayLaterCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsPayLaterCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterCustomerStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoCustomerInitializeOptions, {\n    WithBigCommercePaymentsVenmoCustomerInitializeOptions,\n} from './bigcommerce-payments-venmo-customer-initialize-options';\n\nexport default class BigCommercePaymentsVenmoCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBigCommercePaymentsVenmoCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_venmo, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo.container\" argument is not provided.',\n            );\n        }\n\n        if (\n            bigcommerce_payments_venmo.onClick &&\n            typeof bigcommerce_payments_venmo.onClick !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo.onClick\" argument is not a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC Payments Venmo]: Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments_venmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoCustomerInitializeOptions,\n    ): void {\n        const { container, onClick } = bigcommerce_payments_venmo;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${container}`);\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoCustomerStrategy from './bigcommerce-payments-venmo-customer-strategy';\n\nconst createBigCommercePaymentsVenmoCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsVenmoCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoCustomerStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","export interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport function isBaseInstrument(instrument: unknown): instrument is BaseInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    return (\n        'bigpayToken' in instrument &&\n        'defaultInstrument' in instrument &&\n        'provider' in instrument &&\n        'trustedShippingAddress' in instrument &&\n        'method' in instrument &&\n        'type' in instrument\n    );\n}\n","import { isBigCommercePaymentsProviderError } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    HostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentPayload,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isBaseInstrument } from '@bigcommerce/checkout-sdk/utility';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPaymentInitializeOptions, {\n    WithBigCommercePaymentsPaymentInitializeOptions,\n} from './bigcommerce-payments-payment-initialize-options';\n\nexport default class BigCommercePaymentsPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: BigCommercePaymentsButtons;\n    private bigcommerce_payments?: BigCommercePaymentsPaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBigCommercePaymentsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments } = options || {};\n\n        this.bigcommerce_payments = bigcommerce_payments;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.loadingIndicatorContainer = bigcommerce_payments.container.split('#')[1];\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (bigcommerce_payments.onInit && typeof bigcommerce_payments.onInit === 'function') {\n            bigcommerce_payments.onInit(() => this.renderButton(methodId, bigcommerce_payments));\n        }\n\n        if (\n            bigcommerce_payments.shouldRenderPayPalButtonOnInitialization === undefined ||\n            bigcommerce_payments.shouldRenderPayPalButtonOnInitialization\n        ) {\n            this.renderButton(methodId, bigcommerce_payments);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { onError } = this.bigcommerce_payments || {};\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const shouldHandleInstrumentDeclinedError =\n            features && features['PAYPAL-3438.handling_instrument_declined_error_ppc'];\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (this.isPayPalVaultedInstrumentPaymentData(paymentData) && !this.orderId) {\n            this.orderId = await this.createOrder();\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        const paymentPayload = this.isPayPalVaultedInstrumentPaymentData(paymentData)\n            ? this.prepareVaultedInstrumentPaymentPayload(methodId, this.orderId, paymentData)\n            : this.preparePaymentPayload(methodId, this.orderId, paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            if (this.isProviderError(error) && shouldHandleInstrumentDeclinedError) {\n                await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(payment.methodId);\n\n                await new Promise((_resolve, reject) => {\n                    if (this.bigcommerce_payments) {\n                        this.paypalButton?.close();\n                        this.renderButton(payment.methodId, this.bigcommerce_payments);\n                        this.handleError(new Error('INSTRUMENT_DECLINED'), onError);\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error, onError);\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    private prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: VaultedInstrument & HostedInstrument,\n    ): Payment {\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        const shouldConfirmInstrument = !this.isTrustedVaultingFlow(paymentData);\n\n        if (shouldConfirmInstrument) {\n            return {\n                methodId,\n                paymentData: {\n                    shouldSaveInstrument: shouldConfirmInstrument,\n                    shouldSetAsDefaultInstrument,\n                    formattedPayload: {\n                        paypal_account: {\n                            order_id: paypalOrderId,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                    bigpay_token: {\n                        token: instrumentId,\n                    },\n                },\n            },\n        };\n    }\n\n    private preparePaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n        const { container, onError, onRenderButton, onValidate, submitForm } = bigcommerce_payments;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () => this.createOrder(),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onError: (error) => this.handleError(error, onError),\n            onCancel: () => this.toggleLoadingIndicator(false),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleError(\n        error: unknown,\n        onError: BigCommercePaymentsPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private async createOrder(): Promise<string> {\n        const fieldsValues = this.getFieldsValues();\n\n        return this.bigCommercePaymentsIntegrationService.createOrder(\n            'bigcommerce_paymentscheckout',\n            {\n                shouldSaveInstrument: fieldsValues?.shouldSaveInstrument || false,\n            },\n        );\n    }\n\n    /**\n     *\n     * Vaulting flow methods\n     *\n     * */\n    private getFieldsValues(): HostedInstrument | undefined {\n        const { getFieldsValues } = this.bigcommerce_payments || {};\n\n        return typeof getFieldsValues === 'function' ? getFieldsValues() : undefined;\n    }\n\n    private isTrustedVaultingFlow(paymentData?: PaymentInstrumentPayload): boolean {\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            const state = this.paymentIntegrationService.getState();\n\n            const instruments = state.getInstruments();\n\n            const findInstrument = instruments?.find(\n                (instrument) =>\n                    isBaseInstrument(instrument) &&\n                    instrument.bigpayToken === paymentData.instrumentId,\n            );\n            const trustedShippingAddress = isBaseInstrument(findInstrument)\n                ? findInstrument.trustedShippingAddress\n                : {};\n\n            return !!trustedShippingAddress;\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Guards\n     *\n     */\n    private isPayPalVaultedInstrumentPaymentData(\n        paymentData?: PaymentInstrumentPayload,\n    ): paymentData is VaultedInstrument & HostedInstrument {\n        return (\n            !!paymentData && isVaultedInstrument(paymentData) && isHostedInstrumentLike(paymentData)\n        );\n    }\n\n    private isProviderError(error: unknown): boolean {\n        if (isBigCommercePaymentsProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === 'INSTRUMENT_DECLINED';\n        }\n\n        return false;\n    }\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isBigCommercePaymentsProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPaymentStrategy from './bigcommerce-payments-payment-strategy';\n\nconst createBigCommercePaymentsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPaymentStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n// TODO: update PayPalConnectCustomer with PayPalFastlaneCustomer\nexport default function isPayPalFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","import {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    getFastlaneStyles,\n    isBigcommerceFastlaneRequestError,\n    isPayPalFastlaneCustomer,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneCardComponentMethods,\n    PayPalFastlaneCardComponentOptions,\n    PayPalFastlanePaymentFormattedPayload,\n    PayPalFastlaneSdk,\n    PayPalSdkHelper,\n    TDSecureAuthenticationState,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CardInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport BigCommercePaymentsRequestSender from '../bigcommerce-payments-request-sender';\nimport { LiabilityShiftEnum } from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsFastlanePaymentInitializeOptions, {\n    WithBigCommercePaymentsFastlanePaymentInitializeOptions,\n} from './bigcommerce-payments-fastlane-payment-initialize-options';\n\nexport default class BigCommercePaymentsFastlanePaymentStrategy implements PaymentStrategy {\n    private paypalComponentMethods?: PayPalFastlaneCardComponentMethods;\n    private threeDSVerificationMethod?: string;\n    private paypalFastlaneSdk?: PayPalFastlaneSdk;\n    private bigcommerce_payments_fastlane?: BigCommercePaymentsFastlanePaymentInitializeOptions;\n    private methodId?: string;\n    private orderId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     * */\n    async initialize(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_fastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.methodId = methodId;\n\n        if (!bigcommerce_payments_fastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane\" argument is not provided.',\n            );\n        }\n\n        this.bigcommerce_payments_fastlane = bigcommerce_payments_fastlane;\n\n        if (\n            !bigcommerce_payments_fastlane.onInit ||\n            typeof bigcommerce_payments_fastlane.onInit !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (\n            !bigcommerce_payments_fastlane.onChange ||\n            typeof bigcommerce_payments_fastlane.onChange !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isDeveloperModeApplicable, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        this.threeDSVerificationMethod =\n            paymentMethod.initializationData?.threeDSVerificationMethod;\n\n        this.paypalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n            paymentMethod,\n            cart.currency.code,\n            cart.id,\n        );\n\n        const paypalFastlaneStyling = isFastlaneStylingEnabled\n            ? paymentMethod?.initializationData?.fastlaneStyles\n            : {};\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyling,\n            bigcommerce_payments_fastlane?.styles,\n        );\n\n        await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n            this.paypalFastlaneSdk,\n            !!isDeveloperModeApplicable,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.runPayPalAuthenticationFlowOrThrow(methodId);\n        }\n\n        await this.initializePayPalPaymentComponent();\n\n        bigcommerce_payments_fastlane.onInit((container: string) =>\n            this.renderPayPalPaymentComponent(container),\n        );\n        bigcommerce_payments_fastlane.onChange(() =>\n            this.handlePayPalStoredInstrumentChange(methodId),\n        );\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData, methodId } = payment;\n\n        const isVaultedFlow = paymentData && isVaultedInstrument(paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            const paymentPayload = isVaultedFlow\n                ? await this.prepareVaultedInstrumentPaymentPayload(methodId, paymentData)\n                : await this.preparePaymentPayload(methodId, paymentData);\n\n            await this.paymentIntegrationService.submitPayment<PayPalFastlanePaymentFormattedPayload>(\n                paymentPayload,\n            );\n\n            this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n        } catch (error) {\n            if (\n                isBigcommerceFastlaneRequestError(error) &&\n                error.response.name === 'INVALID_REQUEST'\n            ) {\n                const invalidRequestError = {\n                    translationKey: 'payment.errors.invalid_request_error',\n                };\n\n                this.handleError(invalidRequestError);\n\n                return Promise.reject();\n            }\n\n            if (error instanceof Error && error.name !== 'FastlaneError') {\n                throw error;\n            }\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.bigCommercePaymentsFastlaneUtils.getStorageSessionId();\n\n        if (\n            !customer.isGuest ||\n            paypalFastlaneCustomer?.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return !paypalFastlaneCustomer?.authenticationState && paypalFastlaneSessionId === cart.id;\n    }\n\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const customerEmail = customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } =\n                await this.bigCommercePaymentsFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n            const authenticationResult =\n                await this.bigCommercePaymentsFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                    customerContextId,\n                );\n\n            const { authenticationState, addresses, instruments } =\n                this.bigCommercePaymentsFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                    methodId,\n                    authenticationResult,\n                );\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            const isAuthenticationFlowCanceled =\n                authenticationResult.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED;\n\n            if (isAuthenticationFlowCanceled) {\n                this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n            } else {\n                this.bigCommercePaymentsFastlaneUtils.updateStorageSessionId(cart.id);\n            }\n        } catch (error) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n    }\n\n    /**\n     *\n     * BigCommercePayments Fastlane Card Component rendering method\n     *\n     */\n    private async initializePayPalPaymentComponent(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const phone = billingAddress.phone;\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const paypalFastlane = this.bigCommercePaymentsFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const cardComponentOptions: PayPalFastlaneCardComponentOptions = {\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        this.paypalComponentMethods = await paypalFastlane.FastlaneCardComponent(\n            cardComponentOptions,\n        );\n    }\n\n    private renderPayPalPaymentComponent(container?: string): void {\n        const paypalComponentMethods = this.getPayPalComponentMethodsOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render card component because \"container\" argument is not provided.',\n            );\n        }\n\n        paypalComponentMethods.render(container);\n    }\n\n    private getPayPalComponentMethodsOrThrow(): PayPalFastlaneCardComponentMethods {\n        if (!this.paypalComponentMethods) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalComponentMethods;\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paymentData: VaultedInstrument,\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const { instrumentId } = paymentData;\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const is3DSEnabled =\n            this.isBigcommercePaymentsFastlaneThreeDSAvailable() &&\n            paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(instrumentId);\n        }\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(instrumentId) : instrumentId;\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const { getPaymentToken } = this.getPayPalComponentMethodsOrThrow();\n\n        const { id } = await getPaymentToken({\n            name: { fullName },\n            billingAddress:\n                this.bigCommercePaymentsFastlaneUtils.mapBcToPayPalAddress(billingAddress),\n        });\n\n        const is3DSEnabled =\n            this.isBigcommercePaymentsFastlaneThreeDSAvailable() &&\n            paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(id);\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(id) : id;\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async createOrder(id: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n\n        if (this.methodId) {\n            const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(\n                this.methodId,\n                {\n                    cartId,\n                    fastlaneToken: id,\n                },\n            );\n\n            this.orderId = orderId;\n        }\n    }\n\n    /**\n     *\n     * 3DSecure methods\n     *\n     * */\n    private async get3DSNonce(paypalNonce: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const order = state.getOrderOrThrow();\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        const threeDomainSecureComponent = this.paypalFastlaneSdk?.ThreeDomainSecureClient;\n\n        if (!threeDomainSecureComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const threeDomainSecureParameters = {\n            amount: order.orderAmount.toFixed(2),\n            currency: cart.currency.code,\n            nonce: paypalNonce,\n            threeDSRequested: this.threeDSVerificationMethod === 'SCA_ALWAYS',\n            transactionContext: {\n                experience_context: {\n                    locale: 'en-US',\n                    return_url: checkoutUrl,\n                    cancel_url: checkoutUrl,\n                },\n            },\n        };\n\n        const isThreeDomainSecureEligible = await threeDomainSecureComponent.isEligible(\n            threeDomainSecureParameters,\n        );\n\n        if (isThreeDomainSecureEligible) {\n            const { liabilityShift, authenticationState, nonce } =\n                await threeDomainSecureComponent.show();\n\n            if (\n                liabilityShift === LiabilityShiftEnum.No ||\n                liabilityShift === LiabilityShiftEnum.Unknown\n            ) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            await this.createOrder(paypalNonce);\n\n            if (authenticationState === TDSecureAuthenticationState.Succeeded) {\n                return nonce;\n            }\n\n            // Cancelled or errored, merchant can choose to send the customer back to 3D Secure or submit a payment and or vault the payment token.\n            if (authenticationState === TDSecureAuthenticationState.Errored) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            if (authenticationState === TDSecureAuthenticationState.Cancelled) {\n                console.error('3DS check was canceled');\n                throw new PaymentMethodInvalidError();\n            }\n        }\n\n        return paypalNonce;\n    }\n\n    /**\n     *\n     * BigCommercePayments Fastlane instrument change\n     *\n     */\n    private async handlePayPalStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.bigCommercePaymentsFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstrument =\n                this.bigCommercePaymentsFastlaneUtils.mapPayPalToBcInstrument(\n                    methodId,\n                    selectedCard,\n                )[0];\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                ...paypalFastlaneCustomer,\n                instruments: [selectedInstrument],\n            });\n\n            return selectedInstrument;\n        }\n\n        return undefined;\n    }\n\n    /**\n     *\n     * Bigcommerce Payments Fastlane experiments handling\n     *\n     */\n    private isBigcommercePaymentsFastlaneThreeDSAvailable(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        return isExperimentEnabled(features, 'PROJECT-7080.bcp_fastlane_three_ds');\n    }\n\n    private handleError(error: unknown): void {\n        if (\n            this.bigcommerce_payments_fastlane?.onError &&\n            typeof this.bigcommerce_payments_fastlane.onError === 'function'\n        ) {\n            this.bigcommerce_payments_fastlane.onError(error);\n        }\n    }\n}\n","export interface BigcommerceFastlaneRequestError {\n    name: string;\n    message: string;\n    response: {\n        name: string;\n    };\n}\n\nexport default function isBigcommerceFastlaneRequestError(\n    error: unknown,\n): error is BigcommerceFastlaneRequestError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'message' in error &&\n        'response' in error &&\n        'name' in (error as BigcommerceFastlaneRequestError).response\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from '../bigcommerce-payments-request-sender';\n\nimport BigCommercePaymentsFastlanePaymentStrategy from './bigcommerce-payments-fastlane-payment-strategy';\n\nconst createBigCommercePaymentsFastlanePaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsFastlanePaymentStrategy(\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n};\n\nexport default toResolvableModule(createBigCommercePaymentsFastlanePaymentStrategy, [\n    { id: 'bigcommerce_payments_fastlane' }, // BigCommercePayments Fastlane relates to 'bigcommerce_payments_fastlane' method id\n]);\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../bigcommerce-payments-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    BigCommercePaymentsInitializationData,\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalMessagesSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterPaymentInitializeOptions, {\n    WithBigCommercePaymentsPayLaterPaymentInitializeOptions,\n} from './bigcommerce-payments-paylater-payment-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private bigCommercePaymentsButtons?: BigCommercePaymentsButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private paypalSdkHelper: PayPalSdkHelper,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions &\n            WithBigCommercePaymentsPayLaterPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_paylater } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paypalBNPLConfiguration = [], orderId } = paymentMethod.initializationData || {};\n        const { bannerContainerId, container } = bigcommerce_payments_paylater;\n\n        if (bannerContainerId !== undefined) {\n            if (!document.getElementById(bannerContainerId)) {\n                // eslint-disable-next-line no-console\n                console.error('Unable to create banner without valid banner container ID.');\n\n                return;\n            }\n\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === 'checkout');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            const paypalMessages = await this.paypalSdkHelper.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            return this.renderMessages(paypalMessages, bannerContainerId, bannerConfiguration);\n        }\n\n        // Info:\n        // The BigCommercePayments button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render BigCommercePayments button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = container?.split('#')[1];\n\n        this.renderButton(methodId, bigcommerce_payments_paylater);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            payment.methodId,\n            this.orderId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.bigCommercePaymentsButtons?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_paylater: BigCommercePaymentsPayLaterPaymentInitializeOptions,\n    ): void {\n        if (!bigcommerce_payments_paylater?.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const bigCommerceSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } =\n            bigcommerce_payments_paylater;\n\n        const fundingSources = [bigCommerceSdk.FUNDING.PAYLATER, bigCommerceSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (hasRenderedSmartButton) {\n                return;\n            }\n\n            const buttonOptions: BigCommercePaymentsButtonsOptions = {\n                fundingSource,\n                style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                    checkoutPaymentButtonStyles,\n                ),\n                createOrder: () =>\n                    this.bigCommercePaymentsIntegrationService.createOrder(\n                        'bigcommerce_payments_paylater',\n                    ),\n                onClick: (_, actions) => this.handleClick(actions, onValidate),\n                onApprove: (data) => this.handleApprove(data, submitForm),\n                onCancel: () => this.toggleLoadingIndicator(false),\n                onError: (error) => this.handleError(error, onError),\n            };\n\n            this.bigCommercePaymentsButtons = bigCommerceSdk.Buttons(buttonOptions);\n\n            if (\n                !this.bigCommercePaymentsButtons.isEligible() &&\n                fundingSource === bigCommerceSdk.FUNDING.PAYLATER\n            ) {\n                return;\n            }\n\n            if (\n                !this.bigCommercePaymentsButtons.isEligible() &&\n                fundingSource === bigCommerceSdk.FUNDING.CREDIT\n            ) {\n                throw new NotImplementedError(\n                    `BigCommercePayments ${fundingSource} is not available for your region. Please use BigCommercePayments Checkout instead.`,\n                );\n            }\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            this.bigCommercePaymentsButtons.render(container);\n            hasRenderedSmartButton = true;\n        });\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsPayLaterPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        if (onValidate && typeof onValidate === 'function') {\n            await onValidate(onValidationPassed, reject);\n        }\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsPayLaterPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        if (submitForm && typeof submitForm === 'function') {\n            submitForm();\n        }\n    }\n\n    private handleError(\n        error: Error,\n        onError: BigCommercePaymentsPayLaterPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(\n        paypalMessages: PayPalMessagesSdk,\n        bannerContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'payment',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterPaymentStrategy from './bigcommerce-payments-paylater-payment-strategy';\n\nconst createBigCommercePaymentsPayLaterPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsPayLaterPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n        createBigCommercePaymentsSdk(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterPaymentStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    BigCommercePaymentsInitializationData,\n    BirthDate,\n    PayPalOrderStatus,\n} from '../bigcommerce-payments-types';\n\nimport {\n    BigCommercePaymentsRatePayPaymentInitializeOptions,\n    WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n} from './bigcommerce-payments-ratepay-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BigCommercePaymentsRatePayPaymentStrategy implements PaymentStrategy {\n    private guid?: string;\n    private bigcommerce_payments_ratepay?: BigCommercePaymentsRatePayPaymentInitializeOptions;\n    private loadingIndicatorContainer?: string;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, bigcommerce_payments_ratepay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_ratepay) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_ratepay\" argument is not provided.`,\n            );\n        }\n\n        const { legalTextContainer, container, loadingContainerId } = bigcommerce_payments_ratepay;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.container\" argument is not provided.`,\n            );\n        }\n\n        if (!legalTextContainer) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.legalTextContainer\" argument is not provided.`,\n            );\n        }\n\n        if (!loadingContainerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.loadingContainerId\" argument is not provided.`,\n            );\n        }\n\n        this.loadingIndicatorContainer = loadingContainerId;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { merchantId } = paymentMethod.initializationData || {};\n\n        if (!merchantId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because merchantId argument is not provided.`,\n            );\n        }\n\n        this.bigcommerce_payments_ratepay = bigcommerce_payments_ratepay;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.createFraudNetScript(merchantId, methodId, gatewayId);\n\n        this.loadFraudnetConfig();\n\n        this.renderLegalText(legalTextContainer, container);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        const { getFieldsValues } = this.bigcommerce_payments_ratepay || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!getFieldsValues || typeof getFieldsValues !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.getFieldsValues\" argument is not provided.`,\n            );\n        }\n\n        this.toggleLoadingIndicator(true);\n\n        try {\n            const orderId = await this.bigCommercePaymentsIntegrationService.createOrder(\n                'bigcommerce_payments_apmscheckout',\n                { metadataId: this.guid },\n            );\n\n            const { ratepayBirthDate, ratepayPhoneNumber, ratepayPhoneCountryCode } =\n                getFieldsValues();\n\n            const paymentData = {\n                formattedPayload: {\n                    vault_payment_instrument: null,\n                    set_as_default_stored_instrument: null,\n                    device_info: null,\n                    method_id: payment.methodId,\n                    rate_pay: {\n                        birth_date: this.normalizeDate(ratepayBirthDate),\n                        phone: {\n                            national_number: ratepayPhoneNumber,\n                            country_code: ratepayPhoneCountryCode.split('+')[1],\n                        },\n                    },\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n\n            return await new Promise((resolve, reject) => {\n                this.initializePollingMechanism(\n                    payment.methodId,\n                    resolve,\n                    reject,\n                    payment.gatewayId,\n                );\n            });\n        } catch (error: unknown) {\n            this.handleError(error);\n\n            return new Promise((_resolve, reject) => reject());\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const { legalTextContainer } = this.bigcommerce_payments_ratepay || {};\n        const fraudNetScript = document.querySelectorAll('[data-id=\"fraudnetScript\"]')[0];\n        const fraudNetConfig = document.querySelectorAll('[data-id=\"fraudnetConfig\"]')[0];\n\n        this.deinitializePollingMechanism();\n\n        fraudNetScript.remove();\n        fraudNetConfig.remove();\n\n        if (legalTextContainer) {\n            const legalTextContainerElement = document.getElementById(legalTextContainer);\n\n            legalTextContainerElement?.remove();\n        }\n\n        return Promise.resolve();\n    }\n\n    private normalizeDate(date: BirthDate) {\n        const formattedDate = this.formatDate(date.getDate());\n        const formattedMonth = this.formatDate(date.getMonth() + 1);\n\n        return `${date.getFullYear()}-${formattedMonth}-${formattedDate}`;\n    }\n\n    private formatDate(date: number): string {\n        return `${date < 10 ? 0 : ''}${date}`;\n    }\n\n    private renderLegalText(legalTextContainerElementId: string, container: string) {\n        const legalTextContainerId = legalTextContainerElementId;\n        const buttonContainerId = container.split('#')[1];\n        const buttonContainer = document.getElementById(buttonContainerId);\n        const buttonContainerParent = buttonContainer?.parentNode;\n        const legalTextContainer = document.createElement('div');\n\n        legalTextContainer.style.marginBottom = '20px';\n        legalTextContainer.setAttribute('id', legalTextContainerId);\n        buttonContainerParent?.prepend(legalTextContainer);\n\n        const bigCommercePaymentsSdk =\n            this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const ratePayButton = bigCommercePaymentsSdk.Legal({\n            fundingSource: bigCommercePaymentsSdk.Legal.FUNDING.PAY_UPON_INVOICE,\n        });\n        const legalTextContainerElement = document.getElementById(legalTextContainerId);\n\n        if (legalTextContainerElement) {\n            ratePayButton.render(`#${legalTextContainerId}`);\n        } else {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"legalTextContainerElement\" argument is not found.`,\n            );\n        }\n    }\n\n    private handleError(error: unknown): void {\n        const { onError } = this.bigcommerce_payments_ratepay || {};\n\n        this.resetPollingMechanism();\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private createFraudNetScript(merchantId: string, methodId: string, gatewayId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { testMode } = paymentMethod.config;\n        const scriptElement = document.createElement('script');\n\n        scriptElement.setAttribute('type', 'application/json');\n        scriptElement.setAttribute('fncls', 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99');\n        scriptElement.setAttribute('data-id', 'fraudnetScript');\n        this.guid = this.generateGUID();\n\n        const fraudNetConfig = {\n            f: this.guid,\n            s: `${merchantId}_checkout-page`,\n            sandbox: testMode,\n        };\n\n        scriptElement.innerHTML = JSON.stringify(fraudNetConfig);\n        document.body.appendChild(scriptElement);\n    }\n\n    private generateGUID() {\n        let guid = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < 32; i += 1) {\n            const randomIndex = Math.floor(Math.random() * characters.length);\n\n            guid += characters[randomIndex];\n        }\n\n        return guid;\n    }\n\n    private loadFraudnetConfig() {\n        const script = document.createElement('script');\n\n        script.setAttribute('data-id', 'fraudnetConfig');\n        script.src = 'https://c.paypal.com/da/r/fb.js';\n        document.body.appendChild(script);\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.bigCommercePaymentsIntegrationService.getOrderStatus(\n                'bigcommerce_payments_apms',\n                {\n                    params: {\n                        useMetadata: true,\n                    },\n                },\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.PollingStop;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                bigcommerce_payments_ratepay: this.bigcommerce_payments_ratepay,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            this.handleError(error);\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsRatePayPaymentStrategy from './bigcommerce-payments-ratepay-payment-strategy';\n\nconst createBigCommercePaymentsRatePayPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsRatePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsRatePayPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: { ...LOADING_INDICATOR_STYLES, position: 'fixed' },\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsRatePayPaymentStrategy, [\n    { gateway: 'bigcommerce_payments_apms', id: 'ratepay' },\n]);\n","// copied from packages/core/src/hosted-form/hosted-field-type.ts\n\nenum HostedFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n    CardExpiryVerification = 'cardExpiryVerification',\n}\n\nexport default HostedFieldType;\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumber in fields &&\n        HostedFieldType.CardName in fields &&\n        HostedFieldType.CardExpiry in fields\n    );\n}\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardVaultedFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedStoredCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumberVerification in fields &&\n        HostedFieldType.CardCodeVerification in fields &&\n        HostedFieldType.CardExpiryVerification in fields\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    isBigCommercePaymentsFastlaneCustomer,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    HostedCardFieldOptions,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldStylesMap,\n    HostedFieldType,\n    HostedFieldValidateEventData,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInstrument,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    isCreditCardFormFields,\n    isCreditCardVaultedFormFields,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    BigCommercePaymentsCardFields,\n    BigCommercePaymentsCardFieldsConfig,\n    BigCommercePaymentsCardFieldsOnApproveData,\n    BigCommercePaymentsCardFieldsState,\n    BigCommercePaymentsFields,\n    BigCommercePaymentsHostedFieldsRenderOptions,\n    LiabilityShiftEnum,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsCreditCardsPaymentInitializeOptions, {\n    WithBigCommercePaymentsCreditCardsPaymentInitializeOptions,\n} from './bigcommerce-payments-credit-cards-payment-initialize-options';\n\nexport default class BigCommercePaymentsCreditCardsPaymentStrategy implements PaymentStrategy {\n    private executionPaymentData?: OrderPaymentRequestBody['paymentData'];\n    private isCreditCardForm?: boolean;\n    private isCreditCardVaultedForm?: boolean;\n\n    private cardFields?: BigCommercePaymentsCardFields;\n    private cvvField?: BigCommercePaymentsFields;\n    private expiryField?: BigCommercePaymentsFields;\n    private numberField?: BigCommercePaymentsFields;\n    private nameField?: BigCommercePaymentsFields;\n\n    private hostedFormOptions?: HostedFormOptions;\n    private returnedOrderId?: string;\n    private returnedVaultedToken?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsCreditCardsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_creditcards } = options;\n        const bigCommercePaymentsInitializationOptions = bigcommerce_payments_creditcards;\n\n        const { form, onCreditCardFieldsRenderingError } =\n            bigCommercePaymentsInitializationOptions || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!form) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.bigcommerce_payments_creditcards.form\" argument is not provided.',\n            );\n        }\n\n        this.hostedFormOptions = form;\n\n        this.isCreditCardForm = isCreditCardFormFields(form.fields);\n        this.isCreditCardVaultedForm =\n            isCreditCardVaultedFormFields(form.fields) && !this.hasUndefinedValues();\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            undefined,\n            true,\n            true,\n        );\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.initializeFields(form, onCreditCardFieldsRenderingError);\n        }\n\n        if (this.shouldInitializePayPalFastlane(methodId)) {\n            await this.initializePayPalFastlaneOrThrow(methodId);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n\n        if (!payment || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        this.executionPaymentData = paymentData;\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.validateHostedFormOrThrow();\n            await this.submitHostedForm();\n        } else {\n            // The condition gets triggered when customer pays with vaulted instrument and shipping address is trusted\n            const { orderId } =\n                await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                    'bigcommerce_payments_creditcardscheckout',\n                    this.getInstrumentParams(),\n                );\n\n            this.returnedOrderId = orderId;\n        }\n\n        const submitPaymentPayload = this.preparePaymentPayload(\n            methodId,\n            paymentData,\n            this.returnedOrderId,\n            this.returnedVaultedToken,\n        );\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.cvvField?.close();\n        await this.expiryField?.close();\n        await this.numberField?.close();\n        await this.nameField?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Submit Payment Payload preparing method\n     *\n     * `vaultedToken` is used when we pay with vaulted instrument (with trusted shipping address and untrusted)\n     * `setupToken` is used when we pay with vaulted instrument (untrusted shipping address)\n     * `orderId` is used in every case (basic card payment, trusted shipping address and untrusted)\n     */\n    private preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n        orderId?: string,\n        nonce?: string,\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const instrumentId =\n            paymentData && isVaultedInstrument(paymentData) ? paymentData.instrumentId : undefined;\n\n        const bigpay_token = omitBy(\n            {\n                verification_nonce: nonce,\n                token: instrumentId,\n            },\n            isNil,\n        );\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                instrumentId,\n                formattedPayload: {\n                    ...(nonce || instrumentId ? { bigpay_token } : {}),\n                    ...(orderId ? { card_with_order: { order_id: orderId } } : {}),\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Card fields initialize\n     *\n     */\n    private async initializeFields(\n        formOptions: HostedFormOptions,\n        onCreditCardFieldsRenderingError?: BigCommercePaymentsCreditCardsPaymentInitializeOptions['onCreditCardFieldsRenderingError'],\n    ): Promise<void> {\n        const { fields, styles } = formOptions;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const executeCallback = this.getExecuteCallback(fields);\n\n        const cardFieldsConfig: BigCommercePaymentsCardFieldsConfig = {\n            style: this.getInputStyles(styles),\n            onApprove: ({\n                orderID,\n                vaultSetupToken,\n                liabilityShift,\n            }: BigCommercePaymentsCardFieldsOnApproveData) => {\n                if (\n                    liabilityShift === LiabilityShiftEnum.No ||\n                    liabilityShift === LiabilityShiftEnum.Unknown\n                ) {\n                    throw new Error();\n                }\n\n                return this.handleApprove({ orderID, vaultSetupToken });\n            },\n            onError: () => {\n                throw new PaymentMethodFailedError();\n            },\n            inputEvents: {\n                onChange: (event) => this.onChangeHandler(formOptions, event),\n                onFocus: (event) => this.onFocusHandler(formOptions, event),\n                onBlur: (event) => this.onBlurHandler(formOptions, event),\n                onInputSubmitRequest: (event) => this.onInputSubmitRequest(formOptions, event),\n            },\n            ...executeCallback,\n        };\n\n        this.cardFields = await paypalSdk.CardFields(cardFieldsConfig);\n\n        if (!this.cardFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            this.stylizeInputContainers(fields);\n\n            if (isCreditCardFormFields(fields)) {\n                await this.renderFields(fields);\n            }\n\n            if (isCreditCardVaultedFormFields(fields)) {\n                await this.renderVaultedFields(fields);\n            }\n        } catch (error: unknown) {\n            if (typeof onCreditCardFieldsRenderingError === 'function') {\n                onCreditCardFieldsRenderingError(error);\n            }\n        }\n    }\n\n    /**\n     *\n     * Get execute callback method\n     * Depends on shipping address is trusted or not we should pass to PP\n     * `createVaultSetupToken` callback if address is untrusted or\n     * `createOrder` if address is trusted\n     *\n     */\n    private getExecuteCallback(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ) {\n        const isVaultedForm = isCreditCardVaultedFormFields(fields);\n\n        return isVaultedForm ? this.createVaultSetupTokenCallback() : this.createOrderCallback();\n    }\n\n    private createVaultSetupTokenCallback() {\n        return {\n            createVaultSetupToken: async () => {\n                const { setupToken } =\n                    (await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                        'bigcommerce_payments_creditcardscheckout',\n                        {\n                            ...this.getInstrumentParams(),\n                            setupToken: true,\n                        },\n                    )) || {};\n\n                return setupToken;\n            },\n        };\n    }\n\n    private createOrderCallback() {\n        return {\n            createOrder: async () => {\n                const { orderId } =\n                    (await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                        'bigcommerce_payments_creditcardscheckout',\n                        this.getInstrumentParams(),\n                    )) || {};\n\n                return orderId;\n            },\n        };\n    }\n\n    /**\n     *\n     * onApprove method\n     * When submitting a form with a `submitHostedForm` method if there is no error\n     * then onApprove callback is triggered and depends on the flow\n     * we will receive an `orderID` if it's basic paying and `vaultSetupToken` if we are paying\n     * with vaulted instrument and shipping address is untrusted\n     *\n     */\n    private handleApprove({\n        orderID,\n        vaultSetupToken,\n    }: BigCommercePaymentsCardFieldsOnApproveData) {\n        if (orderID) {\n            this.returnedOrderId = orderID;\n        }\n\n        if (vaultSetupToken) {\n            this.returnedVaultedToken = vaultSetupToken;\n        }\n    }\n\n    /**\n     *\n     * Rendering Card Fields methods\n     *\n     */\n    private async renderFields(fieldsOptions: HostedCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCode?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCode.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiry?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiry.containerId}`);\n        }\n\n        if (fieldsOptions.cardName?.containerId) {\n            this.nameField = cardFields.NameField({\n                placeholder: '',\n            });\n            await this.nameField.render(`#${fieldsOptions.cardName.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumber?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumber.containerId}`);\n        }\n    }\n\n    private async renderVaultedFields(fieldsOptions: HostedStoredCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCodeVerification?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCodeVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiryVerification?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiryVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumberVerification?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumberVerification.containerId}`);\n        }\n    }\n\n    /**\n     *\n     * Instrument params method\n     *\n     */\n    private getInstrumentParams(): HostedInstrument | VaultedInstrument {\n        if (!this.executionPaymentData) {\n            return {};\n        }\n\n        if (isHostedInstrumentLike(this.executionPaymentData)) {\n            const { shouldSaveInstrument, shouldSetAsDefaultInstrument } =\n                this.executionPaymentData;\n\n            return {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            };\n        }\n\n        if (isVaultedInstrument(this.executionPaymentData)) {\n            const { instrumentId } = this.executionPaymentData;\n\n            return {\n                instrumentId,\n            };\n        }\n\n        return {};\n    }\n\n    private getFieldTypeByEmittedField({\n        emittedBy,\n    }: BigCommercePaymentsCardFieldsState):\n        | HostedFieldBlurEventData\n        | HostedFieldEnterEventData\n        | HostedFieldFocusEventData {\n        return {\n            fieldType: this.mapFieldType(emittedBy),\n        };\n    }\n\n    /**\n     *\n     * Form submit method\n     * Triggers a form submit\n     *\n     * */\n    private async submitHostedForm() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const submitConfig = {\n            billingAddress: {\n                company: billingAddress.company,\n                addressLine1: billingAddress.address1,\n                addressLine2: billingAddress.address2,\n                adminArea1: billingAddress.stateOrProvinceCode,\n                adminArea2: billingAddress.city,\n                postalCode: billingAddress.postalCode,\n                countryCode: billingAddress.countryCode,\n            },\n        };\n\n        try {\n            if (this.isCreditCardVaultedForm) {\n                await cardFields.submit();\n            } else {\n                await cardFields.submit(submitConfig);\n            }\n        } catch (_) {\n            throw new PaymentMethodFailedError(\n                'Failed authentication. Please try to authorize again.',\n            );\n        }\n    }\n\n    /**\n     *\n     * Validation and errors\n     *\n     */\n    private async validateHostedFormOrThrow() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const cardFieldsState = await cardFields.getState().then((data) => data);\n        const validationData = this.getValidityData(cardFieldsState);\n\n        if (validationData.isValid) {\n            return;\n        }\n\n        this.hostedFormOptions?.onValidate?.(validationData);\n\n        throw new PaymentInvalidFormError(this.mapValidationErrors(validationData.errors));\n    }\n\n    private getValidityData({\n        fields,\n    }: BigCommercePaymentsCardFieldsState): HostedFieldValidateEventData {\n        const updatedFields = { ...fields };\n\n        delete updatedFields.cardNameField;\n\n        const fieldsKeys = Object.keys(updatedFields) as Array<\n            keyof BigCommercePaymentsCardFieldsState['fields']\n        >;\n\n        const isValid = fieldsKeys.every((key) => updatedFields[key]?.isValid);\n\n        const errors = fieldsKeys.reduce((fieldsErrors, key) => {\n            const fieldType = this.mapFieldType(key);\n\n            return {\n                ...fieldsErrors,\n                [fieldType]: updatedFields[key]?.isValid\n                    ? undefined\n                    : [this.getInvalidErrorByFieldType(fieldType)],\n            };\n        }, {});\n\n        return { isValid, errors };\n    }\n\n    private getInvalidErrorByFieldType(fieldType: string): HostedInputValidateErrorData {\n        switch (fieldType) {\n            case HostedFieldType.CardCode:\n            case HostedFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case HostedFieldType.CardNumber:\n            case HostedFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case HostedFieldType.CardExpiry:\n            case HostedFieldType.CardExpiryVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private mapValidationErrors(\n        validationErrors: HostedInputValidateErrorDataMap = {},\n    ): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n        const validationErrorsKeys = Object.keys(validationErrors) as Array<\n            keyof HostedInputValidateErrorDataMap\n        >;\n\n        validationErrorsKeys.forEach((key) => {\n            errors[key] = [\n                {\n                    message: validationErrors[key]?.[0]?.message || '',\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    /**\n     *\n     * Fields mappers\n     *\n     */\n    private mapFieldType(type: string): HostedFieldType {\n        switch (type) {\n            case 'name':\n                return HostedFieldType.CardName;\n\n            case 'cardNumberField':\n            case 'number':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardNumber\n                    : HostedFieldType.CardNumberVerification;\n\n            case 'cardExpiryField':\n            case 'expiry':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardExpiry\n                    : HostedFieldType.CardExpiryVerification;\n\n            case 'cardCvvField':\n            case 'cvv':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardCode\n                    : HostedFieldType.CardCodeVerification;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     */\n    private getCardFieldsOrThrow(): BigCommercePaymentsCardFields {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.cardFields;\n    }\n\n    private getInputStyles(\n        styles?: HostedFieldStylesMap,\n    ): BigCommercePaymentsHostedFieldsRenderOptions['styles'] {\n        const commonStyles = {\n            'font-size': styles?.default?.fontSize || '1rem',\n            'font-family':\n                styles?.default?.fontFamily || 'Montserrat, Arial, Helvetica, sans-serif',\n            'font-weight': styles?.default?.fontWeight || '400',\n            outline: 'none',\n            padding: '9px 13px',\n        };\n\n        const defaultStyles = { ...commonStyles, color: '#333333' };\n        const errorStyles = { ...commonStyles, color: 'red' };\n\n        return {\n            input: defaultStyles,\n            '.invalid': errorStyles,\n            '.valid': defaultStyles,\n            ':focus': defaultStyles,\n        };\n    }\n\n    private stylizeInputContainers(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ): void {\n        Object.values(fields || {}).forEach((id: HostedCardFieldOptions) => {\n            const element = document.getElementById(`${id?.containerId || ''}`);\n\n            if (element) {\n                element.style.padding = '0px';\n                element.style.boxShadow = 'none';\n                element.style.border = 'none';\n                element.style.background = 'transparent';\n                element.style.marginBottom = '10px';\n                element.style.marginLeft = '-5px';\n            }\n        });\n    }\n\n    private hasUndefinedValues() {\n        if (this.hostedFormOptions) {\n            return Object.values(this.hostedFormOptions.fields).some(\n                (value) => value === undefined,\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * Input events methods\n     *\n     */\n    private onChangeHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onValidate?.(this.getValidityData(event));\n    }\n\n    private onFocusHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onFocus?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onBlurHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onBlur?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onInputSubmitRequest(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onEnter?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    /**\n     *\n     * BigCommercePayments Accelerated checkout related methods\n     *\n     */\n    // TODO: remove this part when BCP Fastlane A/B testing will be finished\n    private shouldInitializePayPalFastlane(methodId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const bigCommercePaymentsPaymentProviderCustomer = isBigCommercePaymentsFastlaneCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return (\n            paymentMethod?.initializationData?.isAcceleratedCheckoutEnabled &&\n            paymentMethod?.initializationData?.isBigCommercePaymentsAnalyticsV2Enabled &&\n            !bigCommercePaymentsPaymentProviderCustomer?.authenticationState\n        );\n    }\n\n    // TODO: remove this part when BCP Fastlane A/B testing will be finished\n    private async initializePayPalFastlaneOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n            const { initializationData } = paymentMethod;\n\n            if (!initializationData?.connectClientToken) {\n                return;\n            }\n\n            const payPalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n                payPalFastlaneSdk,\n                !!initializationData?.isDeveloperModeApplicable,\n            );\n        } catch (_: unknown) {\n            // We should avoid throwing any error from this flow to do no brake default flow\n            // This flow is optional\n        }\n    }\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isBigCommercePaymentsFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsCreditCardsPaymentStrategy from './bigcommerce-payments-credit-cards-payment-strategy';\n\nconst createBigCommercePaymentsCreditCardsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsCreditCardsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsCreditCardsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsCreditCardsPaymentStrategy, [\n    { id: 'bigcommerce_payments_creditcards' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    PayPalApmSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    NonInstantAlternativePaymentMethods,\n    PayPalOrderStatus,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions, {\n    WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n} from './bigcommerce-payments-alternative-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BigCommercePaymentsAlternativeMethodsPaymentStrategy\n    implements PaymentStrategy\n{\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private bigCommercePaymentsButton?: BigCommercePaymentsButtons;\n    private paypalApms?: PayPalApmSdk;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n    private bigCommercePaymentsAlternativeMethods?: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private bigCommercePaymentsSdkHelper: PayPalSdkHelper,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, bigcommerce_payments_apms } = options;\n\n        this.bigCommercePaymentsAlternativeMethods = bigcommerce_payments_apms;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_apms) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { orderId, shouldRenderFields } = paymentMethod.initializationData || {};\n\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(features, 'PAYPAL-5624.bcp_ideal_polling');\n\n        // Info:\n        // The APM button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render the button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        this.paypalApms = await this.bigCommercePaymentsSdkHelper.getPayPalApmsSdk(\n            paymentMethod,\n            state.getCartOrThrow().currency.code,\n        );\n\n        this.loadingIndicatorContainer = bigcommerce_payments_apms.container.split('#')[1];\n\n        this.renderButton(methodId, gatewayId, bigcommerce_payments_apms);\n\n        if (shouldRenderFields) {\n            this.renderFields(methodId, bigcommerce_payments_apms);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (this.isPollingEnabled && methodId === 'ideal') {\n            await new Promise((resolve, reject) => {\n                void this.initializePollingMechanism(methodId, resolve, reject, gatewayId);\n            });\n        }\n\n        if (!this.isNonInstantPaymentMethod(methodId)) {\n            await this.paymentIntegrationService.submitOrder(order, options);\n        }\n\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            methodId,\n            this.orderId,\n            gatewayId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.bigCommercePaymentsButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: (value?: unknown) => void,\n        rejectPromise: (value?: unknown) => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.bigCommercePaymentsIntegrationService.getOrderStatus(\n                gatewayId,\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.Approved;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deInitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                bigCommercePaymentsAlternativeMethods: this.bigCommercePaymentsAlternativeMethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deInitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deInitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.bigCommercePaymentsAlternativeMethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        gatewayId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { buttonStyle } = paymentMethod.initializationData || {};\n\n        const { container, onError, onRenderButton, submitForm } = bigcommerce_payments_apms;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: methodId,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(buttonStyle),\n            onInit: (_, actions) => bigcommerce_payments_apms.onInitButton(actions),\n            createOrder: () => this.onCreateOrder(methodId, gatewayId, bigcommerce_payments_apms),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => {\n                this.toggleLoadingIndicator(false);\n                this.deInitializePollingMechanism();\n            },\n            onError: (error) => {\n                this.deInitializePollingMechanism();\n                this.handleFailure(error, onError);\n            },\n            onClick: async (_, actions) =>\n                bigcommerce_payments_apms.onValidate(actions.resolve, actions.reject),\n        };\n\n        this.bigCommercePaymentsButton = paypalAmpsSdk.Buttons(buttonOptions);\n\n        if (!this.bigCommercePaymentsButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.bigCommercePaymentsButton.render(container);\n    }\n\n    private async onCreateOrder(\n        methodId: string,\n        gatewayId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<string> {\n        const { onValidate } = bigcommerce_payments_apms;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return () => Promise.resolve();\n        };\n\n        await onValidate(onValidationPassed, noop);\n\n        const orderId = await this.bigCommercePaymentsIntegrationService.createOrder(\n            'bigcommerce_payments_apms',\n        );\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            const order = { useStoreCredit: false };\n            const options = {\n                params: {\n                    methodId,\n                    gatewayId,\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.bigCommercePaymentsIntegrationService.submitPayment(\n                methodId,\n                orderId,\n                gatewayId,\n            );\n        }\n\n        return orderId;\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleFailure(\n        error: Error,\n        onError: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Fields methods\n     *\n     * */\n    private renderFields(\n        methodId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const { firstName, lastName, email } = state.getBillingAddressOrThrow();\n\n        const { apmFieldsContainer, apmFieldsStyles } = bigcommerce_payments_apms;\n\n        if (!apmFieldsContainer) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument should contain \"apmFieldsContainer\".',\n            );\n        }\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        const fieldsOptions = {\n            fundingSource: methodId,\n            style: apmFieldsStyles || {},\n            fields: {\n                name: {\n                    value: `${firstName} ${lastName}`,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        const paypalPaymentFields = paypalAmpsSdk.PaymentFields(fieldsOptions);\n\n        paypalPaymentFields.render(apmFieldsContainer);\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantAlternativePaymentMethods;\n    }\n\n    private getPaypalAmpsSdkOrThrow() {\n        if (!this.paypalApms) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalApms;\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsAlternativeMethodsPaymentStrategy from './bigcommerce-payments-alternative-methods-payment-strategy';\n\nconst createBigCommercePaymentsAlternativeMethodsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsAlternativeMethodsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsAlternativeMethodsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsAlternativeMethodsPaymentStrategy, [\n    { gateway: 'bigcommerce_payments_apms' },\n]);\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoPaymentInitializeOptions, {\n    WithBigCommercePaymentsVenmoPaymentInitializeOptions,\n} from './bigcommerce-payments-venmo-payment-initialize-options';\n\nexport default class BigCommercePaymentsVenmoPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: BigCommercePaymentsButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBigCommercePaymentsVenmoPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_venmo } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = bigcommerce_payments_venmo.container.split('#')[1];\n\n        this.renderButton(methodId, bigcommerce_payments_venmo);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            payment.methodId,\n            this.orderId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } =\n            bigcommerce_payments_venmo;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo_checkout',\n                ),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => this.toggleLoadingIndicator(false),\n            onError: (error) => this.handleError(error, onError),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            throw new NotImplementedError(\n                `Venmo is not available for your region. Please another payment method instead.`,\n            );\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsVenmoPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsVenmoPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n        this.toggleLoadingIndicator(false);\n    }\n\n    private handleError(\n        error: Error,\n        onError: BigCommercePaymentsVenmoPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoPaymentStrategy from './bigcommerce-payments-venmo-payment-strategy';\n\nconst createBigCommercePaymentsVenmoPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsVenmoPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoPaymentStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsButtonInitializeOptions, {\n    WithBigCommercePaymentsButtonInitializeOptions,\n} from './bigcommerce-payments-button-initialize-options';\n\nexport default class BigCommercePaymentsButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBigCommercePaymentsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(bigcommerce_payments?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !bigcommerce_payments.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof bigcommerce_payments.buyNowInitializeOptions?.getBuyNowCartRequestBody !==\n                'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? bigcommerce_payments.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsButtonStrategy from './bigcommerce-payments-button-strategy';\n\nconst createBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsButtonStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import {\n    BigCommercePaymentsInitializationData,\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalMessagesSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterButtonInitializeOptions, {\n    WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n} from './bigcommerce-payments-paylater-button-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private payPalSdkHelper: PayPalSdkHelper,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_paylater, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = bigcommerce_payments_paylater || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_paylater);\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this when data attributes will be removed from related cart banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const payPalSdkHelper = await this.payPalSdkHelper.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(payPalSdkHelper, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_paylater: BigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments_paylater;\n\n        const bigCommercePaymentsSdk =\n            this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_paylater',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [\n            bigCommercePaymentsSdk.FUNDING.PAYLATER,\n            bigCommercePaymentsSdk.FUNDING.CREDIT,\n        ];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n                    fundingSource,\n                    style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = bigCommercePaymentsSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterButtonStrategy from './bigcommerce-payments-paylater-button-strategy';\n\nconst createBigCommercePaymentsPayLaterButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsPayLaterButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterButtonStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsAlternativeMethodsButtonInitializeOptions, {\n    WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n} from './bigcommerce-payments-alternative-methods-button-initialize-options';\n\nexport default class BigCommercePaymentsAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_apms, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = bigcommerce_payments_apms || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_apms) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_apms);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            bigcommerce_payments_apms;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.bigcommerce_payments_apms.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments_apms'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: apm,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsAlternativeMethodsButtonStrategy from './bigcommerce-payments-alternative-methods-button-strategy';\n\nconst createBigCommercePaymentsAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsAlternativeMethodsButtonStrategy, [\n    { id: 'bigcommerce_payments_apms' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    StyleButtonColor,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoButtonInitializeOptions, {\n    WithBigCommercePaymentsVenmoButtonInitializeOptions,\n} from './bigcommerce-payments-venmo-button-initialize-options';\n\nexport default class BigCommercePaymentsVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_venmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            bigcommerce_payments_venmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_venmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = bigcommerce_payments_venmo;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle =\n            this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoButtonStrategy from './bigcommerce-payments-venmo-button-strategy';\n\nconst createBigCommercePaymentsVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoButtonStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n"],"names":["MissingDataErrorType","__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","PaymentMethodClientUnavailableError","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","BuyNowCartCreationError","DEFAULT_RESPONSE","body","headers","status","RequestError","response","errors","CartSource","LiabilityShiftEnum","BigCommercePaymentsIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","NonInstantAlternativePaymentMethods","PayPalOrderStatus","BigCommercePaymentsIntegrationService","formPoster","paymentIntegrationService","bigCommercePaymentsRequestSender","bigCommercePaymentsScriptLoader","loadPayPalSdk","methodId","providedCurrencyCode","initializesOnCheckoutPage","forceLoad","state","getState","currencyCode","getCartOrThrow","currency","code","paymentMethod","getPaymentMethodOrThrow","paypalSdk","getPayPalSDK","getPayPalSdkOrThrow","createBuyNowCartOrThrow","buyNowInitializeOptions","cartRequestBody","getBuyNowCartRequestBody","createBuyNowCart","error","createOrder","providerId","requestBody","cartId","id","orderId","createOrderCardFields","setupToken","updateOrder","cart","consignment","getConsignmentsOrThrow","availableShippingOptions","selectedShippingOption","_error","getOrderStatus","options","tokenizePayment","postForm","payment_type","action","provider","order_id","source","BuyNow","cart_id","submitPayment","gatewayId","paymentData","formattedPayload","vault_payment_instrument","set_as_default_stored_instrument","device_info","method_id","paypal_account","getShippingOptionOrThrow","selectedShippingOptionId","recommendedShippingOption","find","option","isRecommended","shippingOptionToSelect","getAddress","address","firstName","lastName","email","phone","company","address1","address2","city","countryCode","postalCode","stateOrProvince","stateOrProvinceCode","customFields","getBillingAddressFromOrderDetails","payer","given_name","surname","email_address","address_line_1","address_line_2","admin_area_2","country_code","postal_code","admin_area_1","phone_number","national_number","getShippingAddressFromOrderDetails","orderDetails","purchase_units","full_name","shipping","split","join","getValidButtonStyle","style","color","height","label","shape","validStyles","undefined","getValidHeight","omitBy","isNil","removeElement","elementId","element","document","getElementById","display","INTERNAL_USE_ONLY","ContentType","SDK_VERSION_HEADERS","BigCommercePaymentsRequestSender","requestSender","url","Json","post","put","BigCommercePaymentsScriptLoader","scriptLoader","window","paypalSdkScriptConfig","getPayPalSdkScriptConfigOrThrow","loadPayPalSDK","paypal","transformConfig","attributes","scriptSrc","URLSearchParams","toString","loadScript","async","clientToken","initializationData","clientId","intent","merchantId","buyerCountry","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isPayPalCreditAvailable","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","isGooglePayEnabled","commit","shouldEnableCard","enableCardFunding","enableCreditFunding","shouldEnableAPMs","enableVenmoFunding","enableAPMsFunding","googlePayComponent","cardFieldsComponent","disableFunding","filter","apm","includes","enableFunding","length","components","config","transformedConfig","keys","forEach","value","Array","isArray","getHost","createFormPoster","createRequestSender","host","getScriptLoader","InvalidArgumentError","BigCommercePaymentsCustomerStrategy","bigCommercePaymentsIntegrationService","onError","noop","initialize","bigcommerce_payments","container","onClick","getPaymentMethod","loadPaymentMethod","Buttons","renderButton","console","deinitialize","Promise","resolve","signIn","credentials","signInCustomer","signOut","signOutCustomer","executePaymentMethodCheckout","continueWithCheckoutCallback","onComplete","paymentButtonStyles","checkoutTopButtonStyles","defaultCallbacks","onApprove","orderID","hostedCheckoutCallbacks","onShippingAddressChange","data","onShippingOptionsChange","actions","onHostedCheckoutApprove","buttonRenderOptions","fundingSource","FUNDING","PAYPAL","paypalButton","isEligible","render","order","billingAddress","updateBillingAddress","lineItems","physicalItems","shippingAddress","updateShippingAddress","submitOrder","params","handleError","shippingOption","selectShippingOption","UntrustedShippingCardVerificationType","TDSecureAuthenticationState","PayPalFastlaneAuthenticationState","PayPalSdkHelper","getPayPalFastlaneSdk","sessionId","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","getPayPalGooglePaySdk","paypalGooglePay","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","scriptOptions","scriptAttributes","replace","disableAPMsFunding","createBigCommercePaymentsSdk","createScriptLoader","CookieStorage","cookieKey","encodeURIComponent","cookie","firstIndex","indexOf","lastIndex","decodeURIComponent","substring","set","secure","cookieText","expires","path","domain","toUTCString","now","Date","minutes","setTime","getTime","remove","BigCommercePaymentsFastlaneUtils","initializePayPalFastlane","isTestModeEnabled","styles","localStorage","setItem","paypalFastlane","defaultStyles","root","backgroundColorPrimary","Fastlane","getPayPalFastlaneOrThrow","lookupCustomerOrThrow","identity","lookupCustomerByEmail","triggerAuthenticationFlowOrThrow","customerContextId","triggerAuthenticationFlow","updateStorageSessionId","setDate","getDate","cookiesOption","removeStorageSessionId","getStorageSessionId","mapPayPalFastlaneProfileToBcCustomerData","authenticationResult","authenticationState","profileData","paypalBillingAddress","card","paymentSource","paypalShippingAddress","paypalProfileName","paypalInstrument","mapPayPalToBcAddress","phoneNumber","instruments","mapPayPalToBcInstrument","addresses","filterAddresses","UNRECOGNIZED","instrument","brand","expiry","lastDigits","expiryYear","expiryMonth","bigpayToken","defaultInstrument","iin","last4","method","trustedShippingAddress","untrustedShippingCardVerificationMode","PAN","mapBcToPayPalAddress","addressLine1","addressLine2","adminArea1","adminArea2","profileName","fullName","phoneData","nationalNumber","country","reduce","customerAddresses","currentAddress","some","customerAddress","isEqualAddresses","firstAddress","secondAddress","isEqual","normalizeAddress","omit","createBigCommercePaymentsFastlaneUtils","isInvalidStyleOption","styleOption","getFastlaneStyles","styleSettings","uiStyles","fastlaneStyles","input","toggle","textBody","text","textCaption","caption","branding","cleanUpFastlaneStyles","fastlaneRootSettingsBackgroundColor","errorColor","fastlaneRootSettingsErrorColor","fontFamily","fastlaneRootSettingsFontFamily","fontSizeBase","fastlaneRootSettingsFontSize","padding","fastlaneRootSettingsPadding","primaryColor","fastlaneRootSettingsPrimaryColor","borderRadius","fastlaneInputSettingsBorderRadius","borderColor","fastlaneInputSettingsBorderColor","focusBorderColor","fastlaneInputSettingsFocusBorderBase","backgroundColor","fastlaneInputSettingsBackgroundColor","borderWidth","fastlaneInputSettingsBorderWidth","textColorBase","fastlaneInputSettingsTextColorBase","colorPrimary","fastlaneToggleSettingsColorPrimary","colorSecondary","fastlaneToggleSettingsColorSecondary","fastlaneTextBodySettingsColor","fontSize","fastlaneTextBodySettingsFontSize","fastlaneTextCaptionSettingsColor","fastlaneTextCaptionSettingsFontSize","fastlaneBrandingSettings","mergeFastlaneStyles","BigCommercePaymentsFastlaneCustomerStrategy","bigCommercePaymentsSdk","bigCommercePaymentsFastlaneUtils","bigcommerce_payments_fastlane","_","checkoutPaymentMethodExecuted","getCustomerOrThrow","isGuest","runPayPalAuthenticationFlowOrThrow","customer","getCustomer","getBillingAddress","customerEmail","isAuthenticationFlowCanceled","CANCELED","updateCustomerDataState","updatePaymentProviderCustomer","updatedState","isFastlaneShippingOptionAutoSelectEnabled","consignments","getConsignments","firstShippingOption","shippingOptionId","isFastlaneStylingEnabled","BigCommercePaymentsPayLaterCustomerStrategy","bigcommerce_payments_paylater","bigCommercePaymentsPayLater","fundingSources","PAYLATER","CREDIT","hasRenderedSmartButton","BigCommercePaymentsVenmoCustomerStrategy","bigcommerce_payments_venmo","VENMO","paypalButtonRender","DEFAULT_STYLES","size","ROTATION_ANIMATION","LoadingIndicator","containerStyles","defineAnimation","buildContainer","indicator","buildIndicator","appendChild","show","parentId","parent","visibility","opacity","hide","handleTransitionEnd","removeEventListener","addEventListener","createElement","bottom","left","width","position","right","top","transition","setStyleAttribute","border","margin","transform","transformStyle","animation","attrs","k","setProperty","head","sheet","CSSStyleSheet","insertRule","LOADING_INDICATOR_STYLES","PaymentArgumentInvalidError","invalidFields","PaymentMethodInvalidError","OrderFinalizationNotRequiredError","isHostedInstrumentLike","shouldSaveInstrument","shouldSetAsDefaultInstrument","isVaultedInstrument","Boolean","instrumentId","isBaseInstrument","BigCommercePaymentsPaymentStrategy","loadingIndicator","loadingIndicatorContainer","onInit","shouldRenderPayPalButtonOnInitialization","execute","payload","payment","features","getStoreConfigOrThrow","checkoutSettings","shouldHandleInstrumentDeclinedError","isPayPalVaultedInstrumentPaymentData","paymentPayload","prepareVaultedInstrumentPaymentPayload","preparePaymentPayload","isProviderError","_resolve","reject","close","finalize","paypalOrderId","shouldConfirmInstrument","isTrustedVaultingFlow","bigpay_token","token","checkoutPaymentButtonStyles","onRenderButton","onValidate","submitForm","buttonOptions","handleClick","handleApprove","onCancel","toggleLoadingIndicator","fieldsValues","getFieldsValues","getInstruments","findInstrument","isLoading","isBigCommercePaymentsProviderError","e","provider_error","isPayPalFastlaneCustomer","isExperimentEnabled","experimentName","fallbackValue","BigCommercePaymentsFastlanePaymentStrategy","onChange","threeDSVerificationMethod","shouldRunAuthenticationFlow","initializePayPalPaymentComponent","renderPayPalPaymentComponent","handlePayPalStoredInstrumentChange","orderRequest","isVaultedFlow","isBigcommerceFastlaneRequestError","invalidRequestError","translationKey","paymentProviderCustomer","getPaymentProviderCustomer","paypalFastlaneCustomer","paypalFastlaneSessionId","getBillingAddressOrThrow","trim","cardComponentOptions","fields","cardholderName","prefill","enabled","paypalComponentMethods","FastlaneCardComponent","getPayPalComponentMethodsOrThrow","is3DSEnabled","isBigcommercePaymentsFastlaneThreeDSAvailable","is3dsEnabled","fastlaneToken","get3DSNonce","paypal_fastlane_token","getPaymentToken","paypalNonce","getOrderOrThrow","checkoutUrl","links","checkoutLink","threeDomainSecureComponent","ThreeDomainSecureClient","threeDomainSecureParameters","amount","orderAmount","toFixed","nonce","threeDSRequested","transactionContext","experience_context","locale","return_url","cancel_url","liabilityShift","No","Unknown","Succeeded","Errored","Cancelled","paypalAxoSdk","selectionChanged","selectedCard","profile","showCardSelector","selectedInstrument","messagesStyles","layout","logo","ratio","NotImplementedError","BigCommercePaymentsPayLaterPaymentStrategy","paypalSdkHelper","paypalBNPLConfiguration","bannerContainerId","bannerConfiguration","renderMessages","bigCommercePaymentsButtons","bigCommerceSdk","paypalMessagesOptions","getCheckoutOrThrow","outstandingBalance","placement","Messages","TimeoutError","BigCommercePaymentsRatePayPaymentStrategy","pollingInterval","maxPollingIntervalTime","pollingTimer","stopPolling","bigcommerce_payments_ratepay","legalTextContainer","loadingContainerId","createFraudNetScript","loadFraudnetConfig","renderLegalText","metadataId","guid","ratepayBirthDate","ratepayPhoneNumber","ratepayPhoneCountryCode","rate_pay","birth_date","normalizeDate","initializePollingMechanism","fraudNetScript","querySelectorAll","fraudNetConfig","deinitializePollingMechanism","legalTextContainerElement","date","formattedDate","formatDate","formattedMonth","getMonth","getFullYear","legalTextContainerElementId","legalTextContainerId","buttonContainerId","buttonContainer","buttonContainerParent","parentNode","marginBottom","setAttribute","prepend","ratePayButton","Legal","PAY_UPON_INVOICE","resetPollingMechanism","testMode","scriptElement","generateGUID","f","s","sandbox","innerHTML","JSON","stringify","i","Math","floor","characters","random","script","src","reinitializeStrategy","resolvePromise","rejectPromise","timeout","setTimeout","clearTimeout","orderStatus","useMetadata","isOrderApproved","PollingStop","isPollingError","PollingError","gateway","HostedFieldType","isCreditCardFormFields","CardNumber","CardName","CardExpiry","isCreditCardVaultedFormFields","CardNumberVerification","CardCodeVerification","CardExpiryVerification","PaymentMethodFailedError","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","PaymentInvalidFormError","details","BigCommercePaymentsCreditCardsPaymentStrategy","bigcommerce_payments_creditcards","bigCommercePaymentsInitializationOptions","form","onCreditCardFieldsRenderingError","hostedFormOptions","isCreditCardForm","isCreditCardVaultedForm","hasUndefinedValues","initializeFields","shouldInitializePayPalFastlane","initializePayPalFastlaneOrThrow","executionPaymentData","validateHostedFormOrThrow","submitHostedForm","getInstrumentParams","returnedOrderId","submitPaymentPayload","returnedVaultedToken","cvvField","expiryField","numberField","nameField","verification_nonce","card_with_order","formOptions","executeCallback","getExecuteCallback","cardFieldsConfig","getInputStyles","vaultSetupToken","inputEvents","event","onChangeHandler","onFocus","onFocusHandler","onBlur","onBlurHandler","onInputSubmitRequest","cardFields","CardFields","stylizeInputContainers","renderFields","renderVaultedFields","createVaultSetupTokenCallback","createOrderCallback","createVaultSetupToken","fieldsOptions","getCardFieldsOrThrow","cardCode","containerId","CVVField","placeholder","cardExpiry","ExpiryField","cardName","NameField","cardNumber","NumberField","cardCodeVerification","cardExpiryVerification","cardNumberVerification","getFieldTypeByEmittedField","emittedBy","fieldType","mapFieldType","submitConfig","submit","cardFieldsState","then","validationData","getValidityData","isValid","mapValidationErrors","updatedFields","cardNameField","fieldsKeys","every","fieldsErrors","getInvalidErrorByFieldType","CardCode","validationErrors","commonStyles","default","fontWeight","outline","values","boxShadow","background","marginLeft","onEnter","bigCommercePaymentsPaymentProviderCustomer","isAcceleratedCheckoutEnabled","isBigCommercePaymentsAnalyticsV2Enabled","connectClientToken","payPalFastlaneSdk","BigCommercePaymentsAlternativeMethodsPaymentStrategy","bigCommercePaymentsSdkHelper","isPollingEnabled","bigcommerce_payments_apms","bigCommercePaymentsAlternativeMethods","shouldRenderFields","isNonInstantPaymentMethod","bigCommercePaymentsButton","Approved","deInitializePollingMechanism","paypalAmpsSdk","getPaypalAmpsSdkOrThrow","buttonStyle","onInitButton","onCreateOrder","handleFailure","useStoreCredit","apmFieldsContainer","apmFieldsStyles","fieldContainerElement","querySelector","PaymentFields","toUpperCase","BigCommercePaymentsVenmoPaymentStrategy","BigCommercePaymentsButtonStrategy","isBuyNowFlow","loadDefaultCheckout","onEligibilityFailure","buyNowFlowCallbacks","buyNowCart","loadCheckout","BigCommercePaymentsPayLaterButtonStrategy","payPalSdkHelper","messagingContainerId","messagingContainer","removeAttribute","paypalMessagesSdk","BigCommercePaymentsAlternativeMethodsButtonStrategy","BigCommercePaymentsVenmoButtonStrategy","getValidVenmoButtonStyles","validButtonStyle","gold"],"sourceRoot":""}